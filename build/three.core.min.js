/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const t="173dev",e={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},i={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},s=0,r=1,n=2,a=3,o=0,h=1,l=2,c=3,u=0,d=1,p=2,m=0,y=1,g=2,f=3,x=4,b=5,v=100,w=101,M=102,S=103,_=104,A=200,T=201,z=202,C=203,I=204,B=205,k=206,R=207,E=208,P=209,O=210,F=211,N=212,L=213,V=214,j=0,U=1,W=2,D=3,H=4,q=5,J=6,X=7,Y=0,Z=1,G=2,$=0,Q=1,K=2,tt=3,et=4,it=5,st=6,rt=7,nt="attached",at="detached",ot=300,ht=301,lt=302,ct=303,ut=304,dt=306,pt=1e3,mt=1001,yt=1002,gt=1003,ft=1004,xt=1004,bt=1005,vt=1005,wt=1006,Mt=1007,St=1007,_t=1008,At=1008,Tt=1009,zt=1010,Ct=1011,It=1012,Bt=1013,kt=1014,Rt=1015,Et=1016,Pt=1017,Ot=1018,Ft=1020,Nt=35902,Lt=1021,Vt=1022,jt=1023,Ut=1024,Wt=1025,Dt=1026,Ht=1027,qt=1028,Jt=1029,Xt=1030,Yt=1031,Zt=1032,Gt=1033,$t=33776,Qt=33777,Kt=33778,te=33779,ee=35840,ie=35841,se=35842,re=35843,ne=36196,ae=37492,oe=37496,he=37808,le=37809,ce=37810,ue=37811,de=37812,pe=37813,me=37814,ye=37815,ge=37816,fe=37817,xe=37818,be=37819,ve=37820,we=37821,Me=36492,Se=36494,_e=36495,Ae=36283,Te=36284,ze=36285,Ce=36286,Ie=2200,Be=2201,ke=2202,Re=2300,Ee=2301,Pe=2302,Oe=2400,Fe=2401,Ne=2402,Le=2500,Ve=2501,je=0,Ue=1,We=2,De=3200,He=3201,qe=3202,Je=3203,Xe=0,Ye=1,Ze="",Ge="srgb",$e="srgb-linear",Qe="linear",Ke="srgb",ti=0,ei=7680,ii=7681,si=7682,ri=7683,ni=34055,ai=34056,oi=5386,hi=512,li=513,ci=514,ui=515,di=516,pi=517,mi=518,yi=519,gi=512,fi=513,xi=514,bi=515,vi=516,wi=517,Mi=518,Si=519,_i=35044,Ai=35048,Ti=35040,zi=35045,Ci=35049,Ii=35041,Bi=35046,ki=35050,Ri=35042,Ei="100",Pi="300 es",Oi=2e3,Fi=2001,Ni={COMPUTE:"compute",RENDER:"render"};class Li{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)}hasEventListener(t,e){const i=this._listeners;return void 0!==i&&(void 0!==i[t]&&-1!==i[t].indexOf(e))}removeEventListener(t,e){const i=this._listeners;if(void 0===i)return;const s=i[t];if(void 0!==s){const t=s.indexOf(e);-1!==t&&s.splice(t,1)}}dispatchEvent(t){const e=this._listeners;if(void 0===e)return;const i=e[t.type];if(void 0!==i){t.target=this;const e=i.slice(0);for(let i=0,s=e.length;i<s;i++)e[i].call(this,t);t.target=null}}}const Vi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let ji=1234567;const Ui=Math.PI/180,Wi=180/Math.PI;function Di(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,s=4294967295*Math.random()|0;return(Vi[255&t]+Vi[t>>8&255]+Vi[t>>16&255]+Vi[t>>24&255]+"-"+Vi[255&e]+Vi[e>>8&255]+"-"+Vi[e>>16&15|64]+Vi[e>>24&255]+"-"+Vi[63&i|128]+Vi[i>>8&255]+"-"+Vi[i>>16&255]+Vi[i>>24&255]+Vi[255&s]+Vi[s>>8&255]+Vi[s>>16&255]+Vi[s>>24&255]).toLowerCase()}function Hi(t,e,i){return Math.max(e,Math.min(i,t))}function qi(t,e){return(t%e+e)%e}function Ji(t,e,i){return(1-i)*t+i*e}function Xi(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function Yi(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const Zi={DEG2RAD:Ui,RAD2DEG:Wi,generateUUID:Di,clamp:Hi,euclideanModulo:qi,mapLinear:function(t,e,i,s,r){return s+(t-e)*(r-s)/(i-e)},inverseLerp:function(t,e,i){return t!==e?(i-t)/(e-t):0},lerp:Ji,damp:function(t,e,i,s){return Ji(t,e,1-Math.exp(-i*s))},pingpong:function(t,e=1){return e-Math.abs(qi(t,2*e)-e)},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){void 0!==t&&(ji=t);let e=ji+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(t){return t*Ui},radToDeg:function(t){return t*Wi},isPowerOfTwo:function(t){return!(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,i,s,r){const n=Math.cos,a=Math.sin,o=n(i/2),h=a(i/2),l=n((e+s)/2),c=a((e+s)/2),u=n((e-s)/2),d=a((e-s)/2),p=n((s-e)/2),m=a((s-e)/2);switch(r){case"XYX":t.set(o*c,h*u,h*d,o*l);break;case"YZY":t.set(h*d,o*c,h*u,o*l);break;case"ZXZ":t.set(h*u,h*d,o*c,o*l);break;case"XZX":t.set(o*c,h*m,h*p,o*l);break;case"YXY":t.set(h*p,o*c,h*m,o*l);break;case"ZYZ":t.set(h*m,h*p,o*c,o*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}},normalize:Yi,denormalize:Xi};class Gi{constructor(t=0,e=0){Gi.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6],this.y=s[1]*e+s[4]*i+s[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Hi(this.x,t.x,e.x),this.y=Hi(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=Hi(this.x,t,e),this.y=Hi(this.y,t,e),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Hi(i,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Hi(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),s=Math.sin(e),r=this.x-t.x,n=this.y-t.y;return this.x=r*i-n*s+t.x,this.y=r*s+n*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class $i{constructor(t,e,i,s,r,n,a,o,h){$i.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,i,s,r,n,a,o,h)}set(t,e,i,s,r,n,a,o,h){const l=this.elements;return l[0]=t,l[1]=s,l[2]=a,l[3]=e,l[4]=r,l[5]=o,l[6]=i,l[7]=n,l[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,s=e.elements,r=this.elements,n=i[0],a=i[3],o=i[6],h=i[1],l=i[4],c=i[7],u=i[2],d=i[5],p=i[8],m=s[0],y=s[3],g=s[6],f=s[1],x=s[4],b=s[7],v=s[2],w=s[5],M=s[8];return r[0]=n*m+a*f+o*v,r[3]=n*y+a*x+o*w,r[6]=n*g+a*b+o*M,r[1]=h*m+l*f+c*v,r[4]=h*y+l*x+c*w,r[7]=h*g+l*b+c*M,r[2]=u*m+d*f+p*v,r[5]=u*y+d*x+p*w,r[8]=u*g+d*b+p*M,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*n*l-e*a*h-i*r*l+i*a*o+s*r*h-s*n*o}invert(){const t=this.elements,e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8],c=l*n-a*h,u=a*o-l*r,d=h*r-n*o,p=e*c+i*u+s*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=c*m,t[1]=(s*h-l*i)*m,t[2]=(a*i-s*n)*m,t[3]=u*m,t[4]=(l*e-s*o)*m,t[5]=(s*r-a*e)*m,t[6]=d*m,t[7]=(i*o-h*e)*m,t[8]=(n*e-i*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,s,r,n,a){const o=Math.cos(r),h=Math.sin(r);return this.set(i*o,i*h,-i*(o*n+h*a)+n+t,-s*h,s*o,-s*(-h*n+o*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(Qi.makeScale(t,e)),this}rotate(t){return this.premultiply(Qi.makeRotation(-t)),this}translate(t,e){return this.premultiply(Qi.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<9;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const Qi=new $i;function Ki(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}const ts={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function es(t,e){return new ts[t](e)}function is(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function ss(){const t=is("canvas");return t.style.display="block",t}const rs={};function ns(t){t in rs||(rs[t]=!0,console.warn(t))}function as(t,e,i){return new Promise((function(s,r){setTimeout((function n(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:r();break;case t.TIMEOUT_EXPIRED:setTimeout(n,i);break;default:s()}}),i)}))}function os(t){const e=t.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function hs(t){const e=t.elements;-1===e[11]?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=1-e[14])}const ls=(new $i).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),cs=(new $i).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function us(){const t={enabled:!0,workingColorSpace:$e,spaces:{},convert:function(t,e,i){return!1!==this.enabled&&e!==i&&e&&i?(this.spaces[e].transfer===Ke&&(t.r=ps(t.r),t.g=ps(t.g),t.b=ps(t.b)),this.spaces[e].primaries!==this.spaces[i].primaries&&(t.applyMatrix3(this.spaces[e].toXYZ),t.applyMatrix3(this.spaces[i].fromXYZ)),this.spaces[i].transfer===Ke&&(t.r=ms(t.r),t.g=ms(t.g),t.b=ms(t.b)),t):t},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)},getPrimaries:function(t){return this.spaces[t].primaries},getTransfer:function(t){return""===t?Qe:this.spaces[t].transfer},getLuminanceCoefficients:function(t,e=this.workingColorSpace){return t.fromArray(this.spaces[e].luminanceCoefficients)},define:function(t){Object.assign(this.spaces,t)},_getMatrix:function(t,e,i){return t.copy(this.spaces[e].toXYZ).multiply(this.spaces[i].fromXYZ)},_getDrawingBufferColorSpace:function(t){return this.spaces[t].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(t=this.workingColorSpace){return this.spaces[t].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],i=[.2126,.7152,.0722],s=[.3127,.329];return t.define({[$e]:{primaries:e,whitePoint:s,transfer:Qe,toXYZ:ls,fromXYZ:cs,luminanceCoefficients:i,workingColorSpaceConfig:{unpackColorSpace:Ge},outputColorSpaceConfig:{drawingBufferColorSpace:Ge}},[Ge]:{primaries:e,whitePoint:s,transfer:Ke,toXYZ:ls,fromXYZ:cs,luminanceCoefficients:i,outputColorSpaceConfig:{drawingBufferColorSpace:Ge}}}),t}const ds=us();function ps(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function ms(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}let ys;class gs{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===ys&&(ys=is("canvas")),ys.width=t.width,ys.height=t.height;const i=ys.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=ys}return e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=is("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const s=i.getImageData(0,0,t.width,t.height),r=s.data;for(let t=0;t<r.length;t++)r[t]=255*ps(r[t]/255);return i.putImageData(s,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*ps(e[t]/255)):e[t]=ps(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let fs=0;class xs{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:fs++}),this.uuid=Di(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const i={uuid:this.uuid,url:""},s=this.data;if(null!==s){let t;if(Array.isArray(s)){t=[];for(let e=0,i=s.length;e<i;e++)s[e].isDataTexture?t.push(bs(s[e].image)):t.push(bs(s[e]))}else t=bs(s);i.url=t}return e||(t.images[this.uuid]=i),i}}function bs(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?gs.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let vs=0;class ws extends Li{constructor(t=ws.DEFAULT_IMAGE,e=ws.DEFAULT_MAPPING,i=1001,s=1001,r=1006,n=1008,a=1023,o=1009,h=ws.DEFAULT_ANISOTROPY,l=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:vs++}),this.uuid=Di(),this.name="",this.source=new xs(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=i,this.wrapT=s,this.magFilter=r,this.minFilter=n,this.anisotropy=h,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Gi(0,0),this.repeat=new Gi(1,1),this.center=new Gi(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new $i,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=l,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==ot)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case pt:t.x=t.x-Math.floor(t.x);break;case mt:t.x=t.x<0?0:1;break;case yt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case pt:t.y=t.y-Math.floor(t.y);break;case mt:t.y=t.y<0?0:1;break;case yt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){!0===t&&this.pmremVersion++}}ws.DEFAULT_IMAGE=null,ws.DEFAULT_MAPPING=ot,ws.DEFAULT_ANISOTROPY=1;class Ms{constructor(t=0,e=0,i=0,s=1){Ms.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=s}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,s=this.z,r=this.w,n=t.elements;return this.x=n[0]*e+n[4]*i+n[8]*s+n[12]*r,this.y=n[1]*e+n[5]*i+n[9]*s+n[13]*r,this.z=n[2]*e+n[6]*i+n[10]*s+n[14]*r,this.w=n[3]*e+n[7]*i+n[11]*s+n[15]*r,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,s,r;const n=.01,a=.1,o=t.elements,h=o[0],l=o[4],c=o[8],u=o[1],d=o[5],p=o[9],m=o[2],y=o[6],g=o[10];if(Math.abs(l-u)<n&&Math.abs(c-m)<n&&Math.abs(p-y)<n){if(Math.abs(l+u)<a&&Math.abs(c+m)<a&&Math.abs(p+y)<a&&Math.abs(h+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(h+1)/2,o=(d+1)/2,f=(g+1)/2,x=(l+u)/4,b=(c+m)/4,v=(p+y)/4;return t>o&&t>f?t<n?(i=0,s=.707106781,r=.707106781):(i=Math.sqrt(t),s=x/i,r=b/i):o>f?o<n?(i=.707106781,s=0,r=.707106781):(s=Math.sqrt(o),i=x/s,r=v/s):f<n?(i=.707106781,s=.707106781,r=0):(r=Math.sqrt(f),i=b/r,s=v/r),this.set(i,s,r,e),this}let f=Math.sqrt((y-p)*(y-p)+(c-m)*(c-m)+(u-l)*(u-l));return Math.abs(f)<.001&&(f=1),this.x=(y-p)/f,this.y=(c-m)/f,this.z=(u-l)/f,this.w=Math.acos((h+d+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Hi(this.x,t.x,e.x),this.y=Hi(this.y,t.y,e.y),this.z=Hi(this.z,t.z,e.z),this.w=Hi(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=Hi(this.x,t,e),this.y=Hi(this.y,t,e),this.z=Hi(this.z,t,e),this.w=Hi(this.w,t,e),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Hi(i,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Ss extends Li{constructor(t=1,e=1,i={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Ms(0,0,t,e),this.scissorTest=!1,this.viewport=new Ms(0,0,t,e);const s={width:t,height:e,depth:1};i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:wt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i);const r=new ws(s,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);r.flipY=!1,r.generateMipmaps=i.generateMipmaps,r.internalFormat=i.internalFormat,this.textures=[];const n=i.count;for(let t=0;t<n;t++)this.textures[t]=r.clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){null!==this._depthTexture&&(this._depthTexture.renderTarget=null),null!==t&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let s=0,r=this.textures.length;s<r;s++)this.textures[s].image.width=t,this.textures[s].image.height=e,this.textures[s].image.depth=i;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,i=t.textures.length;e<i;e++)this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;const e=Object.assign({},t.texture.image);return this.texture.source=new xs(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class _s extends Ss{constructor(t=1,e=1,i={}){super(t,e,i),this.isWebGLRenderTarget=!0}}class As extends ws{constructor(t=null,e=1,i=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:s},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Ts extends _s{constructor(t=1,e=1,i=1,s={}){super(t,e,s),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new As(null,t,e,i),this.texture.isRenderTargetTexture=!0}}class zs extends ws{constructor(t=null,e=1,i=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:s},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Cs extends _s{constructor(t=1,e=1,i=1,s={}){super(t,e,s),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new zs(null,t,e,i),this.texture.isRenderTargetTexture=!0}}class Is{constructor(t=0,e=0,i=0,s=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=s}static slerpFlat(t,e,i,s,r,n,a){let o=i[s+0],h=i[s+1],l=i[s+2],c=i[s+3];const u=r[n+0],d=r[n+1],p=r[n+2],m=r[n+3];if(0===a)return t[e+0]=o,t[e+1]=h,t[e+2]=l,void(t[e+3]=c);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(c!==m||o!==u||h!==d||l!==p){let t=1-a;const e=o*u+h*d+l*p+c*m,i=e>=0?1:-1,s=1-e*e;if(s>Number.EPSILON){const r=Math.sqrt(s),n=Math.atan2(r,e*i);t=Math.sin(t*n)/r,a=Math.sin(a*n)/r}const r=a*i;if(o=o*t+u*r,h=h*t+d*r,l=l*t+p*r,c=c*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+h*h+l*l+c*c);o*=t,h*=t,l*=t,c*=t}}t[e]=o,t[e+1]=h,t[e+2]=l,t[e+3]=c}static multiplyQuaternionsFlat(t,e,i,s,r,n){const a=i[s],o=i[s+1],h=i[s+2],l=i[s+3],c=r[n],u=r[n+1],d=r[n+2],p=r[n+3];return t[e]=a*p+l*c+o*d-h*u,t[e+1]=o*p+l*u+h*c-a*d,t[e+2]=h*p+l*d+a*u-o*c,t[e+3]=l*p-a*c-o*u-h*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,s){return this._x=t,this._y=e,this._z=i,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const i=t._x,s=t._y,r=t._z,n=t._order,a=Math.cos,o=Math.sin,h=a(i/2),l=a(s/2),c=a(r/2),u=o(i/2),d=o(s/2),p=o(r/2);switch(n){case"XYZ":this._x=u*l*c+h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c-u*d*p;break;case"YXZ":this._x=u*l*c+h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c+u*d*p;break;case"ZXY":this._x=u*l*c-h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c-u*d*p;break;case"ZYX":this._x=u*l*c-h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c+u*d*p;break;case"YZX":this._x=u*l*c+h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c-u*d*p;break;case"XZY":this._x=u*l*c-h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+n)}return!0===e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,s=Math.sin(i);return this._x=t.x*s,this._y=t.y*s,this._z=t.z*s,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],s=e[4],r=e[8],n=e[1],a=e[5],o=e[9],h=e[2],l=e[6],c=e[10],u=i+a+c;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(l-o)*t,this._y=(r-h)*t,this._z=(n-s)*t}else if(i>a&&i>c){const t=2*Math.sqrt(1+i-a-c);this._w=(l-o)/t,this._x=.25*t,this._y=(s+n)/t,this._z=(r+h)/t}else if(a>c){const t=2*Math.sqrt(1+a-i-c);this._w=(r-h)/t,this._x=(s+n)/t,this._y=.25*t,this._z=(o+l)/t}else{const t=2*Math.sqrt(1+c-i-a);this._w=(n-s)/t,this._x=(r+h)/t,this._y=(o+l)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Hi(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(0===i)return this;const s=Math.min(1,e/i);return this.slerp(t,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,s=t._y,r=t._z,n=t._w,a=e._x,o=e._y,h=e._z,l=e._w;return this._x=i*l+n*a+s*h-r*o,this._y=s*l+n*o+r*a-i*h,this._z=r*l+n*h+i*o-s*a,this._w=n*l-i*a-s*o-r*h,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const i=this._x,s=this._y,r=this._z,n=this._w;let a=n*t._w+i*t._x+s*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=n,this._x=i,this._y=s,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*n+e*this._w,this._x=t*i+e*this._x,this._y=t*s+e*this._y,this._z=t*r+e*this._z,this.normalize(),this}const h=Math.sqrt(o),l=Math.atan2(h,a),c=Math.sin((1-e)*l)/h,u=Math.sin(e*l)/h;return this._w=n*c+this._w*u,this._x=i*c+this._x*u,this._y=s*c+this._y*u,this._z=r*c+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),i=Math.random(),s=Math.sqrt(1-i),r=Math.sqrt(i);return this.set(s*Math.sin(t),s*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Bs{constructor(t=0,e=0,i=0){Bs.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return void 0===i&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Rs.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Rs.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,s=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*s,this.y=r[1]*e+r[4]*i+r[7]*s,this.z=r[2]*e+r[5]*i+r[8]*s,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,s=this.z,r=t.elements,n=1/(r[3]*e+r[7]*i+r[11]*s+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*s+r[12])*n,this.y=(r[1]*e+r[5]*i+r[9]*s+r[13])*n,this.z=(r[2]*e+r[6]*i+r[10]*s+r[14])*n,this}applyQuaternion(t){const e=this.x,i=this.y,s=this.z,r=t.x,n=t.y,a=t.z,o=t.w,h=2*(n*s-a*i),l=2*(a*e-r*s),c=2*(r*i-n*e);return this.x=e+o*h+n*c-a*l,this.y=i+o*l+a*h-r*c,this.z=s+o*c+r*l-n*h,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,s=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*s,this.y=r[1]*e+r[5]*i+r[9]*s,this.z=r[2]*e+r[6]*i+r[10]*s,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Hi(this.x,t.x,e.x),this.y=Hi(this.y,t.y,e.y),this.z=Hi(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=Hi(this.x,t,e),this.y=Hi(this.y,t,e),this.z=Hi(this.z,t,e),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Hi(i,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,s=t.y,r=t.z,n=e.x,a=e.y,o=e.z;return this.x=s*o-r*a,this.y=r*n-i*o,this.z=i*a-s*n,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return ks.copy(this).projectOnVector(t),this.sub(ks)}reflect(t){return this.sub(ks.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Hi(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,s=this.z-t.z;return e*e+i*i+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const s=Math.sin(e)*t;return this.x=s*Math.sin(i),this.y=Math.cos(e)*t,this.z=s*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),s=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=s,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=2*Math.random()-1,i=Math.sqrt(1-e*e);return this.x=i*Math.cos(t),this.y=e,this.z=i*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ks=new Bs,Rs=new Is;class Es{constructor(t=new Bs(1/0,1/0,1/0),e=new Bs(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e+=3)this.expandByPoint(Os.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,i=t.count;e<i;e++)this.expandByPoint(Os.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Os.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(void 0!==i){const s=i.getAttribute("position");if(!0===e&&void 0!==s&&!0!==t.isInstancedMesh)for(let e=0,i=s.count;e<i;e++)!0===t.isMesh?t.getVertexPosition(e,Os):Os.fromBufferAttribute(s,e),Os.applyMatrix4(t.matrixWorld),this.expandByPoint(Os);else void 0!==t.boundingBox?(null===t.boundingBox&&t.computeBoundingBox(),Fs.copy(t.boundingBox)):(null===i.boundingBox&&i.computeBoundingBox(),Fs.copy(i.boundingBox)),Fs.applyMatrix4(t.matrixWorld),this.union(Fs)}const s=t.children;for(let t=0,i=s.length;t<i;t++)this.expandByObject(s[t],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Os),Os.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ds),Hs.subVectors(this.max,Ds),Ns.subVectors(t.a,Ds),Ls.subVectors(t.b,Ds),Vs.subVectors(t.c,Ds),js.subVectors(Ls,Ns),Us.subVectors(Vs,Ls),Ws.subVectors(Ns,Vs);let e=[0,-js.z,js.y,0,-Us.z,Us.y,0,-Ws.z,Ws.y,js.z,0,-js.x,Us.z,0,-Us.x,Ws.z,0,-Ws.x,-js.y,js.x,0,-Us.y,Us.x,0,-Ws.y,Ws.x,0];return!!Xs(e,Ns,Ls,Vs,Hs)&&(e=[1,0,0,0,1,0,0,0,1],!!Xs(e,Ns,Ls,Vs,Hs)&&(qs.crossVectors(js,Us),e=[qs.x,qs.y,qs.z],Xs(e,Ns,Ls,Vs,Hs)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Os).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(Os).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Ps[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ps[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ps[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ps[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ps[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ps[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ps[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ps[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ps)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ps=[new Bs,new Bs,new Bs,new Bs,new Bs,new Bs,new Bs,new Bs],Os=new Bs,Fs=new Es,Ns=new Bs,Ls=new Bs,Vs=new Bs,js=new Bs,Us=new Bs,Ws=new Bs,Ds=new Bs,Hs=new Bs,qs=new Bs,Js=new Bs;function Xs(t,e,i,s,r){for(let n=0,a=t.length-3;n<=a;n+=3){Js.fromArray(t,n);const a=r.x*Math.abs(Js.x)+r.y*Math.abs(Js.y)+r.z*Math.abs(Js.z),o=e.dot(Js),h=i.dot(Js),l=s.dot(Js);if(Math.max(-Math.max(o,h,l),Math.min(o,h,l))>a)return!1}return!0}const Ys=new Es,Zs=new Bs,Gs=new Bs;class $s{constructor(t=new Bs,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;void 0!==e?i.copy(e):Ys.setFromPoints(t).getCenter(i);let s=0;for(let e=0,r=t.length;e<r;e++)s=Math.max(s,i.distanceToSquared(t[e]));return this.radius=Math.sqrt(s),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Zs.subVectors(t,this.center);const e=Zs.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),i=.5*(t-this.radius);this.center.addScaledVector(Zs,i/t),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(Gs.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Zs.copy(t.center).add(Gs)),this.expandByPoint(Zs.copy(t.center).sub(Gs))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Qs=new Bs,Ks=new Bs,tr=new Bs,er=new Bs,ir=new Bs,sr=new Bs,rr=new Bs;class nr{constructor(t=new Bs,e=new Bs(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Qs)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Qs.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Qs.copy(this.origin).addScaledVector(this.direction,e),Qs.distanceToSquared(t))}distanceSqToSegment(t,e,i,s){Ks.copy(t).add(e).multiplyScalar(.5),tr.copy(e).sub(t).normalize(),er.copy(this.origin).sub(Ks);const r=.5*t.distanceTo(e),n=-this.direction.dot(tr),a=er.dot(this.direction),o=-er.dot(tr),h=er.lengthSq(),l=Math.abs(1-n*n);let c,u,d,p;if(l>0)if(c=n*o-a,u=n*a-o,p=r*l,c>=0)if(u>=-p)if(u<=p){const t=1/l;c*=t,u*=t,d=c*(c+n*u+2*a)+u*(n*c+u+2*o)+h}else u=r,c=Math.max(0,-(n*u+a)),d=-c*c+u*(u+2*o)+h;else u=-r,c=Math.max(0,-(n*u+a)),d=-c*c+u*(u+2*o)+h;else u<=-p?(c=Math.max(0,-(-n*r+a)),u=c>0?-r:Math.min(Math.max(-r,-o),r),d=-c*c+u*(u+2*o)+h):u<=p?(c=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+h):(c=Math.max(0,-(n*r+a)),u=c>0?r:Math.min(Math.max(-r,-o),r),d=-c*c+u*(u+2*o)+h);else u=n>0?-r:r,c=Math.max(0,-(n*u+a)),d=-c*c+u*(u+2*o)+h;return i&&i.copy(this.origin).addScaledVector(this.direction,c),s&&s.copy(Ks).addScaledVector(tr,u),d}intersectSphere(t,e){Qs.subVectors(t.center,this.origin);const i=Qs.dot(this.direction),s=Qs.dot(Qs)-i*i,r=t.radius*t.radius;if(s>r)return null;const n=Math.sqrt(r-s),a=i-n,o=i+n;return o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return null===i?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,s,r,n,a,o;const h=1/this.direction.x,l=1/this.direction.y,c=1/this.direction.z,u=this.origin;return h>=0?(i=(t.min.x-u.x)*h,s=(t.max.x-u.x)*h):(i=(t.max.x-u.x)*h,s=(t.min.x-u.x)*h),l>=0?(r=(t.min.y-u.y)*l,n=(t.max.y-u.y)*l):(r=(t.max.y-u.y)*l,n=(t.min.y-u.y)*l),i>n||r>s?null:((r>i||isNaN(i))&&(i=r),(n<s||isNaN(s))&&(s=n),c>=0?(a=(t.min.z-u.z)*c,o=(t.max.z-u.z)*c):(a=(t.max.z-u.z)*c,o=(t.min.z-u.z)*c),i>o||a>s?null:((a>i||i!=i)&&(i=a),(o<s||s!=s)&&(s=o),s<0?null:this.at(i>=0?i:s,e)))}intersectsBox(t){return null!==this.intersectBox(t,Qs)}intersectTriangle(t,e,i,s,r){ir.subVectors(e,t),sr.subVectors(i,t),rr.crossVectors(ir,sr);let n,a=this.direction.dot(rr);if(a>0){if(s)return null;n=1}else{if(!(a<0))return null;n=-1,a=-a}er.subVectors(this.origin,t);const o=n*this.direction.dot(sr.crossVectors(er,sr));if(o<0)return null;const h=n*this.direction.dot(ir.cross(er));if(h<0)return null;if(o+h>a)return null;const l=-n*er.dot(rr);return l<0?null:this.at(l/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class ar{constructor(t,e,i,s,r,n,a,o,h,l,c,u,d,p,m,y){ar.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,i,s,r,n,a,o,h,l,c,u,d,p,m,y)}set(t,e,i,s,r,n,a,o,h,l,c,u,d,p,m,y){const g=this.elements;return g[0]=t,g[4]=e,g[8]=i,g[12]=s,g[1]=r,g[5]=n,g[9]=a,g[13]=o,g[2]=h,g[6]=l,g[10]=c,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=y,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new ar).fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,s=1/or.setFromMatrixColumn(t,0).length(),r=1/or.setFromMatrixColumn(t,1).length(),n=1/or.setFromMatrixColumn(t,2).length();return e[0]=i[0]*s,e[1]=i[1]*s,e[2]=i[2]*s,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*n,e[9]=i[9]*n,e[10]=i[10]*n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,s=t.y,r=t.z,n=Math.cos(i),a=Math.sin(i),o=Math.cos(s),h=Math.sin(s),l=Math.cos(r),c=Math.sin(r);if("XYZ"===t.order){const t=n*l,i=n*c,s=a*l,r=a*c;e[0]=o*l,e[4]=-o*c,e[8]=h,e[1]=i+s*h,e[5]=t-r*h,e[9]=-a*o,e[2]=r-t*h,e[6]=s+i*h,e[10]=n*o}else if("YXZ"===t.order){const t=o*l,i=o*c,s=h*l,r=h*c;e[0]=t+r*a,e[4]=s*a-i,e[8]=n*h,e[1]=n*c,e[5]=n*l,e[9]=-a,e[2]=i*a-s,e[6]=r+t*a,e[10]=n*o}else if("ZXY"===t.order){const t=o*l,i=o*c,s=h*l,r=h*c;e[0]=t-r*a,e[4]=-n*c,e[8]=s+i*a,e[1]=i+s*a,e[5]=n*l,e[9]=r-t*a,e[2]=-n*h,e[6]=a,e[10]=n*o}else if("ZYX"===t.order){const t=n*l,i=n*c,s=a*l,r=a*c;e[0]=o*l,e[4]=s*h-i,e[8]=t*h+r,e[1]=o*c,e[5]=r*h+t,e[9]=i*h-s,e[2]=-h,e[6]=a*o,e[10]=n*o}else if("YZX"===t.order){const t=n*o,i=n*h,s=a*o,r=a*h;e[0]=o*l,e[4]=r-t*c,e[8]=s*c+i,e[1]=c,e[5]=n*l,e[9]=-a*l,e[2]=-h*l,e[6]=i*c+s,e[10]=t-r*c}else if("XZY"===t.order){const t=n*o,i=n*h,s=a*o,r=a*h;e[0]=o*l,e[4]=-c,e[8]=h*l,e[1]=t*c+r,e[5]=n*l,e[9]=i*c-s,e[2]=s*c-i,e[6]=a*l,e[10]=r*c+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(lr,t,cr)}lookAt(t,e,i){const s=this.elements;return pr.subVectors(t,e),0===pr.lengthSq()&&(pr.z=1),pr.normalize(),ur.crossVectors(i,pr),0===ur.lengthSq()&&(1===Math.abs(i.z)?pr.x+=1e-4:pr.z+=1e-4,pr.normalize(),ur.crossVectors(i,pr)),ur.normalize(),dr.crossVectors(pr,ur),s[0]=ur.x,s[4]=dr.x,s[8]=pr.x,s[1]=ur.y,s[5]=dr.y,s[9]=pr.y,s[2]=ur.z,s[6]=dr.z,s[10]=pr.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,s=e.elements,r=this.elements,n=i[0],a=i[4],o=i[8],h=i[12],l=i[1],c=i[5],u=i[9],d=i[13],p=i[2],m=i[6],y=i[10],g=i[14],f=i[3],x=i[7],b=i[11],v=i[15],w=s[0],M=s[4],S=s[8],_=s[12],A=s[1],T=s[5],z=s[9],C=s[13],I=s[2],B=s[6],k=s[10],R=s[14],E=s[3],P=s[7],O=s[11],F=s[15];return r[0]=n*w+a*A+o*I+h*E,r[4]=n*M+a*T+o*B+h*P,r[8]=n*S+a*z+o*k+h*O,r[12]=n*_+a*C+o*R+h*F,r[1]=l*w+c*A+u*I+d*E,r[5]=l*M+c*T+u*B+d*P,r[9]=l*S+c*z+u*k+d*O,r[13]=l*_+c*C+u*R+d*F,r[2]=p*w+m*A+y*I+g*E,r[6]=p*M+m*T+y*B+g*P,r[10]=p*S+m*z+y*k+g*O,r[14]=p*_+m*C+y*R+g*F,r[3]=f*w+x*A+b*I+v*E,r[7]=f*M+x*T+b*B+v*P,r[11]=f*S+x*z+b*k+v*O,r[15]=f*_+x*C+b*R+v*F,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],s=t[8],r=t[12],n=t[1],a=t[5],o=t[9],h=t[13],l=t[2],c=t[6],u=t[10],d=t[14];return t[3]*(+r*o*c-s*h*c-r*a*u+i*h*u+s*a*d-i*o*d)+t[7]*(+e*o*d-e*h*u+r*n*u-s*n*d+s*h*l-r*o*l)+t[11]*(+e*h*c-e*a*d-r*n*c+i*n*d+r*a*l-i*h*l)+t[15]*(-s*a*l-e*o*c+e*a*u+s*n*c-i*n*u+i*o*l)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const s=this.elements;return t.isVector3?(s[12]=t.x,s[13]=t.y,s[14]=t.z):(s[12]=t,s[13]=e,s[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8],c=t[9],u=t[10],d=t[11],p=t[12],m=t[13],y=t[14],g=t[15],f=c*y*h-m*u*h+m*o*d-a*y*d-c*o*g+a*u*g,x=p*u*h-l*y*h-p*o*d+n*y*d+l*o*g-n*u*g,b=l*m*h-p*c*h+p*a*d-n*m*d-l*a*g+n*c*g,v=p*c*o-l*m*o-p*a*u+n*m*u+l*a*y-n*c*y,w=e*f+i*x+s*b+r*v;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/w;return t[0]=f*M,t[1]=(m*u*r-c*y*r-m*s*d+i*y*d+c*s*g-i*u*g)*M,t[2]=(a*y*r-m*o*r+m*s*h-i*y*h-a*s*g+i*o*g)*M,t[3]=(c*o*r-a*u*r-c*s*h+i*u*h+a*s*d-i*o*d)*M,t[4]=x*M,t[5]=(l*y*r-p*u*r+p*s*d-e*y*d-l*s*g+e*u*g)*M,t[6]=(p*o*r-n*y*r-p*s*h+e*y*h+n*s*g-e*o*g)*M,t[7]=(n*u*r-l*o*r+l*s*h-e*u*h-n*s*d+e*o*d)*M,t[8]=b*M,t[9]=(p*c*r-l*m*r-p*i*d+e*m*d+l*i*g-e*c*g)*M,t[10]=(n*m*r-p*a*r+p*i*h-e*m*h-n*i*g+e*a*g)*M,t[11]=(l*a*r-n*c*r-l*i*h+e*c*h+n*i*d-e*a*d)*M,t[12]=v*M,t[13]=(l*m*s-p*c*s+p*i*u-e*m*u-l*i*y+e*c*y)*M,t[14]=(p*a*s-n*m*s-p*i*o+e*m*o+n*i*y-e*a*y)*M,t[15]=(n*c*s-l*a*s+l*i*o-e*c*o-n*i*u+e*a*u)*M,this}scale(t){const e=this.elements,i=t.x,s=t.y,r=t.z;return e[0]*=i,e[4]*=s,e[8]*=r,e[1]*=i,e[5]*=s,e[9]*=r,e[2]*=i,e[6]*=s,e[10]*=r,e[3]*=i,e[7]*=s,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],s=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,s))}makeTranslation(t,e,i){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),s=Math.sin(e),r=1-i,n=t.x,a=t.y,o=t.z,h=r*n,l=r*a;return this.set(h*n+i,h*a-s*o,h*o+s*a,0,h*a+s*o,l*a+i,l*o-s*n,0,h*o-s*a,l*o+s*n,r*o*o+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,s,r,n){return this.set(1,i,r,0,t,1,n,0,e,s,1,0,0,0,0,1),this}compose(t,e,i){const s=this.elements,r=e._x,n=e._y,a=e._z,o=e._w,h=r+r,l=n+n,c=a+a,u=r*h,d=r*l,p=r*c,m=n*l,y=n*c,g=a*c,f=o*h,x=o*l,b=o*c,v=i.x,w=i.y,M=i.z;return s[0]=(1-(m+g))*v,s[1]=(d+b)*v,s[2]=(p-x)*v,s[3]=0,s[4]=(d-b)*w,s[5]=(1-(u+g))*w,s[6]=(y+f)*w,s[7]=0,s[8]=(p+x)*M,s[9]=(y-f)*M,s[10]=(1-(u+m))*M,s[11]=0,s[12]=t.x,s[13]=t.y,s[14]=t.z,s[15]=1,this}decompose(t,e,i){const s=this.elements;let r=or.set(s[0],s[1],s[2]).length();const n=or.set(s[4],s[5],s[6]).length(),a=or.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),t.x=s[12],t.y=s[13],t.z=s[14],hr.copy(this);const o=1/r,h=1/n,l=1/a;return hr.elements[0]*=o,hr.elements[1]*=o,hr.elements[2]*=o,hr.elements[4]*=h,hr.elements[5]*=h,hr.elements[6]*=h,hr.elements[8]*=l,hr.elements[9]*=l,hr.elements[10]*=l,e.setFromRotationMatrix(hr),i.x=r,i.y=n,i.z=a,this}makePerspective(t,e,i,s,r,n,a=2e3){const o=this.elements,h=2*r/(e-t),l=2*r/(i-s),c=(e+t)/(e-t),u=(i+s)/(i-s);let d,p;if(a===Oi)d=-(n+r)/(n-r),p=-2*n*r/(n-r);else{if(a!==Fi)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);d=-n/(n-r),p=-n*r/(n-r)}return o[0]=h,o[4]=0,o[8]=c,o[12]=0,o[1]=0,o[5]=l,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,i,s,r,n,a=2e3){const o=this.elements,h=1/(e-t),l=1/(i-s),c=1/(n-r),u=(e+t)*h,d=(i+s)*l;let p,m;if(a===Oi)p=(n+r)*c,m=-2*c;else{if(a!==Fi)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);p=r*c,m=-1*c}return o[0]=2*h,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=m,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<16;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const or=new Bs,hr=new ar,lr=new Bs(0,0,0),cr=new Bs(1,1,1),ur=new Bs,dr=new Bs,pr=new Bs,mr=new ar,yr=new Is;class gr{constructor(t=0,e=0,i=0,s=gr.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=s}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,s=this._order){return this._x=t,this._y=e,this._z=i,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const s=t.elements,r=s[0],n=s[4],a=s[8],o=s[1],h=s[5],l=s[9],c=s[2],u=s[6],d=s[10];switch(e){case"XYZ":this._y=Math.asin(Hi(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-n,r)):(this._x=Math.atan2(u,h),this._z=0);break;case"YXZ":this._x=Math.asin(-Hi(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,h)):(this._y=Math.atan2(-c,r),this._z=0);break;case"ZXY":this._x=Math.asin(Hi(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-c,d),this._z=Math.atan2(-n,h)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-Hi(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-n,h));break;case"YZX":this._z=Math.asin(Hi(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-l,h),this._y=Math.atan2(-c,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-Hi(n,-1,1)),Math.abs(n)<.9999999?(this._x=Math.atan2(u,h),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-l,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===i&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return mr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(mr,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return yr.setFromEuler(this),this.setFromQuaternion(yr,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}gr.DEFAULT_ORDER="XYZ";class fr{constructor(){this.mask=1}set(t){this.mask=1<<t>>>0}enable(t){this.mask|=1<<t}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t}disable(t){this.mask&=~(1<<t)}disableAll(){this.mask=0}test(t){return!!(this.mask&t.mask)}isEnabled(t){return!!(this.mask&1<<t)}}let xr=0;const br=new Bs,vr=new Is,wr=new ar,Mr=new Bs,Sr=new Bs,_r=new Bs,Ar=new Is,Tr=new Bs(1,0,0),zr=new Bs(0,1,0),Cr=new Bs(0,0,1),Ir={type:"added"},Br={type:"removed"},kr={type:"childadded",child:null},Rr={type:"childremoved",child:null};class Er extends Li{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:xr++}),this.uuid=Di(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Er.DEFAULT_UP.clone();const t=new Bs,e=new gr,i=new Is,s=new Bs(1,1,1);e._onChange((function(){i.setFromEuler(e,!1)})),i._onChange((function(){e.setFromQuaternion(i,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new ar},normalMatrix:{value:new $i}}),this.matrix=new ar,this.matrixWorld=new ar,this.matrixAutoUpdate=Er.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Er.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new fr,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return vr.setFromAxisAngle(t,e),this.quaternion.multiply(vr),this}rotateOnWorldAxis(t,e){return vr.setFromAxisAngle(t,e),this.quaternion.premultiply(vr),this}rotateX(t){return this.rotateOnAxis(Tr,t)}rotateY(t){return this.rotateOnAxis(zr,t)}rotateZ(t){return this.rotateOnAxis(Cr,t)}translateOnAxis(t,e){return br.copy(t).applyQuaternion(this.quaternion),this.position.add(br.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Tr,t)}translateY(t){return this.translateOnAxis(zr,t)}translateZ(t){return this.translateOnAxis(Cr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(wr.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?Mr.copy(t):Mr.set(t,e,i);const s=this.parent;this.updateWorldMatrix(!0,!1),Sr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?wr.lookAt(Sr,Mr,this.up):wr.lookAt(Mr,Sr,this.up),this.quaternion.setFromRotationMatrix(wr),s&&(wr.extractRotation(s.matrixWorld),vr.setFromRotationMatrix(wr),this.quaternion.premultiply(vr.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Ir),kr.child=t,this.dispatchEvent(kr),kr.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Br),Rr.child=t,this.dispatchEvent(Rr),Rr.child=null),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),wr.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),wr.multiply(t.parent.matrixWorld)),t.applyMatrix4(wr),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Ir),kr.child=t,this.dispatchEvent(kr),kr.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,s=this.children.length;i<s;i++){const s=this.children[i].getObjectByProperty(t,e);if(void 0!==s)return s}}getObjectsByProperty(t,e,i=[]){this[t]===e&&i.push(this);const s=this.children;for(let r=0,n=s.length;r<n;r++)s[r].getObjectsByProperty(t,e,i);return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Sr,t,_r),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Sr,Ar,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,s=e.length;i<s;i++)e[i].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let i=0,s=e.length;i<s;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,s=e.length;i<s;i++){e[i].updateMatrixWorld(t)}}updateWorldMatrix(t,e){const i=this.parent;if(!0===t&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===e){const t=this.children;for(let e=0,i=t.length;e<i;e++){t[e].updateWorldMatrix(!1,!0)}}}toJSON(t){const e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const s={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(s.uuid=this.uuid,s.type=this.type,""!==this.name&&(s.name=this.name),!0===this.castShadow&&(s.castShadow=!0),!0===this.receiveShadow&&(s.receiveShadow=!0),!1===this.visible&&(s.visible=!1),!1===this.frustumCulled&&(s.frustumCulled=!1),0!==this.renderOrder&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.visibility=this._visibility,s.active=this._active,s.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.geometryCount=this._geometryCount,s.matricesTexture=this._matricesTexture.toJSON(t),null!==this._colorsTexture&&(s.colorsTexture=this._colorsTexture.toJSON(t)),null!==this.boundingSphere&&(s.boundingSphere={center:s.boundingSphere.center.toArray(),radius:s.boundingSphere.radius}),null!==this.boundingBox&&(s.boundingBox={min:s.boundingBox.min.toArray(),max:s.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(s.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const i=e.shapes;if(Array.isArray(i))for(let e=0,s=i.length;e<s;e++){const s=i[e];r(t.shapes,s)}else r(t.shapes,i)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let i=0,s=this.material.length;i<s;i++)e.push(r(t.materials,this.material[i]));s.material=e}else s.material=r(t.materials,this.material);if(this.children.length>0){s.children=[];for(let e=0;e<this.children.length;e++)s.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){s.animations=[];for(let e=0;e<this.animations.length;e++){const i=this.animations[e];s.animations.push(r(t.animations,i))}}if(e){const e=n(t.geometries),s=n(t.materials),r=n(t.textures),a=n(t.images),o=n(t.shapes),h=n(t.skeletons),l=n(t.animations),c=n(t.nodes);e.length>0&&(i.geometries=e),s.length>0&&(i.materials=s),r.length>0&&(i.textures=r),a.length>0&&(i.images=a),o.length>0&&(i.shapes=o),h.length>0&&(i.skeletons=h),l.length>0&&(i.animations=l),c.length>0&&(i.nodes=c)}return i.object=s,i;function n(t){const e=[];for(const i in t){const s=t[i];delete s.metadata,e.push(s)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const i=t.children[e];this.add(i.clone())}return this}}Er.DEFAULT_UP=new Bs(0,1,0),Er.DEFAULT_MATRIX_AUTO_UPDATE=!0,Er.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Pr=new Bs,Or=new Bs,Fr=new Bs,Nr=new Bs,Lr=new Bs,Vr=new Bs,jr=new Bs,Ur=new Bs,Wr=new Bs,Dr=new Bs,Hr=new Ms,qr=new Ms,Jr=new Ms;class Xr{constructor(t=new Bs,e=new Bs,i=new Bs){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,s){s.subVectors(i,e),Pr.subVectors(t,e),s.cross(Pr);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(t,e,i,s,r){Pr.subVectors(s,e),Or.subVectors(i,e),Fr.subVectors(t,e);const n=Pr.dot(Pr),a=Pr.dot(Or),o=Pr.dot(Fr),h=Or.dot(Or),l=Or.dot(Fr),c=n*h-a*a;if(0===c)return r.set(0,0,0),null;const u=1/c,d=(h*o-a*l)*u,p=(n*l-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,i,s){return null!==this.getBarycoord(t,e,i,s,Nr)&&(Nr.x>=0&&Nr.y>=0&&Nr.x+Nr.y<=1)}static getInterpolation(t,e,i,s,r,n,a,o){return null===this.getBarycoord(t,e,i,s,Nr)?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,Nr.x),o.addScaledVector(n,Nr.y),o.addScaledVector(a,Nr.z),o)}static getInterpolatedAttribute(t,e,i,s,r,n){return Hr.setScalar(0),qr.setScalar(0),Jr.setScalar(0),Hr.fromBufferAttribute(t,e),qr.fromBufferAttribute(t,i),Jr.fromBufferAttribute(t,s),n.setScalar(0),n.addScaledVector(Hr,r.x),n.addScaledVector(qr,r.y),n.addScaledVector(Jr,r.z),n}static isFrontFacing(t,e,i,s){return Pr.subVectors(i,e),Or.subVectors(t,e),Pr.cross(Or).dot(s)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,s){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[s]),this}setFromAttributeAndIndices(t,e,i,s){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,s),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Pr.subVectors(this.c,this.b),Or.subVectors(this.a,this.b),.5*Pr.cross(Or).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Xr.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Xr.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,i,s,r){return Xr.getInterpolation(t,this.a,this.b,this.c,e,i,s,r)}containsPoint(t){return Xr.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Xr.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,s=this.b,r=this.c;let n,a;Lr.subVectors(s,i),Vr.subVectors(r,i),Ur.subVectors(t,i);const o=Lr.dot(Ur),h=Vr.dot(Ur);if(o<=0&&h<=0)return e.copy(i);Wr.subVectors(t,s);const l=Lr.dot(Wr),c=Vr.dot(Wr);if(l>=0&&c<=l)return e.copy(s);const u=o*c-l*h;if(u<=0&&o>=0&&l<=0)return n=o/(o-l),e.copy(i).addScaledVector(Lr,n);Dr.subVectors(t,r);const d=Lr.dot(Dr),p=Vr.dot(Dr);if(p>=0&&d<=p)return e.copy(r);const m=d*h-o*p;if(m<=0&&h>=0&&p<=0)return a=h/(h-p),e.copy(i).addScaledVector(Vr,a);const y=l*p-d*c;if(y<=0&&c-l>=0&&d-p>=0)return jr.subVectors(r,s),a=(c-l)/(c-l+(d-p)),e.copy(s).addScaledVector(jr,a);const g=1/(y+m+u);return n=m*g,a=u*g,e.copy(i).addScaledVector(Lr,n).addScaledVector(Vr,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const Yr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Zr={h:0,s:0,l:0},Gr={h:0,s:0,l:0};function $r(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}class Qr{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,i)}set(t,e,i){if(void 0===e&&void 0===i){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(t,e,i);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ge){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,ds.toWorkingColorSpace(this,e),this}setRGB(t,e,i,s=ds.workingColorSpace){return this.r=t,this.g=e,this.b=i,ds.toWorkingColorSpace(this,s),this}setHSL(t,e,i,s=ds.workingColorSpace){if(t=qi(t,1),e=Hi(e,0,1),i=Hi(i,0,1),0===e)this.r=this.g=this.b=i;else{const s=i<=.5?i*(1+e):i+e-i*e,r=2*i-s;this.r=$r(r,s,t+1/3),this.g=$r(r,s,t),this.b=$r(r,s,t-1/3)}return ds.toWorkingColorSpace(this,s),this}setStyle(t,e=Ge){function i(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const n=s[1],a=s[2];switch(n){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(t)){const i=s[1],r=i.length;if(3===r)return this.setRGB(parseInt(i.charAt(0),16)/15,parseInt(i.charAt(1),16)/15,parseInt(i.charAt(2),16)/15,e);if(6===r)return this.setHex(parseInt(i,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ge){const i=Yr[t.toLowerCase()];return void 0!==i?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=ps(t.r),this.g=ps(t.g),this.b=ps(t.b),this}copyLinearToSRGB(t){return this.r=ms(t.r),this.g=ms(t.g),this.b=ms(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ge){return ds.fromWorkingColorSpace(Kr.copy(this),t),65536*Math.round(Hi(255*Kr.r,0,255))+256*Math.round(Hi(255*Kr.g,0,255))+Math.round(Hi(255*Kr.b,0,255))}getHexString(t=Ge){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ds.workingColorSpace){ds.fromWorkingColorSpace(Kr.copy(this),e);const i=Kr.r,s=Kr.g,r=Kr.b,n=Math.max(i,s,r),a=Math.min(i,s,r);let o,h;const l=(a+n)/2;if(a===n)o=0,h=0;else{const t=n-a;switch(h=l<=.5?t/(n+a):t/(2-n-a),n){case i:o=(s-r)/t+(s<r?6:0);break;case s:o=(r-i)/t+2;break;case r:o=(i-s)/t+4}o/=6}return t.h=o,t.s=h,t.l=l,t}getRGB(t,e=ds.workingColorSpace){return ds.fromWorkingColorSpace(Kr.copy(this),e),t.r=Kr.r,t.g=Kr.g,t.b=Kr.b,t}getStyle(t=Ge){ds.fromWorkingColorSpace(Kr.copy(this),t);const e=Kr.r,i=Kr.g,s=Kr.b;return t!==Ge?`color(${t} ${e.toFixed(3)} ${i.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*i)},${Math.round(255*s)})`}offsetHSL(t,e,i){return this.getHSL(Zr),this.setHSL(Zr.h+t,Zr.s+e,Zr.l+i)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Zr),t.getHSL(Gr);const i=Ji(Zr.h,Gr.h,e),s=Ji(Zr.s,Gr.s,e),r=Ji(Zr.l,Gr.l,e);return this.setHSL(i,s,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,i=this.g,s=this.b,r=t.elements;return this.r=r[0]*e+r[3]*i+r[6]*s,this.g=r[1]*e+r[4]*i+r[7]*s,this.b=r[2]*e+r[5]*i+r[8]*s,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Kr=new Qr;Qr.NAMES=Yr;let tn=0;class en extends Li{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:tn++}),this.uuid=Di(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Qr(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ei,this.stencilZFail=ei,this.stencilZPass=ei,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const i=t[e];if(void 0===i){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const s=this[e];void 0!==s?s&&s.isColor?s.set(i):s&&s.isVector3&&i&&i.isVector3?s.copy(i):this[e]=i:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function s(t){const e=[];for(const i in t){const s=t[i];delete s.metadata,e.push(s)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),void 0!==this.sheen&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(i.dispersion=this.dispersion),void 0!==this.iridescence&&(i.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(i.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),void 0!==this.anisotropy&&(i.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(i.combine=this.combine)),void 0!==this.envMapRotation&&(i.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(i.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(i.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(i.size=this.size),null!==this.shadowSide&&(i.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),0!==this.side&&(i.side=this.side),!0===this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=!0),204!==this.blendSrc&&(i.blendSrc=this.blendSrc),205!==this.blendDst&&(i.blendDst=this.blendDst),100!==this.blendEquation&&(i.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(i.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(i.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(i.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(i.depthFunc=this.depthFunc),!1===this.depthTest&&(i.depthTest=this.depthTest),!1===this.depthWrite&&(i.depthWrite=this.depthWrite),!1===this.colorWrite&&(i.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(i.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(i.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(i.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==ei&&(i.stencilFail=this.stencilFail),this.stencilZFail!==ei&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==ei&&(i.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(i.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.alphaHash&&(i.alphaHash=!0),!0===this.alphaToCoverage&&(i.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=!0),!0===this.forceSinglePass&&(i.forceSinglePass=!0),!0===this.wireframe&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(i.flatShading=!0),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),!1===this.fog&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData),e){const e=s(t.textures),r=s(t.images);e.length>0&&(i.textures=e),r.length>0&&(i.images=r)}return i}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(null!==e){const t=e.length;i=new Array(t);for(let s=0;s!==t;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class sn extends en{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Qr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const rn=nn();function nn(){const t=new ArrayBuffer(4),e=new Float32Array(t),i=new Uint32Array(t),s=new Uint32Array(512),r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(s[t]=0,s[256|t]=32768,r[t]=24,r[256|t]=24):e<-14?(s[t]=1024>>-e-14,s[256|t]=1024>>-e-14|32768,r[t]=-e-1,r[256|t]=-e-1):e<=15?(s[t]=e+15<<10,s[256|t]=e+15<<10|32768,r[t]=13,r[256|t]=13):e<128?(s[t]=31744,s[256|t]=64512,r[t]=24,r[256|t]=24):(s[t]=31744,s[256|t]=64512,r[t]=13,r[256|t]=13)}const n=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,i=0;for(;!(8388608&e);)e<<=1,i-=8388608;e&=-8388609,i+=947912704,n[t]=e|i}for(let t=1024;t<2048;++t)n[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)a[t]=t<<23;a[31]=1199570944,a[32]=2147483648;for(let t=33;t<63;++t)a[t]=2147483648+(t-32<<23);a[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(o[t]=1024);return{floatView:e,uint32View:i,baseTable:s,shiftTable:r,mantissaTable:n,exponentTable:a,offsetTable:o}}function an(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=Hi(t,-65504,65504),rn.floatView[0]=t;const e=rn.uint32View[0],i=e>>23&511;return rn.baseTable[i]+((8388607&e)>>rn.shiftTable[i])}function on(t){const e=t>>10;return rn.uint32View[0]=rn.mantissaTable[rn.offsetTable[e]+(1023&t)]+rn.exponentTable[e],rn.floatView[0]}const hn={toHalfFloat:an,fromHalfFloat:on},ln=new Bs,cn=new Gi;let un=0;class dn{constructor(t,e,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:un++}),this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=i,this.usage=_i,this.updateRanges=[],this.gpuType=Rt,this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[t+s]=e.array[i+s];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,i=this.count;e<i;e++)cn.fromBufferAttribute(this,e),cn.applyMatrix3(t),this.setXY(e,cn.x,cn.y);else if(3===this.itemSize)for(let e=0,i=this.count;e<i;e++)ln.fromBufferAttribute(this,e),ln.applyMatrix3(t),this.setXYZ(e,ln.x,ln.y,ln.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)ln.fromBufferAttribute(this,e),ln.applyMatrix4(t),this.setXYZ(e,ln.x,ln.y,ln.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)ln.fromBufferAttribute(this,e),ln.applyNormalMatrix(t),this.setXYZ(e,ln.x,ln.y,ln.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)ln.fromBufferAttribute(this,e),ln.transformDirection(t),this.setXYZ(e,ln.x,ln.y,ln.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let i=this.array[t*this.itemSize+e];return this.normalized&&(i=Xi(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=Yi(i,this.array)),this.array[t*this.itemSize+e]=i,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Xi(e,this.array)),e}setX(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Xi(e,this.array)),e}setY(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Xi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Xi(e,this.array)),e}setW(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,s){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=s,this}setXYZW(t,e,i,s,r){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array),r=Yi(r,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=s,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==_i&&(t.usage=this.usage),t}}class pn extends dn{constructor(t,e,i){super(new Int8Array(t),e,i)}}class mn extends dn{constructor(t,e,i){super(new Uint8Array(t),e,i)}}class yn extends dn{constructor(t,e,i){super(new Uint8ClampedArray(t),e,i)}}class gn extends dn{constructor(t,e,i){super(new Int16Array(t),e,i)}}class fn extends dn{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class xn extends dn{constructor(t,e,i){super(new Int32Array(t),e,i)}}class bn extends dn{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class vn extends dn{constructor(t,e,i){super(new Uint16Array(t),e,i),this.isFloat16BufferAttribute=!0}getX(t){let e=on(this.array[t*this.itemSize]);return this.normalized&&(e=Xi(e,this.array)),e}setX(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize]=an(e),this}getY(t){let e=on(this.array[t*this.itemSize+1]);return this.normalized&&(e=Xi(e,this.array)),e}setY(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+1]=an(e),this}getZ(t){let e=on(this.array[t*this.itemSize+2]);return this.normalized&&(e=Xi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+2]=an(e),this}getW(t){let e=on(this.array[t*this.itemSize+3]);return this.normalized&&(e=Xi(e,this.array)),e}setW(t,e){return this.normalized&&(e=Yi(e,this.array)),this.array[t*this.itemSize+3]=an(e),this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array)),this.array[t+0]=an(e),this.array[t+1]=an(i),this}setXYZ(t,e,i,s){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array)),this.array[t+0]=an(e),this.array[t+1]=an(i),this.array[t+2]=an(s),this}setXYZW(t,e,i,s,r){return t*=this.itemSize,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array),r=Yi(r,this.array)),this.array[t+0]=an(e),this.array[t+1]=an(i),this.array[t+2]=an(s),this.array[t+3]=an(r),this}}class wn extends dn{constructor(t,e,i){super(new Float32Array(t),e,i)}}let Mn=0;const Sn=new ar,_n=new Er,An=new Bs,Tn=new Es,zn=new Es,Cn=new Bs;class In extends Li{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Mn++}),this.uuid=Di(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Ki(t)?bn:fn)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(void 0!==i){const e=(new $i).getNormalMatrix(t);i.applyNormalMatrix(e),i.needsUpdate=!0}const s=this.attributes.tangent;return void 0!==s&&(s.transformDirection(t),s.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Sn.makeRotationFromQuaternion(t),this.applyMatrix4(Sn),this}rotateX(t){return Sn.makeRotationX(t),this.applyMatrix4(Sn),this}rotateY(t){return Sn.makeRotationY(t),this.applyMatrix4(Sn),this}rotateZ(t){return Sn.makeRotationZ(t),this.applyMatrix4(Sn),this}translate(t,e,i){return Sn.makeTranslation(t,e,i),this.applyMatrix4(Sn),this}scale(t,e,i){return Sn.makeScale(t,e,i),this.applyMatrix4(Sn),this}lookAt(t){return _n.lookAt(t),_n.updateMatrix(),this.applyMatrix4(_n.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(An).negate(),this.translate(An.x,An.y,An.z),this}setFromPoints(t){const e=this.getAttribute("position");if(void 0===e){const e=[];for(let i=0,s=t.length;i<s;i++){const s=t[i];e.push(s.x,s.y,s.z||0)}this.setAttribute("position",new wn(e,3))}else{const i=Math.min(t.length,e.count);for(let s=0;s<i;s++){const i=t[s];e.setXYZ(s,i.x,i.y,i.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Es);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new Bs(-1/0,-1/0,-1/0),new Bs(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];Tn.setFromBufferAttribute(i),this.morphTargetsRelative?(Cn.addVectors(this.boundingBox.min,Tn.min),this.boundingBox.expandByPoint(Cn),Cn.addVectors(this.boundingBox.max,Tn.max),this.boundingBox.expandByPoint(Cn)):(this.boundingBox.expandByPoint(Tn.min),this.boundingBox.expandByPoint(Tn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new $s);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new Bs,1/0);if(t){const i=this.boundingSphere.center;if(Tn.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];zn.setFromBufferAttribute(i),this.morphTargetsRelative?(Cn.addVectors(Tn.min,zn.min),Tn.expandByPoint(Cn),Cn.addVectors(Tn.max,zn.max),Tn.expandByPoint(Cn)):(Tn.expandByPoint(zn.min),Tn.expandByPoint(zn.max))}Tn.getCenter(i);let s=0;for(let e=0,r=t.count;e<r;e++)Cn.fromBufferAttribute(t,e),s=Math.max(s,i.distanceToSquared(Cn));if(e)for(let r=0,n=e.length;r<n;r++){const n=e[r],a=this.morphTargetsRelative;for(let e=0,r=n.count;e<r;e++)Cn.fromBufferAttribute(n,e),a&&(An.fromBufferAttribute(t,e),Cn.add(An)),s=Math.max(s,i.distanceToSquared(Cn))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const i=e.position,s=e.normal,r=e.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new dn(new Float32Array(4*i.count),4));const n=this.getAttribute("tangent"),a=[],o=[];for(let t=0;t<i.count;t++)a[t]=new Bs,o[t]=new Bs;const h=new Bs,l=new Bs,c=new Bs,u=new Gi,d=new Gi,p=new Gi,m=new Bs,y=new Bs;function g(t,e,s){h.fromBufferAttribute(i,t),l.fromBufferAttribute(i,e),c.fromBufferAttribute(i,s),u.fromBufferAttribute(r,t),d.fromBufferAttribute(r,e),p.fromBufferAttribute(r,s),l.sub(h),c.sub(h),d.sub(u),p.sub(u);const n=1/(d.x*p.y-p.x*d.y);isFinite(n)&&(m.copy(l).multiplyScalar(p.y).addScaledVector(c,-d.y).multiplyScalar(n),y.copy(c).multiplyScalar(d.x).addScaledVector(l,-p.x).multiplyScalar(n),a[t].add(m),a[e].add(m),a[s].add(m),o[t].add(y),o[e].add(y),o[s].add(y))}let f=this.groups;0===f.length&&(f=[{start:0,count:t.count}]);for(let e=0,i=f.length;e<i;++e){const i=f[e],s=i.start;for(let e=s,r=s+i.count;e<r;e+=3)g(t.getX(e+0),t.getX(e+1),t.getX(e+2))}const x=new Bs,b=new Bs,v=new Bs,w=new Bs;function M(t){v.fromBufferAttribute(s,t),w.copy(v);const e=a[t];x.copy(e),x.sub(v.multiplyScalar(v.dot(e))).normalize(),b.crossVectors(w,e);const i=b.dot(o[t])<0?-1:1;n.setXYZW(t,x.x,x.y,x.z,i)}for(let e=0,i=f.length;e<i;++e){const i=f[e],s=i.start;for(let e=s,r=s+i.count;e<r;e+=3)M(t.getX(e+0)),M(t.getX(e+1)),M(t.getX(e+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let i=this.getAttribute("normal");if(void 0===i)i=new dn(new Float32Array(3*e.count),3),this.setAttribute("normal",i);else for(let t=0,e=i.count;t<e;t++)i.setXYZ(t,0,0,0);const s=new Bs,r=new Bs,n=new Bs,a=new Bs,o=new Bs,h=new Bs,l=new Bs,c=new Bs;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);s.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),n.fromBufferAttribute(e,m),l.subVectors(n,r),c.subVectors(s,r),l.cross(c),a.fromBufferAttribute(i,d),o.fromBufferAttribute(i,p),h.fromBufferAttribute(i,m),a.add(l),o.add(l),h.add(l),i.setXYZ(d,a.x,a.y,a.z),i.setXYZ(p,o.x,o.y,o.z),i.setXYZ(m,h.x,h.y,h.z)}else for(let t=0,a=e.count;t<a;t+=3)s.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),n.fromBufferAttribute(e,t+2),l.subVectors(n,r),c.subVectors(s,r),l.cross(c),i.setXYZ(t+0,l.x,l.y,l.z),i.setXYZ(t+1,l.x,l.y,l.z),i.setXYZ(t+2,l.x,l.y,l.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)Cn.fromBufferAttribute(t,e),Cn.normalize(),t.setXYZ(e,Cn.x,Cn.y,Cn.z)}toNonIndexed(){function t(t,e){const i=t.array,s=t.itemSize,r=t.normalized,n=new i.constructor(e.length*s);let a=0,o=0;for(let r=0,h=e.length;r<h;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*s;for(let t=0;t<s;t++)n[o++]=i[a++]}return new dn(n,s,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new In,i=this.index.array,s=this.attributes;for(const r in s){const n=t(s[r],i);e.setAttribute(r,n)}const r=this.morphAttributes;for(const s in r){const n=[],a=r[s];for(let e=0,s=a.length;e<s;e++){const s=t(a[e],i);n.push(s)}e.morphAttributes[s]=n}e.morphTargetsRelative=this.morphTargetsRelative;const n=this.groups;for(let t=0,i=n.length;t<i;t++){const i=n[t];e.addGroup(i.start,i.count,i.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const e in i){const s=i[e];t.data.attributes[e]=s.toJSON(t.data)}const s={};let r=!1;for(const e in this.morphAttributes){const i=this.morphAttributes[e],n=[];for(let e=0,s=i.length;e<s;e++){const s=i[e];n.push(s.toJSON(t.data))}n.length>0&&(s[e]=n,r=!0)}r&&(t.data.morphAttributes=s,t.data.morphTargetsRelative=this.morphTargetsRelative);const n=this.groups;n.length>0&&(t.data.groups=JSON.parse(JSON.stringify(n)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;null!==i&&this.setIndex(i.clone(e));const s=t.attributes;for(const t in s){const i=s[t];this.setAttribute(t,i.clone(e))}const r=t.morphAttributes;for(const t in r){const i=[],s=r[t];for(let t=0,r=s.length;t<r;t++)i.push(s[t].clone(e));this.morphAttributes[t]=i}this.morphTargetsRelative=t.morphTargetsRelative;const n=t.groups;for(let t=0,e=n.length;t<e;t++){const e=n[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Bn=new ar,kn=new nr,Rn=new $s,En=new Bs,Pn=new Bs,On=new Bs,Fn=new Bs,Nn=new Bs,Ln=new Bs,Vn=new Bs,jn=new Bs;class Un extends Er{constructor(t=new In,e=new sn){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}getVertexPosition(t,e){const i=this.geometry,s=i.attributes.position,r=i.morphAttributes.position,n=i.morphTargetsRelative;e.fromBufferAttribute(s,t);const a=this.morphTargetInfluences;if(r&&a){Ln.set(0,0,0);for(let i=0,s=r.length;i<s;i++){const s=a[i],o=r[i];0!==s&&(Nn.fromBufferAttribute(o,t),n?Ln.addScaledVector(Nn,s):Ln.addScaledVector(Nn.sub(e),s))}e.add(Ln)}return e}raycast(t,e){const i=this.geometry,s=this.material,r=this.matrixWorld;if(void 0!==s){if(null===i.boundingSphere&&i.computeBoundingSphere(),Rn.copy(i.boundingSphere),Rn.applyMatrix4(r),kn.copy(t.ray).recast(t.near),!1===Rn.containsPoint(kn.origin)){if(null===kn.intersectSphere(Rn,En))return;if(kn.origin.distanceToSquared(En)>(t.far-t.near)**2)return}Bn.copy(r).invert(),kn.copy(t.ray).applyMatrix4(Bn),null!==i.boundingBox&&!1===kn.intersectsBox(i.boundingBox)||this._computeIntersections(t,e,kn)}}_computeIntersections(t,e,i){let s;const r=this.geometry,n=this.material,a=r.index,o=r.attributes.position,h=r.attributes.uv,l=r.attributes.uv1,c=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==a)if(Array.isArray(n))for(let r=0,o=u.length;r<o;r++){const o=u[r],p=n[o.materialIndex];for(let r=Math.max(o.start,d.start),n=Math.min(a.count,Math.min(o.start+o.count,d.start+d.count));r<n;r+=3){s=Wn(this,p,t,i,h,l,c,a.getX(r),a.getX(r+1),a.getX(r+2)),s&&(s.faceIndex=Math.floor(r/3),s.face.materialIndex=o.materialIndex,e.push(s))}}else{for(let r=Math.max(0,d.start),o=Math.min(a.count,d.start+d.count);r<o;r+=3){s=Wn(this,n,t,i,h,l,c,a.getX(r),a.getX(r+1),a.getX(r+2)),s&&(s.faceIndex=Math.floor(r/3),e.push(s))}}else if(void 0!==o)if(Array.isArray(n))for(let r=0,a=u.length;r<a;r++){const a=u[r],p=n[a.materialIndex];for(let r=Math.max(a.start,d.start),n=Math.min(o.count,Math.min(a.start+a.count,d.start+d.count));r<n;r+=3){s=Wn(this,p,t,i,h,l,c,r,r+1,r+2),s&&(s.faceIndex=Math.floor(r/3),s.face.materialIndex=a.materialIndex,e.push(s))}}else{for(let r=Math.max(0,d.start),a=Math.min(o.count,d.start+d.count);r<a;r+=3){s=Wn(this,n,t,i,h,l,c,r,r+1,r+2),s&&(s.faceIndex=Math.floor(r/3),e.push(s))}}}}function Wn(t,e,i,s,r,n,a,o,h,l){t.getVertexPosition(o,Pn),t.getVertexPosition(h,On),t.getVertexPosition(l,Fn);const c=function(t,e,i,s,r,n,a,o){let h;if(h=1===e.side?s.intersectTriangle(a,n,r,!0,o):s.intersectTriangle(r,n,a,0===e.side,o),null===h)return null;jn.copy(o),jn.applyMatrix4(t.matrixWorld);const l=i.ray.origin.distanceTo(jn);return l<i.near||l>i.far?null:{distance:l,point:jn.clone(),object:t}}(t,e,i,s,Pn,On,Fn,Vn);if(c){const t=new Bs;Xr.getBarycoord(Vn,Pn,On,Fn,t),r&&(c.uv=Xr.getInterpolatedAttribute(r,o,h,l,t,new Gi)),n&&(c.uv1=Xr.getInterpolatedAttribute(n,o,h,l,t,new Gi)),a&&(c.normal=Xr.getInterpolatedAttribute(a,o,h,l,t,new Bs),c.normal.dot(s.direction)>0&&c.normal.multiplyScalar(-1));const e={a:o,b:h,c:l,normal:new Bs,materialIndex:0};Xr.getNormal(Pn,On,Fn,e.normal),c.face=e,c.barycoord=t}return c}class Dn extends In{constructor(t=1,e=1,i=1,s=1,r=1,n=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:s,heightSegments:r,depthSegments:n};const a=this;s=Math.floor(s),r=Math.floor(r),n=Math.floor(n);const o=[],h=[],l=[],c=[];let u=0,d=0;function p(t,e,i,s,r,n,p,m,y,g,f){const x=n/y,b=p/g,v=n/2,w=p/2,M=m/2,S=y+1,_=g+1;let A=0,T=0;const z=new Bs;for(let n=0;n<_;n++){const a=n*b-w;for(let o=0;o<S;o++){const u=o*x-v;z[t]=u*s,z[e]=a*r,z[i]=M,h.push(z.x,z.y,z.z),z[t]=0,z[e]=0,z[i]=m>0?1:-1,l.push(z.x,z.y,z.z),c.push(o/y),c.push(1-n/g),A+=1}}for(let t=0;t<g;t++)for(let e=0;e<y;e++){const i=u+e+S*t,s=u+e+S*(t+1),r=u+(e+1)+S*(t+1),n=u+(e+1)+S*t;o.push(i,s,n),o.push(s,r,n),T+=6}a.addGroup(d,T,f),d+=T,u+=A}p("z","y","x",-1,-1,i,e,t,n,r,0),p("z","y","x",1,-1,i,e,-t,n,r,1),p("x","z","y",1,1,t,i,e,s,n,2),p("x","z","y",1,-1,t,i,-e,s,n,3),p("x","y","z",1,-1,t,e,i,s,r,4),p("x","y","z",-1,-1,t,e,-i,s,r,5),this.setIndex(o),this.setAttribute("position",new wn(h,3)),this.setAttribute("normal",new wn(l,3)),this.setAttribute("uv",new wn(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Dn(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Hn(t){const e={};for(const i in t){e[i]={};for(const s in t[i]){const r=t[i][s];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[i][s]=null):e[i][s]=r.clone():Array.isArray(r)?e[i][s]=r.slice():e[i][s]=r}}return e}function qn(t){const e={};for(let i=0;i<t.length;i++){const s=Hn(t[i]);for(const t in s)e[t]=s[t]}return e}function Jn(t){const e=t.getRenderTarget();return null===e?t.outputColorSpace:!0===e.isXRRenderTarget?e.texture.colorSpace:ds.workingColorSpace}const Xn={clone:Hn,merge:qn};class Yn extends en{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Hn(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let i=0;i<t.length;i++)e.push(t[i].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const s=this.uniforms[i].value;s&&s.isTexture?e.uniforms[i]={type:"t",value:s.toJSON(t).uuid}:s&&s.isColor?e.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?e.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?e.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?e.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?e.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?e.uniforms[i]={type:"m4",value:s.toArray()}:e.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const i={};for(const t in this.extensions)!0===this.extensions[t]&&(i[t]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class Zn extends Er{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ar,this.projectionMatrix=new ar,this.projectionMatrixInverse=new ar,this.coordinateSystem=Oi}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const Gn=new Bs,$n=new Gi,Qn=new Gi;class Kn extends Zn{constructor(t=50,e=1,i=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=s,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Wi*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*Ui*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*Wi*Math.atan(Math.tan(.5*Ui*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,i){Gn.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Gn.x,Gn.y).multiplyScalar(-t/Gn.z),Gn.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(Gn.x,Gn.y).multiplyScalar(-t/Gn.z)}getViewSize(t,e){return this.getViewBounds(t,$n,Qn),e.subVectors(Qn,$n)}setViewOffset(t,e,i,s,r,n){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=n,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*Ui*this.fov)/this.zoom,i=2*e,s=this.aspect*i,r=-.5*s;const n=this.view;if(null!==this.view&&this.view.enabled){const t=n.fullWidth,a=n.fullHeight;r+=n.offsetX*s/t,e-=n.offsetY*i/a,s*=n.width/t,i*=n.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,e,e-i,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ta=-90;class ea extends Er{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Kn(ta,1,t,e);s.layers=this.layers,this.add(s);const r=new Kn(ta,1,t,e);r.layers=this.layers,this.add(r);const n=new Kn(ta,1,t,e);n.layers=this.layers,this.add(n);const a=new Kn(ta,1,t,e);a.layers=this.layers,this.add(a);const o=new Kn(ta,1,t,e);o.layers=this.layers,this.add(o);const h=new Kn(ta,1,t,e);h.layers=this.layers,this.add(h)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[i,s,r,n,a,o]=e;for(const t of e)this.remove(t);if(t===Oi)i.up.set(0,1,0),i.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),n.up.set(0,0,1),n.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(t!==Fi)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);i.up.set(0,-1,0),i.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),n.up.set(0,0,-1),n.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const t of e)this.add(t),t.updateMatrixWorld()}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:s}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,n,a,o,h,l]=this.children,c=t.getRenderTarget(),u=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const m=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0,s),t.render(e,r),t.setRenderTarget(i,1,s),t.render(e,n),t.setRenderTarget(i,2,s),t.render(e,a),t.setRenderTarget(i,3,s),t.render(e,o),t.setRenderTarget(i,4,s),t.render(e,h),i.texture.generateMipmaps=m,t.setRenderTarget(i,5,s),t.render(e,l),t.setRenderTarget(c,u,d),t.xr.enabled=p,i.texture.needsPMREMUpdate=!0}}class ia extends ws{constructor(t,e,i,s,r,n,a,o,h,l){super(t=void 0!==t?t:[],e=void 0!==e?e:ht,i,s,r,n,a,o,h,l),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class sa extends _s{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},s=[i,i,i,i,i,i];this.texture=new ia(s,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:wt}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},s=new Dn(5,5,5),r=new Yn({name:"CubemapFromEquirect",uniforms:Hn(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;const n=new Un(s,r),a=e.minFilter;e.minFilter===_t&&(e.minFilter=wt);return new ea(1,10,this).update(t,n),e.minFilter=a,n.geometry.dispose(),n.material.dispose(),this}clear(t,e,i,s){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,i,s);t.setRenderTarget(r)}}class ra extends Er{constructor(){super(),this.isGroup=!0,this.type="Group"}}const na={type:"move"};class aa{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new ra,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new ra,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Bs,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Bs),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new ra,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Bs,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Bs),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,i){let s=null,r=null,n=null;const a=this._targetRay,o=this._grip,h=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(h&&t.hand){n=!0;for(const s of t.hand.values()){const t=e.getJointPose(s,i),r=this._getHandJoint(h,s);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=t.radius),r.visible=null!==t}const s=h.joints["index-finger-tip"],r=h.joints["thumb-tip"],a=s.position.distanceTo(r.position),o=.02,l=.005;h.inputState.pinching&&a>o+l?(h.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!h.inputState.pinching&&a<=o-l&&(h.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,i),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==a&&(s=e.getPose(t.targetRaySpace,i),null===s&&null!==r&&(s=r),null!==s&&(a.matrix.fromArray(s.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,s.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(s.linearVelocity)):a.hasLinearVelocity=!1,s.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(s.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(na)))}return null!==a&&(a.visible=null!==s),null!==o&&(o.visible=null!==r),null!==h&&(h.visible=null!==n),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const i=new ra;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}class oa{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new Qr(t),this.density=e}clone(){return new oa(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class ha{constructor(t,e=1,i=1e3){this.isFog=!0,this.name="",this.color=new Qr(t),this.near=e,this.far=i}clone(){return new ha(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class la extends Er{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new gr,this.environmentIntensity=1,this.environmentRotation=new gr,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class ca{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=_i,this.updateRanges=[],this.version=0,this.uuid=Di()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let s=0,r=this.stride;s<r;s++)this.array[t+s]=e.array[i+s];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Di()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Di()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const ua=new Bs;class da{constructor(t,e,i,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)ua.fromBufferAttribute(this,e),ua.applyMatrix4(t),this.setXYZ(e,ua.x,ua.y,ua.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)ua.fromBufferAttribute(this,e),ua.applyNormalMatrix(t),this.setXYZ(e,ua.x,ua.y,ua.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)ua.fromBufferAttribute(this,e),ua.transformDirection(t),this.setXYZ(e,ua.x,ua.y,ua.z);return this}getComponent(t,e){let i=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(i=Xi(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=Yi(i,this.array)),this.data.array[t*this.data.stride+this.offset+e]=i,this}setX(t,e){return this.normalized&&(e=Yi(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Yi(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Yi(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Yi(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Xi(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Xi(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Xi(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Xi(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=s,this}setXYZW(t,e,i,s,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=Yi(e,this.array),i=Yi(i,this.array),s=Yi(s,this.array),r=Yi(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=s,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return new dn(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new da(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class pa extends en{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Qr(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let ma;const ya=new Bs,ga=new Bs,fa=new Bs,xa=new Gi,ba=new Gi,va=new ar,wa=new Bs,Ma=new Bs,Sa=new Bs,_a=new Gi,Aa=new Gi,Ta=new Gi;class za extends Er{constructor(t=new pa){if(super(),this.isSprite=!0,this.type="Sprite",void 0===ma){ma=new In;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new ca(t,5);ma.setIndex([0,1,2,0,2,3]),ma.setAttribute("position",new da(e,3,0,!1)),ma.setAttribute("uv",new da(e,2,3,!1))}this.geometry=ma,this.material=t,this.center=new Gi(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ga.setFromMatrixScale(this.matrixWorld),va.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),fa.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&ga.multiplyScalar(-fa.z);const i=this.material.rotation;let s,r;0!==i&&(r=Math.cos(i),s=Math.sin(i));const n=this.center;Ca(wa.set(-.5,-.5,0),fa,n,ga,s,r),Ca(Ma.set(.5,-.5,0),fa,n,ga,s,r),Ca(Sa.set(.5,.5,0),fa,n,ga,s,r),_a.set(0,0),Aa.set(1,0),Ta.set(1,1);let a=t.ray.intersectTriangle(wa,Ma,Sa,!1,ya);if(null===a&&(Ca(Ma.set(-.5,.5,0),fa,n,ga,s,r),Aa.set(0,1),a=t.ray.intersectTriangle(wa,Sa,Ma,!1,ya),null===a))return;const o=t.ray.origin.distanceTo(ya);o<t.near||o>t.far||e.push({distance:o,point:ya.clone(),uv:Xr.getInterpolation(ya,wa,Ma,Sa,_a,Aa,Ta,new Gi),face:null,object:this})}copy(t,e){return super.copy(t,e),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function Ca(t,e,i,s,r,n){xa.subVectors(t,i).addScalar(.5).multiply(s),void 0!==r?(ba.x=n*xa.x-r*xa.y,ba.y=r*xa.x+n*xa.y):ba.copy(xa),t.copy(e),t.x+=ba.x,t.y+=ba.y,t.applyMatrix4(va)}const Ia=new Bs,Ba=new Bs;class ka extends Er{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,i=e.length;t<i;t++){const i=e[t];this.addLevel(i.object.clone(),i.distance,i.hysteresis)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0,i=0){e=Math.abs(e);const s=this.levels;let r;for(r=0;r<s.length&&!(e<s[r].distance);r++);return s.splice(r,0,{distance:e,hysteresis:i,object:t}),this.add(t),this}removeLevel(t){const e=this.levels;for(let i=0;i<e.length;i++)if(e[i].distance===t){const t=e.splice(i,1);return this.remove(t[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let i,s;for(i=1,s=e.length;i<s;i++){let s=e[i].distance;if(e[i].object.visible&&(s-=s*e[i].hysteresis),t<s)break}return e[i-1].object}return null}raycast(t,e){if(this.levels.length>0){Ia.setFromMatrixPosition(this.matrixWorld);const i=t.ray.origin.distanceTo(Ia);this.getObjectForDistance(i).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Ia.setFromMatrixPosition(t.matrixWorld),Ba.setFromMatrixPosition(this.matrixWorld);const i=Ia.distanceTo(Ba)/t.zoom;let s,r;for(e[0].object.visible=!0,s=1,r=e.length;s<r;s++){let t=e[s].distance;if(e[s].object.visible&&(t-=t*e[s].hysteresis),!(i>=t))break;e[s-1].object.visible=!1,e[s].object.visible=!0}for(this._currentLevel=s-1;s<r;s++)e[s].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const i=this.levels;for(let t=0,s=i.length;t<s;t++){const s=i[t];e.object.levels.push({object:s.object.uuid,distance:s.distance,hysteresis:s.hysteresis})}return e}}const Ra=new Bs,Ea=new Ms,Pa=new Ms,Oa=new Bs,Fa=new ar,Na=new Bs,La=new $s,Va=new ar,ja=new nr;class Ua extends Un{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=nt,this.bindMatrix=new ar,this.bindMatrixInverse=new ar,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const t=this.geometry;null===this.boundingBox&&(this.boundingBox=new Es),this.boundingBox.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Na),this.boundingBox.expandByPoint(Na)}computeBoundingSphere(){const t=this.geometry;null===this.boundingSphere&&(this.boundingSphere=new $s),this.boundingSphere.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Na),this.boundingSphere.expandByPoint(Na)}copy(t,e){return super.copy(t,e),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}raycast(t,e){const i=this.material,s=this.matrixWorld;void 0!==i&&(null===this.boundingSphere&&this.computeBoundingSphere(),La.copy(this.boundingSphere),La.applyMatrix4(s),!1!==t.ray.intersectsSphere(La)&&(Va.copy(s).invert(),ja.copy(t.ray).applyMatrix4(Va),null!==this.boundingBox&&!1===ja.intersectsBox(this.boundingBox)||this._computeIntersections(t,e,ja)))}getVertexPosition(t,e){return super.getVertexPosition(t,e),this.applyBoneTransform(t,e),e}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Ms,e=this.geometry.attributes.skinWeight;for(let i=0,s=e.count;i<s;i++){t.fromBufferAttribute(e,i);const s=1/t.manhattanLength();s!==1/0?t.multiplyScalar(s):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),this.bindMode===nt?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===at?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(t,e){const i=this.skeleton,s=this.geometry;Ea.fromBufferAttribute(s.attributes.skinIndex,t),Pa.fromBufferAttribute(s.attributes.skinWeight,t),Ra.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const s=Pa.getComponent(t);if(0!==s){const r=Ea.getComponent(t);Fa.multiplyMatrices(i.bones[r].matrixWorld,i.boneInverses[r]),e.addScaledVector(Oa.copy(Ra).applyMatrix4(Fa),s)}}return e.applyMatrix4(this.bindMatrixInverse)}}class Wa extends Er{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Da extends ws{constructor(t=null,e=1,i=1,s,r,n,a,o,h=1003,l=1003,c,u){super(null,n,a,o,h,l,s,r,c,u),this.isDataTexture=!0,this.image={data:t,width:e,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Ha=new ar,qa=new ar;class Ja{constructor(t=[],e=[]){this.uuid=Di(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new ar)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new ar;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,i=this.boneMatrices,s=this.boneTexture;for(let s=0,r=t.length;s<r;s++){const r=t[s]?t[s].matrixWorld:qa;Ha.multiplyMatrices(r,e[s]),Ha.toArray(i,16*s)}null!==s&&(s.needsUpdate=!0)}clone(){return new Ja(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const i=new Da(e,t,t,jt,Rt);return i.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=i,this}getBoneByName(t){for(let e=0,i=this.bones.length;e<i;e++){const i=this.bones[e];if(i.name===t)return i}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let i=0,s=t.bones.length;i<s;i++){const s=t.bones[i];let r=e[s];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",s),r=new Wa),this.bones.push(r),this.boneInverses.push((new ar).fromArray(t.boneInverses[i]))}return this.init(),this}toJSON(){const t={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,i=this.boneInverses;for(let s=0,r=e.length;s<r;s++){const r=e[s];t.bones.push(r.uuid);const n=i[s];t.boneInverses.push(n.toArray())}return t}}class Xa extends dn{constructor(t,e,i,s=1){super(t,e,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Ya=new ar,Za=new ar,Ga=[],$a=new Es,Qa=new ar,Ka=new Un,to=new $s;class eo extends Un{constructor(t,e,i){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new Xa(new Float32Array(16*i),16),this.instanceColor=null,this.morphTexture=null,this.count=i,this.boundingBox=null,this.boundingSphere=null;for(let t=0;t<i;t++)this.setMatrixAt(t,Qa)}computeBoundingBox(){const t=this.geometry,e=this.count;null===this.boundingBox&&(this.boundingBox=new Es),null===t.boundingBox&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let i=0;i<e;i++)this.getMatrixAt(i,Ya),$a.copy(t.boundingBox).applyMatrix4(Ya),this.boundingBox.union($a)}computeBoundingSphere(){const t=this.geometry,e=this.count;null===this.boundingSphere&&(this.boundingSphere=new $s),null===t.boundingSphere&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let i=0;i<e;i++)this.getMatrixAt(i,Ya),to.copy(t.boundingSphere).applyMatrix4(Ya),this.boundingSphere.union(to)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),null!==t.morphTexture&&(this.morphTexture=t.morphTexture.clone()),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}getMorphAt(t,e){const i=e.morphTargetInfluences,s=this.morphTexture.source.data.data,r=t*(i.length+1)+1;for(let t=0;t<i.length;t++)i[t]=s[r+t]}raycast(t,e){const i=this.matrixWorld,s=this.count;if(Ka.geometry=this.geometry,Ka.material=this.material,void 0!==Ka.material&&(null===this.boundingSphere&&this.computeBoundingSphere(),to.copy(this.boundingSphere),to.applyMatrix4(i),!1!==t.ray.intersectsSphere(to)))for(let r=0;r<s;r++){this.getMatrixAt(r,Ya),Za.multiplyMatrices(i,Ya),Ka.matrixWorld=Za,Ka.raycast(t,Ga);for(let t=0,i=Ga.length;t<i;t++){const i=Ga[t];i.instanceId=r,i.object=this,e.push(i)}Ga.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Xa(new Float32Array(3*this.instanceMatrix.count).fill(1),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}setMorphAt(t,e){const i=e.morphTargetInfluences,s=i.length+1;null===this.morphTexture&&(this.morphTexture=new Da(new Float32Array(s*this.count),s,this.count,qt,Rt));const r=this.morphTexture.source.data.data;let n=0;for(let t=0;t<i.length;t++)n+=i[t];const a=this.geometry.morphTargetsRelative?1:1-n,o=s*t;r[o]=a,r.set(i,o+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),null!==this.morphTexture&&(this.morphTexture.dispose(),this.morphTexture=null),this}}const io=new Bs,so=new Bs,ro=new $i;class no{constructor(t=new Bs(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,s){return this.normal.set(t,e,i),this.constant=s,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const s=io.subVectors(i,e).cross(so.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const i=t.delta(io),s=this.normal.dot(i);if(0===s)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:e.copy(t.start).addScaledVector(i,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||ro.getNormalMatrix(t),s=this.coplanarPoint(io).applyMatrix4(t),r=this.normal.applyMatrix3(i).normalize();return this.constant=-s.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const ao=new $s,oo=new Bs;class ho{constructor(t=new no,e=new no,i=new no,s=new no,r=new no,n=new no){this.planes=[t,e,i,s,r,n]}set(t,e,i,s,r,n){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(s),a[4].copy(r),a[5].copy(n),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t,e=2e3){const i=this.planes,s=t.elements,r=s[0],n=s[1],a=s[2],o=s[3],h=s[4],l=s[5],c=s[6],u=s[7],d=s[8],p=s[9],m=s[10],y=s[11],g=s[12],f=s[13],x=s[14],b=s[15];if(i[0].setComponents(o-r,u-h,y-d,b-g).normalize(),i[1].setComponents(o+r,u+h,y+d,b+g).normalize(),i[2].setComponents(o+n,u+l,y+p,b+f).normalize(),i[3].setComponents(o-n,u-l,y-p,b-f).normalize(),i[4].setComponents(o-a,u-c,y-m,b-x).normalize(),e===Oi)i[5].setComponents(o+a,u+c,y+m,b+x).normalize();else{if(e!==Fi)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);i[5].setComponents(a,c,m,x).normalize()}return this}intersectsObject(t){if(void 0!==t.boundingSphere)null===t.boundingSphere&&t.computeBoundingSphere(),ao.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),ao.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(ao)}intersectsSprite(t){return ao.center.set(0,0,0),ao.radius=.7071067811865476,ao.applyMatrix4(t.matrixWorld),this.intersectsSphere(ao)}intersectsSphere(t){const e=this.planes,i=t.center,s=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(i)<s)return!1}return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const s=e[i];if(oo.x=s.normal.x>0?t.max.x:t.min.x,oo.y=s.normal.y>0?t.max.y:t.min.y,oo.z=s.normal.z>0?t.max.z:t.min.z,s.distanceToPoint(oo)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function lo(t,e){return t-e}function co(t,e){return t.z-e.z}function uo(t,e){return e.z-t.z}class po{constructor(){this.index=0,this.pool=[],this.list=[]}push(t,e,i,s){const r=this.pool,n=this.list;this.index>=r.length&&r.push({start:-1,count:-1,z:-1,index:-1});const a=r[this.index];n.push(a),this.index++,a.start=t,a.count=e,a.z=i,a.index=s}reset(){this.list.length=0,this.index=0}}const mo=new ar,yo=new Qr(1,1,1),go=new ho,fo=new Es,xo=new $s,bo=new Bs,vo=new Bs,wo=new Bs,Mo=new po,So=new Un,_o=[];function Ao(t,e,i=0){const s=e.itemSize;if(t.isInterleavedBufferAttribute||t.array.constructor!==e.array.constructor){const r=t.count;for(let n=0;n<r;n++)for(let r=0;r<s;r++)e.setComponent(n+i,r,t.getComponent(n,r))}else e.array.set(t.array,i*s);e.needsUpdate=!0}function To(t,e){if(t.constructor!==e.constructor){const i=Math.min(t.length,e.length);for(let s=0;s<i;s++)e[s]=t[s]}else{const i=Math.min(t.length,e.length);e.set(new t.constructor(t.buffer,0,i))}}class zo extends Un{get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}constructor(t,e,i=2*e,s){super(new In,s),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=t,this._maxVertexCount=e,this._maxIndexCount=i,this._multiDrawCounts=new Int32Array(t),this._multiDrawStarts=new Int32Array(t),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let t=Math.sqrt(4*this._maxInstanceCount);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4),i=new Da(e,t,t,jt,Rt);this._matricesTexture=i}_initIndirectTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Uint32Array(t*t),i=new Da(e,t,t,Jt,kt);this._indirectTexture=i}_initColorsTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Float32Array(t*t*4).fill(1),i=new Da(e,t,t,jt,Rt);i.colorSpace=ds.workingColorSpace,this._colorsTexture=i}_initializeGeometry(t){const e=this.geometry,i=this._maxVertexCount,s=this._maxIndexCount;if(!1===this._geometryInitialized){for(const s in t.attributes){const r=t.getAttribute(s),{array:n,itemSize:a,normalized:o}=r,h=new n.constructor(i*a),l=new dn(h,a,o);e.setAttribute(s,l)}if(null!==t.getIndex()){const t=i>65535?new Uint32Array(s):new Uint16Array(s);e.setIndex(new dn(t,1))}this._geometryInitialized=!0}}_validateGeometry(t){const e=this.geometry;if(Boolean(t.getIndex())!==Boolean(e.getIndex()))throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const i in e.attributes){if(!t.hasAttribute(i))throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);const s=t.getAttribute(i),r=e.getAttribute(i);if(s.itemSize!==r.itemSize||s.normalized!==r.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(t){const e=this._instanceInfo;if(t<0||t>=e.length||!1===e[t].active)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${t}. Instance is either out of range or has been deleted.`)}validateGeometryId(t){const e=this._geometryInfo;if(t<0||t>=e.length||!1===e[t].active)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${t}. Geometry is either out of range or has been deleted.`)}setCustomSort(t){return this.customSort=t,this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Es);const t=this.boundingBox,e=this._instanceInfo;t.makeEmpty();for(let i=0,s=e.length;i<s;i++){if(!1===e[i].active)continue;const s=e[i].geometryIndex;this.getMatrixAt(i,mo),this.getBoundingBoxAt(s,fo).applyMatrix4(mo),t.union(fo)}}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new $s);const t=this.boundingSphere,e=this._instanceInfo;t.makeEmpty();for(let i=0,s=e.length;i<s;i++){if(!1===e[i].active)continue;const s=e[i].geometryIndex;this.getMatrixAt(i,mo),this.getBoundingSphereAt(s,xo).applyMatrix4(mo),t.union(xo)}}addInstance(t){if(this._instanceInfo.length>=this.maxInstanceCount&&0===this._availableInstanceIds.length)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const e={visible:!0,active:!0,geometryIndex:t};let i=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(lo),i=this._availableInstanceIds.shift(),this._instanceInfo[i]=e):(i=this._instanceInfo.length,this._instanceInfo.push(e));const s=this._matricesTexture;mo.identity().toArray(s.image.data,16*i),s.needsUpdate=!0;const r=this._colorsTexture;return r&&(yo.toArray(r.image.data,4*i),r.needsUpdate=!0),this._visibilityChanged=!0,i}addGeometry(t,e=-1,i=-1){this._initializeGeometry(t),this._validateGeometry(t);const s={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},r=this._geometryInfo;s.vertexStart=this._nextVertexStart,s.reservedVertexCount=-1===e?t.getAttribute("position").count:e;const n=t.getIndex();if(null!==n&&(s.indexStart=this._nextIndexStart,s.reservedIndexCount=-1===i?n.count:i),-1!==s.indexStart&&s.indexStart+s.reservedIndexCount>this._maxIndexCount||s.vertexStart+s.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let a;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(lo),a=this._availableGeometryIds.shift(),r[a]=s):(a=this._geometryCount,this._geometryCount++,r.push(s)),this.setGeometryAt(a,t),this._nextIndexStart=s.indexStart+s.reservedIndexCount,this._nextVertexStart=s.vertexStart+s.reservedVertexCount,a}setGeometryAt(t,e){if(t>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(e);const i=this.geometry,s=null!==i.getIndex(),r=i.getIndex(),n=e.getIndex(),a=this._geometryInfo[t];if(s&&n.count>a.reservedIndexCount||e.attributes.position.count>a.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const o=a.vertexStart,h=a.reservedVertexCount;a.vertexCount=e.getAttribute("position").count;for(const t in i.attributes){const s=e.getAttribute(t),r=i.getAttribute(t);Ao(s,r,o);const n=s.itemSize;for(let t=s.count,e=h;t<e;t++){const e=o+t;for(let t=0;t<n;t++)r.setComponent(e,t,0)}r.needsUpdate=!0,r.addUpdateRange(o*n,h*n)}if(s){const t=a.indexStart,i=a.reservedIndexCount;a.indexCount=e.getIndex().count;for(let e=0;e<n.count;e++)r.setX(t+e,o+n.getX(e));for(let e=n.count,s=i;e<s;e++)r.setX(t+e,o);r.needsUpdate=!0,r.addUpdateRange(t,a.reservedIndexCount)}return a.start=s?a.indexStart:a.vertexStart,a.count=s?a.indexCount:a.vertexCount,a.boundingBox=null,null!==e.boundingBox&&(a.boundingBox=e.boundingBox.clone()),a.boundingSphere=null,null!==e.boundingSphere&&(a.boundingSphere=e.boundingSphere.clone()),this._visibilityChanged=!0,t}deleteGeometry(t){const e=this._geometryInfo;if(t>=e.length||!1===e[t].active)return this;const i=this._instanceInfo;for(let e=0,s=i.length;e<s;e++)i[e].active&&i[e].geometryIndex===t&&this.deleteInstance(e);return e[t].active=!1,this._availableGeometryIds.push(t),this._visibilityChanged=!0,this}deleteInstance(t){return this.validateInstanceId(t),this._instanceInfo[t].active=!1,this._availableInstanceIds.push(t),this._visibilityChanged=!0,this}optimize(){let t=0,e=0;const i=this._geometryInfo,s=i.map(((t,e)=>e)).sort(((t,e)=>i[t].vertexStart-i[e].vertexStart)),r=this.geometry;for(let n=0,a=i.length;n<a;n++){const a=s[n],o=i[a];if(!1!==o.active){if(null!==r.index){if(o.indexStart!==e){const{indexStart:i,vertexStart:s,reservedIndexCount:n}=o,a=r.index,h=a.array,l=t-s;for(let t=i;t<i+n;t++)h[t]=h[t]+l;a.array.copyWithin(e,i,i+n),a.addUpdateRange(e,n),o.indexStart=e}e+=o.reservedIndexCount}if(o.vertexStart!==t){const{vertexStart:e,reservedVertexCount:i}=o,s=r.attributes;for(const r in s){const n=s[r],{array:a,itemSize:o}=n;a.copyWithin(t*o,e*o,(e+i)*o),n.addUpdateRange(t*o,i*o)}o.vertexStart=t}t+=o.reservedVertexCount,o.start=r.index?o.indexStart:o.vertexStart,this._nextIndexStart=r.index?o.indexStart+o.reservedIndexCount:0,this._nextVertexStart=o.vertexStart+o.reservedVertexCount}}return this}getBoundingBoxAt(t,e){if(t>=this._geometryCount)return null;const i=this.geometry,s=this._geometryInfo[t];if(null===s.boundingBox){const t=new Es,e=i.index,r=i.attributes.position;for(let i=s.start,n=s.start+s.count;i<n;i++){let s=i;e&&(s=e.getX(s)),t.expandByPoint(bo.fromBufferAttribute(r,s))}s.boundingBox=t}return e.copy(s.boundingBox),e}getBoundingSphereAt(t,e){if(t>=this._geometryCount)return null;const i=this.geometry,s=this._geometryInfo[t];if(null===s.boundingSphere){const e=new $s;this.getBoundingBoxAt(t,fo),fo.getCenter(e.center);const r=i.index,n=i.attributes.position;let a=0;for(let t=s.start,i=s.start+s.count;t<i;t++){let i=t;r&&(i=r.getX(i)),bo.fromBufferAttribute(n,i),a=Math.max(a,e.center.distanceToSquared(bo))}e.radius=Math.sqrt(a),s.boundingSphere=e}return e.copy(s.boundingSphere),e}setMatrixAt(t,e){this.validateInstanceId(t);const i=this._matricesTexture,s=this._matricesTexture.image.data;return e.toArray(s,16*t),i.needsUpdate=!0,this}getMatrixAt(t,e){return this.validateInstanceId(t),e.fromArray(this._matricesTexture.image.data,16*t)}setColorAt(t,e){return this.validateInstanceId(t),null===this._colorsTexture&&this._initColorsTexture(),e.toArray(this._colorsTexture.image.data,4*t),this._colorsTexture.needsUpdate=!0,this}getColorAt(t,e){return this.validateInstanceId(t),e.fromArray(this._colorsTexture.image.data,4*t)}setVisibleAt(t,e){return this.validateInstanceId(t),this._instanceInfo[t].visible===e||(this._instanceInfo[t].visible=e,this._visibilityChanged=!0),this}getVisibleAt(t){return this.validateInstanceId(t),this._instanceInfo[t].visible}setGeometryIdAt(t,e){return this.validateInstanceId(t),this.validateGeometryId(e),this._instanceInfo[t].geometryIndex=e,this}getGeometryIdAt(t){return this.validateInstanceId(t),this._instanceInfo[t].geometryIndex}getGeometryRangeAt(t,e={}){this.validateGeometryId(t);const i=this._geometryInfo[t];return e.vertexStart=i.vertexStart,e.vertexCount=i.vertexCount,e.reservedVertexCount=i.reservedVertexCount,e.indexStart=i.indexStart,e.indexCount=i.indexCount,e.reservedIndexCount=i.reservedIndexCount,e.start=i.start,e.count=i.count,e}setInstanceCount(t){const e=this._availableInstanceIds,i=this._instanceInfo;for(e.sort(lo);e[e.length-1]===i.length;)i.pop(),e.pop();if(t<i.length)throw new Error(`BatchedMesh: Instance ids outside the range ${t} are being used. Cannot shrink instance count.`);const s=new Int32Array(t),r=new Int32Array(t);To(this._multiDrawCounts,s),To(this._multiDrawStarts,r),this._multiDrawCounts=s,this._multiDrawStarts=r,this._maxInstanceCount=t;const n=this._indirectTexture,a=this._matricesTexture,o=this._colorsTexture;n.dispose(),this._initIndirectTexture(),To(n.image.data,this._indirectTexture.image.data),a.dispose(),this._initMatricesTexture(),To(a.image.data,this._matricesTexture.image.data),o&&(o.dispose(),this._initColorsTexture(),To(o.image.data,this._colorsTexture.image.data))}setGeometrySize(t,e){const i=[...this._geometryInfo].filter((t=>t.active));if(Math.max(...i.map((t=>t.vertexStart+t.reservedVertexCount)))>t)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${e}. Cannot shrink further.`);if(this.geometry.index){if(Math.max(...i.map((t=>t.indexStart+t.reservedIndexCount)))>e)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${e}. Cannot shrink further.`)}const s=this.geometry;s.dispose(),this._maxVertexCount=t,this._maxIndexCount=e,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new In,this._initializeGeometry(s));const r=this.geometry;s.index&&To(s.index.array,r.index.array);for(const t in s.attributes)To(s.attributes[t].array,r.attributes[t].array)}raycast(t,e){const i=this._instanceInfo,s=this._geometryInfo,r=this.matrixWorld,n=this.geometry;So.material=this.material,So.geometry.index=n.index,So.geometry.attributes=n.attributes,null===So.geometry.boundingBox&&(So.geometry.boundingBox=new Es),null===So.geometry.boundingSphere&&(So.geometry.boundingSphere=new $s);for(let n=0,a=i.length;n<a;n++){if(!i[n].visible||!i[n].active)continue;const a=i[n].geometryIndex,o=s[a];So.geometry.setDrawRange(o.start,o.count),this.getMatrixAt(n,So.matrixWorld).premultiply(r),this.getBoundingBoxAt(a,So.geometry.boundingBox),this.getBoundingSphereAt(a,So.geometry.boundingSphere),So.raycast(t,_o);for(let t=0,i=_o.length;t<i;t++){const i=_o[t];i.object=this,i.batchId=n,e.push(i)}_o.length=0}So.material=null,So.geometry.index=null,So.geometry.attributes={},So.geometry.setDrawRange(0,1/0)}copy(t){return super.copy(t),this.geometry=t.geometry.clone(),this.perObjectFrustumCulled=t.perObjectFrustumCulled,this.sortObjects=t.sortObjects,this.boundingBox=null!==t.boundingBox?t.boundingBox.clone():null,this.boundingSphere=null!==t.boundingSphere?t.boundingSphere.clone():null,this._geometryInfo=t._geometryInfo.map((t=>({...t,boundingBox:null!==t.boundingBox?t.boundingBox.clone():null,boundingSphere:null!==t.boundingSphere?t.boundingSphere.clone():null}))),this._instanceInfo=t._instanceInfo.map((t=>({...t}))),this._maxInstanceCount=t._maxInstanceCount,this._maxVertexCount=t._maxVertexCount,this._maxIndexCount=t._maxIndexCount,this._geometryInitialized=t._geometryInitialized,this._geometryCount=t._geometryCount,this._multiDrawCounts=t._multiDrawCounts.slice(),this._multiDrawStarts=t._multiDrawStarts.slice(),this._matricesTexture=t._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),null!==this._colorsTexture&&(this._colorsTexture=t._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,null!==this._colorsTexture&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(t,e,i,s,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const n=s.getIndex(),a=null===n?1:n.array.BYTES_PER_ELEMENT,o=this._instanceInfo,h=this._multiDrawStarts,l=this._multiDrawCounts,c=this._geometryInfo,u=this.perObjectFrustumCulled,d=this._indirectTexture,p=d.image.data;u&&(mo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse).multiply(this.matrixWorld),go.setFromProjectionMatrix(mo,t.coordinateSystem));let m=0;if(this.sortObjects){mo.copy(this.matrixWorld).invert(),bo.setFromMatrixPosition(i.matrixWorld).applyMatrix4(mo),vo.set(0,0,-1).transformDirection(i.matrixWorld).transformDirection(mo);for(let t=0,e=o.length;t<e;t++)if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;this.getMatrixAt(t,mo),this.getBoundingSphereAt(e,xo).applyMatrix4(mo);let i=!1;if(u&&(i=!go.intersectsSphere(xo)),!i){const i=c[e],s=wo.subVectors(xo.center,bo).dot(vo);Mo.push(i.start,i.count,s,t)}}const t=Mo.list,e=this.customSort;null===e?t.sort(r.transparent?uo:co):e.call(this,t,i);for(let e=0,i=t.length;e<i;e++){const i=t[e];h[m]=i.start*a,l[m]=i.count,p[m]=i.index,m++}Mo.reset()}else for(let t=0,e=o.length;t<e;t++)if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;let i=!1;if(u&&(this.getMatrixAt(t,mo),this.getBoundingSphereAt(e,xo).applyMatrix4(mo),i=!go.intersectsSphere(xo)),!i){const i=c[e];h[m]=i.start*a,l[m]=i.count,p[m]=t,m++}}d.needsUpdate=!0,this._multiDrawCount=m,this._visibilityChanged=!1}onBeforeShadow(t,e,i,s,r,n){this.onBeforeRender(t,null,s,r,n)}}class Co extends en{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Qr(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Io=new Bs,Bo=new Bs,ko=new ar,Ro=new nr,Eo=new $s,Po=new Bs,Oo=new Bs;class Fo extends Er{constructor(t=new In,e=new Co){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[0];for(let t=1,s=e.count;t<s;t++)Io.fromBufferAttribute(e,t-1),Bo.fromBufferAttribute(e,t),i[t]=i[t-1],i[t]+=Io.distanceTo(Bo);t.setAttribute("lineDistance",new wn(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const i=this.geometry,s=this.matrixWorld,r=t.params.Line.threshold,n=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),Eo.copy(i.boundingSphere),Eo.applyMatrix4(s),Eo.radius+=r,!1===t.ray.intersectsSphere(Eo))return;ko.copy(s).invert(),Ro.copy(t.ray).applyMatrix4(ko);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,h=this.isLineSegments?2:1,l=i.index,c=i.attributes.position;if(null!==l){const i=Math.max(0,n.start),s=Math.min(l.count,n.start+n.count);for(let r=i,n=s-1;r<n;r+=h){const i=l.getX(r),s=l.getX(r+1),n=No(this,t,Ro,o,i,s);n&&e.push(n)}if(this.isLineLoop){const r=l.getX(s-1),n=l.getX(i),a=No(this,t,Ro,o,r,n);a&&e.push(a)}}else{const i=Math.max(0,n.start),s=Math.min(c.count,n.start+n.count);for(let r=i,n=s-1;r<n;r+=h){const i=No(this,t,Ro,o,r,r+1);i&&e.push(i)}if(this.isLineLoop){const r=No(this,t,Ro,o,s-1,i);r&&e.push(r)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function No(t,e,i,s,r,n){const a=t.geometry.attributes.position;Io.fromBufferAttribute(a,r),Bo.fromBufferAttribute(a,n);if(i.distanceSqToSegment(Io,Bo,Po,Oo)>s)return;Po.applyMatrix4(t.matrixWorld);const o=e.ray.origin.distanceTo(Po);return o<e.near||o>e.far?void 0:{distance:o,point:Oo.clone().applyMatrix4(t.matrixWorld),index:r,face:null,faceIndex:null,barycoord:null,object:t}}const Lo=new Bs,Vo=new Bs;class jo extends Fo{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,i=[];for(let t=0,s=e.count;t<s;t+=2)Lo.fromBufferAttribute(e,t),Vo.fromBufferAttribute(e,t+1),i[t]=0===t?0:i[t-1],i[t+1]=i[t]+Lo.distanceTo(Vo);t.setAttribute("lineDistance",new wn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Uo extends Fo{constructor(t,e){super(t,e),this.isLineLoop=!0,this.type="LineLoop"}}class Wo extends en{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Qr(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const Do=new ar,Ho=new nr,qo=new $s,Jo=new Bs;class Xo extends Er{constructor(t=new In,e=new Wo){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}raycast(t,e){const i=this.geometry,s=this.matrixWorld,r=t.params.Points.threshold,n=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),qo.copy(i.boundingSphere),qo.applyMatrix4(s),qo.radius+=r,!1===t.ray.intersectsSphere(qo))return;Do.copy(s).invert(),Ho.copy(t.ray).applyMatrix4(Do);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,h=i.index,l=i.attributes.position;if(null!==h){for(let i=Math.max(0,n.start),r=Math.min(h.count,n.start+n.count);i<r;i++){const r=h.getX(i);Jo.fromBufferAttribute(l,r),Yo(Jo,r,o,s,t,e,this)}}else{for(let i=Math.max(0,n.start),r=Math.min(l.count,n.start+n.count);i<r;i++)Jo.fromBufferAttribute(l,i),Yo(Jo,i,o,s,t,e,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(void 0!==i){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=i.length;t<e;t++){const e=i[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function Yo(t,e,i,s,r,n,a){const o=Ho.distanceSqToPoint(t);if(o<i){const i=new Bs;Ho.closestPointToPoint(t,i),i.applyMatrix4(s);const h=r.ray.origin.distanceTo(i);if(h<r.near||h>r.far)return;n.push({distance:h,distanceToRay:Math.sqrt(o),point:i,index:e,face:null,faceIndex:null,barycoord:null,object:a})}}class Zo extends ws{constructor(t,e,i,s,r,n,a,o,h){super(t,e,i,s,r,n,a,o,h),this.isVideoTexture=!0,this.minFilter=void 0!==n?n:wt,this.magFilter=void 0!==r?r:wt,this.generateMipmaps=!1;const l=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){l.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class Go extends Zo{constructor(t,e,i,s,r,n,a,o){super({},t,e,i,s,r,n,a,o),this.isVideoFrameTexture=!0}update(){}clone(){return(new this.constructor).copy(this)}setFrame(t){this.image=t,this.needsUpdate=!0}}class $o extends ws{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=gt,this.minFilter=gt,this.generateMipmaps=!1,this.needsUpdate=!0}}class Qo extends ws{constructor(t,e,i,s,r,n,a,o,h,l,c,u){super(null,n,a,o,h,l,s,r,c,u),this.isCompressedTexture=!0,this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class Ko extends Qo{constructor(t,e,i,s,r,n){super(t,e,i,r,n),this.isCompressedArrayTexture=!0,this.image.depth=s,this.wrapR=mt,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class th extends Qo{constructor(t,e,i){super(void 0,t[0].width,t[0].height,e,i,ht),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=t}}class eh extends ws{constructor(t,e,i,s,r,n,a,o,h){super(t,e,i,s,r,n,a,o,h),this.isCanvasTexture=!0,this.needsUpdate=!0}}class ih extends ws{constructor(t,e,i,s,r,n,a,o,h,l=1026){if(l!==Dt&&l!==Ht)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&l===Dt&&(i=kt),void 0===i&&l===Ht&&(i=1020),super(null,s,r,n,a,o,l,i,h),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==a?a:gt,this.minFilter=void 0!==o?o:gt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return null!==this.compareFunction&&(e.compareFunction=this.compareFunction),e}}class sh{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)}getPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e}getSpacedPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,s=this.getPoint(0),r=0;e.push(0);for(let n=1;n<=t;n++)i=this.getPoint(n/t),r+=i.distanceTo(s),e.push(r),s=i;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const i=this.getLengths();let s=0;const r=i.length;let n;n=e||t*i[r-1];let a,o=0,h=r-1;for(;o<=h;)if(s=Math.floor(o+(h-o)/2),a=i[s]-n,a<0)o=s+1;else{if(!(a>0)){h=s;break}h=s-1}if(s=h,i[s]===n)return s/(r-1);const l=i[s];return(s+(n-l)/(i[s+1]-l))/(r-1)}getTangent(t,e){const i=1e-4;let s=t-i,r=t+i;s<0&&(s=0),r>1&&(r=1);const n=this.getPoint(s),a=this.getPoint(r),o=e||(n.isVector2?new Gi:new Bs);return o.copy(a).sub(n).normalize(),o}getTangentAt(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)}computeFrenetFrames(t,e){const i=new Bs,s=[],r=[],n=[],a=new Bs,o=new ar;for(let e=0;e<=t;e++){const i=e/t;s[e]=this.getTangentAt(i,new Bs)}r[0]=new Bs,n[0]=new Bs;let h=Number.MAX_VALUE;const l=Math.abs(s[0].x),c=Math.abs(s[0].y),u=Math.abs(s[0].z);l<=h&&(h=l,i.set(1,0,0)),c<=h&&(h=c,i.set(0,1,0)),u<=h&&i.set(0,0,1),a.crossVectors(s[0],i).normalize(),r[0].crossVectors(s[0],a),n[0].crossVectors(s[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),n[e]=n[e-1].clone(),a.crossVectors(s[e-1],s[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(Hi(s[e-1].dot(s[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}n[e].crossVectors(s[e],r[e])}if(!0===e){let e=Math.acos(Hi(r[0].dot(r[t]),-1,1));e/=t,s[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let i=1;i<=t;i++)r[i].applyMatrix4(o.makeRotationAxis(s[i],e*i)),n[i].crossVectors(s[i],r[i])}return{tangents:s,normals:r,binormals:n}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class rh extends sh{constructor(t=0,e=0,i=1,s=1,r=0,n=2*Math.PI,a=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=s,this.aStartAngle=r,this.aEndAngle=n,this.aClockwise=a,this.aRotation=o}getPoint(t,e=new Gi){const i=e,s=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const n=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=s;for(;r>s;)r-=s;r<Number.EPSILON&&(r=n?0:s),!0!==this.aClockwise||n||(r===s?r=-s:r-=s);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),h=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),i=o-this.aX,s=h-this.aY;o=i*t-s*e+this.aX,h=i*e+s*t+this.aY}return i.set(o,h)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class nh extends rh{constructor(t,e,i,s,r,n){super(t,e,i,i,s,r,n),this.isArcCurve=!0,this.type="ArcCurve"}}function ah(){let t=0,e=0,i=0,s=0;function r(r,n,a,o){t=r,e=a,i=-3*r+3*n-2*a-o,s=2*r-2*n+a+o}return{initCatmullRom:function(t,e,i,s,n){r(e,i,n*(i-t),n*(s-e))},initNonuniformCatmullRom:function(t,e,i,s,n,a,o){let h=(e-t)/n-(i-t)/(n+a)+(i-e)/a,l=(i-e)/a-(s-e)/(a+o)+(s-i)/o;h*=a,l*=a,r(e,i,h,l)},calc:function(r){const n=r*r;return t+e*r+i*n+s*(n*r)}}}const oh=new Bs,hh=new ah,lh=new ah,ch=new ah;class uh extends sh{constructor(t=[],e=!1,i="centripetal",s=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=s}getPoint(t,e=new Bs){const i=e,s=this.points,r=s.length,n=(r-(this.closed?0:1))*t;let a,o,h=Math.floor(n),l=n-h;this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/r)+1)*r:0===l&&h===r-1&&(h=r-2,l=1),this.closed||h>0?a=s[(h-1)%r]:(oh.subVectors(s[0],s[1]).add(s[0]),a=oh);const c=s[h%r],u=s[(h+1)%r];if(this.closed||h+2<r?o=s[(h+2)%r]:(oh.subVectors(s[r-1],s[r-2]).add(s[r-1]),o=oh),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(c),t),i=Math.pow(c.distanceToSquared(u),t),s=Math.pow(u.distanceToSquared(o),t);i<1e-4&&(i=1),e<1e-4&&(e=i),s<1e-4&&(s=i),hh.initNonuniformCatmullRom(a.x,c.x,u.x,o.x,e,i,s),lh.initNonuniformCatmullRom(a.y,c.y,u.y,o.y,e,i,s),ch.initNonuniformCatmullRom(a.z,c.z,u.z,o.z,e,i,s)}else"catmullrom"===this.curveType&&(hh.initCatmullRom(a.x,c.x,u.x,o.x,this.tension),lh.initCatmullRom(a.y,c.y,u.y,o.y,this.tension),ch.initCatmullRom(a.z,c.z,u.z,o.z,this.tension));return i.set(hh.calc(l),lh.calc(l),ch.calc(l)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Bs).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function dh(t,e,i,s,r){const n=.5*(s-e),a=.5*(r-i),o=t*t;return(2*i-2*s+n+a)*(t*o)+(-3*i+3*s-2*n-a)*o+n*t+i}function ph(t,e,i,s){return function(t,e){const i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,s)}function mh(t,e,i,s,r){return function(t,e){const i=1-t;return i*i*i*e}(t,e)+function(t,e){const i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,s)+function(t,e){return t*t*t*e}(t,r)}class yh extends sh{constructor(t=new Gi,e=new Gi,i=new Gi,s=new Gi){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=s}getPoint(t,e=new Gi){const i=e,s=this.v0,r=this.v1,n=this.v2,a=this.v3;return i.set(mh(t,s.x,r.x,n.x,a.x),mh(t,s.y,r.y,n.y,a.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class gh extends sh{constructor(t=new Bs,e=new Bs,i=new Bs,s=new Bs){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=s}getPoint(t,e=new Bs){const i=e,s=this.v0,r=this.v1,n=this.v2,a=this.v3;return i.set(mh(t,s.x,r.x,n.x,a.x),mh(t,s.y,r.y,n.y,a.y),mh(t,s.z,r.z,n.z,a.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class fh extends sh{constructor(t=new Gi,e=new Gi){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Gi){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new Gi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class xh extends sh{constructor(t=new Bs,e=new Bs){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new Bs){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new Bs){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class bh extends sh{constructor(t=new Gi,e=new Gi,i=new Gi){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Gi){const i=e,s=this.v0,r=this.v1,n=this.v2;return i.set(ph(t,s.x,r.x,n.x),ph(t,s.y,r.y,n.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class vh extends sh{constructor(t=new Bs,e=new Bs,i=new Bs){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Bs){const i=e,s=this.v0,r=this.v1,n=this.v2;return i.set(ph(t,s.x,r.x,n.x),ph(t,s.y,r.y,n.y),ph(t,s.z,r.z,n.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class wh extends sh{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new Gi){const i=e,s=this.points,r=(s.length-1)*t,n=Math.floor(r),a=r-n,o=s[0===n?n:n-1],h=s[n],l=s[n>s.length-2?s.length-1:n+1],c=s[n>s.length-3?s.length-1:n+2];return i.set(dh(a,o.x,h.x,l.x,c.x),dh(a,o.y,h.y,l.y,c.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Gi).fromArray(i))}return this}}var Mh=Object.freeze({__proto__:null,ArcCurve:nh,CatmullRomCurve3:uh,CubicBezierCurve:yh,CubicBezierCurve3:gh,EllipseCurve:rh,LineCurve:fh,LineCurve3:xh,QuadraticBezierCurve:bh,QuadraticBezierCurve3:vh,SplineCurve:wh});class Sh extends sh{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){const i=!0===t.isVector2?"LineCurve":"LineCurve3";this.curves.push(new Mh[i](e,t))}return this}getPoint(t,e){const i=t*this.getLength(),s=this.getCurveLengths();let r=0;for(;r<s.length;){if(s[r]>=i){const t=s[r]-i,n=this.curves[r],a=n.getLength(),o=0===a?0:1-t/a;return n.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,s=this.curves.length;i<s;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let i;for(let s=0,r=this.curves;s<r.length;s++){const n=r[s],a=n.isEllipseCurve?2*t:n.isLineCurve||n.isLineCurve3?1:n.isSplineCurve?t*n.points.length:t,o=n.getPoints(a);for(let t=0;t<o.length;t++){const s=o[t];i&&i.equals(s)||(e.push(s),i=s)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,i=this.curves.length;e<i;e++){const i=this.curves[e];t.curves.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push((new Mh[i.type]).fromJSON(i))}return this}}class _h extends Sh{constructor(t){super(),this.type="Path",this.currentPoint=new Gi,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const i=new fh(this.currentPoint.clone(),new Gi(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,i,s){const r=new bh(this.currentPoint.clone(),new Gi(t,e),new Gi(i,s));return this.curves.push(r),this.currentPoint.set(i,s),this}bezierCurveTo(t,e,i,s,r,n){const a=new yh(this.currentPoint.clone(),new Gi(t,e),new Gi(i,s),new Gi(r,n));return this.curves.push(a),this.currentPoint.set(r,n),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),i=new wh(e);return this.curves.push(i),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,i,s,r,n){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,i,s,r,n),this}absarc(t,e,i,s,r,n){return this.absellipse(t,e,i,i,s,r,n),this}ellipse(t,e,i,s,r,n,a,o){const h=this.currentPoint.x,l=this.currentPoint.y;return this.absellipse(t+h,e+l,i,s,r,n,a,o),this}absellipse(t,e,i,s,r,n,a,o){const h=new rh(t,e,i,s,r,n,a,o);if(this.curves.length>0){const t=h.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(h);const l=h.getPoint(1);return this.currentPoint.copy(l),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Ah extends In{constructor(t=[new Gi(0,-.5),new Gi(.5,0),new Gi(0,.5)],e=12,i=0,s=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:s},e=Math.floor(e),s=Hi(s,0,2*Math.PI);const r=[],n=[],a=[],o=[],h=[],l=1/e,c=new Bs,u=new Gi,d=new Bs,p=new Bs,m=new Bs;let y=0,g=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:y=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-y,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case t.length-1:o.push(m.x,m.y,m.z);break;default:y=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-y,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}for(let r=0;r<=e;r++){const d=i+r*l*s,p=Math.sin(d),m=Math.cos(d);for(let i=0;i<=t.length-1;i++){c.x=t[i].x*p,c.y=t[i].y,c.z=t[i].x*m,n.push(c.x,c.y,c.z),u.x=r/e,u.y=i/(t.length-1),a.push(u.x,u.y);const s=o[3*i+0]*p,l=o[3*i+1],d=o[3*i+0]*m;h.push(s,l,d)}}for(let i=0;i<e;i++)for(let e=0;e<t.length-1;e++){const s=e+i*t.length,n=s,a=s+t.length,o=s+t.length+1,h=s+1;r.push(n,a,h),r.push(o,h,a)}this.setIndex(r),this.setAttribute("position",new wn(n,3)),this.setAttribute("uv",new wn(a,2)),this.setAttribute("normal",new wn(h,3))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Ah(t.points,t.segments,t.phiStart,t.phiLength)}}class Th extends Ah{constructor(t=1,e=1,i=4,s=8){const r=new _h;r.absarc(0,-e/2,t,1.5*Math.PI,0),r.absarc(0,e/2,t,0,.5*Math.PI),super(r.getPoints(i),s),this.type="CapsuleGeometry",this.parameters={radius:t,length:e,capSegments:i,radialSegments:s}}static fromJSON(t){return new Th(t.radius,t.length,t.capSegments,t.radialSegments)}}class zh extends In{constructor(t=1,e=32,i=0,s=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:s},e=Math.max(3,e);const r=[],n=[],a=[],o=[],h=new Bs,l=new Gi;n.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,c=3;r<=e;r++,c+=3){const u=i+r/e*s;h.x=t*Math.cos(u),h.y=t*Math.sin(u),n.push(h.x,h.y,h.z),a.push(0,0,1),l.x=(n[c]/t+1)/2,l.y=(n[c+1]/t+1)/2,o.push(l.x,l.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new wn(n,3)),this.setAttribute("normal",new wn(a,3)),this.setAttribute("uv",new wn(o,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new zh(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class Ch extends In{constructor(t=1,e=1,i=1,s=32,r=1,n=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:s,heightSegments:r,openEnded:n,thetaStart:a,thetaLength:o};const h=this;s=Math.floor(s),r=Math.floor(r);const l=[],c=[],u=[],d=[];let p=0;const m=[],y=i/2;let g=0;function f(i){const r=p,n=new Gi,m=new Bs;let f=0;const x=!0===i?t:e,b=!0===i?1:-1;for(let t=1;t<=s;t++)c.push(0,y*b,0),u.push(0,b,0),d.push(.5,.5),p++;const v=p;for(let t=0;t<=s;t++){const e=t/s*o+a,i=Math.cos(e),r=Math.sin(e);m.x=x*r,m.y=y*b,m.z=x*i,c.push(m.x,m.y,m.z),u.push(0,b,0),n.x=.5*i+.5,n.y=.5*r*b+.5,d.push(n.x,n.y),p++}for(let t=0;t<s;t++){const e=r+t,s=v+t;!0===i?l.push(s,s+1,e):l.push(s+1,s,e),f+=3}h.addGroup(g,f,!0===i?1:2),g+=f}!function(){const n=new Bs,f=new Bs;let x=0;const b=(e-t)/i;for(let h=0;h<=r;h++){const l=[],g=h/r,x=g*(e-t)+t;for(let t=0;t<=s;t++){const e=t/s,r=e*o+a,h=Math.sin(r),m=Math.cos(r);f.x=x*h,f.y=-g*i+y,f.z=x*m,c.push(f.x,f.y,f.z),n.set(h,b,m).normalize(),u.push(n.x,n.y,n.z),d.push(e,1-g),l.push(p++)}m.push(l)}for(let i=0;i<s;i++)for(let s=0;s<r;s++){const n=m[s][i],a=m[s+1][i],o=m[s+1][i+1],h=m[s][i+1];(t>0||0!==s)&&(l.push(n,a,h),x+=3),(e>0||s!==r-1)&&(l.push(a,o,h),x+=3)}h.addGroup(g,x,0),g+=x}(),!1===n&&(t>0&&f(!0),e>0&&f(!1)),this.setIndex(l),this.setAttribute("position",new wn(c,3)),this.setAttribute("normal",new wn(u,3)),this.setAttribute("uv",new wn(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Ch(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Ih extends Ch{constructor(t=1,e=1,i=32,s=1,r=!1,n=0,a=2*Math.PI){super(0,t,e,i,s,r,n,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:n,thetaLength:a}}static fromJSON(t){return new Ih(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Bh extends In{constructor(t=[],e=[],i=1,s=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:s};const r=[],n=[];function a(t,e,i,s){const r=s+1,n=[];for(let s=0;s<=r;s++){n[s]=[];const a=t.clone().lerp(i,s/r),o=e.clone().lerp(i,s/r),h=r-s;for(let t=0;t<=h;t++)n[s][t]=0===t&&s===r?a:a.clone().lerp(o,t/h)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const i=Math.floor(e/2);e%2==0?(o(n[t][i+1]),o(n[t+1][i]),o(n[t][i])):(o(n[t][i+1]),o(n[t+1][i+1]),o(n[t+1][i]))}}function o(t){r.push(t.x,t.y,t.z)}function h(e,i){const s=3*e;i.x=t[s+0],i.y=t[s+1],i.z=t[s+2]}function l(t,e,i,s){s<0&&1===t.x&&(n[e]=t.x-1),0===i.x&&0===i.z&&(n[e]=s/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){const i=new Bs,s=new Bs,r=new Bs;for(let n=0;n<e.length;n+=3)h(e[n+0],i),h(e[n+1],s),h(e[n+2],r),a(i,s,r,t)}(s),function(t){const e=new Bs;for(let i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){const t=new Bs;for(let i=0;i<r.length;i+=3){t.x=r[i+0],t.y=r[i+1],t.z=r[i+2];const s=c(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);n.push(s,1-a)}var e;(function(){const t=new Bs,e=new Bs,i=new Bs,s=new Bs,a=new Gi,o=new Gi,h=new Gi;for(let u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),a.set(n[d+0],n[d+1]),o.set(n[d+2],n[d+3]),h.set(n[d+4],n[d+5]),s.copy(t).add(e).add(i).divideScalar(3);const p=c(s);l(a,d+0,t,p),l(o,d+2,e,p),l(h,d+4,i,p)}})(),function(){for(let t=0;t<n.length;t+=6){const e=n[t+0],i=n[t+2],s=n[t+4],r=Math.max(e,i,s),a=Math.min(e,i,s);r>.9&&a<.1&&(e<.2&&(n[t+0]+=1),i<.2&&(n[t+2]+=1),s<.2&&(n[t+4]+=1))}}()}(),this.setAttribute("position",new wn(r,3)),this.setAttribute("normal",new wn(r.slice(),3)),this.setAttribute("uv",new wn(n,2)),0===s?this.computeVertexNormals():this.normalizeNormals()}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Bh(t.vertices,t.indices,t.radius,t.details)}}class kh extends Bh{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2,s=1/i;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-s,-i,0,-s,i,0,s,-i,0,s,i,-s,-i,0,-s,i,0,s,-i,0,s,i,0,-i,0,-s,i,0,-s,-i,0,s,i,0,s],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new kh(t.radius,t.detail)}}const Rh=new Bs,Eh=new Bs,Ph=new Bs,Oh=new Xr;class Fh extends In{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const i=4,s=Math.pow(10,i),r=Math.cos(Ui*e),n=t.getIndex(),a=t.getAttribute("position"),o=n?n.count:a.count,h=[0,0,0],l=["a","b","c"],c=new Array(3),u={},d=[];for(let t=0;t<o;t+=3){n?(h[0]=n.getX(t),h[1]=n.getX(t+1),h[2]=n.getX(t+2)):(h[0]=t,h[1]=t+1,h[2]=t+2);const{a:e,b:i,c:o}=Oh;if(e.fromBufferAttribute(a,h[0]),i.fromBufferAttribute(a,h[1]),o.fromBufferAttribute(a,h[2]),Oh.getNormal(Ph),c[0]=`${Math.round(e.x*s)},${Math.round(e.y*s)},${Math.round(e.z*s)}`,c[1]=`${Math.round(i.x*s)},${Math.round(i.y*s)},${Math.round(i.z*s)}`,c[2]=`${Math.round(o.x*s)},${Math.round(o.y*s)},${Math.round(o.z*s)}`,c[0]!==c[1]&&c[1]!==c[2]&&c[2]!==c[0])for(let t=0;t<3;t++){const e=(t+1)%3,i=c[t],s=c[e],n=Oh[l[t]],a=Oh[l[e]],o=`${i}_${s}`,p=`${s}_${i}`;p in u&&u[p]?(Ph.dot(u[p].normal)<=r&&(d.push(n.x,n.y,n.z),d.push(a.x,a.y,a.z)),u[p]=null):o in u||(u[o]={index0:h[t],index1:h[e],normal:Ph.clone()})}}for(const t in u)if(u[t]){const{index0:e,index1:i}=u[t];Rh.fromBufferAttribute(a,e),Eh.fromBufferAttribute(a,i),d.push(Rh.x,Rh.y,Rh.z),d.push(Eh.x,Eh.y,Eh.z)}this.setAttribute("position",new wn(d,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}class Nh extends _h{constructor(t){super(t),this.uuid=Di(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,s=this.holes.length;i<s;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,i=this.holes.length;e<i;e++){const i=this.holes[e];t.holes.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push((new _h).fromJSON(i))}return this}}const Lh=function(t,e,i=2){const s=e&&e.length,r=s?e[0]*i:t.length;let n=Vh(t,0,r,i,!0);const a=[];if(!n||n.next===n.prev)return a;let o,h,l,c,u,d,p;if(s&&(n=function(t,e,i,s){const r=[];let n,a,o,h,l;for(n=0,a=e.length;n<a;n++)o=e[n]*s,h=n<a-1?e[n+1]*s:t.length,l=Vh(t,o,h,s,!1),l===l.next&&(l.steiner=!0),r.push(Gh(l));for(r.sort(Jh),n=0;n<r.length;n++)i=Xh(r[n],i);return i}(t,e,n,i)),t.length>80*i){o=l=t[0],h=c=t[1];for(let e=i;e<r;e+=i)u=t[e],d=t[e+1],u<o&&(o=u),d<h&&(h=d),u>l&&(l=u),d>c&&(c=d);p=Math.max(l-o,c-h),p=0!==p?32767/p:0}return Uh(n,a,i,o,h,p,0),a};function Vh(t,e,i,s,r){let n,a;if(r===function(t,e,i,s){let r=0;for(let n=e,a=i-s;n<i;n+=s)r+=(t[a]-t[n])*(t[n+1]+t[a+1]),a=n;return r}(t,e,i,s)>0)for(n=e;n<i;n+=s)a=al(n,t[n],t[n+1],a);else for(n=i-s;n>=e;n-=s)a=al(n,t[n],t[n+1],a);return a&&tl(a,a.next)&&(ol(a),a=a.next),a}function jh(t,e){if(!t)return t;e||(e=t);let i,s=t;do{if(i=!1,s.steiner||!tl(s,s.next)&&0!==Kh(s.prev,s,s.next))s=s.next;else{if(ol(s),s=e=s.prev,s===s.next)break;i=!0}}while(i||s!==e);return e}function Uh(t,e,i,s,r,n,a){if(!t)return;!a&&n&&function(t,e,i,s){let r=t;do{0===r.z&&(r.z=Zh(r.x,r.y,e,i,s)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,i,s,r,n,a,o,h,l=1;do{for(i=t,t=null,n=null,a=0;i;){for(a++,s=i,o=0,e=0;e<l&&(o++,s=s.nextZ,s);e++);for(h=l;o>0||h>0&&s;)0!==o&&(0===h||!s||i.z<=s.z)?(r=i,i=i.nextZ,o--):(r=s,s=s.nextZ,h--),n?n.nextZ=r:t=r,r.prevZ=n,n=r;i=s}n.nextZ=null,l*=2}while(a>1)}(r)}(t,s,r,n);let o,h,l=t;for(;t.prev!==t.next;)if(o=t.prev,h=t.next,n?Dh(t,s,r,n):Wh(t))e.push(o.i/i|0),e.push(t.i/i|0),e.push(h.i/i|0),ol(t),t=h.next,l=h.next;else if((t=h)===l){a?1===a?Uh(t=Hh(jh(t),e,i),e,i,s,r,n,2):2===a&&qh(t,e,i,s,r,n):Uh(jh(t),e,i,s,r,n,1);break}}function Wh(t){const e=t.prev,i=t,s=t.next;if(Kh(e,i,s)>=0)return!1;const r=e.x,n=i.x,a=s.x,o=e.y,h=i.y,l=s.y,c=r<n?r<a?r:a:n<a?n:a,u=o<h?o<l?o:l:h<l?h:l,d=r>n?r>a?r:a:n>a?n:a,p=o>h?o>l?o:l:h>l?h:l;let m=s.next;for(;m!==e;){if(m.x>=c&&m.x<=d&&m.y>=u&&m.y<=p&&$h(r,o,n,h,a,l,m.x,m.y)&&Kh(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function Dh(t,e,i,s){const r=t.prev,n=t,a=t.next;if(Kh(r,n,a)>=0)return!1;const o=r.x,h=n.x,l=a.x,c=r.y,u=n.y,d=a.y,p=o<h?o<l?o:l:h<l?h:l,m=c<u?c<d?c:d:u<d?u:d,y=o>h?o>l?o:l:h>l?h:l,g=c>u?c>d?c:d:u>d?u:d,f=Zh(p,m,e,i,s),x=Zh(y,g,e,i,s);let b=t.prevZ,v=t.nextZ;for(;b&&b.z>=f&&v&&v.z<=x;){if(b.x>=p&&b.x<=y&&b.y>=m&&b.y<=g&&b!==r&&b!==a&&$h(o,c,h,u,l,d,b.x,b.y)&&Kh(b.prev,b,b.next)>=0)return!1;if(b=b.prevZ,v.x>=p&&v.x<=y&&v.y>=m&&v.y<=g&&v!==r&&v!==a&&$h(o,c,h,u,l,d,v.x,v.y)&&Kh(v.prev,v,v.next)>=0)return!1;v=v.nextZ}for(;b&&b.z>=f;){if(b.x>=p&&b.x<=y&&b.y>=m&&b.y<=g&&b!==r&&b!==a&&$h(o,c,h,u,l,d,b.x,b.y)&&Kh(b.prev,b,b.next)>=0)return!1;b=b.prevZ}for(;v&&v.z<=x;){if(v.x>=p&&v.x<=y&&v.y>=m&&v.y<=g&&v!==r&&v!==a&&$h(o,c,h,u,l,d,v.x,v.y)&&Kh(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function Hh(t,e,i){let s=t;do{const r=s.prev,n=s.next.next;!tl(r,n)&&el(r,s,s.next,n)&&rl(r,n)&&rl(n,r)&&(e.push(r.i/i|0),e.push(s.i/i|0),e.push(n.i/i|0),ol(s),ol(s.next),s=t=n),s=s.next}while(s!==t);return jh(s)}function qh(t,e,i,s,r,n){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&Qh(a,t)){let o=nl(a,t);return a=jh(a,a.next),o=jh(o,o.next),Uh(a,e,i,s,r,n,0),void Uh(o,e,i,s,r,n,0)}t=t.next}a=a.next}while(a!==t)}function Jh(t,e){return t.x-e.x}function Xh(t,e){const i=function(t,e){let i,s=e,r=-1/0;const n=t.x,a=t.y;do{if(a<=s.y&&a>=s.next.y&&s.next.y!==s.y){const t=s.x+(a-s.y)*(s.next.x-s.x)/(s.next.y-s.y);if(t<=n&&t>r&&(r=t,i=s.x<s.next.x?s:s.next,t===n))return i}s=s.next}while(s!==e);if(!i)return null;const o=i,h=i.x,l=i.y;let c,u=1/0;s=i;do{n>=s.x&&s.x>=h&&n!==s.x&&$h(a<l?n:r,a,h,l,a<l?r:n,a,s.x,s.y)&&(c=Math.abs(a-s.y)/(n-s.x),rl(s,t)&&(c<u||c===u&&(s.x>i.x||s.x===i.x&&Yh(i,s)))&&(i=s,u=c)),s=s.next}while(s!==o);return i}(t,e);if(!i)return e;const s=nl(i,t);return jh(s,s.next),jh(i,i.next)}function Yh(t,e){return Kh(t.prev,t,e.prev)<0&&Kh(e.next,t,t.next)<0}function Zh(t,e,i,s,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-i)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-s)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Gh(t){let e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function $h(t,e,i,s,r,n,a,o){return(r-a)*(e-o)>=(t-a)*(n-o)&&(t-a)*(s-o)>=(i-a)*(e-o)&&(i-a)*(n-o)>=(r-a)*(s-o)}function Qh(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&el(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(rl(t,e)&&rl(e,t)&&function(t,e){let i=t,s=!1;const r=(t.x+e.x)/2,n=(t.y+e.y)/2;do{i.y>n!=i.next.y>n&&i.next.y!==i.y&&r<(i.next.x-i.x)*(n-i.y)/(i.next.y-i.y)+i.x&&(s=!s),i=i.next}while(i!==t);return s}(t,e)&&(Kh(t.prev,t,e.prev)||Kh(t,e.prev,e))||tl(t,e)&&Kh(t.prev,t,t.next)>0&&Kh(e.prev,e,e.next)>0)}function Kh(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function tl(t,e){return t.x===e.x&&t.y===e.y}function el(t,e,i,s){const r=sl(Kh(t,e,i)),n=sl(Kh(t,e,s)),a=sl(Kh(i,s,t)),o=sl(Kh(i,s,e));return r!==n&&a!==o||(!(0!==r||!il(t,i,e))||(!(0!==n||!il(t,s,e))||(!(0!==a||!il(i,t,s))||!(0!==o||!il(i,e,s)))))}function il(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function sl(t){return t>0?1:t<0?-1:0}function rl(t,e){return Kh(t.prev,t,t.next)<0?Kh(t,e,t.next)>=0&&Kh(t,t.prev,e)>=0:Kh(t,e,t.prev)<0||Kh(t,t.next,e)<0}function nl(t,e){const i=new hl(t.i,t.x,t.y),s=new hl(e.i,e.x,e.y),r=t.next,n=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,s.next=i,i.prev=s,n.next=s,s.prev=n,s}function al(t,e,i,s){const r=new hl(t,e,i);return s?(r.next=s.next,r.prev=s,s.next.prev=r,s.next=r):(r.prev=r,r.next=r),r}function ol(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function hl(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class ll{static area(t){const e=t.length;let i=0;for(let s=e-1,r=0;r<e;s=r++)i+=t[s].x*t[r].y-t[r].x*t[s].y;return.5*i}static isClockWise(t){return ll.area(t)<0}static triangulateShape(t,e){const i=[],s=[],r=[];cl(t),ul(i,t);let n=t.length;e.forEach(cl);for(let t=0;t<e.length;t++)s.push(n),n+=e[t].length,ul(i,e[t]);const a=Lh(i,s);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function cl(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function ul(t,e){for(let i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}class dl extends In{constructor(t=new Nh([new Gi(.5,.5),new Gi(-.5,.5),new Gi(-.5,-.5),new Gi(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,s=[],r=[];for(let e=0,i=t.length;e<i;e++){n(t[e])}function n(t){const n=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,h=void 0!==e.depth?e.depth:1;let l=void 0===e.bevelEnabled||e.bevelEnabled,c=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:c-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,y=void 0!==e.UVGenerator?e.UVGenerator:pl;let g,f,x,b,v,w=!1;m&&(g=m.getSpacedPoints(o),w=!0,l=!1,f=m.computeFrenetFrames(o,!1),x=new Bs,b=new Bs,v=new Bs),l||(p=0,c=0,u=0,d=0);const M=t.extractPoints(a);let S=M.shape;const _=M.holes;if(!ll.isClockWise(S)){S=S.reverse();for(let t=0,e=_.length;t<e;t++){const e=_[t];ll.isClockWise(e)&&(_[t]=e.reverse())}}const A=ll.triangulateShape(S,_),T=S;for(let t=0,e=_.length;t<e;t++){const e=_[t];S=S.concat(e)}function z(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().addScaledVector(e,i)}const C=S.length,I=A.length;function B(t,e,i){let s,r,n;const a=t.x-e.x,o=t.y-e.y,h=i.x-t.x,l=i.y-t.y,c=a*a+o*o,u=a*l-o*h;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(c),d=Math.sqrt(h*h+l*l),p=e.x-o/u,m=e.y+a/u,y=((i.x-l/d-p)*l-(i.y+h/d-m)*h)/(a*l-o*h);s=p+a*y-t.x,r=m+o*y-t.y;const g=s*s+r*r;if(g<=2)return new Gi(s,r);n=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?h>Number.EPSILON&&(t=!0):a<-Number.EPSILON?h<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(l)&&(t=!0),t?(s=-o,r=a,n=Math.sqrt(c)):(s=a,r=o,n=Math.sqrt(c/2))}return new Gi(s/n,r/n)}const k=[];for(let t=0,e=T.length,i=e-1,s=t+1;t<e;t++,i++,s++)i===e&&(i=0),s===e&&(s=0),k[t]=B(T[t],T[i],T[s]);const R=[];let E,P=k.concat();for(let t=0,e=_.length;t<e;t++){const e=_[t];E=[];for(let t=0,i=e.length,s=i-1,r=t+1;t<i;t++,s++,r++)s===i&&(s=0),r===i&&(r=0),E[t]=B(e[t],e[s],e[r]);R.push(E),P=P.concat(E)}for(let t=0;t<p;t++){const e=t/p,i=c*Math.cos(e*Math.PI/2),s=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=z(T[t],k[t],s);N(e.x,e.y,-i)}for(let t=0,e=_.length;t<e;t++){const e=_[t];E=R[t];for(let t=0,r=e.length;t<r;t++){const r=z(e[t],E[t],s);N(r.x,r.y,-i)}}}const O=u+d;for(let t=0;t<C;t++){const e=l?z(S[t],P[t],O):S[t];w?(b.copy(f.normals[0]).multiplyScalar(e.x),x.copy(f.binormals[0]).multiplyScalar(e.y),v.copy(g[0]).add(b).add(x),N(v.x,v.y,v.z)):N(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<C;e++){const i=l?z(S[e],P[e],O):S[e];w?(b.copy(f.normals[t]).multiplyScalar(i.x),x.copy(f.binormals[t]).multiplyScalar(i.y),v.copy(g[t]).add(b).add(x),N(v.x,v.y,v.z)):N(i.x,i.y,h/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,i=c*Math.cos(e*Math.PI/2),s=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=z(T[t],k[t],s);N(e.x,e.y,h+i)}for(let t=0,e=_.length;t<e;t++){const e=_[t];E=R[t];for(let t=0,r=e.length;t<r;t++){const r=z(e[t],E[t],s);w?N(r.x,r.y+g[o-1].y,g[o-1].x+i):N(r.x,r.y,h+i)}}}function F(t,e){let i=t.length;for(;--i>=0;){const s=i;let r=i-1;r<0&&(r=t.length-1);for(let t=0,i=o+2*p;t<i;t++){const i=C*t,n=C*(t+1);V(e+s+i,e+r+i,e+r+n,e+s+n)}}}function N(t,e,i){n.push(t),n.push(e),n.push(i)}function L(t,e,r){j(t),j(e),j(r);const n=s.length/3,a=y.generateTopUV(i,s,n-3,n-2,n-1);U(a[0]),U(a[1]),U(a[2])}function V(t,e,r,n){j(t),j(e),j(n),j(e),j(r),j(n);const a=s.length/3,o=y.generateSideWallUV(i,s,a-6,a-3,a-2,a-1);U(o[0]),U(o[1]),U(o[3]),U(o[1]),U(o[2]),U(o[3])}function j(t){s.push(n[3*t+0]),s.push(n[3*t+1]),s.push(n[3*t+2])}function U(t){r.push(t.x),r.push(t.y)}!function(){const t=s.length/3;if(l){let t=0,e=C*t;for(let t=0;t<I;t++){const i=A[t];L(i[2]+e,i[1]+e,i[0]+e)}t=o+2*p,e=C*t;for(let t=0;t<I;t++){const i=A[t];L(i[0]+e,i[1]+e,i[2]+e)}}else{for(let t=0;t<I;t++){const e=A[t];L(e[2],e[1],e[0])}for(let t=0;t<I;t++){const e=A[t];L(e[0]+C*o,e[1]+C*o,e[2]+C*o)}}i.addGroup(t,s.length/3-t,0)}(),function(){const t=s.length/3;let e=0;F(T,e),e+=T.length;for(let t=0,i=_.length;t<i;t++){const i=_[t];F(i,e),e+=i.length}i.addGroup(t,s.length/3-t,1)}()}this.setAttribute("position",new wn(s,3)),this.setAttribute("uv",new wn(r,2)),this.computeVertexNormals()}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return function(t,e,i){if(i.shapes=[],Array.isArray(t))for(let e=0,s=t.length;e<s;e++){const s=t[e];i.shapes.push(s.uuid)}else i.shapes.push(t.uuid);i.options=Object.assign({},e),void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON());return i}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const i=[];for(let s=0,r=t.shapes.length;s<r;s++){const r=e[t.shapes[s]];i.push(r)}const s=t.options.extrudePath;return void 0!==s&&(t.options.extrudePath=(new Mh[s.type]).fromJSON(s)),new dl(i,t.options)}}const pl={generateTopUV:function(t,e,i,s,r){const n=e[3*i],a=e[3*i+1],o=e[3*s],h=e[3*s+1],l=e[3*r],c=e[3*r+1];return[new Gi(n,a),new Gi(o,h),new Gi(l,c)]},generateSideWallUV:function(t,e,i,s,r,n){const a=e[3*i],o=e[3*i+1],h=e[3*i+2],l=e[3*s],c=e[3*s+1],u=e[3*s+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],y=e[3*n],g=e[3*n+1],f=e[3*n+2];return Math.abs(o-c)<Math.abs(a-l)?[new Gi(a,1-h),new Gi(l,1-u),new Gi(d,1-m),new Gi(y,1-f)]:[new Gi(o,1-h),new Gi(c,1-u),new Gi(p,1-m),new Gi(g,1-f)]}};class ml extends Bh{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2;super([-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new ml(t.radius,t.detail)}}class yl extends Bh{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new yl(t.radius,t.detail)}}class gl extends In{constructor(t=1,e=1,i=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:s};const r=t/2,n=e/2,a=Math.floor(i),o=Math.floor(s),h=a+1,l=o+1,c=t/a,u=e/o,d=[],p=[],m=[],y=[];for(let t=0;t<l;t++){const e=t*u-n;for(let i=0;i<h;i++){const s=i*c-r;p.push(s,-e,0),m.push(0,0,1),y.push(i/a),y.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const i=e+h*t,s=e+h*(t+1),r=e+1+h*(t+1),n=e+1+h*t;d.push(i,s,n),d.push(s,r,n)}this.setIndex(d),this.setAttribute("position",new wn(p,3)),this.setAttribute("normal",new wn(m,3)),this.setAttribute("uv",new wn(y,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new gl(t.width,t.height,t.widthSegments,t.heightSegments)}}class fl extends In{constructor(t=.5,e=1,i=32,s=1,r=0,n=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:s,thetaStart:r,thetaLength:n},i=Math.max(3,i);const a=[],o=[],h=[],l=[];let c=t;const u=(e-t)/(s=Math.max(1,s)),d=new Bs,p=new Gi;for(let t=0;t<=s;t++){for(let t=0;t<=i;t++){const s=r+t/i*n;d.x=c*Math.cos(s),d.y=c*Math.sin(s),o.push(d.x,d.y,d.z),h.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,l.push(p.x,p.y)}c+=u}for(let t=0;t<s;t++){const e=t*(i+1);for(let t=0;t<i;t++){const s=t+e,r=s,n=s+i+1,o=s+i+2,h=s+1;a.push(r,n,h),a.push(n,o,h)}}this.setIndex(a),this.setAttribute("position",new wn(o,3)),this.setAttribute("normal",new wn(h,3)),this.setAttribute("uv",new wn(l,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new fl(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class xl extends In{constructor(t=new Nh([new Gi(0,.5),new Gi(-.5,-.5),new Gi(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const i=[],s=[],r=[],n=[];let a=0,o=0;if(!1===Array.isArray(t))h(t);else for(let e=0;e<t.length;e++)h(t[e]),this.addGroup(a,o,e),a+=o,o=0;function h(t){const a=s.length/3,h=t.extractPoints(e);let l=h.shape;const c=h.holes;!1===ll.isClockWise(l)&&(l=l.reverse());for(let t=0,e=c.length;t<e;t++){const e=c[t];!0===ll.isClockWise(e)&&(c[t]=e.reverse())}const u=ll.triangulateShape(l,c);for(let t=0,e=c.length;t<e;t++){const e=c[t];l=l.concat(e)}for(let t=0,e=l.length;t<e;t++){const e=l[t];s.push(e.x,e.y,0),r.push(0,0,1),n.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],s=e[0]+a,r=e[1]+a,n=e[2]+a;i.push(s,r,n),o+=3}}this.setIndex(i),this.setAttribute("position",new wn(s,3)),this.setAttribute("normal",new wn(r,3)),this.setAttribute("uv",new wn(n,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let i=0,s=t.length;i<s;i++){const s=t[i];e.shapes.push(s.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const i=[];for(let s=0,r=t.shapes.length;s<r;s++){const r=e[t.shapes[s]];i.push(r)}return new xl(i,t.curveSegments)}}class bl extends In{constructor(t=1,e=32,i=16,s=0,r=2*Math.PI,n=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:s,phiLength:r,thetaStart:n,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const o=Math.min(n+a,Math.PI);let h=0;const l=[],c=new Bs,u=new Bs,d=[],p=[],m=[],y=[];for(let d=0;d<=i;d++){const g=[],f=d/i;let x=0;0===d&&0===n?x=.5/e:d===i&&o===Math.PI&&(x=-.5/e);for(let i=0;i<=e;i++){const o=i/e;c.x=-t*Math.cos(s+o*r)*Math.sin(n+f*a),c.y=t*Math.cos(n+f*a),c.z=t*Math.sin(s+o*r)*Math.sin(n+f*a),p.push(c.x,c.y,c.z),u.copy(c).normalize(),m.push(u.x,u.y,u.z),y.push(o+x,1-f),g.push(h++)}l.push(g)}for(let t=0;t<i;t++)for(let s=0;s<e;s++){const e=l[t][s+1],r=l[t][s],a=l[t+1][s],h=l[t+1][s+1];(0!==t||n>0)&&d.push(e,r,h),(t!==i-1||o<Math.PI)&&d.push(r,a,h)}this.setIndex(d),this.setAttribute("position",new wn(p,3)),this.setAttribute("normal",new wn(m,3)),this.setAttribute("uv",new wn(y,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new bl(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class vl extends Bh{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new vl(t.radius,t.detail)}}class wl extends In{constructor(t=1,e=.4,i=12,s=48,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:s,arc:r},i=Math.floor(i),s=Math.floor(s);const n=[],a=[],o=[],h=[],l=new Bs,c=new Bs,u=new Bs;for(let n=0;n<=i;n++)for(let d=0;d<=s;d++){const p=d/s*r,m=n/i*Math.PI*2;c.x=(t+e*Math.cos(m))*Math.cos(p),c.y=(t+e*Math.cos(m))*Math.sin(p),c.z=e*Math.sin(m),a.push(c.x,c.y,c.z),l.x=t*Math.cos(p),l.y=t*Math.sin(p),u.subVectors(c,l).normalize(),o.push(u.x,u.y,u.z),h.push(d/s),h.push(n/i)}for(let t=1;t<=i;t++)for(let e=1;e<=s;e++){const i=(s+1)*t+e-1,r=(s+1)*(t-1)+e-1,a=(s+1)*(t-1)+e,o=(s+1)*t+e;n.push(i,r,o),n.push(r,a,o)}this.setIndex(n),this.setAttribute("position",new wn(a,3)),this.setAttribute("normal",new wn(o,3)),this.setAttribute("uv",new wn(h,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new wl(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Ml extends In{constructor(t=1,e=.4,i=64,s=8,r=2,n=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:s,p:r,q:n},i=Math.floor(i),s=Math.floor(s);const a=[],o=[],h=[],l=[],c=new Bs,u=new Bs,d=new Bs,p=new Bs,m=new Bs,y=new Bs,g=new Bs;for(let a=0;a<=i;++a){const x=a/i*r*Math.PI*2;f(x,r,n,t,d),f(x+.01,r,n,t,p),y.subVectors(p,d),g.addVectors(p,d),m.crossVectors(y,g),g.crossVectors(m,y),m.normalize(),g.normalize();for(let t=0;t<=s;++t){const r=t/s*Math.PI*2,n=-e*Math.cos(r),p=e*Math.sin(r);c.x=d.x+(n*g.x+p*m.x),c.y=d.y+(n*g.y+p*m.y),c.z=d.z+(n*g.z+p*m.z),o.push(c.x,c.y,c.z),u.subVectors(c,d).normalize(),h.push(u.x,u.y,u.z),l.push(a/i),l.push(t/s)}}for(let t=1;t<=i;t++)for(let e=1;e<=s;e++){const i=(s+1)*(t-1)+(e-1),r=(s+1)*t+(e-1),n=(s+1)*t+e,o=(s+1)*(t-1)+e;a.push(i,r,o),a.push(r,n,o)}function f(t,e,i,s,r){const n=Math.cos(t),a=Math.sin(t),o=i/e*t,h=Math.cos(o);r.x=s*(2+h)*.5*n,r.y=s*(2+h)*a*.5,r.z=s*Math.sin(o)*.5}this.setIndex(a),this.setAttribute("position",new wn(o,3)),this.setAttribute("normal",new wn(h,3)),this.setAttribute("uv",new wn(l,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Ml(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Sl extends In{constructor(t=new vh(new Bs(-1,-1,0),new Bs(-1,1,0),new Bs(1,1,0)),e=64,i=1,s=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:s,closed:r};const n=t.computeFrenetFrames(e,r);this.tangents=n.tangents,this.normals=n.normals,this.binormals=n.binormals;const a=new Bs,o=new Bs,h=new Gi;let l=new Bs;const c=[],u=[],d=[],p=[];function m(r){l=t.getPointAt(r/e,l);const h=n.normals[r],d=n.binormals[r];for(let t=0;t<=s;t++){const e=t/s*Math.PI*2,r=Math.sin(e),n=-Math.cos(e);o.x=n*h.x+r*d.x,o.y=n*h.y+r*d.y,o.z=n*h.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),a.x=l.x+i*o.x,a.y=l.y+i*o.y,a.z=l.z+i*o.z,c.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)m(t);m(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let i=0;i<=s;i++)h.x=t/e,h.y=i/s,d.push(h.x,h.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=s;e++){const i=(s+1)*(t-1)+(e-1),r=(s+1)*t+(e-1),n=(s+1)*t+e,a=(s+1)*(t-1)+e;p.push(i,r,a),p.push(r,n,a)}}()}(),this.setIndex(p),this.setAttribute("position",new wn(c,3)),this.setAttribute("normal",new wn(u,3)),this.setAttribute("uv",new wn(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Sl((new Mh[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class _l extends In{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],i=new Set,s=new Bs,r=new Bs;if(null!==t.index){const n=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,h=o.length;t<h;++t){const h=o[t],l=h.start;for(let t=l,o=l+h.count;t<o;t+=3)for(let o=0;o<3;o++){const h=a.getX(t+o),l=a.getX(t+(o+1)%3);s.fromBufferAttribute(n,h),r.fromBufferAttribute(n,l),!0===Al(s,r,i)&&(e.push(s.x,s.y,s.z),e.push(r.x,r.y,r.z))}}}else{const n=t.attributes.position;for(let t=0,a=n.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,h=3*t+(a+1)%3;s.fromBufferAttribute(n,o),r.fromBufferAttribute(n,h),!0===Al(s,r,i)&&(e.push(s.x,s.y,s.z),e.push(r.x,r.y,r.z))}}this.setAttribute("position",new wn(e,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}function Al(t,e,i){const s=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==i.has(s)&&!0!==i.has(r)&&(i.add(s),i.add(r),!0)}var Tl=Object.freeze({__proto__:null,BoxGeometry:Dn,CapsuleGeometry:Th,CircleGeometry:zh,ConeGeometry:Ih,CylinderGeometry:Ch,DodecahedronGeometry:kh,EdgesGeometry:Fh,ExtrudeGeometry:dl,IcosahedronGeometry:ml,LatheGeometry:Ah,OctahedronGeometry:yl,PlaneGeometry:gl,PolyhedronGeometry:Bh,RingGeometry:fl,ShapeGeometry:xl,SphereGeometry:bl,TetrahedronGeometry:vl,TorusGeometry:wl,TorusKnotGeometry:Ml,TubeGeometry:Sl,WireframeGeometry:_l});class zl extends en{constructor(t){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Qr(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class Cl extends Yn{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class Il extends en{constructor(t){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Qr(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Bl extends Il{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Gi(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Hi(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Qr(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Qr(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Qr(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=t.anisotropy,this.anisotropyRotation=t.anisotropyRotation,this.anisotropyMap=t.anisotropyMap,this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.dispersion=t.dispersion,this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class kl extends en{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Qr(16777215),this.specular=new Qr(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Rl extends en{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Qr(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}class El extends en{constructor(t){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}class Pl extends en{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Qr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Ol extends en{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Fl extends en{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class Nl extends en{constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Qr(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Gi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Ll extends Co{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}function Vl(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function jl(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Ul(t){const e=t.length,i=new Array(e);for(let t=0;t!==e;++t)i[t]=t;return i.sort((function(e,i){return t[e]-t[i]})),i}function Wl(t,e,i){const s=t.length,r=new t.constructor(s);for(let n=0,a=0;a!==s;++n){const s=i[n]*e;for(let i=0;i!==e;++i)r[a++]=t[s+i]}return r}function Dl(t,e,i,s){let r=1,n=t[0];for(;void 0!==n&&void 0===n[s];)n=t[r++];if(void 0===n)return;let a=n[s];if(void 0!==a)if(Array.isArray(a))do{a=n[s],void 0!==a&&(e.push(n.time),i.push.apply(i,a)),n=t[r++]}while(void 0!==n);else if(void 0!==a.toArray)do{a=n[s],void 0!==a&&(e.push(n.time),a.toArray(i,i.length)),n=t[r++]}while(void 0!==n);else do{a=n[s],void 0!==a&&(e.push(n.time),i.push(a)),n=t[r++]}while(void 0!==n)}const Hl={convertArray:Vl,isTypedArray:jl,getKeyframeOrder:Ul,sortedArray:Wl,flattenJSON:Dl,subclip:function(t,e,i,s,r=30){const n=t.clone();n.name=e;const a=[];for(let t=0;t<n.tracks.length;++t){const e=n.tracks[t],o=e.getValueSize(),h=[],l=[];for(let t=0;t<e.times.length;++t){const n=e.times[t]*r;if(!(n<i||n>=s)){h.push(e.times[t]);for(let i=0;i<o;++i)l.push(e.values[t*o+i])}}0!==h.length&&(e.times=Vl(h,e.times.constructor),e.values=Vl(l,e.values.constructor),a.push(e))}n.tracks=a;let o=1/0;for(let t=0;t<n.tracks.length;++t)o>n.tracks[t].times[0]&&(o=n.tracks[t].times[0]);for(let t=0;t<n.tracks.length;++t)n.tracks[t].shift(-1*o);return n.resetDuration(),n},makeClipAdditive:function(t,e=0,i=t,s=30){s<=0&&(s=30);const r=i.tracks.length,n=e/s;for(let e=0;e<r;++e){const s=i.tracks[e],r=s.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===s.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const h=s.getValueSize();s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=h/3);let l=0;const c=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(l=c/3);const u=s.times.length-1;let d;if(n<=s.times[0]){const t=o,e=h-o;d=s.values.slice(t,e)}else if(n>=s.times[u]){const t=u*h+o,e=t+h-o;d=s.values.slice(t,e)}else{const t=s.createInterpolant(),e=o,i=h-o;t.evaluate(n),d=t.resultBuffer.slice(e,i)}if("quaternion"===r){(new Is).fromArray(d).normalize().conjugate().toArray(d)}const p=a.times.length;for(let t=0;t<p;++t){const e=t*c+l;if("quaternion"===r)Is.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=c-2*l;for(let i=0;i<t;++i)a.values[e+i]-=d[i]}}}return t.blendMode=Ve,t}};class ql{constructor(t,e,i,s){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==s?s:new e.constructor(i),this.sampleValues=e,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let i=this._cachedIndex,s=e[i],r=e[i-1];t:{e:{let n;i:{s:if(!(t<s)){for(let n=i+2;;){if(void 0===s){if(t<r)break s;return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===n)break;if(r=s,s=e[++i],t<s)break e}n=e.length;break i}if(t>=r)break t;{const a=e[1];t<a&&(i=2,r=a);for(let n=i-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(i===n)break;if(s=r,r=e[--i-1],t>=r)break e}n=i,i=0}}for(;i<n;){const s=i+n>>>1;t<e[s]?n=s:i=s+1}if(s=e[i],r=e[i-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===s)return i=e.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,s)}return this.interpolate_(i,r,t,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,i=this.sampleValues,s=this.valueSize,r=t*s;for(let t=0;t!==s;++t)e[t]=i[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Jl extends ql{constructor(t,e,i,s){super(t,e,i,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Oe,endingEnd:Oe}}intervalChanged_(t,e,i){const s=this.parameterPositions;let r=t-2,n=t+1,a=s[r],o=s[n];if(void 0===a)switch(this.getSettings_().endingStart){case Fe:r=t,a=2*e-i;break;case Ne:r=s.length-2,a=e+s[r]-s[r+1];break;default:r=t,a=i}if(void 0===o)switch(this.getSettings_().endingEnd){case Fe:n=t,o=2*i-e;break;case Ne:n=1,o=i+s[1]-s[0];break;default:n=t-1,o=e}const h=.5*(i-e),l=this.valueSize;this._weightPrev=h/(e-a),this._weightNext=h/(o-i),this._offsetPrev=r*l,this._offsetNext=n*l}interpolate_(t,e,i,s){const r=this.resultBuffer,n=this.sampleValues,a=this.valueSize,o=t*a,h=o-a,l=this._offsetPrev,c=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(i-e)/(s-e),m=p*p,y=m*p,g=-u*y+2*u*m-u*p,f=(1+u)*y+(-1.5-2*u)*m+(-.5+u)*p+1,x=(-1-d)*y+(1.5+d)*m+.5*p,b=d*y-d*m;for(let t=0;t!==a;++t)r[t]=g*n[l+t]+f*n[h+t]+x*n[o+t]+b*n[c+t];return r}}class Xl extends ql{constructor(t,e,i,s){super(t,e,i,s)}interpolate_(t,e,i,s){const r=this.resultBuffer,n=this.sampleValues,a=this.valueSize,o=t*a,h=o-a,l=(i-e)/(s-e),c=1-l;for(let t=0;t!==a;++t)r[t]=n[h+t]*c+n[o+t]*l;return r}}class Yl extends ql{constructor(t,e,i,s){super(t,e,i,s)}interpolate_(t){return this.copySampleValue_(t-1)}}class Zl{constructor(t,e,i,s){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Vl(e,this.TimeBufferType),this.values=Vl(i,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let i;if(e.toJSON!==this.toJSON)i=e.toJSON(t);else{i={name:t.name,times:Vl(t.times,Array),values:Vl(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(i.interpolation=e)}return i.type=t.ValueTypeName,i}InterpolantFactoryMethodDiscrete(t){return new Yl(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Xl(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Jl(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Re:e=this.InterpolantFactoryMethodDiscrete;break;case Ee:e=this.InterpolantFactoryMethodLinear;break;case Pe:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Re;case this.InterpolantFactoryMethodLinear:return Ee;case this.InterpolantFactoryMethodSmooth:return Pe}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let i=0,s=e.length;i!==s;++i)e[i]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let i=0,s=e.length;i!==s;++i)e[i]*=t}return this}trim(t,e){const i=this.times,s=i.length;let r=0,n=s-1;for(;r!==s&&i[r]<t;)++r;for(;-1!==n&&i[n]>e;)--n;if(++n,0!==r||n!==s){r>=n&&(n=Math.max(n,1),r=n-1);const t=this.getValueSize();this.times=i.slice(r,n),this.values=this.values.slice(r*t,n*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const i=this.times,s=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let n=null;for(let e=0;e!==r;e++){const s=i[e];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,s),t=!1;break}if(null!==n&&n>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,s,n),t=!1;break}n=s}if(void 0!==s&&jl(s))for(let e=0,i=s.length;e!==i;++e){const i=s[e];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,i),t=!1;break}}return t}optimize(){const t=this.times.slice(),e=this.values.slice(),i=this.getValueSize(),s=this.getInterpolation()===Pe,r=t.length-1;let n=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(s)r=!0;else{const t=a*i,s=t-i,n=t+i;for(let a=0;a!==i;++a){const i=e[t+a];if(i!==e[s+a]||i!==e[n+a]){r=!0;break}}}if(r){if(a!==n){t[n]=t[a];const s=a*i,r=n*i;for(let t=0;t!==i;++t)e[r+t]=e[s+t]}++n}}if(r>0){t[n]=t[r];for(let t=r*i,s=n*i,a=0;a!==i;++a)e[s+a]=e[t+a];++n}return n!==t.length?(this.times=t.slice(0,n),this.values=e.slice(0,n*i)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}Zl.prototype.TimeBufferType=Float32Array,Zl.prototype.ValueBufferType=Float32Array,Zl.prototype.DefaultInterpolation=Ee;class Gl extends Zl{constructor(t,e,i){super(t,e,i)}}Gl.prototype.ValueTypeName="bool",Gl.prototype.ValueBufferType=Array,Gl.prototype.DefaultInterpolation=Re,Gl.prototype.InterpolantFactoryMethodLinear=void 0,Gl.prototype.InterpolantFactoryMethodSmooth=void 0;class $l extends Zl{}$l.prototype.ValueTypeName="color";class Ql extends Zl{}Ql.prototype.ValueTypeName="number";class Kl extends ql{constructor(t,e,i,s){super(t,e,i,s)}interpolate_(t,e,i,s){const r=this.resultBuffer,n=this.sampleValues,a=this.valueSize,o=(i-e)/(s-e);let h=t*a;for(let t=h+a;h!==t;h+=4)Is.slerpFlat(r,0,n,h-a,n,h,o);return r}}class tc extends Zl{InterpolantFactoryMethodLinear(t){return new Kl(this.times,this.values,this.getValueSize(),t)}}tc.prototype.ValueTypeName="quaternion",tc.prototype.InterpolantFactoryMethodSmooth=void 0;class ec extends Zl{constructor(t,e,i){super(t,e,i)}}ec.prototype.ValueTypeName="string",ec.prototype.ValueBufferType=Array,ec.prototype.DefaultInterpolation=Re,ec.prototype.InterpolantFactoryMethodLinear=void 0,ec.prototype.InterpolantFactoryMethodSmooth=void 0;class ic extends Zl{}ic.prototype.ValueTypeName="vector";class sc{constructor(t="",e=-1,i=[],s=2500){this.name=t,this.tracks=i,this.duration=e,this.blendMode=s,this.uuid=Di(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],i=t.tracks,s=1/(t.fps||1);for(let t=0,r=i.length;t!==r;++t)e.push(rc(i[t]).scale(s));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],i=t.tracks,s={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,s=i.length;t!==s;++t)e.push(Zl.toJSON(i[t]));return s}static CreateFromMorphTargetSequence(t,e,i,s){const r=e.length,n=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const h=Ul(a);a=Wl(a,1,h),o=Wl(o,1,h),s||0!==a[0]||(a.push(r),o.push(o[0])),n.push(new Ql(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/i))}return new this(t,-1,n)}static findByName(t,e){let i=t;if(!Array.isArray(t)){const e=t;i=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<i.length;t++)if(i[t].name===e)return i[t];return null}static CreateClipsFromMorphTargetSequences(t,e,i){const s={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,i=t.length;e<i;e++){const i=t[e],n=i.name.match(r);if(n&&n.length>1){const t=n[1];let e=s[t];e||(s[t]=e=[]),e.push(i)}}const n=[];for(const t in s)n.push(this.CreateFromMorphTargetSequence(t,s[t],e,i));return n}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(t,e,i,s,r){if(0!==i.length){const n=[],a=[];Dl(i,n,a,s),0!==n.length&&r.push(new t(e,n,a))}},s=[],r=t.name||"default",n=t.fps||30,a=t.blendMode;let o=t.length||-1;const h=t.hierarchy||[];for(let t=0;t<h.length;t++){const r=h[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let i=0;i<r[e].morphTargets.length;i++)t[r[e].morphTargets[i]]=-1;for(const i in t){const t=[],n=[];for(let s=0;s!==r[e].morphTargets.length;++s){const s=r[e];t.push(s.time),n.push(s.morphTarget===i?1:0)}s.push(new Ql(".morphTargetInfluence["+i+"]",t,n))}o=t.length*n}else{const n=".bones["+e[t].name+"]";i(ic,n+".position",r,"pos",s),i(tc,n+".quaternion",r,"rot",s),i(ic,n+".scale",r,"scl",s)}}if(0===s.length)return null;return new this(r,o,s,a)}resetDuration(){let t=0;for(let e=0,i=this.tracks.length;e!==i;++e){const i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function rc(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Ql;case"vector":case"vector2":case"vector3":case"vector4":return ic;case"color":return $l;case"quaternion":return tc;case"bool":case"boolean":return Gl;case"string":return ec}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],i=[];Dl(t.keys,e,i,"value"),t.times=e,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const nc={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class ac{constructor(t,e,i){const s=this;let r,n=!1,a=0,o=0;const h=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){o++,!1===n&&void 0!==s.onStart&&s.onStart(t,a,o),n=!0},this.itemEnd=function(t){a++,void 0!==s.onProgress&&s.onProgress(t,a,o),a===o&&(n=!1,void 0!==s.onLoad&&s.onLoad())},this.itemError=function(t){void 0!==s.onError&&s.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return h.push(t,e),this},this.removeHandler=function(t){const e=h.indexOf(t);return-1!==e&&h.splice(e,2),this},this.getHandler=function(t){for(let e=0,i=h.length;e<i;e+=2){const i=h[e],s=h[e+1];if(i.global&&(i.lastIndex=0),i.test(t))return s}return null}}}const oc=new ac;class hc{constructor(t){this.manager=void 0!==t?t:oc,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise((function(s,r){i.load(t,s,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}hc.DEFAULT_MATERIAL_NAME="__DEFAULT";const lc={};class cc extends Error{constructor(t,e){super(t),this.response=e}}class uc extends hc{constructor(t){super(t)}load(t,e,i,s){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=nc.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==lc[t])return void lc[t].push({onLoad:e,onProgress:i,onError:s});lc[t]=[],lc[t].push({onLoad:e,onProgress:i,onError:s});const n=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(n).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const i=lc[t],s=e.body.getReader(),r=e.headers.get("X-File-Size")||e.headers.get("Content-Length"),n=r?parseInt(r):0,a=0!==n;let o=0;const h=new ReadableStream({start(t){!function e(){s.read().then((({done:s,value:r})=>{if(s)t.close();else{o+=r.byteLength;const s=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:n});for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onProgress&&e.onProgress(s)}t.enqueue(r),e()}}),(e=>{t.error(e)}))}()}});return new Response(h)}throw new cc(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),i=e&&e[1]?e[1].toLowerCase():void 0,s=new TextDecoder(i);return t.arrayBuffer().then((t=>s.decode(t)))}}})).then((e=>{nc.add(t,e);const i=lc[t];delete lc[t];for(let t=0,s=i.length;t<s;t++){const s=i[t];s.onLoad&&s.onLoad(e)}})).catch((e=>{const i=lc[t];if(void 0===i)throw this.manager.itemError(t),e;delete lc[t];for(let t=0,s=i.length;t<s;t++){const s=i[t];s.onError&&s.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class dc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=new uc(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials),n.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){s?s(e):console.error(e),r.manager.itemError(t)}}),i,s)}parse(t){const e=[];for(let i=0;i<t.length;i++){const s=sc.parse(t[i]);e.push(s)}return e}}class pc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=[],a=new Qo,o=new uc(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials);let h=0;function l(l){o.load(t[l],(function(t){const i=r.parse(t,!0);n[l]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},h+=1,6===h&&(1===i.mipmapCount&&(a.minFilter=wt),a.image=n,a.format=i.format,a.needsUpdate=!0,e&&e(a))}),i,s)}if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)l(e);else o.load(t,(function(t){const i=r.parse(t,!0);if(i.isCubemap){const t=i.mipmaps.length/i.mipmapCount;for(let e=0;e<t;e++){n[e]={mipmaps:[]};for(let t=0;t<i.mipmapCount;t++)n[e].mipmaps.push(i.mipmaps[e*i.mipmapCount+t]),n[e].format=i.format,n[e].width=i.width,n[e].height=i.height}a.image=n}else a.image.width=i.width,a.image.height=i.height,a.mipmaps=i.mipmaps;1===i.mipmapCount&&(a.minFilter=wt),a.format=i.format,a.needsUpdate=!0,e&&e(a)}),i,s);return a}}class mc extends hc{constructor(t){super(t)}load(t,e,i,s){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,n=nc.get(t);if(void 0!==n)return r.manager.itemStart(t),setTimeout((function(){e&&e(n),r.manager.itemEnd(t)}),0),n;const a=is("img");function o(){l(),nc.add(t,this),e&&e(this),r.manager.itemEnd(t)}function h(e){l(),s&&s(e),r.manager.itemError(t),r.manager.itemEnd(t)}function l(){a.removeEventListener("load",o,!1),a.removeEventListener("error",h,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",h,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class yc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=new ia;r.colorSpace=Ge;const n=new mc(this.manager);n.setCrossOrigin(this.crossOrigin),n.setPath(this.path);let a=0;function o(i){n.load(t[i],(function(t){r.images[i]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,s)}for(let e=0;e<t.length;++e)o(e);return r}}class gc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=new Da,a=new uc(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(t,(function(t){let i;try{i=r.parse(t)}catch(t){if(void 0===s)return void console.error(t);s(t)}void 0!==i.image?n.image=i.image:void 0!==i.data&&(n.image.width=i.width,n.image.height=i.height,n.image.data=i.data),n.wrapS=void 0!==i.wrapS?i.wrapS:mt,n.wrapT=void 0!==i.wrapT?i.wrapT:mt,n.magFilter=void 0!==i.magFilter?i.magFilter:wt,n.minFilter=void 0!==i.minFilter?i.minFilter:wt,n.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.colorSpace&&(n.colorSpace=i.colorSpace),void 0!==i.flipY&&(n.flipY=i.flipY),void 0!==i.format&&(n.format=i.format),void 0!==i.type&&(n.type=i.type),void 0!==i.mipmaps&&(n.mipmaps=i.mipmaps,n.minFilter=_t),1===i.mipmapCount&&(n.minFilter=wt),void 0!==i.generateMipmaps&&(n.generateMipmaps=i.generateMipmaps),n.needsUpdate=!0,e&&e(n,i)}),i,s),n}}class fc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=new ws,n=new mc(this.manager);return n.setCrossOrigin(this.crossOrigin),n.setPath(this.path),n.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),i,s),r}}class xc extends Er{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new Qr(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(e.object.target=this.target.uuid),e}}class bc extends xc{constructor(t,e,i){super(t,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Er.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Qr(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const vc=new ar,wc=new Bs,Mc=new Bs;class Sc{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Gi(512,512),this.map=null,this.mapPass=null,this.matrix=new ar,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ho,this._frameExtents=new Gi(1,1),this._viewportCount=1,this._viewports=[new Ms(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;wc.setFromMatrixPosition(t.matrixWorld),e.position.copy(wc),Mc.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Mc),e.updateMatrixWorld(),vc.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(vc),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(vc)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 1!==this.intensity&&(t.intensity=this.intensity),0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class _c extends Sc{constructor(){super(new Kn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,i=2*Wi*t.angle*this.focus,s=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&s===e.aspect&&r===e.far||(e.fov=i,e.aspect=s,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class Ac extends xc{constructor(t,e,i=0,s=Math.PI/3,r=0,n=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Er.DEFAULT_UP),this.updateMatrix(),this.target=new Er,this.distance=i,this.angle=s,this.penumbra=r,this.decay=n,this.map=null,this.shadow=new _c}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const Tc=new ar,zc=new Bs,Cc=new Bs;class Ic extends Sc{constructor(){super(new Kn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Gi(4,2),this._viewportCount=6,this._viewports=[new Ms(2,1,1,1),new Ms(0,1,1,1),new Ms(3,1,1,1),new Ms(1,1,1,1),new Ms(3,0,1,1),new Ms(1,0,1,1)],this._cubeDirections=[new Bs(1,0,0),new Bs(-1,0,0),new Bs(0,0,1),new Bs(0,0,-1),new Bs(0,1,0),new Bs(0,-1,0)],this._cubeUps=[new Bs(0,1,0),new Bs(0,1,0),new Bs(0,1,0),new Bs(0,1,0),new Bs(0,0,1),new Bs(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,s=this.matrix,r=t.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),zc.setFromMatrixPosition(t.matrixWorld),i.position.copy(zc),Cc.copy(i.position),Cc.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(Cc),i.updateMatrixWorld(),s.makeTranslation(-zc.x,-zc.y,-zc.z),Tc.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Tc)}}class Bc extends xc{constructor(t,e,i=0,s=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=s,this.shadow=new Ic}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class kc extends Zn{constructor(t=-1,e=1,i=1,s=-1,r=.1,n=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=s,this.near=r,this.far=n,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,i,s,r,n){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=n,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=i-t,n=i+t,a=s+e,o=s-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,n=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,n,a,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}class Rc extends Sc{constructor(){super(new kc(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Ec extends xc{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Er.DEFAULT_UP),this.updateMatrix(),this.target=new Er,this.shadow=new Rc}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Pc extends xc{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class Oc extends xc{constructor(t,e,i=10,s=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=s}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class Fc{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new Bs)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,s=t.y,r=t.z,n=this.coefficients;return e.copy(n[0]).multiplyScalar(.282095),e.addScaledVector(n[1],.488603*s),e.addScaledVector(n[2],.488603*r),e.addScaledVector(n[3],.488603*i),e.addScaledVector(n[4],i*s*1.092548),e.addScaledVector(n[5],s*r*1.092548),e.addScaledVector(n[6],.315392*(3*r*r-1)),e.addScaledVector(n[7],i*r*1.092548),e.addScaledVector(n[8],.546274*(i*i-s*s)),e}getIrradianceAt(t,e){const i=t.x,s=t.y,r=t.z,n=this.coefficients;return e.copy(n[0]).multiplyScalar(.886227),e.addScaledVector(n[1],1.023328*s),e.addScaledVector(n[2],1.023328*r),e.addScaledVector(n[3],1.023328*i),e.addScaledVector(n[4],.858086*i*s),e.addScaledVector(n[5],.858086*s*r),e.addScaledVector(n[6],.743125*r*r-.247708),e.addScaledVector(n[7],.858086*i*r),e.addScaledVector(n[8],.429043*(i*i-s*s)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].fromArray(t,e+3*s);return this}toArray(t=[],e=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].toArray(t,e+3*s);return t}static getBasisAt(t,e){const i=t.x,s=t.y,r=t.z;e[0]=.282095,e[1]=.488603*s,e[2]=.488603*r,e[3]=.488603*i,e[4]=1.092548*i*s,e[5]=1.092548*s*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*i*r,e[8]=.546274*(i*i-s*s)}}class Nc extends xc{constructor(t=new Fc,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class Lc extends hc{constructor(t){super(t),this.textures={}}load(t,e,i,s){const r=this,n=new uc(r.manager);n.setPath(r.path),n.setRequestHeader(r.requestHeader),n.setWithCredentials(r.withCredentials),n.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){s?s(e):console.error(e),r.manager.itemError(t)}}),i,s)}parse(t){const e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const s=this.createMaterialFromType(t.type);if(void 0!==t.uuid&&(s.uuid=t.uuid),void 0!==t.name&&(s.name=t.name),void 0!==t.color&&void 0!==s.color&&s.color.setHex(t.color),void 0!==t.roughness&&(s.roughness=t.roughness),void 0!==t.metalness&&(s.metalness=t.metalness),void 0!==t.sheen&&(s.sheen=t.sheen),void 0!==t.sheenColor&&(s.sheenColor=(new Qr).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(s.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==s.emissive&&s.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==s.specular&&s.specular.setHex(t.specular),void 0!==t.specularIntensity&&(s.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==s.specularColor&&s.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(s.shininess=t.shininess),void 0!==t.clearcoat&&(s.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(s.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.dispersion&&(s.dispersion=t.dispersion),void 0!==t.iridescence&&(s.iridescence=t.iridescence),void 0!==t.iridescenceIOR&&(s.iridescenceIOR=t.iridescenceIOR),void 0!==t.iridescenceThicknessRange&&(s.iridescenceThicknessRange=t.iridescenceThicknessRange),void 0!==t.transmission&&(s.transmission=t.transmission),void 0!==t.thickness&&(s.thickness=t.thickness),void 0!==t.attenuationDistance&&(s.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==s.attenuationColor&&s.attenuationColor.setHex(t.attenuationColor),void 0!==t.anisotropy&&(s.anisotropy=t.anisotropy),void 0!==t.anisotropyRotation&&(s.anisotropyRotation=t.anisotropyRotation),void 0!==t.fog&&(s.fog=t.fog),void 0!==t.flatShading&&(s.flatShading=t.flatShading),void 0!==t.blending&&(s.blending=t.blending),void 0!==t.combine&&(s.combine=t.combine),void 0!==t.side&&(s.side=t.side),void 0!==t.shadowSide&&(s.shadowSide=t.shadowSide),void 0!==t.opacity&&(s.opacity=t.opacity),void 0!==t.transparent&&(s.transparent=t.transparent),void 0!==t.alphaTest&&(s.alphaTest=t.alphaTest),void 0!==t.alphaHash&&(s.alphaHash=t.alphaHash),void 0!==t.depthFunc&&(s.depthFunc=t.depthFunc),void 0!==t.depthTest&&(s.depthTest=t.depthTest),void 0!==t.depthWrite&&(s.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(s.colorWrite=t.colorWrite),void 0!==t.blendSrc&&(s.blendSrc=t.blendSrc),void 0!==t.blendDst&&(s.blendDst=t.blendDst),void 0!==t.blendEquation&&(s.blendEquation=t.blendEquation),void 0!==t.blendSrcAlpha&&(s.blendSrcAlpha=t.blendSrcAlpha),void 0!==t.blendDstAlpha&&(s.blendDstAlpha=t.blendDstAlpha),void 0!==t.blendEquationAlpha&&(s.blendEquationAlpha=t.blendEquationAlpha),void 0!==t.blendColor&&void 0!==s.blendColor&&s.blendColor.setHex(t.blendColor),void 0!==t.blendAlpha&&(s.blendAlpha=t.blendAlpha),void 0!==t.stencilWriteMask&&(s.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(s.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(s.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(s.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(s.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(s.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(s.stencilZPass=t.stencilZPass),void 0!==t.stencilWrite&&(s.stencilWrite=t.stencilWrite),void 0!==t.wireframe&&(s.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(s.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(s.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(s.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(s.rotation=t.rotation),void 0!==t.linewidth&&(s.linewidth=t.linewidth),void 0!==t.dashSize&&(s.dashSize=t.dashSize),void 0!==t.gapSize&&(s.gapSize=t.gapSize),void 0!==t.scale&&(s.scale=t.scale),void 0!==t.polygonOffset&&(s.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(s.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(s.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(s.dithering=t.dithering),void 0!==t.alphaToCoverage&&(s.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(s.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.forceSinglePass&&(s.forceSinglePass=t.forceSinglePass),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.toneMapped&&(s.toneMapped=t.toneMapped),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?s.vertexColors=t.vertexColors>0:s.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(s.uniforms[e]={},r.type){case"t":s.uniforms[e].value=i(r.value);break;case"c":s.uniforms[e].value=(new Qr).setHex(r.value);break;case"v2":s.uniforms[e].value=(new Gi).fromArray(r.value);break;case"v3":s.uniforms[e].value=(new Bs).fromArray(r.value);break;case"v4":s.uniforms[e].value=(new Ms).fromArray(r.value);break;case"m3":s.uniforms[e].value=(new $i).fromArray(r.value);break;case"m4":s.uniforms[e].value=(new ar).fromArray(r.value);break;default:s.uniforms[e].value=r.value}}if(void 0!==t.defines&&(s.defines=t.defines),void 0!==t.vertexShader&&(s.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(s.fragmentShader=t.fragmentShader),void 0!==t.glslVersion&&(s.glslVersion=t.glslVersion),void 0!==t.extensions)for(const e in t.extensions)s.extensions[e]=t.extensions[e];if(void 0!==t.lights&&(s.lights=t.lights),void 0!==t.clipping&&(s.clipping=t.clipping),void 0!==t.size&&(s.size=t.size),void 0!==t.sizeAttenuation&&(s.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(s.map=i(t.map)),void 0!==t.matcap&&(s.matcap=i(t.matcap)),void 0!==t.alphaMap&&(s.alphaMap=i(t.alphaMap)),void 0!==t.bumpMap&&(s.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(s.bumpScale=t.bumpScale),void 0!==t.normalMap&&(s.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(s.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),s.normalScale=(new Gi).fromArray(e)}return void 0!==t.displacementMap&&(s.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(s.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(s.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(s.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(s.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(s.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(s.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(s.specularMap=i(t.specularMap)),void 0!==t.specularIntensityMap&&(s.specularIntensityMap=i(t.specularIntensityMap)),void 0!==t.specularColorMap&&(s.specularColorMap=i(t.specularColorMap)),void 0!==t.envMap&&(s.envMap=i(t.envMap)),void 0!==t.envMapRotation&&s.envMapRotation.fromArray(t.envMapRotation),void 0!==t.envMapIntensity&&(s.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(s.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(s.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(s.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(s.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(s.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(s.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(s.gradientMap=i(t.gradientMap)),void 0!==t.clearcoatMap&&(s.clearcoatMap=i(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(s.clearcoatRoughnessMap=i(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(s.clearcoatNormalMap=i(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(s.clearcoatNormalScale=(new Gi).fromArray(t.clearcoatNormalScale)),void 0!==t.iridescenceMap&&(s.iridescenceMap=i(t.iridescenceMap)),void 0!==t.iridescenceThicknessMap&&(s.iridescenceThicknessMap=i(t.iridescenceThicknessMap)),void 0!==t.transmissionMap&&(s.transmissionMap=i(t.transmissionMap)),void 0!==t.thicknessMap&&(s.thicknessMap=i(t.thicknessMap)),void 0!==t.anisotropyMap&&(s.anisotropyMap=i(t.anisotropyMap)),void 0!==t.sheenColorMap&&(s.sheenColorMap=i(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(s.sheenRoughnessMap=i(t.sheenRoughnessMap)),s}setTextures(t){return this.textures=t,this}createMaterialFromType(t){return Lc.createMaterialFromType(t)}static createMaterialFromType(t){return new{ShadowMaterial:zl,SpriteMaterial:pa,RawShaderMaterial:Cl,ShaderMaterial:Yn,PointsMaterial:Wo,MeshPhysicalMaterial:Bl,MeshStandardMaterial:Il,MeshPhongMaterial:kl,MeshToonMaterial:Rl,MeshNormalMaterial:El,MeshLambertMaterial:Pl,MeshDepthMaterial:Ol,MeshDistanceMaterial:Fl,MeshBasicMaterial:sn,MeshMatcapMaterial:Nl,LineDashedMaterial:Ll,LineBasicMaterial:Co,Material:en}[t]}}class Vc{static decodeText(t){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),"undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let i=0,s=t.length;i<s;i++)e+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class jc extends In{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class Uc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=new uc(r.manager);n.setPath(r.path),n.setRequestHeader(r.requestHeader),n.setWithCredentials(r.withCredentials),n.load(t,(function(i){try{e(r.parse(JSON.parse(i)))}catch(e){s?s(e):console.error(e),r.manager.itemError(t)}}),i,s)}parse(t){const e={},i={};function s(t,s){if(void 0!==e[s])return e[s];const r=t.interleavedBuffers[s],n=function(t,e){if(void 0!==i[e])return i[e];const s=t.arrayBuffers,r=s[e],n=new Uint32Array(r).buffer;return i[e]=n,n}(t,r.buffer),a=es(r.type,n),o=new ca(a,r.stride);return o.uuid=r.uuid,e[s]=o,o}const r=t.isInstancedBufferGeometry?new jc:new In,n=t.data.index;if(void 0!==n){const t=es(n.type,n.array);r.setIndex(new dn(t,1))}const a=t.data.attributes;for(const e in a){const i=a[e];let n;if(i.isInterleavedBufferAttribute){const e=s(t.data,i.data);n=new da(e,i.itemSize,i.offset,i.normalized)}else{const t=es(i.type,i.array);n=new(i.isInstancedBufferAttribute?Xa:dn)(t,i.itemSize,i.normalized)}void 0!==i.name&&(n.name=i.name),void 0!==i.usage&&n.setUsage(i.usage),r.setAttribute(e,n)}const o=t.data.morphAttributes;if(o)for(const e in o){const i=o[e],n=[];for(let e=0,r=i.length;e<r;e++){const r=i[e];let a;if(r.isInterleavedBufferAttribute){const e=s(t.data,r.data);a=new da(e,r.itemSize,r.offset,r.normalized)}else{const t=es(r.type,r.array);a=new dn(t,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),n.push(a)}r.morphAttributes[e]=n}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const h=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==h)for(let t=0,e=h.length;t!==e;++t){const e=h[t];r.addGroup(e.start,e.count,e.materialIndex)}const l=t.data.boundingSphere;if(void 0!==l){const t=new Bs;void 0!==l.center&&t.fromArray(l.center),r.boundingSphere=new $s(t,l.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}class Wc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=""===this.path?Vc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||n;const a=new uc(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(i){let n=null;try{n=JSON.parse(i)}catch(e){return void 0!==s&&s(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const a=n.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())return void 0!==s&&s(new Error("THREE.ObjectLoader: Can't load "+t)),void console.error("THREE.ObjectLoader: Can't load "+t);r.parse(n,e)}),i,s)}async loadAsync(t,e){const i=""===this.path?Vc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const s=new uc(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials);const r=await s.loadAsync(t,e),n=JSON.parse(r),a=n.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(n)}parse(t,e){const i=this.parseAnimations(t.animations),s=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,s),n=this.parseImages(t.images,(function(){void 0!==e&&e(h)})),a=this.parseTextures(t.textures,n),o=this.parseMaterials(t.materials,a),h=this.parseObject(t.object,r,o,a,i),l=this.parseSkeletons(t.skeletons,h);if(this.bindSkeletons(h,l),this.bindLightTargets(h),void 0!==e){let t=!1;for(const e in n)if(n[e].data instanceof HTMLImageElement){t=!0;break}!1===t&&e(h)}return h}async parseAsync(t){const e=this.parseAnimations(t.animations),i=this.parseShapes(t.shapes),s=this.parseGeometries(t.geometries,i),r=await this.parseImagesAsync(t.images),n=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,n),o=this.parseObject(t.object,s,a,n,e),h=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,h),this.bindLightTargets(o),o}parseShapes(t){const e={};if(void 0!==t)for(let i=0,s=t.length;i<s;i++){const s=(new Nh).fromJSON(t[i]);e[s.uuid]=s}return e}parseSkeletons(t,e){const i={},s={};if(e.traverse((function(t){t.isBone&&(s[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new Ja).fromJSON(t[e],s);i[r.uuid]=r}return i}parseGeometries(t,e){const i={};if(void 0!==t){const s=new Uc;for(let r=0,n=t.length;r<n;r++){let n;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":n=s.parse(a);break;default:a.type in Tl?n=Tl[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}n.uuid=a.uuid,void 0!==a.name&&(n.name=a.name),void 0!==a.userData&&(n.userData=a.userData),i[a.uuid]=n}}return i}parseMaterials(t,e){const i={},s={};if(void 0!==t){const r=new Lc;r.setTextures(e);for(let e=0,n=t.length;e<n;e++){const n=t[e];void 0===i[n.uuid]&&(i[n.uuid]=r.parse(n)),s[n.uuid]=i[n.uuid]}}return s}parseAnimations(t){const e={};if(void 0!==t)for(let i=0;i<t.length;i++){const s=t[i],r=sc.parse(s);e[r.uuid]=r}return e}parseImages(t,e){const i=this,s={};let r;function n(t){if("string"==typeof t){const e=t;return function(t){return i.manager.itemStart(t),r.load(t,(function(){i.manager.itemEnd(t)}),void 0,(function(){i.manager.itemError(t),i.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:i.resourcePath+e)}return t.data?{data:es(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const i=new ac(e);r=new mc(i),r.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],r=i.url;if(Array.isArray(r)){const t=[];for(let e=0,i=r.length;e<i;e++){const i=n(r[e]);null!==i&&(i instanceof HTMLImageElement?t.push(i):t.push(new Da(i.data,i.width,i.height)))}s[i.uuid]=new xs(t)}else{const t=n(i.url);s[i.uuid]=new xs(t)}}}return s}async parseImagesAsync(t){const e=this,i={};let s;async function r(t){if("string"==typeof t){const i=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(i)?i:e.resourcePath+i;return await s.loadAsync(r)}return t.data?{data:es(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){s=new mc(this.manager),s.setCrossOrigin(this.crossOrigin);for(let e=0,s=t.length;e<s;e++){const s=t[e],n=s.url;if(Array.isArray(n)){const t=[];for(let e=0,i=n.length;e<i;e++){const i=n[e],s=await r(i);null!==s&&(s instanceof HTMLImageElement?t.push(s):t.push(new Da(s.data,s.width,s.height)))}i[s.uuid]=new xs(t)}else{const t=await r(s.url);i[s.uuid]=new xs(t)}}}return i}parseTextures(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const s={};if(void 0!==t)for(let r=0,n=t.length;r<n;r++){const n=t[r];void 0===n.image&&console.warn('THREE.ObjectLoader: No "image" specified for',n.uuid),void 0===e[n.image]&&console.warn("THREE.ObjectLoader: Undefined image",n.image);const a=e[n.image],o=a.data;let h;Array.isArray(o)?(h=new ia,6===o.length&&(h.needsUpdate=!0)):(h=o&&o.data?new Da:new ws,o&&(h.needsUpdate=!0)),h.source=a,h.uuid=n.uuid,void 0!==n.name&&(h.name=n.name),void 0!==n.mapping&&(h.mapping=i(n.mapping,Dc)),void 0!==n.channel&&(h.channel=n.channel),void 0!==n.offset&&h.offset.fromArray(n.offset),void 0!==n.repeat&&h.repeat.fromArray(n.repeat),void 0!==n.center&&h.center.fromArray(n.center),void 0!==n.rotation&&(h.rotation=n.rotation),void 0!==n.wrap&&(h.wrapS=i(n.wrap[0],Hc),h.wrapT=i(n.wrap[1],Hc)),void 0!==n.format&&(h.format=n.format),void 0!==n.internalFormat&&(h.internalFormat=n.internalFormat),void 0!==n.type&&(h.type=n.type),void 0!==n.colorSpace&&(h.colorSpace=n.colorSpace),void 0!==n.minFilter&&(h.minFilter=i(n.minFilter,qc)),void 0!==n.magFilter&&(h.magFilter=i(n.magFilter,qc)),void 0!==n.anisotropy&&(h.anisotropy=n.anisotropy),void 0!==n.flipY&&(h.flipY=n.flipY),void 0!==n.generateMipmaps&&(h.generateMipmaps=n.generateMipmaps),void 0!==n.premultiplyAlpha&&(h.premultiplyAlpha=n.premultiplyAlpha),void 0!==n.unpackAlignment&&(h.unpackAlignment=n.unpackAlignment),void 0!==n.compareFunction&&(h.compareFunction=n.compareFunction),void 0!==n.userData&&(h.userData=n.userData),s[n.uuid]=h}return s}parseObject(t,e,i,s,r){let n,a,o;function h(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function l(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let s=0,r=t.length;s<r;s++){const r=t[s];void 0===i[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(i[r])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}function c(t){return void 0===s[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),s[t]}switch(t.type){case"Scene":n=new la,void 0!==t.background&&(Number.isInteger(t.background)?n.background=new Qr(t.background):n.background=c(t.background)),void 0!==t.environment&&(n.environment=c(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?n.fog=new ha(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(n.fog=new oa(t.fog.color,t.fog.density)),""!==t.fog.name&&(n.fog.name=t.fog.name)),void 0!==t.backgroundBlurriness&&(n.backgroundBlurriness=t.backgroundBlurriness),void 0!==t.backgroundIntensity&&(n.backgroundIntensity=t.backgroundIntensity),void 0!==t.backgroundRotation&&n.backgroundRotation.fromArray(t.backgroundRotation),void 0!==t.environmentIntensity&&(n.environmentIntensity=t.environmentIntensity),void 0!==t.environmentRotation&&n.environmentRotation.fromArray(t.environmentRotation);break;case"PerspectiveCamera":n=new Kn(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(n.focus=t.focus),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.filmGauge&&(n.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(n.filmOffset=t.filmOffset),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"OrthographicCamera":n=new kc(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"AmbientLight":n=new Pc(t.color,t.intensity);break;case"DirectionalLight":n=new Ec(t.color,t.intensity),n.target=t.target||"";break;case"PointLight":n=new Bc(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":n=new Oc(t.color,t.intensity,t.width,t.height);break;case"SpotLight":n=new Ac(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay),n.target=t.target||"";break;case"HemisphereLight":n=new bc(t.color,t.groundColor,t.intensity);break;case"LightProbe":n=(new Nc).fromJSON(t);break;case"SkinnedMesh":a=h(t.geometry),o=l(t.material),n=new Ua(a,o),void 0!==t.bindMode&&(n.bindMode=t.bindMode),void 0!==t.bindMatrix&&n.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(n.skeleton=t.skeleton);break;case"Mesh":a=h(t.geometry),o=l(t.material),n=new Un(a,o);break;case"InstancedMesh":a=h(t.geometry),o=l(t.material);const e=t.count,i=t.instanceMatrix,s=t.instanceColor;n=new eo(a,o,e),n.instanceMatrix=new Xa(new Float32Array(i.array),16),void 0!==s&&(n.instanceColor=new Xa(new Float32Array(s.array),s.itemSize));break;case"BatchedMesh":a=h(t.geometry),o=l(t.material),n=new zo(t.maxInstanceCount,t.maxVertexCount,t.maxIndexCount,o),n.geometry=a,n.perObjectFrustumCulled=t.perObjectFrustumCulled,n.sortObjects=t.sortObjects,n._drawRanges=t.drawRanges,n._reservedRanges=t.reservedRanges,n._visibility=t.visibility,n._active=t.active,n._bounds=t.bounds.map((t=>{const e=new Es;e.min.fromArray(t.boxMin),e.max.fromArray(t.boxMax);const i=new $s;return i.radius=t.sphereRadius,i.center.fromArray(t.sphereCenter),{boxInitialized:t.boxInitialized,box:e,sphereInitialized:t.sphereInitialized,sphere:i}})),n._maxInstanceCount=t.maxInstanceCount,n._maxVertexCount=t.maxVertexCount,n._maxIndexCount=t.maxIndexCount,n._geometryInitialized=t.geometryInitialized,n._geometryCount=t.geometryCount,n._matricesTexture=c(t.matricesTexture.uuid),void 0!==t.colorsTexture&&(n._colorsTexture=c(t.colorsTexture.uuid));break;case"LOD":n=new ka;break;case"Line":n=new Fo(h(t.geometry),l(t.material));break;case"LineLoop":n=new Uo(h(t.geometry),l(t.material));break;case"LineSegments":n=new jo(h(t.geometry),l(t.material));break;case"PointCloud":case"Points":n=new Xo(h(t.geometry),l(t.material));break;case"Sprite":n=new za(l(t.material));break;case"Group":n=new ra;break;case"Bone":n=new Wa;break;default:n=new Er}if(n.uuid=t.uuid,void 0!==t.name&&(n.name=t.name),void 0!==t.matrix?(n.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(n.matrixAutoUpdate=t.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==t.position&&n.position.fromArray(t.position),void 0!==t.rotation&&n.rotation.fromArray(t.rotation),void 0!==t.quaternion&&n.quaternion.fromArray(t.quaternion),void 0!==t.scale&&n.scale.fromArray(t.scale)),void 0!==t.up&&n.up.fromArray(t.up),void 0!==t.castShadow&&(n.castShadow=t.castShadow),void 0!==t.receiveShadow&&(n.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.intensity&&(n.shadow.intensity=t.shadow.intensity),void 0!==t.shadow.bias&&(n.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(n.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(n.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&n.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(n.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.frustumCulled&&(n.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(n.renderOrder=t.renderOrder),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.layers&&(n.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)n.add(this.parseObject(a[t],e,i,s,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const i=e[t];n.animations.push(r[i])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(n.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const i=e[t],s=n.getObjectByProperty("uuid",i.object);void 0!==s&&n.addLevel(s,i.distance,i.hysteresis)}}return n}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const i=e[t.skeleton];void 0===i?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(i,t.bindMatrix)}}))}bindLightTargets(t){t.traverse((function(e){if(e.isDirectionalLight||e.isSpotLight){const i=e.target,s=t.getObjectByProperty("uuid",i);e.target=void 0!==s?s:new Er}}))}}const Dc={UVMapping:ot,CubeReflectionMapping:ht,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,CubeUVReflectionMapping:306},Hc={RepeatWrapping:pt,ClampToEdgeWrapping:mt,MirroredRepeatWrapping:yt},qc={NearestFilter:gt,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:wt,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:_t};class Jc extends hc{constructor(t){super(t),this.isImageBitmapLoader=!0,"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,i,s){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,n=nc.get(t);if(void 0!==n)return r.manager.itemStart(t),n.then?void n.then((i=>{e&&e(i),r.manager.itemEnd(t)})).catch((t=>{s&&s(t)})):(setTimeout((function(){e&&e(n),r.manager.itemEnd(t)}),0),n);const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader;const o=fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(i){return nc.add(t,i),e&&e(i),r.manager.itemEnd(t),i})).catch((function(e){s&&s(e),nc.remove(t),r.manager.itemError(t),r.manager.itemEnd(t)}));nc.add(t,o),r.manager.itemStart(t)}}let Xc;class Yc{static getContext(){return void 0===Xc&&(Xc=new(window.AudioContext||window.webkitAudioContext)),Xc}static setContext(t){Xc=t}}class Zc extends hc{constructor(t){super(t)}load(t,e,i,s){const r=this,n=new uc(this.manager);function a(e){s?s(e):console.error(e),r.manager.itemError(t)}n.setResponseType("arraybuffer"),n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials),n.load(t,(function(t){try{const i=t.slice(0);Yc.getContext().decodeAudioData(i,(function(t){e(t)})).catch(a)}catch(t){a(t)}}),i,s)}}const Gc=new ar,$c=new ar,Qc=new ar;class Kc{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Kn,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Kn,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,Qc.copy(t.projectionMatrix);const i=e.eyeSep/2,s=i*e.near/e.focus,r=e.near*Math.tan(Ui*e.fov*.5)/e.zoom;let n,a;$c.elements[12]=-i,Gc.elements[12]=i,n=-r*e.aspect+s,a=r*e.aspect+s,Qc.elements[0]=2*e.near/(a-n),Qc.elements[8]=(a+n)/(a-n),this.cameraL.projectionMatrix.copy(Qc),n=-r*e.aspect-s,a=r*e.aspect-s,Qc.elements[0]=2*e.near/(a-n),Qc.elements[8]=(a+n)/(a-n),this.cameraR.projectionMatrix.copy(Qc)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply($c),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Gc)}}class tu extends Kn{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t,this.index=0}}class eu{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=iu(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=iu();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function iu(){return performance.now()}const su=new Bs,ru=new Is,nu=new Bs,au=new Bs;class ou extends Er{constructor(){super(),this.type="AudioListener",this.context=Yc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new eu}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(su,ru,nu),au.set(0,0,-1).applyQuaternion(ru),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(su.x,t),e.positionY.linearRampToValueAtTime(su.y,t),e.positionZ.linearRampToValueAtTime(su.z,t),e.forwardX.linearRampToValueAtTime(au.x,t),e.forwardY.linearRampToValueAtTime(au.y,t),e.forwardZ.linearRampToValueAtTime(au.z,t),e.upX.linearRampToValueAtTime(i.x,t),e.upY.linearRampToValueAtTime(i.y,t),e.upZ.linearRampToValueAtTime(i.z,t)}else e.setPosition(su.x,su.y,su.z),e.setOrientation(au.x,au.y,au.z,i.x,i.y,i.z)}}class hu extends Er{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(t=0){if(!1!==this.hasPlaybackControl)return this._progress=0,null!==this.source&&(this.source.stop(this.context.currentTime+t),this.source.onended=null),this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(!1!==this._connected){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){return this.detune=t,!0===this.isPlaying&&void 0!==this.source.detune&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}copy(t,e){return super.copy(t,e),"buffer"!==t.sourceType?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=t.autoplay,this.buffer=t.buffer,this.detune=t.detune,this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this.offset=t.offset,this.duration=t.duration,this.playbackRate=t.playbackRate,this.hasPlaybackControl=t.hasPlaybackControl,this.sourceType=t.sourceType,this.filters=t.filters.slice(),this)}clone(t){return new this.constructor(this.listener).copy(this,t)}}const lu=new Bs,cu=new Is,uu=new Bs,du=new Bs;class pu extends hu{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(lu,cu,uu),du.set(0,0,1).applyQuaternion(cu);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(lu.x,t),e.positionY.linearRampToValueAtTime(lu.y,t),e.positionZ.linearRampToValueAtTime(lu.z,t),e.orientationX.linearRampToValueAtTime(du.x,t),e.orientationY.linearRampToValueAtTime(du.y,t),e.orientationZ.linearRampToValueAtTime(du.z,t)}else e.setPosition(lu.x,lu.y,lu.z),e.setOrientation(du.x,du.y,du.z)}}class mu{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let i=0;i<e.length;i++)t+=e[i];return t/e.length}}class yu{constructor(t,e,i){let s,r,n;switch(this.binding=t,this.valueSize=i,e){case"quaternion":s=this._slerp,r=this._slerpAdditive,n=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*i),this._workIndex=5;break;case"string":case"bool":s=this._select,r=this._select,n=this._setAdditiveIdentityOther,this.buffer=new Array(5*i);break;default:s=this._lerp,r=this._lerpAdditive,n=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*i)}this._mixBufferRegion=s,this._mixBufferRegionAdditive=r,this._setIdentity=n,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const i=this.buffer,s=this.valueSize,r=t*s+s;let n=this.cumulativeWeight;if(0===n){for(let t=0;t!==s;++t)i[r+t]=i[t];n=e}else{n+=e;const t=e/n;this._mixBufferRegion(i,r,0,t,s)}this.cumulativeWeight=n}accumulateAdditive(t){const e=this.buffer,i=this.valueSize,s=i*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,s,0,t,i),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,i=this.buffer,s=t*e+e,r=this.cumulativeWeight,n=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(i,s,t,1-r,e)}n>0&&this._mixBufferRegionAdditive(i,s,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(i[t]!==i[t+e]){a.setValue(i,s);break}}saveOriginalState(){const t=this.binding,e=this.buffer,i=this.valueSize,s=i*this._origIndex;t.getValue(e,s);for(let t=i,r=s;t!==r;++t)e[t]=e[s+t%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,i,s,r){if(s>=.5)for(let s=0;s!==r;++s)t[e+s]=t[i+s]}_slerp(t,e,i,s){Is.slerpFlat(t,e,t,e,t,i,s)}_slerpAdditive(t,e,i,s,r){const n=this._workIndex*r;Is.multiplyQuaternionsFlat(t,n,t,e,t,i),Is.slerpFlat(t,e,t,e,t,n,s)}_lerp(t,e,i,s,r){const n=1-s;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*n+t[i+a]*s}}_lerpAdditive(t,e,i,s,r){for(let n=0;n!==r;++n){const r=e+n;t[r]=t[r]+t[i+n]*s}}}const gu="\\[\\]\\.:\\/",fu=new RegExp("["+gu+"]","g"),xu="[^"+gu+"]",bu="[^"+gu.replace("\\.","")+"]",vu=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",xu)+/(WCOD+)?/.source.replace("WCOD",bu)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",xu)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",xu)+"$"),wu=["material","materials","bones","map"];class Mu{constructor(t,e,i){this.path=e,this.parsedPath=i||Mu.parseTrackName(e),this.node=Mu.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,i){return t&&t.isAnimationObjectGroup?new Mu.Composite(t,e,i):new Mu(t,e,i)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(fu,"")}static parseTrackName(t){const e=vu.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},s=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==s&&-1!==s){const t=i.nodeName.substring(s+1);-1!==wu.indexOf(t)&&(i.nodeName=i.nodeName.substring(0,s),i.objectName=t)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){const i=function(t){for(let s=0;s<t.length;s++){const r=t[s];if(r.name===e||r.uuid===e)return r;const n=i(r.children);if(n)return n}return null},s=i(t.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)t[e++]=i[s]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,i=e.objectName,s=e.propertyName;let r=e.propertyIndex;if(t||(t=Mu.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(i){let s=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===s){s=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==s){if(void 0===t[s])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[s]}}const n=t[s];if(void 0===n){const i=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+i+"."+s+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,!0===t.isMaterial?a=this.Versioning.NeedsUpdate:!0===t.isObject3D&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===s){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=n,this.propertyIndex=r}else void 0!==n.fromArray&&void 0!==n.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=n):Array.isArray(n)?(o=this.BindingType.EntireArray,this.resolvedProperty=n):this.propertyName=s;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Mu.Composite=class{constructor(t,e,i){const s=i||Mu.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,s)}getValue(t,e){this.bind();const i=this._targetGroup.nCachedObjects_,s=this._bindings[i];void 0!==s&&s.getValue(t,e)}setValue(t,e){const i=this._bindings;for(let s=this._targetGroup.nCachedObjects_,r=i.length;s!==r;++s)i[s].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}},Mu.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Mu.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Mu.prototype.GetterByBindingType=[Mu.prototype._getValue_direct,Mu.prototype._getValue_array,Mu.prototype._getValue_arrayElement,Mu.prototype._getValue_toArray],Mu.prototype.SetterByBindingTypeAndVersioning=[[Mu.prototype._setValue_direct,Mu.prototype._setValue_direct_setNeedsUpdate,Mu.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Mu.prototype._setValue_array,Mu.prototype._setValue_array_setNeedsUpdate,Mu.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Mu.prototype._setValue_arrayElement,Mu.prototype._setValue_arrayElement_setNeedsUpdate,Mu.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Mu.prototype._setValue_fromArray,Mu.prototype._setValue_fromArray_setNeedsUpdate,Mu.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Su{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Di(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,i=this._paths,s=this._parsedPaths,r=this._bindings,n=r.length;let a,o=t.length,h=this.nCachedObjects_;for(let l=0,c=arguments.length;l!==c;++l){const c=arguments[l],u=c.uuid;let d=e[u];if(void 0===d){d=o++,e[u]=d,t.push(c);for(let t=0,e=n;t!==e;++t)r[t].push(new Mu(c,i[t],s[t]))}else if(d<h){a=t[d];const o=--h,l=t[o];e[l.uuid]=d,t[d]=l,e[u]=o,t[o]=c;for(let t=0,e=n;t!==e;++t){const e=r[t],n=e[o];let a=e[d];e[d]=n,void 0===a&&(a=new Mu(c,i[t],s[t])),e[o]=a}}else t[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=h}remove(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_;for(let n=0,a=arguments.length;n!==a;++n){const a=arguments[n],o=a.uuid,h=e[o];if(void 0!==h&&h>=r){const n=r++,l=t[n];e[l.uuid]=h,t[h]=l,e[o]=n,t[n]=a;for(let t=0,e=s;t!==e;++t){const e=i[t],s=e[n],r=e[h];e[h]=s,e[n]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_,n=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,h=e[o];if(void 0!==h)if(delete e[o],h<r){const a=--r,o=t[a],l=--n,c=t[l];e[o.uuid]=h,t[h]=o,e[c.uuid]=a,t[a]=c,t.pop();for(let t=0,e=s;t!==e;++t){const e=i[t],s=e[a],r=e[l];e[h]=s,e[a]=r,e.pop()}}else{const r=--n,a=t[r];r>0&&(e[a.uuid]=h),t[h]=a,t.pop();for(let t=0,e=s;t!==e;++t){const e=i[t];e[h]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const i=this._bindingsIndicesByPath;let s=i[t];const r=this._bindings;if(void 0!==s)return r[s];const n=this._paths,a=this._parsedPaths,o=this._objects,h=o.length,l=this.nCachedObjects_,c=new Array(h);s=r.length,i[t]=s,n.push(t),a.push(e),r.push(c);for(let i=l,s=o.length;i!==s;++i){const s=o[i];c[i]=new Mu(s,t,e)}return c}unsubscribe_(t){const e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){const s=this._paths,r=this._parsedPaths,n=this._bindings,a=n.length-1,o=n[a];e[t[a]]=i,n[i]=o,n.pop(),r[i]=r[a],r.pop(),s[i]=s[a],s.pop()}}}class _u{constructor(t,e,i=null,s=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=i,this.blendMode=s;const r=e.tracks,n=r.length,a=new Array(n),o={endingStart:Oe,endingEnd:Oe};for(let t=0;t!==n;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(n),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const i=this._clip.duration,s=t._clip.duration,r=s/i,n=i/s;t.warp(1,r,e),this.warp(n,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const s=this._mixer,r=s.time,n=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=s._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,h=a.sampleValues;return o[0]=r,o[1]=r+i,h[0]=t/n,h[1]=e/n,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,s){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const s=(t-r)*i;s<0||0===i?e=0:(this._startTime=null,e=i*s)}e*=this._updateTimeScale(t);const n=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===Ve)for(let i=0,s=t.length;i!==s;++i)t[i].evaluate(n),e[i].accumulateAdditive(a);else for(let i=0,r=t.length;i!==r;++i)t[i].evaluate(n),e[i].accumulate(s,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(null!==i){const s=i.evaluate(t)[0];e*=s,t>i.parameterPositions[1]&&(this.stopFading(),0===s&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;if(null!==i){e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let s=this.time+t,r=this._loopCount;const n=2202===i;if(0===t)return-1===r||!n||1&~r?s:e-s;if(2200===i){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(s>=e)s=e;else{if(!(s<0)){this.time=s;break t}s=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,n)):this._setEndings(0===this.repetitions,!0,n)),s>=e||s<0){const i=Math.floor(s/e);s-=e*i,r+=Math.abs(i);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,s=t>0?e:0,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,n)}else this._setEndings(!1,!1,n);this._loopCount=r,this.time=s,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:i})}}else this.time=s;if(n&&!(1&~r))return e-s}return s}_setEndings(t,e,i){const s=this._interpolantSettings;i?(s.endingStart=Fe,s.endingEnd=Fe):(s.endingStart=t?this.zeroSlopeAtStart?Fe:Oe:Ne,s.endingEnd=e?this.zeroSlopeAtEnd?Fe:Oe:Ne)}_scheduleFading(t,e,i){const s=this._mixer,r=s.time;let n=this._weightInterpolant;null===n&&(n=s._lendControlInterpolant(),this._weightInterpolant=n);const a=n.parameterPositions,o=n.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=i,this}}const Au=new Float32Array(1);class Tu extends Li{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const i=t._localRoot||this._root,s=t._clip.tracks,r=s.length,n=t._propertyBindings,a=t._interpolants,o=i.uuid,h=this._bindingsByRootAndName;let l=h[o];void 0===l&&(l={},h[o]=l);for(let t=0;t!==r;++t){const r=s[t],h=r.name;let c=l[h];if(void 0!==c)++c.referenceCount,n[t]=c;else{if(c=n[t],void 0!==c){null===c._cacheIndex&&(++c.referenceCount,this._addInactiveBinding(c,o,h));continue}const s=e&&e._propertyBindings[t].binding.parsedPath;c=new yu(Mu.create(i,h,s),r.ValueTypeName,r.getValueSize()),++c.referenceCount,this._addInactiveBinding(c,o,h),n[t]=c}a[t].resultBuffer=c.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,i=t._clip.uuid,s=this._actionsByClip[i];this._bindAction(t,s&&s.knownActions[0]),this._addInactiveAction(t,i,e)}const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==i.useCount++&&(this._lendBinding(i),i.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,i){const s=this._actions,r=this._actionsByClip;let n=r[e];if(void 0===n)n={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=n;else{const e=n.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=s.length,s.push(t),n.actionByRoot[i]=t}_removeInactiveAction(t){const e=this._actions,i=e[e.length-1],s=t._cacheIndex;i._cacheIndex=s,e[s]=i,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,n=this._actionsByClip,a=n[r],o=a.knownActions,h=o[o.length-1],l=t._byClipCacheIndex;h._byClipCacheIndex=l,o[l]=h,o.pop(),t._byClipCacheIndex=null;delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete n[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.referenceCount&&this._removeInactiveBinding(i)}}_lendAction(t){const e=this._actions,i=t._cacheIndex,s=this._nActiveActions++,r=e[s];t._cacheIndex=s,e[s]=t,r._cacheIndex=i,e[i]=r}_takeBackAction(t){const e=this._actions,i=t._cacheIndex,s=--this._nActiveActions,r=e[s];t._cacheIndex=s,e[s]=t,r._cacheIndex=i,e[i]=r}_addInactiveBinding(t,e,i){const s=this._bindingsByRootAndName,r=this._bindings;let n=s[e];void 0===n&&(n={},s[e]=n),n[i]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,i=t.binding,s=i.rootNode.uuid,r=i.path,n=this._bindingsByRootAndName,a=n[s],o=e[e.length-1],h=t._cacheIndex;o._cacheIndex=h,e[h]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete n[s]}_lendBinding(t){const e=this._bindings,i=t._cacheIndex,s=this._nActiveBindings++,r=e[s];t._cacheIndex=s,e[s]=t,r._cacheIndex=i,e[i]=r}_takeBackBinding(t){const e=this._bindings,i=t._cacheIndex,s=--this._nActiveBindings,r=e[s];t._cacheIndex=s,e[s]=t,r._cacheIndex=i,e[i]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let i=t[e];return void 0===i&&(i=new Xl(new Float32Array(2),new Float32Array(2),1,Au),i.__cacheIndex=e,t[e]=i),i}_takeBackControlInterpolant(t){const e=this._controlInterpolants,i=t.__cacheIndex,s=--this._nActiveControlInterpolants,r=e[s];t.__cacheIndex=s,e[s]=t,r.__cacheIndex=i,e[i]=r}clipAction(t,e,i){const s=e||this._root,r=s.uuid;let n="string"==typeof t?sc.findByName(s,t):t;const a=null!==n?n.uuid:t,o=this._actionsByClip[a];let h=null;if(void 0===i&&(i=null!==n?n.blendMode:Le),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===i)return t;h=o.knownActions[0],null===n&&(n=h._clip)}if(null===n)return null;const l=new _u(this,n,e,i);return this._bindAction(l,h),this._addInactiveAction(l,a,r),l}existingAction(t,e){const i=e||this._root,s=i.uuid,r="string"==typeof t?sc.findByName(i,t):t,n=r?r.uuid:t,a=this._actionsByClip[n];return void 0!==a&&a.actionByRoot[s]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,i=this._nActiveActions,s=this.time+=t,r=Math.sign(t),n=this._accuIndex^=1;for(let a=0;a!==i;++a){e[a]._update(s,t,r,n)}const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(n);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,i=t.uuid,s=this._actionsByClip,r=s[i];if(void 0!==r){const t=r.knownActions;for(let i=0,s=t.length;i!==s;++i){const s=t[i];this._deactivateAction(s);const r=s._cacheIndex,n=e[e.length-1];s._cacheIndex=null,s._byClipCacheIndex=null,n._cacheIndex=r,e[r]=n,e.pop(),this._removeInactiveBindingsForAction(s)}delete s[i]}}uncacheRoot(t){const e=t.uuid,i=this._actionsByClip;for(const t in i){const s=i[t].actionByRoot[e];void 0!==s&&(this._deactivateAction(s),this._removeInactiveAction(s))}const s=this._bindingsByRootAndName[e];if(void 0!==s)for(const t in s){const e=s[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}class zu extends Ss{constructor(t=1,e=1,i=1,s={}){super(t,e,s),this.isRenderTarget3D=!0,this.depth=i,this.texture=new zs(null,t,e,i),this.texture.isRenderTargetTexture=!0}}class Cu extends Ss{constructor(t=1,e=1,i=1,s={}){super(t,e,s),this.isRenderTargetArray=!0,this.depth=i,this.texture=new As(null,t,e,i),this.texture.isRenderTargetTexture=!0}}class Iu{constructor(t){this.value=t}clone(){return new Iu(void 0===this.value.clone?this.value:this.value.clone())}}let Bu=0;class ku extends Li{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:Bu++}),this.name="",this.usage=_i,this.uniforms=[]}add(t){return this.uniforms.push(t),this}remove(t){const e=this.uniforms.indexOf(t);return-1!==e&&this.uniforms.splice(e,1),this}setName(t){return this.name=t,this}setUsage(t){return this.usage=t,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(t){this.name=t.name,this.usage=t.usage;const e=t.uniforms;this.uniforms.length=0;for(let t=0,i=e.length;t<i;t++){const i=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0;t<i.length;t++)this.uniforms.push(i[t].clone())}return this}clone(){return(new this.constructor).copy(this)}}class Ru extends ca{constructor(t,e,i=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}class Eu{constructor(t,e,i,s,r){this.isGLBufferAttribute=!0,this.name="",this.buffer=t,this.type=e,this.itemSize=i,this.elementSize=s,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}const Pu=new ar;class Ou{constructor(t,e,i=0,s=1/0){this.ray=new nr(t,e),this.near=i,this.far=s,this.camera=null,this.layers=new fr,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}setFromXRController(t){return Pu.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(Pu),this}intersectObject(t,e=!0,i=[]){return Nu(t,this,i,e),i.sort(Fu),i}intersectObjects(t,e=!0,i=[]){for(let s=0,r=t.length;s<r;s++)Nu(t[s],this,i,e);return i.sort(Fu),i}}function Fu(t,e){return t.distance-e.distance}function Nu(t,e,i,s){let r=!0;if(t.layers.test(e.layers)){!1===t.raycast(e,i)&&(r=!1)}if(!0===r&&!0===s){const s=t.children;for(let t=0,r=s.length;t<r;t++)Nu(s[t],e,i,!0)}}class Lu{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Hi(this.phi,t,Math.PI-t),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Hi(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Vu{constructor(t=1,e=0,i=0){return this.radius=t,this.theta=e,this.y=i,this}set(t,e,i){return this.radius=t,this.theta=e,this.y=i,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}clone(){return(new this.constructor).copy(this)}}class ju{constructor(t,e,i,s){ju.prototype.isMatrix2=!0,this.elements=[1,0,0,1],void 0!==t&&this.set(t,e,i,s)}identity(){return this.set(1,0,0,1),this}fromArray(t,e=0){for(let i=0;i<4;i++)this.elements[i]=t[i+e];return this}set(t,e,i,s){const r=this.elements;return r[0]=t,r[2]=e,r[1]=i,r[3]=s,this}}const Uu=new Gi;class Wu{constructor(t=new Gi(1/0,1/0),e=new Gi(-1/0,-1/0)){this.isBox2=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Uu.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Uu).distanceTo(t)}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Du=new Bs,Hu=new Bs;class qu{constructor(t=new Bs,e=new Bs){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Du.subVectors(t,this.start),Hu.subVectors(this.end,this.start);const i=Hu.dot(Hu);let s=Hu.dot(Du)/i;return e&&(s=Hi(s,0,1)),s}closestPointToPoint(t,e,i){const s=this.closestPointToPointParameter(t,e);return this.delta(i).multiplyScalar(s).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const Ju=new Bs;class Xu extends Er{constructor(t,e){super(),this.light=t,this.matrixAutoUpdate=!1,this.color=e,this.type="SpotLightHelper";const i=new In,s=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,i=32;t<i;t++,e++){const r=t/i*Math.PI*2,n=e/i*Math.PI*2;s.push(Math.cos(r),Math.sin(r),1,Math.cos(n),Math.sin(n),1)}i.setAttribute("position",new wn(s,3));const r=new Co({fog:!1,toneMapped:!1});this.cone=new jo(i,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Ju.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Ju),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Yu=new Bs,Zu=new ar,Gu=new ar;class $u extends jo{constructor(t){const e=Qu(t),i=new In,s=[],r=[],n=new Qr(0,0,1),a=new Qr(0,1,0);for(let t=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(s.push(0,0,0),s.push(0,0,0),r.push(n.r,n.g,n.b),r.push(a.r,a.g,a.b))}i.setAttribute("position",new wn(s,3)),i.setAttribute("color",new wn(r,3));super(i,new Co({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,s=i.getAttribute("position");Gu.copy(this.root.matrixWorld).invert();for(let t=0,i=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Zu.multiplyMatrices(Gu,r.matrixWorld),Yu.setFromMatrixPosition(Zu),s.setXYZ(i,Yu.x,Yu.y,Yu.z),Zu.multiplyMatrices(Gu,r.parent.matrixWorld),Yu.setFromMatrixPosition(Zu),s.setXYZ(i+1,Yu.x,Yu.y,Yu.z),i+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose()}}function Qu(t){const e=[];!0===t.isBone&&e.push(t);for(let i=0;i<t.children.length;i++)e.push.apply(e,Qu(t.children[i]));return e}class Ku extends Un{constructor(t,e,i){super(new bl(e,4,2),new sn({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const td=new Bs,ed=new Qr,id=new Qr;class sd extends Er{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const s=new yl(e);s.rotateY(.5*Math.PI),this.material=new sn({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=s.getAttribute("position"),n=new Float32Array(3*r.count);s.setAttribute("color",new dn(n,3)),this.add(new Un(s,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");ed.copy(this.light.color),id.copy(this.light.groundColor);for(let t=0,i=e.count;t<i;t++){const s=t<i/2?ed:id;e.setXYZ(t,s.r,s.g,s.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(td.setFromMatrixPosition(this.light.matrixWorld).negate())}}class rd extends jo{constructor(t=10,e=10,i=4473924,s=8947848){i=new Qr(i),s=new Qr(s);const r=e/2,n=t/e,a=t/2,o=[],h=[];for(let t=0,l=0,c=-a;t<=e;t++,c+=n){o.push(-a,0,c,a,0,c),o.push(c,0,-a,c,0,a);const e=t===r?i:s;e.toArray(h,l),l+=3,e.toArray(h,l),l+=3,e.toArray(h,l),l+=3,e.toArray(h,l),l+=3}const l=new In;l.setAttribute("position",new wn(o,3)),l.setAttribute("color",new wn(h,3));super(l,new Co({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class nd extends jo{constructor(t=10,e=16,i=8,s=64,r=4473924,n=8947848){r=new Qr(r),n=new Qr(n);const a=[],o=[];if(e>1)for(let i=0;i<e;i++){const s=i/e*(2*Math.PI),h=Math.sin(s)*t,l=Math.cos(s)*t;a.push(0,0,0),a.push(h,0,l);const c=1&i?r:n;o.push(c.r,c.g,c.b),o.push(c.r,c.g,c.b)}for(let e=0;e<i;e++){const h=1&e?r:n,l=t-t/i*e;for(let t=0;t<s;t++){let e=t/s*(2*Math.PI),i=Math.sin(e)*l,r=Math.cos(e)*l;a.push(i,0,r),o.push(h.r,h.g,h.b),e=(t+1)/s*(2*Math.PI),i=Math.sin(e)*l,r=Math.cos(e)*l,a.push(i,0,r),o.push(h.r,h.g,h.b)}}const h=new In;h.setAttribute("position",new wn(a,3)),h.setAttribute("color",new wn(o,3));super(h,new Co({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const ad=new Bs,od=new Bs,hd=new Bs;class ld extends Er{constructor(t,e,i){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",void 0===e&&(e=1);let s=new In;s.setAttribute("position",new wn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new Co({fog:!1,toneMapped:!1});this.lightPlane=new Fo(s,r),this.add(this.lightPlane),s=new In,s.setAttribute("position",new wn([0,0,0,0,0,1],3)),this.targetLine=new Fo(s,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),ad.setFromMatrixPosition(this.light.matrixWorld),od.setFromMatrixPosition(this.light.target.matrixWorld),hd.subVectors(od,ad),this.lightPlane.lookAt(od),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(od),this.targetLine.scale.z=hd.length()}}const cd=new Bs,ud=new Zn;class dd extends jo{constructor(t){const e=new In,i=new Co({color:16777215,vertexColors:!0,toneMapped:!1}),s=[],r=[],n={};function a(t,e){o(t),o(e)}function o(t){s.push(0,0,0),r.push(0,0,0),void 0===n[t]&&(n[t]=[]),n[t].push(s.length/3-1)}a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4"),e.setAttribute("position",new wn(s,3)),e.setAttribute("color",new wn(r,3)),super(e,i),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=n,this.update();const h=new Qr(16755200),l=new Qr(16711680),c=new Qr(43775),u=new Qr(16777215),d=new Qr(3355443);this.setColors(h,l,c,u,d)}setColors(t,e,i,s,r){const n=this.geometry.getAttribute("color");n.setXYZ(0,t.r,t.g,t.b),n.setXYZ(1,t.r,t.g,t.b),n.setXYZ(2,t.r,t.g,t.b),n.setXYZ(3,t.r,t.g,t.b),n.setXYZ(4,t.r,t.g,t.b),n.setXYZ(5,t.r,t.g,t.b),n.setXYZ(6,t.r,t.g,t.b),n.setXYZ(7,t.r,t.g,t.b),n.setXYZ(8,t.r,t.g,t.b),n.setXYZ(9,t.r,t.g,t.b),n.setXYZ(10,t.r,t.g,t.b),n.setXYZ(11,t.r,t.g,t.b),n.setXYZ(12,t.r,t.g,t.b),n.setXYZ(13,t.r,t.g,t.b),n.setXYZ(14,t.r,t.g,t.b),n.setXYZ(15,t.r,t.g,t.b),n.setXYZ(16,t.r,t.g,t.b),n.setXYZ(17,t.r,t.g,t.b),n.setXYZ(18,t.r,t.g,t.b),n.setXYZ(19,t.r,t.g,t.b),n.setXYZ(20,t.r,t.g,t.b),n.setXYZ(21,t.r,t.g,t.b),n.setXYZ(22,t.r,t.g,t.b),n.setXYZ(23,t.r,t.g,t.b),n.setXYZ(24,e.r,e.g,e.b),n.setXYZ(25,e.r,e.g,e.b),n.setXYZ(26,e.r,e.g,e.b),n.setXYZ(27,e.r,e.g,e.b),n.setXYZ(28,e.r,e.g,e.b),n.setXYZ(29,e.r,e.g,e.b),n.setXYZ(30,e.r,e.g,e.b),n.setXYZ(31,e.r,e.g,e.b),n.setXYZ(32,i.r,i.g,i.b),n.setXYZ(33,i.r,i.g,i.b),n.setXYZ(34,i.r,i.g,i.b),n.setXYZ(35,i.r,i.g,i.b),n.setXYZ(36,i.r,i.g,i.b),n.setXYZ(37,i.r,i.g,i.b),n.setXYZ(38,s.r,s.g,s.b),n.setXYZ(39,s.r,s.g,s.b),n.setXYZ(40,r.r,r.g,r.b),n.setXYZ(41,r.r,r.g,r.b),n.setXYZ(42,r.r,r.g,r.b),n.setXYZ(43,r.r,r.g,r.b),n.setXYZ(44,r.r,r.g,r.b),n.setXYZ(45,r.r,r.g,r.b),n.setXYZ(46,r.r,r.g,r.b),n.setXYZ(47,r.r,r.g,r.b),n.setXYZ(48,r.r,r.g,r.b),n.setXYZ(49,r.r,r.g,r.b),n.needsUpdate=!0}update(){const t=this.geometry,e=this.pointMap;ud.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);const i=this.camera.coordinateSystem===Oi?-1:0;pd("c",e,t,ud,0,0,i),pd("t",e,t,ud,0,0,1),pd("n1",e,t,ud,-1,-1,i),pd("n2",e,t,ud,1,-1,i),pd("n3",e,t,ud,-1,1,i),pd("n4",e,t,ud,1,1,i),pd("f1",e,t,ud,-1,-1,1),pd("f2",e,t,ud,1,-1,1),pd("f3",e,t,ud,-1,1,1),pd("f4",e,t,ud,1,1,1),pd("u1",e,t,ud,.7,1.1,i),pd("u2",e,t,ud,-.7,1.1,i),pd("u3",e,t,ud,0,2,i),pd("cf1",e,t,ud,-1,0,1),pd("cf2",e,t,ud,1,0,1),pd("cf3",e,t,ud,0,-1,1),pd("cf4",e,t,ud,0,1,1),pd("cn1",e,t,ud,-1,0,i),pd("cn2",e,t,ud,1,0,i),pd("cn3",e,t,ud,0,-1,i),pd("cn4",e,t,ud,0,1,i),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function pd(t,e,i,s,r,n,a){cd.set(r,n,a).unproject(s);const o=e[t];if(void 0!==o){const t=i.getAttribute("position");for(let e=0,i=o.length;e<i;e++)t.setXYZ(o[e],cd.x,cd.y,cd.z)}}const md=new Es;class yd extends jo{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=new Float32Array(24),r=new In;r.setIndex(new dn(i,1)),r.setAttribute("position",new dn(s,3)),super(r,new Co({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&md.setFromObject(this.object),md.isEmpty())return;const e=md.min,i=md.max,s=this.geometry.attributes.position,r=s.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=e.x,r[4]=i.y,r[5]=i.z,r[6]=e.x,r[7]=e.y,r[8]=i.z,r[9]=i.x,r[10]=e.y,r[11]=i.z,r[12]=i.x,r[13]=i.y,r[14]=e.z,r[15]=e.x,r[16]=i.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=i.x,r[22]=e.y,r[23]=e.z,s.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t,e){return super.copy(t,e),this.object=t.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class gd extends jo{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=new In;s.setIndex(new dn(i,1)),s.setAttribute("position",new wn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(s,new Co({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}dispose(){this.geometry.dispose(),this.material.dispose()}}class fd extends Fo{constructor(t,e=1,i=16776960){const s=i,r=new In;r.setAttribute("position",new wn([1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere(),super(r,new Co({color:s,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const n=new In;n.setAttribute("position",new wn([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),n.computeBoundingSphere(),this.add(new Un(n,new sn({color:s,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const xd=new Bs;let bd,vd;class wd extends Er{constructor(t=new Bs(0,0,1),e=new Bs(0,0,0),i=1,s=16776960,r=.2*i,n=.2*r){super(),this.type="ArrowHelper",void 0===bd&&(bd=new In,bd.setAttribute("position",new wn([0,0,0,0,1,0],3)),vd=new Ch(0,.5,1,5,1),vd.translate(0,-.5,0)),this.position.copy(e),this.line=new Fo(bd,new Co({color:s,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Un(vd,new sn({color:s,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,n)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{xd.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(xd,e)}}setLength(t,e=.2*t,i=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class Md extends jo{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new In;i.setAttribute("position",new wn(e,3)),i.setAttribute("color",new wn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));super(i,new Co({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,i){const s=new Qr,r=this.geometry.attributes.color.array;return s.set(t),s.toArray(r,0),s.toArray(r,3),s.set(e),s.toArray(r,6),s.toArray(r,9),s.set(i),s.toArray(r,12),s.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Sd{constructor(){this.type="ShapePath",this.color=new Qr,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new _h,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,i,s){return this.currentPath.quadraticCurveTo(t,e,i,s),this}bezierCurveTo(t,e,i,s,r,n){return this.currentPath.bezierCurveTo(t,e,i,s,r,n),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t){function e(t,e){const i=e.length;let s=!1;for(let r=i-1,n=0;n<i;r=n++){let i=e[r],a=e[n],o=a.x-i.x,h=a.y-i.y;if(Math.abs(h)>Number.EPSILON){if(h<0&&(i=e[n],o=-o,a=e[r],h=-h),t.y<i.y||t.y>a.y)continue;if(t.y===i.y){if(t.x===i.x)return!0}else{const e=h*(t.x-i.x)-o*(t.y-i.y);if(0===e)return!0;if(e<0)continue;s=!s}}else{if(t.y!==i.y)continue;if(a.x<=t.x&&t.x<=i.x||i.x<=t.x&&t.x<=a.x)return!0}}return s}const i=ll.isClockWise,s=this.subPaths;if(0===s.length)return[];let r,n,a;const o=[];if(1===s.length)return n=s[0],a=new Nh,a.curves=n.curves,o.push(a),o;let h=!i(s[0].getPoints());h=t?!h:h;const l=[],c=[];let u,d,p=[],m=0;c[m]=void 0,p[m]=[];for(let e=0,a=s.length;e<a;e++)n=s[e],u=n.getPoints(),r=i(u),r=t?!r:r,r?(!h&&c[m]&&m++,c[m]={s:new Nh,p:u},c[m].s.curves=n.curves,h&&m++,p[m]=[]):p[m].push({h:n,p:u[0]});if(!c[0])return function(t){const e=[];for(let i=0,s=t.length;i<s;i++){const s=t[i],r=new Nh;r.curves=s.curves,e.push(r)}return e}(s);if(c.length>1){let t=!1,i=0;for(let t=0,e=c.length;t<e;t++)l[t]=[];for(let s=0,r=c.length;s<r;s++){const r=p[s];for(let n=0;n<r.length;n++){const a=r[n];let o=!0;for(let r=0;r<c.length;r++)e(a.p,c[r].p)&&(s!==r&&i++,o?(o=!1,l[r].push(a)):t=!0);o&&l[s].push(a)}}i>0&&!1===t&&(p=l)}for(let t=0,e=c.length;t<e;t++){a=c[t].s,o.push(a),d=p[t];for(let t=0,e=d.length;t<e;t++)a.holes.push(d[t].h)}return o}}class _d extends Li{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function Ad(t,e,i,s){const r=function(t){switch(t){case Tt:case zt:return{byteLength:1,components:1};case It:case Ct:case Et:return{byteLength:2,components:1};case Pt:case Ot:return{byteLength:2,components:4};case kt:case Bt:case Rt:return{byteLength:4,components:1};case Nt:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}(s);switch(i){case 1021:case 1024:return t*e;case 1025:return t*e*2;case qt:case Jt:return t*e/r.components*r.byteLength;case 1030:case 1031:return t*e*2/r.components*r.byteLength;case 1022:return t*e*3/r.components*r.byteLength;case jt:case 1033:return t*e*4/r.components*r.byteLength;case 33776:case 33777:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case 33778:case 33779:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case 35841:case 35843:return Math.max(t,16)*Math.max(e,8)/4;case 35840:case 35842:return Math.max(t,8)*Math.max(e,8)/2;case 36196:case 37492:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case 37496:case 37808:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case 37809:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case 37810:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case 37811:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case 37812:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case 37813:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case 37814:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case 37815:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case 37816:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case 37817:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case 37818:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case 37819:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case 37820:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case 37821:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case 36492:case 36494:case 36495:return Math.ceil(t/4)*Math.ceil(e/4)*16;case 36283:case 36284:return Math.ceil(t/4)*Math.ceil(e/4)*8;case 36285:case 36286:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${i} format.`)}const Td={contain:function(t,e){const i=t.image&&t.image.width?t.image.width/t.image.height:1;return i>e?(t.repeat.x=1,t.repeat.y=i/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2):(t.repeat.x=e/i,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0),t},cover:function(t,e){const i=t.image&&t.image.width?t.image.width/t.image.height:1;return i>e?(t.repeat.x=e/i,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0):(t.repeat.x=1,t.repeat.y=i/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2),t},fill:function(t){return t.repeat.x=1,t.repeat.y=1,t.offset.x=0,t.offset.y=0,t},getByteLength:Ad};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:t}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=t);export{et as ACESFilmicToneMapping,v as AddEquation,G as AddOperation,Ve as AdditiveAnimationBlendMode,g as AdditiveBlending,st as AgXToneMapping,Lt as AlphaFormat,Si as AlwaysCompare,U as AlwaysDepth,yi as AlwaysStencilFunc,Pc as AmbientLight,_u as AnimationAction,sc as AnimationClip,dc as AnimationLoader,Tu as AnimationMixer,Su as AnimationObjectGroup,Hl as AnimationUtils,nh as ArcCurve,tu as ArrayCamera,wd as ArrowHelper,nt as AttachedBindMode,hu as Audio,mu as AudioAnalyser,Yc as AudioContext,ou as AudioListener,Zc as AudioLoader,Md as AxesHelper,d as BackSide,De as BasicDepthPacking,o as BasicShadowMap,zo as BatchedMesh,Wa as Bone,Gl as BooleanKeyframeTrack,Wu as Box2,Es as Box3,gd as Box3Helper,Dn as BoxGeometry,yd as BoxHelper,dn as BufferAttribute,In as BufferGeometry,Uc as BufferGeometryLoader,zt as ByteType,nc as Cache,Zn as Camera,dd as CameraHelper,eh as CanvasTexture,Th as CapsuleGeometry,uh as CatmullRomCurve3,tt as CineonToneMapping,zh as CircleGeometry,mt as ClampToEdgeWrapping,eu as Clock,Qr as Color,$l as ColorKeyframeTrack,ds as ColorManagement,Ko as CompressedArrayTexture,th as CompressedCubeTexture,Qo as CompressedTexture,pc as CompressedTextureLoader,Ih as ConeGeometry,L as ConstantAlphaFactor,F as ConstantColorFactor,_d as Controls,ea as CubeCamera,ht as CubeReflectionMapping,lt as CubeRefractionMapping,ia as CubeTexture,yc as CubeTextureLoader,dt as CubeUVReflectionMapping,yh as CubicBezierCurve,gh as CubicBezierCurve3,Jl as CubicInterpolant,r as CullFaceBack,n as CullFaceFront,a as CullFaceFrontBack,s as CullFaceNone,sh as Curve,Sh as CurvePath,b as CustomBlending,it as CustomToneMapping,Ch as CylinderGeometry,Vu as Cylindrical,zs as Data3DTexture,As as DataArrayTexture,Da as DataTexture,gc as DataTextureLoader,hn as DataUtils,ri as DecrementStencilOp,ai as DecrementWrapStencilOp,oc as DefaultLoadingManager,Dt as DepthFormat,Ht as DepthStencilFormat,ih as DepthTexture,at as DetachedBindMode,Ec as DirectionalLight,ld as DirectionalLightHelper,Yl as DiscreteInterpolant,kh as DodecahedronGeometry,p as DoubleSide,k as DstAlphaFactor,E as DstColorFactor,ki as DynamicCopyUsage,Ai as DynamicDrawUsage,Ci as DynamicReadUsage,Fh as EdgesGeometry,rh as EllipseCurve,xi as EqualCompare,H as EqualDepth,ci as EqualStencilFunc,ct as EquirectangularReflectionMapping,ut as EquirectangularRefractionMapping,gr as Euler,Li as EventDispatcher,dl as ExtrudeGeometry,uc as FileLoader,vn as Float16BufferAttribute,wn as Float32BufferAttribute,Rt as FloatType,ha as Fog,oa as FogExp2,$o as FramebufferTexture,u as FrontSide,ho as Frustum,Eu as GLBufferAttribute,Ei as GLSL1,Pi as GLSL3,vi as GreaterCompare,J as GreaterDepth,Mi as GreaterEqualCompare,q as GreaterEqualDepth,mi as GreaterEqualStencilFunc,di as GreaterStencilFunc,rd as GridHelper,ra as Group,Et as HalfFloatType,bc as HemisphereLight,sd as HemisphereLightHelper,ml as IcosahedronGeometry,Jc as ImageBitmapLoader,mc as ImageLoader,gs as ImageUtils,si as IncrementStencilOp,ni as IncrementWrapStencilOp,Xa as InstancedBufferAttribute,jc as InstancedBufferGeometry,Ru as InstancedInterleavedBuffer,eo as InstancedMesh,gn as Int16BufferAttribute,xn as Int32BufferAttribute,pn as Int8BufferAttribute,Bt as IntType,ca as InterleavedBuffer,da as InterleavedBufferAttribute,ql as Interpolant,Re as InterpolateDiscrete,Ee as InterpolateLinear,Pe as InterpolateSmooth,oi as InvertStencilOp,ei as KeepStencilOp,Zl as KeyframeTrack,ka as LOD,Ah as LatheGeometry,fr as Layers,fi as LessCompare,W as LessDepth,bi as LessEqualCompare,D as LessEqualDepth,ui as LessEqualStencilFunc,li as LessStencilFunc,xc as Light,Nc as LightProbe,Fo as Line,qu as Line3,Co as LineBasicMaterial,fh as LineCurve,xh as LineCurve3,Ll as LineDashedMaterial,Uo as LineLoop,jo as LineSegments,wt as LinearFilter,Xl as LinearInterpolant,At as LinearMipMapLinearFilter,St as LinearMipMapNearestFilter,_t as LinearMipmapLinearFilter,Mt as LinearMipmapNearestFilter,$e as LinearSRGBColorSpace,Q as LinearToneMapping,Qe as LinearTransfer,hc as Loader,Vc as LoaderUtils,ac as LoadingManager,Ie as LoopOnce,ke as LoopPingPong,Be as LoopRepeat,Wt as LuminanceAlphaFormat,Ut as LuminanceFormat,e as MOUSE,en as Material,Lc as MaterialLoader,Zi as MathUtils,ju as Matrix2,$i as Matrix3,ar as Matrix4,_ as MaxEquation,Un as Mesh,sn as MeshBasicMaterial,Ol as MeshDepthMaterial,Fl as MeshDistanceMaterial,Pl as MeshLambertMaterial,Nl as MeshMatcapMaterial,El as MeshNormalMaterial,kl as MeshPhongMaterial,Bl as MeshPhysicalMaterial,Il as MeshStandardMaterial,Rl as MeshToonMaterial,S as MinEquation,yt as MirroredRepeatWrapping,Z as MixOperation,x as MultiplyBlending,Y as MultiplyOperation,gt as NearestFilter,vt as NearestMipMapLinearFilter,xt as NearestMipMapNearestFilter,bt as NearestMipmapLinearFilter,ft as NearestMipmapNearestFilter,rt as NeutralToneMapping,gi as NeverCompare,j as NeverDepth,hi as NeverStencilFunc,m as NoBlending,Ze as NoColorSpace,$ as NoToneMapping,Le as NormalAnimationBlendMode,y as NormalBlending,wi as NotEqualCompare,X as NotEqualDepth,pi as NotEqualStencilFunc,Ql as NumberKeyframeTrack,Er as Object3D,Wc as ObjectLoader,Ye as ObjectSpaceNormalMap,yl as OctahedronGeometry,T as OneFactor,V as OneMinusConstantAlphaFactor,N as OneMinusConstantColorFactor,R as OneMinusDstAlphaFactor,P as OneMinusDstColorFactor,B as OneMinusSrcAlphaFactor,C as OneMinusSrcColorFactor,kc as OrthographicCamera,h as PCFShadowMap,l as PCFSoftShadowMap,_h as Path,Kn as PerspectiveCamera,no as Plane,gl as PlaneGeometry,fd as PlaneHelper,Bc as PointLight,Ku as PointLightHelper,Xo as Points,Wo as PointsMaterial,nd as PolarGridHelper,Bh as PolyhedronGeometry,pu as PositionalAudio,Mu as PropertyBinding,yu as PropertyMixer,bh as QuadraticBezierCurve,vh as QuadraticBezierCurve3,Is as Quaternion,tc as QuaternionKeyframeTrack,Kl as QuaternionLinearInterpolant,Wi as RAD2DEG,ze as RED_GREEN_RGTC2_Format,Ae as RED_RGTC1_Format,t as REVISION,He as RGBADepthPacking,jt as RGBAFormat,Gt as RGBAIntegerFormat,be as RGBA_ASTC_10x10_Format,ge as RGBA_ASTC_10x5_Format,fe as RGBA_ASTC_10x6_Format,xe as RGBA_ASTC_10x8_Format,ve as RGBA_ASTC_12x10_Format,we as RGBA_ASTC_12x12_Format,he as RGBA_ASTC_4x4_Format,le as RGBA_ASTC_5x4_Format,ce as RGBA_ASTC_5x5_Format,ue as RGBA_ASTC_6x5_Format,de as RGBA_ASTC_6x6_Format,pe as RGBA_ASTC_8x5_Format,me as RGBA_ASTC_8x6_Format,ye as RGBA_ASTC_8x8_Format,Me as RGBA_BPTC_Format,oe as RGBA_ETC2_EAC_Format,re as RGBA_PVRTC_2BPPV1_Format,se as RGBA_PVRTC_4BPPV1_Format,Qt as RGBA_S3TC_DXT1_Format,Kt as RGBA_S3TC_DXT3_Format,te as RGBA_S3TC_DXT5_Format,qe as RGBDepthPacking,Vt as RGBFormat,Zt as RGBIntegerFormat,Se as RGB_BPTC_SIGNED_Format,_e as RGB_BPTC_UNSIGNED_Format,ne as RGB_ETC1_Format,ae as RGB_ETC2_Format,ie as RGB_PVRTC_2BPPV1_Format,ee as RGB_PVRTC_4BPPV1_Format,$t as RGB_S3TC_DXT1_Format,Je as RGDepthPacking,Xt as RGFormat,Yt as RGIntegerFormat,Cl as RawShaderMaterial,nr as Ray,Ou as Raycaster,Oc as RectAreaLight,qt as RedFormat,Jt as RedIntegerFormat,K as ReinhardToneMapping,Ss as RenderTarget,zu as RenderTarget3D,Cu as RenderTargetArray,pt as RepeatWrapping,ii as ReplaceStencilOp,M as ReverseSubtractEquation,fl as RingGeometry,Ce as SIGNED_RED_GREEN_RGTC2_Format,Te as SIGNED_RED_RGTC1_Format,Ge as SRGBColorSpace,Ke as SRGBTransfer,la as Scene,Yn as ShaderMaterial,zl as ShadowMaterial,Nh as Shape,xl as ShapeGeometry,Sd as ShapePath,ll as ShapeUtils,Ct as ShortType,Ja as Skeleton,$u as SkeletonHelper,Ua as SkinnedMesh,xs as Source,$s as Sphere,bl as SphereGeometry,Lu as Spherical,Fc as SphericalHarmonics3,wh as SplineCurve,Ac as SpotLight,Xu as SpotLightHelper,za as Sprite,pa as SpriteMaterial,I as SrcAlphaFactor,O as SrcAlphaSaturateFactor,z as SrcColorFactor,Bi as StaticCopyUsage,_i as StaticDrawUsage,zi as StaticReadUsage,Kc as StereoCamera,Ri as StreamCopyUsage,Ti as StreamDrawUsage,Ii as StreamReadUsage,ec as StringKeyframeTrack,w as SubtractEquation,f as SubtractiveBlending,i as TOUCH,Xe as TangentSpaceNormalMap,vl as TetrahedronGeometry,ws as Texture,fc as TextureLoader,Td as TextureUtils,Ni as TimestampQuery,wl as TorusGeometry,Ml as TorusKnotGeometry,Xr as Triangle,We as TriangleFanDrawMode,Ue as TriangleStripDrawMode,je as TrianglesDrawMode,Sl as TubeGeometry,ot as UVMapping,fn as Uint16BufferAttribute,bn as Uint32BufferAttribute,mn as Uint8BufferAttribute,yn as Uint8ClampedBufferAttribute,Iu as Uniform,ku as UniformsGroup,Xn as UniformsUtils,Tt as UnsignedByteType,Ft as UnsignedInt248Type,Nt as UnsignedInt5999Type,kt as UnsignedIntType,Pt as UnsignedShort4444Type,Ot as UnsignedShort5551Type,It as UnsignedShortType,c as VSMShadowMap,Gi as Vector2,Bs as Vector3,Ms as Vector4,ic as VectorKeyframeTrack,Go as VideoFrameTexture,Zo as VideoTexture,Cs as WebGL3DRenderTarget,Ts as WebGLArrayRenderTarget,Oi as WebGLCoordinateSystem,sa as WebGLCubeRenderTarget,_s as WebGLRenderTarget,Fi as WebGPUCoordinateSystem,aa as WebXRController,_l as WireframeGeometry,Ne as WrapAroundEnding,Oe as ZeroCurvatureEnding,A as ZeroFactor,Fe as ZeroSlopeEnding,ti as ZeroStencilOp,Ki as arrayNeedsUint32,Hn as cloneUniforms,ss as createCanvasElement,is as createElementNS,Ad as getByteLength,Jn as getUnlitUniformColorSpace,qn as mergeUniforms,as as probeAsync,os as toNormalizedProjectionMatrix,hs as toReversedProjectionMatrix,ns as warnOnce};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUuY29yZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiLCIuLi9zcmMvY29yZS9FdmVudERpc3BhdGNoZXIuanMiLCIuLi9zcmMvbWF0aC9NYXRoVXRpbHMuanMiLCIuLi9zcmMvbWF0aC9WZWN0b3IyLmpzIiwiLi4vc3JjL21hdGgvTWF0cml4My5qcyIsIi4uL3NyYy91dGlscy5qcyIsIi4uL3NyYy9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyIsIi4uL3NyYy9leHRyYXMvSW1hZ2VVdGlscy5qcyIsIi4uL3NyYy90ZXh0dXJlcy9Tb3VyY2UuanMiLCIuLi9zcmMvdGV4dHVyZXMvVGV4dHVyZS5qcyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjQuanMiLCIuLi9zcmMvY29yZS9SZW5kZXJUYXJnZXQuanMiLCIuLi9zcmMvcmVuZGVyZXJzL1dlYkdMUmVuZGVyVGFyZ2V0LmpzIiwiLi4vc3JjL3RleHR1cmVzL0RhdGFBcnJheVRleHR1cmUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQuanMiLCIuLi9zcmMvdGV4dHVyZXMvRGF0YTNEVGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvV2ViR0wzRFJlbmRlclRhcmdldC5qcyIsIi4uL3NyYy9tYXRoL1F1YXRlcm5pb24uanMiLCIuLi9zcmMvbWF0aC9WZWN0b3IzLmpzIiwiLi4vc3JjL21hdGgvQm94My5qcyIsIi4uL3NyYy9tYXRoL1NwaGVyZS5qcyIsIi4uL3NyYy9tYXRoL1JheS5qcyIsIi4uL3NyYy9tYXRoL01hdHJpeDQuanMiLCIuLi9zcmMvbWF0aC9FdWxlci5qcyIsIi4uL3NyYy9jb3JlL0xheWVycy5qcyIsIi4uL3NyYy9jb3JlL09iamVjdDNELmpzIiwiLi4vc3JjL21hdGgvVHJpYW5nbGUuanMiLCIuLi9zcmMvbWF0aC9Db2xvci5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hCYXNpY01hdGVyaWFsLmpzIiwiLi4vc3JjL2V4dHJhcy9EYXRhVXRpbHMuanMiLCIuLi9zcmMvY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMiLCIuLi9zcmMvY29yZS9CdWZmZXJHZW9tZXRyeS5qcyIsIi4uL3NyYy9vYmplY3RzL01lc2guanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9Cb3hHZW9tZXRyeS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9Vbmlmb3Jtc1V0aWxzLmpzIiwiLi4vc3JjL21hdGVyaWFscy9TaGFkZXJNYXRlcmlhbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9kZWZhdWx0X3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RlZmF1bHRfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9jYW1lcmFzL0NhbWVyYS5qcyIsIi4uL3NyYy9jYW1lcmFzL1BlcnNwZWN0aXZlQ2FtZXJhLmpzIiwiLi4vc3JjL2NhbWVyYXMvQ3ViZUNhbWVyYS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvV2ViR0xDdWJlUmVuZGVyVGFyZ2V0LmpzIiwiLi4vc3JjL29iamVjdHMvR3JvdXAuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYnhyL1dlYlhSQ29udHJvbGxlci5qcyIsIi4uL3NyYy9zY2VuZXMvRm9nRXhwMi5qcyIsIi4uL3NyYy9zY2VuZXMvRm9nLmpzIiwiLi4vc3JjL3NjZW5lcy9TY2VuZS5qcyIsIi4uL3NyYy9jb3JlL0ludGVybGVhdmVkQnVmZmVyLmpzIiwiLi4vc3JjL2NvcmUvSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL1Nwcml0ZU1hdGVyaWFsLmpzIiwiLi4vc3JjL29iamVjdHMvU3ByaXRlLmpzIiwiLi4vc3JjL29iamVjdHMvTE9ELmpzIiwiLi4vc3JjL29iamVjdHMvU2tpbm5lZE1lc2guanMiLCIuLi9zcmMvb2JqZWN0cy9Cb25lLmpzIiwiLi4vc3JjL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzIiwiLi4vc3JjL29iamVjdHMvU2tlbGV0b24uanMiLCIuLi9zcmMvY29yZS9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUuanMiLCIuLi9zcmMvb2JqZWN0cy9JbnN0YW5jZWRNZXNoLmpzIiwiLi4vc3JjL21hdGgvUGxhbmUuanMiLCIuLi9zcmMvbWF0aC9GcnVzdHVtLmpzIiwiLi4vc3JjL29iamVjdHMvQmF0Y2hlZE1lc2guanMiLCIuLi9zcmMvbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzIiwiLi4vc3JjL29iamVjdHMvTGluZS5qcyIsIi4uL3NyYy9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyIsIi4uL3NyYy9vYmplY3RzL0xpbmVMb29wLmpzIiwiLi4vc3JjL21hdGVyaWFscy9Qb2ludHNNYXRlcmlhbC5qcyIsIi4uL3NyYy9vYmplY3RzL1BvaW50cy5qcyIsIi4uL3NyYy90ZXh0dXJlcy9WaWRlb1RleHR1cmUuanMiLCIuLi9zcmMvdGV4dHVyZXMvVmlkZW9GcmFtZVRleHR1cmUuanMiLCIuLi9zcmMvdGV4dHVyZXMvRnJhbWVidWZmZXJUZXh0dXJlLmpzIiwiLi4vc3JjL3RleHR1cmVzL0NvbXByZXNzZWRUZXh0dXJlLmpzIiwiLi4vc3JjL3RleHR1cmVzL0NvbXByZXNzZWRBcnJheVRleHR1cmUuanMiLCIuLi9zcmMvdGV4dHVyZXMvQ29tcHJlc3NlZEN1YmVUZXh0dXJlLmpzIiwiLi4vc3JjL3RleHR1cmVzL0NhbnZhc1RleHR1cmUuanMiLCIuLi9zcmMvdGV4dHVyZXMvRGVwdGhUZXh0dXJlLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL0N1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvRWxsaXBzZUN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvQXJjQ3VydmUuanMiLCIuLi9zcmMvZXh0cmFzL2N1cnZlcy9DYXRtdWxsUm9tQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL0ludGVycG9sYXRpb25zLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvQ3ViaWNCZXppZXJDdXJ2ZS5qcyIsIi4uL3NyYy9leHRyYXMvY3VydmVzL0N1YmljQmV6aWVyQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvTGluZUN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvTGluZUN1cnZlMy5qcyIsIi4uL3NyYy9leHRyYXMvY3VydmVzL1F1YWRyYXRpY0JlemllckN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvUXVhZHJhdGljQmV6aWVyQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvU3BsaW5lQ3VydmUuanMiLCIuLi9zcmMvZXh0cmFzL2NvcmUvQ3VydmVQYXRoLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL1BhdGguanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9MYXRoZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ2Fwc3VsZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ2lyY2xlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9DeWxpbmRlckdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ29uZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvUG9seWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvRG9kZWNhaGVkcm9uR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9FZGdlc0dlb21ldHJ5LmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL1NoYXBlLmpzIiwiLi4vc3JjL2V4dHJhcy9FYXJjdXQuanMiLCIuLi9zcmMvZXh0cmFzL1NoYXBlVXRpbHMuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9FeHRydWRlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9JY29zYWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvT2N0YWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvUGxhbmVHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1JpbmdHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1NoYXBlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9TcGhlcmVHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1RldHJhaGVkcm9uR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9Ub3J1c0dlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvVG9ydXNLbm90R2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9UdWJlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9XaXJlZnJhbWVHZW9tZXRyeS5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvU2hhZG93TWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL1Jhd1NoYWRlck1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NZXNoU3RhbmRhcmRNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaFBoeXNpY2FsTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hQaG9uZ01hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NZXNoVG9vbk1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NZXNoTm9ybWFsTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hMYW1iZXJ0TWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hEZXB0aE1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NZXNoRGlzdGFuY2VNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaE1hdGNhcE1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9MaW5lRGFzaGVkTWF0ZXJpYWwuanMiLCIuLi9zcmMvYW5pbWF0aW9uL0FuaW1hdGlvblV0aWxzLmpzIiwiLi4vc3JjL21hdGgvSW50ZXJwb2xhbnQuanMiLCIuLi9zcmMvbWF0aC9pbnRlcnBvbGFudHMvQ3ViaWNJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9tYXRoL2ludGVycG9sYW50cy9MaW5lYXJJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9tYXRoL2ludGVycG9sYW50cy9EaXNjcmV0ZUludGVycG9sYW50LmpzIiwiLi4vc3JjL2FuaW1hdGlvbi9LZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi90cmFja3MvQm9vbGVhbktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL3RyYWNrcy9Db2xvcktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL3RyYWNrcy9OdW1iZXJLZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL21hdGgvaW50ZXJwb2xhbnRzL1F1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9hbmltYXRpb24vdHJhY2tzL1F1YXRlcm5pb25LZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi90cmFja3MvU3RyaW5nS2V5ZnJhbWVUcmFjay5qcyIsIi4uL3NyYy9hbmltYXRpb24vdHJhY2tzL1ZlY3RvcktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL0FuaW1hdGlvbkNsaXAuanMiLCIuLi9zcmMvbG9hZGVycy9DYWNoZS5qcyIsIi4uL3NyYy9sb2FkZXJzL0xvYWRpbmdNYW5hZ2VyLmpzIiwiLi4vc3JjL2xvYWRlcnMvTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvRmlsZUxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0FuaW1hdGlvbkxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0NvbXByZXNzZWRUZXh0dXJlTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvSW1hZ2VMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9DdWJlVGV4dHVyZUxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0RhdGFUZXh0dXJlTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvVGV4dHVyZUxvYWRlci5qcyIsIi4uL3NyYy9saWdodHMvTGlnaHQuanMiLCIuLi9zcmMvbGlnaHRzL0hlbWlzcGhlcmVMaWdodC5qcyIsIi4uL3NyYy9saWdodHMvTGlnaHRTaGFkb3cuanMiLCIuLi9zcmMvbGlnaHRzL1Nwb3RMaWdodFNoYWRvdy5qcyIsIi4uL3NyYy9saWdodHMvU3BvdExpZ2h0LmpzIiwiLi4vc3JjL2xpZ2h0cy9Qb2ludExpZ2h0U2hhZG93LmpzIiwiLi4vc3JjL2xpZ2h0cy9Qb2ludExpZ2h0LmpzIiwiLi4vc3JjL2NhbWVyYXMvT3J0aG9ncmFwaGljQ2FtZXJhLmpzIiwiLi4vc3JjL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0U2hhZG93LmpzIiwiLi4vc3JjL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0LmpzIiwiLi4vc3JjL2xpZ2h0cy9BbWJpZW50TGlnaHQuanMiLCIuLi9zcmMvbGlnaHRzL1JlY3RBcmVhTGlnaHQuanMiLCIuLi9zcmMvbWF0aC9TcGhlcmljYWxIYXJtb25pY3MzLmpzIiwiLi4vc3JjL2xpZ2h0cy9MaWdodFByb2JlLmpzIiwiLi4vc3JjL2xvYWRlcnMvTWF0ZXJpYWxMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9Mb2FkZXJVdGlscy5qcyIsIi4uL3NyYy9jb3JlL0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LmpzIiwiLi4vc3JjL2xvYWRlcnMvQnVmZmVyR2VvbWV0cnlMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9PYmplY3RMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9JbWFnZUJpdG1hcExvYWRlci5qcyIsIi4uL3NyYy9hdWRpby9BdWRpb0NvbnRleHQuanMiLCIuLi9zcmMvbG9hZGVycy9BdWRpb0xvYWRlci5qcyIsIi4uL3NyYy9jYW1lcmFzL1N0ZXJlb0NhbWVyYS5qcyIsIi4uL3NyYy9jYW1lcmFzL0FycmF5Q2FtZXJhLmpzIiwiLi4vc3JjL2NvcmUvQ2xvY2suanMiLCIuLi9zcmMvYXVkaW8vQXVkaW9MaXN0ZW5lci5qcyIsIi4uL3NyYy9hdWRpby9BdWRpby5qcyIsIi4uL3NyYy9hdWRpby9Qb3NpdGlvbmFsQXVkaW8uanMiLCIuLi9zcmMvYXVkaW8vQXVkaW9BbmFseXNlci5qcyIsIi4uL3NyYy9hbmltYXRpb24vUHJvcGVydHlNaXhlci5qcyIsIi4uL3NyYy9hbmltYXRpb24vUHJvcGVydHlCaW5kaW5nLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi9BbmltYXRpb25PYmplY3RHcm91cC5qcyIsIi4uL3NyYy9hbmltYXRpb24vQW5pbWF0aW9uQWN0aW9uLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi9BbmltYXRpb25NaXhlci5qcyIsIi4uL3NyYy9jb3JlL1JlbmRlclRhcmdldDNELmpzIiwiLi4vc3JjL2NvcmUvUmVuZGVyVGFyZ2V0QXJyYXkuanMiLCIuLi9zcmMvY29yZS9Vbmlmb3JtLmpzIiwiLi4vc3JjL2NvcmUvVW5pZm9ybXNHcm91cC5qcyIsIi4uL3NyYy9jb3JlL0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLmpzIiwiLi4vc3JjL2NvcmUvR0xCdWZmZXJBdHRyaWJ1dGUuanMiLCIuLi9zcmMvY29yZS9SYXljYXN0ZXIuanMiLCIuLi9zcmMvbWF0aC9TcGhlcmljYWwuanMiLCIuLi9zcmMvbWF0aC9DeWxpbmRyaWNhbC5qcyIsIi4uL3NyYy9tYXRoL01hdHJpeDIuanMiLCIuLi9zcmMvbWF0aC9Cb3gyLmpzIiwiLi4vc3JjL21hdGgvTGluZTMuanMiLCIuLi9zcmMvaGVscGVycy9TcG90TGlnaHRIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9Ta2VsZXRvbkhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL1BvaW50TGlnaHRIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9IZW1pc3BoZXJlTGlnaHRIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9HcmlkSGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvUG9sYXJHcmlkSGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvRGlyZWN0aW9uYWxMaWdodEhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0NhbWVyYUhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0JveEhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0JveDNIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9QbGFuZUhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0Fycm93SGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvQXhlc0hlbHBlci5qcyIsIi4uL3NyYy9leHRyYXMvY29yZS9TaGFwZVBhdGguanMiLCIuLi9zcmMvZXh0cmFzL0NvbnRyb2xzLmpzIiwiLi4vc3JjL2V4dHJhcy9UZXh0dXJlVXRpbHMuanMiLCIuLi9zcmMvVGhyZWUuQ29yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUkVWSVNJT04gPSAnMTczZGV2JztcclxuXHJcbmV4cG9ydCBjb25zdCBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyIH07XHJcbmV4cG9ydCBjb25zdCBUT1VDSCA9IHsgUk9UQVRFOiAwLCBQQU46IDEsIERPTExZX1BBTjogMiwgRE9MTFlfUk9UQVRFOiAzIH07XHJcbmV4cG9ydCBjb25zdCBDdWxsRmFjZU5vbmUgPSAwO1xyXG5leHBvcnQgY29uc3QgQ3VsbEZhY2VCYWNrID0gMTtcclxuZXhwb3J0IGNvbnN0IEN1bGxGYWNlRnJvbnQgPSAyO1xyXG5leHBvcnQgY29uc3QgQ3VsbEZhY2VGcm9udEJhY2sgPSAzO1xyXG5leHBvcnQgY29uc3QgQmFzaWNTaGFkb3dNYXAgPSAwO1xyXG5leHBvcnQgY29uc3QgUENGU2hhZG93TWFwID0gMTtcclxuZXhwb3J0IGNvbnN0IFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xyXG5leHBvcnQgY29uc3QgVlNNU2hhZG93TWFwID0gMztcclxuZXhwb3J0IGNvbnN0IEZyb250U2lkZSA9IDA7XHJcbmV4cG9ydCBjb25zdCBCYWNrU2lkZSA9IDE7XHJcbmV4cG9ydCBjb25zdCBEb3VibGVTaWRlID0gMjtcclxuZXhwb3J0IGNvbnN0IE5vQmxlbmRpbmcgPSAwO1xyXG5leHBvcnQgY29uc3QgTm9ybWFsQmxlbmRpbmcgPSAxO1xyXG5leHBvcnQgY29uc3QgQWRkaXRpdmVCbGVuZGluZyA9IDI7XHJcbmV4cG9ydCBjb25zdCBTdWJ0cmFjdGl2ZUJsZW5kaW5nID0gMztcclxuZXhwb3J0IGNvbnN0IE11bHRpcGx5QmxlbmRpbmcgPSA0O1xyXG5leHBvcnQgY29uc3QgQ3VzdG9tQmxlbmRpbmcgPSA1O1xyXG5leHBvcnQgY29uc3QgQWRkRXF1YXRpb24gPSAxMDA7XHJcbmV4cG9ydCBjb25zdCBTdWJ0cmFjdEVxdWF0aW9uID0gMTAxO1xyXG5leHBvcnQgY29uc3QgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7XHJcbmV4cG9ydCBjb25zdCBNaW5FcXVhdGlvbiA9IDEwMztcclxuZXhwb3J0IGNvbnN0IE1heEVxdWF0aW9uID0gMTA0O1xyXG5leHBvcnQgY29uc3QgWmVyb0ZhY3RvciA9IDIwMDtcclxuZXhwb3J0IGNvbnN0IE9uZUZhY3RvciA9IDIwMTtcclxuZXhwb3J0IGNvbnN0IFNyY0NvbG9yRmFjdG9yID0gMjAyO1xyXG5leHBvcnQgY29uc3QgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcclxuZXhwb3J0IGNvbnN0IFNyY0FscGhhRmFjdG9yID0gMjA0O1xyXG5leHBvcnQgY29uc3QgT25lTWludXNTcmNBbHBoYUZhY3RvciA9IDIwNTtcclxuZXhwb3J0IGNvbnN0IERzdEFscGhhRmFjdG9yID0gMjA2O1xyXG5leHBvcnQgY29uc3QgT25lTWludXNEc3RBbHBoYUZhY3RvciA9IDIwNztcclxuZXhwb3J0IGNvbnN0IERzdENvbG9yRmFjdG9yID0gMjA4O1xyXG5leHBvcnQgY29uc3QgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTtcclxuZXhwb3J0IGNvbnN0IFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgPSAyMTA7XHJcbmV4cG9ydCBjb25zdCBDb25zdGFudENvbG9yRmFjdG9yID0gMjExO1xyXG5leHBvcnQgY29uc3QgT25lTWludXNDb25zdGFudENvbG9yRmFjdG9yID0gMjEyO1xyXG5leHBvcnQgY29uc3QgQ29uc3RhbnRBbHBoYUZhY3RvciA9IDIxMztcclxuZXhwb3J0IGNvbnN0IE9uZU1pbnVzQ29uc3RhbnRBbHBoYUZhY3RvciA9IDIxNDtcclxuZXhwb3J0IGNvbnN0IE5ldmVyRGVwdGggPSAwO1xyXG5leHBvcnQgY29uc3QgQWx3YXlzRGVwdGggPSAxO1xyXG5leHBvcnQgY29uc3QgTGVzc0RlcHRoID0gMjtcclxuZXhwb3J0IGNvbnN0IExlc3NFcXVhbERlcHRoID0gMztcclxuZXhwb3J0IGNvbnN0IEVxdWFsRGVwdGggPSA0O1xyXG5leHBvcnQgY29uc3QgR3JlYXRlckVxdWFsRGVwdGggPSA1O1xyXG5leHBvcnQgY29uc3QgR3JlYXRlckRlcHRoID0gNjtcclxuZXhwb3J0IGNvbnN0IE5vdEVxdWFsRGVwdGggPSA3O1xyXG5leHBvcnQgY29uc3QgTXVsdGlwbHlPcGVyYXRpb24gPSAwO1xyXG5leHBvcnQgY29uc3QgTWl4T3BlcmF0aW9uID0gMTtcclxuZXhwb3J0IGNvbnN0IEFkZE9wZXJhdGlvbiA9IDI7XHJcbmV4cG9ydCBjb25zdCBOb1RvbmVNYXBwaW5nID0gMDtcclxuZXhwb3J0IGNvbnN0IExpbmVhclRvbmVNYXBwaW5nID0gMTtcclxuZXhwb3J0IGNvbnN0IFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xyXG5leHBvcnQgY29uc3QgQ2luZW9uVG9uZU1hcHBpbmcgPSAzO1xyXG5leHBvcnQgY29uc3QgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNDtcclxuZXhwb3J0IGNvbnN0IEN1c3RvbVRvbmVNYXBwaW5nID0gNTtcclxuZXhwb3J0IGNvbnN0IEFnWFRvbmVNYXBwaW5nID0gNjtcclxuZXhwb3J0IGNvbnN0IE5ldXRyYWxUb25lTWFwcGluZyA9IDc7XHJcbmV4cG9ydCBjb25zdCBBdHRhY2hlZEJpbmRNb2RlID0gJ2F0dGFjaGVkJztcclxuZXhwb3J0IGNvbnN0IERldGFjaGVkQmluZE1vZGUgPSAnZGV0YWNoZWQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVWTWFwcGluZyA9IDMwMDtcclxuZXhwb3J0IGNvbnN0IEN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IDMwMTtcclxuZXhwb3J0IGNvbnN0IEN1YmVSZWZyYWN0aW9uTWFwcGluZyA9IDMwMjtcclxuZXhwb3J0IGNvbnN0IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nID0gMzAzO1xyXG5leHBvcnQgY29uc3QgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDQ7XHJcbmV4cG9ydCBjb25zdCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcclxuZXhwb3J0IGNvbnN0IFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcclxuZXhwb3J0IGNvbnN0IENsYW1wVG9FZGdlV3JhcHBpbmcgPSAxMDAxO1xyXG5leHBvcnQgY29uc3QgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XHJcbmV4cG9ydCBjb25zdCBOZWFyZXN0RmlsdGVyID0gMTAwMztcclxuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcclxuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcclxuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xyXG5leHBvcnQgY29uc3QgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IDEwMDU7XHJcbmV4cG9ydCBjb25zdCBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xyXG5leHBvcnQgY29uc3QgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XHJcbmV4cG9ydCBjb25zdCBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNztcclxuZXhwb3J0IGNvbnN0IExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XHJcbmV4cG9ydCBjb25zdCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xyXG5leHBvcnQgY29uc3QgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7XHJcbmV4cG9ydCBjb25zdCBCeXRlVHlwZSA9IDEwMTA7XHJcbmV4cG9ydCBjb25zdCBTaG9ydFR5cGUgPSAxMDExO1xyXG5leHBvcnQgY29uc3QgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyO1xyXG5leHBvcnQgY29uc3QgSW50VHlwZSA9IDEwMTM7XHJcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xyXG5leHBvcnQgY29uc3QgRmxvYXRUeXBlID0gMTAxNTtcclxuZXhwb3J0IGNvbnN0IEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xyXG5leHBvcnQgY29uc3QgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcclxuZXhwb3J0IGNvbnN0IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7XHJcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xyXG5leHBvcnQgY29uc3QgVW5zaWduZWRJbnQ1OTk5VHlwZSA9IDM1OTAyO1xyXG5leHBvcnQgY29uc3QgQWxwaGFGb3JtYXQgPSAxMDIxO1xyXG5leHBvcnQgY29uc3QgUkdCRm9ybWF0ID0gMTAyMjtcclxuZXhwb3J0IGNvbnN0IFJHQkFGb3JtYXQgPSAxMDIzO1xyXG5leHBvcnQgY29uc3QgTHVtaW5hbmNlRm9ybWF0ID0gMTAyNDtcclxuZXhwb3J0IGNvbnN0IEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcclxuZXhwb3J0IGNvbnN0IERlcHRoRm9ybWF0ID0gMTAyNjtcclxuZXhwb3J0IGNvbnN0IERlcHRoU3RlbmNpbEZvcm1hdCA9IDEwMjc7XHJcbmV4cG9ydCBjb25zdCBSZWRGb3JtYXQgPSAxMDI4O1xyXG5leHBvcnQgY29uc3QgUmVkSW50ZWdlckZvcm1hdCA9IDEwMjk7XHJcbmV4cG9ydCBjb25zdCBSR0Zvcm1hdCA9IDEwMzA7XHJcbmV4cG9ydCBjb25zdCBSR0ludGVnZXJGb3JtYXQgPSAxMDMxO1xyXG5leHBvcnQgY29uc3QgUkdCSW50ZWdlckZvcm1hdCA9IDEwMzI7XHJcbmV4cG9ydCBjb25zdCBSR0JBSW50ZWdlckZvcm1hdCA9IDEwMzM7XHJcblxyXG5leHBvcnQgY29uc3QgUkdCX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NjtcclxuZXhwb3J0IGNvbnN0IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc3O1xyXG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7XHJcbmV4cG9ydCBjb25zdCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSAzMzc3OTtcclxuZXhwb3J0IGNvbnN0IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDA7XHJcbmV4cG9ydCBjb25zdCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQxO1xyXG5leHBvcnQgY29uc3QgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDI7XHJcbmV4cG9ydCBjb25zdCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MztcclxuZXhwb3J0IGNvbnN0IFJHQl9FVEMxX0Zvcm1hdCA9IDM2MTk2O1xyXG5leHBvcnQgY29uc3QgUkdCX0VUQzJfRm9ybWF0ID0gMzc0OTI7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCA9IDM3NDk2O1xyXG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcclxuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ181eDRfRm9ybWF0ID0gMzc4MDk7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNXg1X0Zvcm1hdCA9IDM3ODEwO1xyXG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcclxuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ182eDZfRm9ybWF0ID0gMzc4MTI7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfOHg1X0Zvcm1hdCA9IDM3ODEzO1xyXG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcclxuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ184eDhfRm9ybWF0ID0gMzc4MTU7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgPSAzNzgxNjtcclxuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xyXG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEweDhfRm9ybWF0ID0gMzc4MTg7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0ID0gMzc4MTk7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gMzc4MjE7XHJcbmV4cG9ydCBjb25zdCBSR0JBX0JQVENfRm9ybWF0ID0gMzY0OTI7XHJcbmV4cG9ydCBjb25zdCBSR0JfQlBUQ19TSUdORURfRm9ybWF0ID0gMzY0OTQ7XHJcbmV4cG9ydCBjb25zdCBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgPSAzNjQ5NTtcclxuZXhwb3J0IGNvbnN0IFJFRF9SR1RDMV9Gb3JtYXQgPSAzNjI4MztcclxuZXhwb3J0IGNvbnN0IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ID0gMzYyODQ7XHJcbmV4cG9ydCBjb25zdCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0ID0gMzYyODU7XHJcbmV4cG9ydCBjb25zdCBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCA9IDM2Mjg2O1xyXG5leHBvcnQgY29uc3QgTG9vcE9uY2UgPSAyMjAwO1xyXG5leHBvcnQgY29uc3QgTG9vcFJlcGVhdCA9IDIyMDE7XHJcbmV4cG9ydCBjb25zdCBMb29wUGluZ1BvbmcgPSAyMjAyO1xyXG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XHJcbmV4cG9ydCBjb25zdCBJbnRlcnBvbGF0ZUxpbmVhciA9IDIzMDE7XHJcbmV4cG9ydCBjb25zdCBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XHJcbmV4cG9ydCBjb25zdCBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcclxuZXhwb3J0IGNvbnN0IFplcm9TbG9wZUVuZGluZyA9IDI0MDE7XHJcbmV4cG9ydCBjb25zdCBXcmFwQXJvdW5kRW5kaW5nID0gMjQwMjtcclxuZXhwb3J0IGNvbnN0IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDA7XHJcbmV4cG9ydCBjb25zdCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDE7XHJcbmV4cG9ydCBjb25zdCBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XHJcbmV4cG9ydCBjb25zdCBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xyXG5leHBvcnQgY29uc3QgVHJpYW5nbGVGYW5EcmF3TW9kZSA9IDI7XHJcbmV4cG9ydCBjb25zdCBCYXNpY0RlcHRoUGFja2luZyA9IDMyMDA7XHJcbmV4cG9ydCBjb25zdCBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcclxuZXhwb3J0IGNvbnN0IFJHQkRlcHRoUGFja2luZyA9IDMyMDI7XHJcbmV4cG9ydCBjb25zdCBSR0RlcHRoUGFja2luZyA9IDMyMDM7XHJcbmV4cG9ydCBjb25zdCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xyXG5leHBvcnQgY29uc3QgT2JqZWN0U3BhY2VOb3JtYWxNYXAgPSAxO1xyXG5cclxuLy8gQ29sb3Igc3BhY2Ugc3RyaW5nIGlkZW50aWZpZXJzLCBtYXRjaGluZyBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQgYW5kIFdlYkdQVSBuYW1lcyB3aGVyZSBhdmFpbGFibGUuXHJcbmV4cG9ydCBjb25zdCBOb0NvbG9yU3BhY2UgPSAnJztcclxuZXhwb3J0IGNvbnN0IFNSR0JDb2xvclNwYWNlID0gJ3NyZ2InO1xyXG5leHBvcnQgY29uc3QgTGluZWFyU1JHQkNvbG9yU3BhY2UgPSAnc3JnYi1saW5lYXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IExpbmVhclRyYW5zZmVyID0gJ2xpbmVhcic7XHJcbmV4cG9ydCBjb25zdCBTUkdCVHJhbnNmZXIgPSAnc3JnYic7XHJcblxyXG5leHBvcnQgY29uc3QgWmVyb1N0ZW5jaWxPcCA9IDA7XHJcbmV4cG9ydCBjb25zdCBLZWVwU3RlbmNpbE9wID0gNzY4MDtcclxuZXhwb3J0IGNvbnN0IFJlcGxhY2VTdGVuY2lsT3AgPSA3NjgxO1xyXG5leHBvcnQgY29uc3QgSW5jcmVtZW50U3RlbmNpbE9wID0gNzY4MjtcclxuZXhwb3J0IGNvbnN0IERlY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODM7XHJcbmV4cG9ydCBjb25zdCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTU7XHJcbmV4cG9ydCBjb25zdCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTY7XHJcbmV4cG9ydCBjb25zdCBJbnZlcnRTdGVuY2lsT3AgPSA1Mzg2O1xyXG5cclxuZXhwb3J0IGNvbnN0IE5ldmVyU3RlbmNpbEZ1bmMgPSA1MTI7XHJcbmV4cG9ydCBjb25zdCBMZXNzU3RlbmNpbEZ1bmMgPSA1MTM7XHJcbmV4cG9ydCBjb25zdCBFcXVhbFN0ZW5jaWxGdW5jID0gNTE0O1xyXG5leHBvcnQgY29uc3QgTGVzc0VxdWFsU3RlbmNpbEZ1bmMgPSA1MTU7XHJcbmV4cG9ydCBjb25zdCBHcmVhdGVyU3RlbmNpbEZ1bmMgPSA1MTY7XHJcbmV4cG9ydCBjb25zdCBOb3RFcXVhbFN0ZW5jaWxGdW5jID0gNTE3O1xyXG5leHBvcnQgY29uc3QgR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMgPSA1MTg7XHJcbmV4cG9ydCBjb25zdCBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTtcclxuXHJcbmV4cG9ydCBjb25zdCBOZXZlckNvbXBhcmUgPSA1MTI7XHJcbmV4cG9ydCBjb25zdCBMZXNzQ29tcGFyZSA9IDUxMztcclxuZXhwb3J0IGNvbnN0IEVxdWFsQ29tcGFyZSA9IDUxNDtcclxuZXhwb3J0IGNvbnN0IExlc3NFcXVhbENvbXBhcmUgPSA1MTU7XHJcbmV4cG9ydCBjb25zdCBHcmVhdGVyQ29tcGFyZSA9IDUxNjtcclxuZXhwb3J0IGNvbnN0IE5vdEVxdWFsQ29tcGFyZSA9IDUxNztcclxuZXhwb3J0IGNvbnN0IEdyZWF0ZXJFcXVhbENvbXBhcmUgPSA1MTg7XHJcbmV4cG9ydCBjb25zdCBBbHdheXNDb21wYXJlID0gNTE5O1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0O1xyXG5leHBvcnQgY29uc3QgRHluYW1pY0RyYXdVc2FnZSA9IDM1MDQ4O1xyXG5leHBvcnQgY29uc3QgU3RyZWFtRHJhd1VzYWdlID0gMzUwNDA7XHJcbmV4cG9ydCBjb25zdCBTdGF0aWNSZWFkVXNhZ2UgPSAzNTA0NTtcclxuZXhwb3J0IGNvbnN0IER5bmFtaWNSZWFkVXNhZ2UgPSAzNTA0OTtcclxuZXhwb3J0IGNvbnN0IFN0cmVhbVJlYWRVc2FnZSA9IDM1MDQxO1xyXG5leHBvcnQgY29uc3QgU3RhdGljQ29weVVzYWdlID0gMzUwNDY7XHJcbmV4cG9ydCBjb25zdCBEeW5hbWljQ29weVVzYWdlID0gMzUwNTA7XHJcbmV4cG9ydCBjb25zdCBTdHJlYW1Db3B5VXNhZ2UgPSAzNTA0MjtcclxuXHJcbmV4cG9ydCBjb25zdCBHTFNMMSA9ICcxMDAnO1xyXG5leHBvcnQgY29uc3QgR0xTTDMgPSAnMzAwIGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gPSAyMDAwO1xyXG5leHBvcnQgY29uc3QgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDE7XHJcblxyXG5leHBvcnQgY29uc3QgVGltZXN0YW1wUXVlcnkgPSB7XHJcblx0Q09NUFVURTogJ2NvbXB1dGUnLFxyXG5cdFJFTkRFUjogJ3JlbmRlcidcclxufTtcclxuIiwiLyoqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL1xyXG4gKi9cclxuXHJcbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG5cdGFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxuXHJcblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lcnNbIHR5cGUgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0gPSBbXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApID09PSAtIDEgKSB7XHJcblxyXG5cdFx0XHRsaXN0ZW5lcnNbIHR5cGUgXS5wdXNoKCBsaXN0ZW5lciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRoYXNFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcclxuXHJcblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybiBmYWxzZTtcclxuXHJcblx0XHRyZXR1cm4gbGlzdGVuZXJzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApICE9PSAtIDE7XHJcblxyXG5cdH1cclxuXHJcblx0cmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XHJcblxyXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cclxuXHRcdGlmICggbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XHJcblxyXG5cdFx0Y29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xyXG5cclxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YoIGxpc3RlbmVyICk7XHJcblxyXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XHJcblxyXG5cdFx0XHRcdGxpc3RlbmVyQXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRkaXNwYXRjaEV2ZW50KCBldmVudCApIHtcclxuXHJcblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcclxuXHJcblx0XHRjb25zdCBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyBldmVudC50eXBlIF07XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdFx0Ly8gTWFrZSBhIGNvcHksIGluIGNhc2UgbGlzdGVuZXJzIGFyZSByZW1vdmVkIHdoaWxlIGl0ZXJhdGluZy5cclxuXHRcdFx0Y29uc3QgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRhcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRldmVudC50YXJnZXQgPSBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9O1xyXG4iLCJjb25zdCBfbHV0ID0gWyAnMDAnLCAnMDEnLCAnMDInLCAnMDMnLCAnMDQnLCAnMDUnLCAnMDYnLCAnMDcnLCAnMDgnLCAnMDknLCAnMGEnLCAnMGInLCAnMGMnLCAnMGQnLCAnMGUnLCAnMGYnLCAnMTAnLCAnMTEnLCAnMTInLCAnMTMnLCAnMTQnLCAnMTUnLCAnMTYnLCAnMTcnLCAnMTgnLCAnMTknLCAnMWEnLCAnMWInLCAnMWMnLCAnMWQnLCAnMWUnLCAnMWYnLCAnMjAnLCAnMjEnLCAnMjInLCAnMjMnLCAnMjQnLCAnMjUnLCAnMjYnLCAnMjcnLCAnMjgnLCAnMjknLCAnMmEnLCAnMmInLCAnMmMnLCAnMmQnLCAnMmUnLCAnMmYnLCAnMzAnLCAnMzEnLCAnMzInLCAnMzMnLCAnMzQnLCAnMzUnLCAnMzYnLCAnMzcnLCAnMzgnLCAnMzknLCAnM2EnLCAnM2InLCAnM2MnLCAnM2QnLCAnM2UnLCAnM2YnLCAnNDAnLCAnNDEnLCAnNDInLCAnNDMnLCAnNDQnLCAnNDUnLCAnNDYnLCAnNDcnLCAnNDgnLCAnNDknLCAnNGEnLCAnNGInLCAnNGMnLCAnNGQnLCAnNGUnLCAnNGYnLCAnNTAnLCAnNTEnLCAnNTInLCAnNTMnLCAnNTQnLCAnNTUnLCAnNTYnLCAnNTcnLCAnNTgnLCAnNTknLCAnNWEnLCAnNWInLCAnNWMnLCAnNWQnLCAnNWUnLCAnNWYnLCAnNjAnLCAnNjEnLCAnNjInLCAnNjMnLCAnNjQnLCAnNjUnLCAnNjYnLCAnNjcnLCAnNjgnLCAnNjknLCAnNmEnLCAnNmInLCAnNmMnLCAnNmQnLCAnNmUnLCAnNmYnLCAnNzAnLCAnNzEnLCAnNzInLCAnNzMnLCAnNzQnLCAnNzUnLCAnNzYnLCAnNzcnLCAnNzgnLCAnNzknLCAnN2EnLCAnN2InLCAnN2MnLCAnN2QnLCAnN2UnLCAnN2YnLCAnODAnLCAnODEnLCAnODInLCAnODMnLCAnODQnLCAnODUnLCAnODYnLCAnODcnLCAnODgnLCAnODknLCAnOGEnLCAnOGInLCAnOGMnLCAnOGQnLCAnOGUnLCAnOGYnLCAnOTAnLCAnOTEnLCAnOTInLCAnOTMnLCAnOTQnLCAnOTUnLCAnOTYnLCAnOTcnLCAnOTgnLCAnOTknLCAnOWEnLCAnOWInLCAnOWMnLCAnOWQnLCAnOWUnLCAnOWYnLCAnYTAnLCAnYTEnLCAnYTInLCAnYTMnLCAnYTQnLCAnYTUnLCAnYTYnLCAnYTcnLCAnYTgnLCAnYTknLCAnYWEnLCAnYWInLCAnYWMnLCAnYWQnLCAnYWUnLCAnYWYnLCAnYjAnLCAnYjEnLCAnYjInLCAnYjMnLCAnYjQnLCAnYjUnLCAnYjYnLCAnYjcnLCAnYjgnLCAnYjknLCAnYmEnLCAnYmInLCAnYmMnLCAnYmQnLCAnYmUnLCAnYmYnLCAnYzAnLCAnYzEnLCAnYzInLCAnYzMnLCAnYzQnLCAnYzUnLCAnYzYnLCAnYzcnLCAnYzgnLCAnYzknLCAnY2EnLCAnY2InLCAnY2MnLCAnY2QnLCAnY2UnLCAnY2YnLCAnZDAnLCAnZDEnLCAnZDInLCAnZDMnLCAnZDQnLCAnZDUnLCAnZDYnLCAnZDcnLCAnZDgnLCAnZDknLCAnZGEnLCAnZGInLCAnZGMnLCAnZGQnLCAnZGUnLCAnZGYnLCAnZTAnLCAnZTEnLCAnZTInLCAnZTMnLCAnZTQnLCAnZTUnLCAnZTYnLCAnZTcnLCAnZTgnLCAnZTknLCAnZWEnLCAnZWInLCAnZWMnLCAnZWQnLCAnZWUnLCAnZWYnLCAnZjAnLCAnZjEnLCAnZjInLCAnZjMnLCAnZjQnLCAnZjUnLCAnZjYnLCAnZjcnLCAnZjgnLCAnZjknLCAnZmEnLCAnZmInLCAnZmMnLCAnZmQnLCAnZmUnLCAnZmYnIF07XHJcblxyXG5sZXQgX3NlZWQgPSAxMjM0NTY3O1xyXG5cclxuXHJcbmNvbnN0IERFRzJSQUQgPSBNYXRoLlBJIC8gMTgwO1xyXG5jb25zdCBSQUQyREVHID0gMTgwIC8gTWF0aC5QSTtcclxuXHJcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdC8yMTk2MzEzNiMyMTk2MzEzNlxyXG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XHJcblxyXG5cdGNvbnN0IGQwID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdGNvbnN0IGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdGNvbnN0IGQzID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdGNvbnN0IHV1aWQgPSBfbHV0WyBkMCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDggJiAweGZmIF0gKyBfbHV0WyBkMCA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDI0ICYgMHhmZiBdICsgJy0nICtcclxuXHRcdFx0X2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xyXG5cdFx0XHRfbHV0WyBkMiAmIDB4M2YgfCAweDgwIF0gKyBfbHV0WyBkMiA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDIgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMiA+PiAyNCAmIDB4ZmYgXSArXHJcblx0XHRcdF9sdXRbIGQzICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMjQgJiAweGZmIF07XHJcblxyXG5cdC8vIC50b0xvd2VyQ2FzZSgpIGhlcmUgZmxhdHRlbnMgY29uY2F0ZW5hdGVkIHN0cmluZ3MgdG8gc2F2ZSBoZWFwIG1lbW9yeSBzcGFjZS5cclxuXHRyZXR1cm4gdXVpZC50b0xvd2VyQ2FzZSgpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2xhbXAoIHZhbHVlLCBtaW4sIG1heCApIHtcclxuXHJcblx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcclxuXHJcbn1cclxuXHJcbi8vIGNvbXB1dGUgZXVjbGlkZWFuIG1vZHVsbyBvZiBtICUgblxyXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb2R1bG9fb3BlcmF0aW9uXHJcbmZ1bmN0aW9uIGV1Y2xpZGVhbk1vZHVsbyggbiwgbSApIHtcclxuXHJcblx0cmV0dXJuICggKCBuICUgbSApICsgbSApICUgbTtcclxuXHJcbn1cclxuXHJcbi8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj5cclxuZnVuY3Rpb24gbWFwTGluZWFyKCB4LCBhMSwgYTIsIGIxLCBiMiApIHtcclxuXHJcblx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XHJcblxyXG59XHJcblxyXG4vLyBodHRwczovL3d3dy5nYW1lZGV2Lm5ldC90dXRvcmlhbHMvcHJvZ3JhbW1pbmcvZ2VuZXJhbC1hbmQtZ2FtZXBsYXktcHJvZ3JhbW1pbmcvaW52ZXJzZS1sZXJwLWEtc3VwZXItdXNlZnVsLXlldC1vZnRlbi1vdmVybG9va2VkLWZ1bmN0aW9uLXI1MjMwL1xyXG5mdW5jdGlvbiBpbnZlcnNlTGVycCggeCwgeSwgdmFsdWUgKSB7XHJcblxyXG5cdGlmICggeCAhPT0geSApIHtcclxuXHJcblx0XHRyZXR1cm4gKCB2YWx1ZSAtIHggKSAvICggeSAtIHggKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRyZXR1cm4gMDtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cclxuZnVuY3Rpb24gbGVycCggeCwgeSwgdCApIHtcclxuXHJcblx0cmV0dXJuICggMSAtIHQgKSAqIHggKyB0ICogeTtcclxuXHJcbn1cclxuXHJcbi8vIGh0dHA6Ly93d3cucm9yeWRyaXNjb2xsLmNvbS8yMDE2LzAzLzA3L2ZyYW1lLXJhdGUtaW5kZXBlbmRlbnQtZGFtcGluZy11c2luZy1sZXJwL1xyXG5mdW5jdGlvbiBkYW1wKCB4LCB5LCBsYW1iZGEsIGR0ICkge1xyXG5cclxuXHRyZXR1cm4gbGVycCggeCwgeSwgMSAtIE1hdGguZXhwKCAtIGxhbWJkYSAqIGR0ICkgKTtcclxuXHJcbn1cclxuXHJcbi8vIGh0dHBzOi8vd3d3LmRlc21vcy5jb20vY2FsY3VsYXRvci92Y3Nqbnl6N3g0XHJcbmZ1bmN0aW9uIHBpbmdwb25nKCB4LCBsZW5ndGggPSAxICkge1xyXG5cclxuXHRyZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnMoIGV1Y2xpZGVhbk1vZHVsbyggeCwgbGVuZ3RoICogMiApIC0gbGVuZ3RoICk7XHJcblxyXG59XHJcblxyXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcclxuZnVuY3Rpb24gc21vb3Roc3RlcCggeCwgbWluLCBtYXggKSB7XHJcblxyXG5cdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcclxuXHRpZiAoIHggPj0gbWF4ICkgcmV0dXJuIDE7XHJcblxyXG5cdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XHJcblxyXG5cdHJldHVybiB4ICogeCAqICggMyAtIDIgKiB4ICk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzbW9vdGhlcnN0ZXAoIHgsIG1pbiwgbWF4ICkge1xyXG5cclxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XHJcblx0aWYgKCB4ID49IG1heCApIHJldHVybiAxO1xyXG5cclxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xyXG5cclxuXHRyZXR1cm4geCAqIHggKiB4ICogKCB4ICogKCB4ICogNiAtIDE1ICkgKyAxMCApO1xyXG5cclxufVxyXG5cclxuLy8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxyXG5mdW5jdGlvbiByYW5kSW50KCBsb3csIGhpZ2ggKSB7XHJcblxyXG5cdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XHJcblxyXG59XHJcblxyXG4vLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxyXG5mdW5jdGlvbiByYW5kRmxvYXQoIGxvdywgaGlnaCApIHtcclxuXHJcblx0cmV0dXJuIGxvdyArIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKTtcclxuXHJcbn1cclxuXHJcbi8vIFJhbmRvbSBmbG9hdCBmcm9tIDwtcmFuZ2UvMiwgcmFuZ2UvMj4gaW50ZXJ2YWxcclxuZnVuY3Rpb24gcmFuZEZsb2F0U3ByZWFkKCByYW5nZSApIHtcclxuXHJcblx0cmV0dXJuIHJhbmdlICogKCAwLjUgLSBNYXRoLnJhbmRvbSgpICk7XHJcblxyXG59XHJcblxyXG4vLyBEZXRlcm1pbmlzdGljIHBzZXVkby1yYW5kb20gZmxvYXQgaW4gdGhlIGludGVydmFsIFsgMCwgMSBdXHJcbmZ1bmN0aW9uIHNlZWRlZFJhbmRvbSggcyApIHtcclxuXHJcblx0aWYgKCBzICE9PSB1bmRlZmluZWQgKSBfc2VlZCA9IHM7XHJcblxyXG5cdC8vIE11bGJlcnJ5MzIgZ2VuZXJhdG9yXHJcblxyXG5cdGxldCB0ID0gX3NlZWQgKz0gMHg2RDJCNzlGNTtcclxuXHJcblx0dCA9IE1hdGguaW11bCggdCBeIHQgPj4+IDE1LCB0IHwgMSApO1xyXG5cclxuXHR0IF49IHQgKyBNYXRoLmltdWwoIHQgXiB0ID4+PiA3LCB0IHwgNjEgKTtcclxuXHJcblx0cmV0dXJuICggKCB0IF4gdCA+Pj4gMTQgKSA+Pj4gMCApIC8gNDI5NDk2NzI5NjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZ1RvUmFkKCBkZWdyZWVzICkge1xyXG5cclxuXHRyZXR1cm4gZGVncmVlcyAqIERFRzJSQUQ7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByYWRUb0RlZyggcmFkaWFucyApIHtcclxuXHJcblx0cmV0dXJuIHJhZGlhbnMgKiBSQUQyREVHO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaXNQb3dlck9mVHdvKCB2YWx1ZSApIHtcclxuXHJcblx0cmV0dXJuICggdmFsdWUgJiAoIHZhbHVlIC0gMSApICkgPT09IDAgJiYgdmFsdWUgIT09IDA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjZWlsUG93ZXJPZlR3byggdmFsdWUgKSB7XHJcblxyXG5cdHJldHVybiBNYXRoLnBvdyggMiwgTWF0aC5jZWlsKCBNYXRoLmxvZyggdmFsdWUgKSAvIE1hdGguTE4yICkgKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZsb29yUG93ZXJPZlR3byggdmFsdWUgKSB7XHJcblxyXG5cdHJldHVybiBNYXRoLnBvdyggMiwgTWF0aC5mbG9vciggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyKCBxLCBhLCBiLCBjLCBvcmRlciApIHtcclxuXHJcblx0Ly8gSW50cmluc2ljIFByb3BlciBFdWxlciBBbmdsZXMgLSBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXJfYW5nbGVzXHJcblxyXG5cdC8vIHJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5ICdvcmRlcidcclxuXHQvLyByb3RhdGlvbiBieSBhbmdsZSAnYScgaXMgYXBwbGllZCBmaXJzdCwgdGhlbiBieSBhbmdsZSAnYicsIHRoZW4gYnkgYW5nbGUgJ2MnXHJcblx0Ly8gYW5nbGVzIGFyZSBpbiByYWRpYW5zXHJcblxyXG5cdGNvbnN0IGNvcyA9IE1hdGguY29zO1xyXG5cdGNvbnN0IHNpbiA9IE1hdGguc2luO1xyXG5cclxuXHRjb25zdCBjMiA9IGNvcyggYiAvIDIgKTtcclxuXHRjb25zdCBzMiA9IHNpbiggYiAvIDIgKTtcclxuXHJcblx0Y29uc3QgYzEzID0gY29zKCAoIGEgKyBjICkgLyAyICk7XHJcblx0Y29uc3QgczEzID0gc2luKCAoIGEgKyBjICkgLyAyICk7XHJcblxyXG5cdGNvbnN0IGMxXzMgPSBjb3MoICggYSAtIGMgKSAvIDIgKTtcclxuXHRjb25zdCBzMV8zID0gc2luKCAoIGEgLSBjICkgLyAyICk7XHJcblxyXG5cdGNvbnN0IGMzXzEgPSBjb3MoICggYyAtIGEgKSAvIDIgKTtcclxuXHRjb25zdCBzM18xID0gc2luKCAoIGMgLSBhICkgLyAyICk7XHJcblxyXG5cdHN3aXRjaCAoIG9yZGVyICkge1xyXG5cclxuXHRcdGNhc2UgJ1hZWCc6XHJcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBjMV8zLCBzMiAqIHMxXzMsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ1laWSc6XHJcblx0XHRcdHEuc2V0KCBzMiAqIHMxXzMsIGMyICogczEzLCBzMiAqIGMxXzMsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ1pYWic6XHJcblx0XHRcdHEuc2V0KCBzMiAqIGMxXzMsIHMyICogczFfMywgYzIgKiBzMTMsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ1haWCc6XHJcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBzM18xLCBzMiAqIGMzXzEsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ1lYWSc6XHJcblx0XHRcdHEuc2V0KCBzMiAqIGMzXzEsIGMyICogczEzLCBzMiAqIHMzXzEsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ1pZWic6XHJcblx0XHRcdHEuc2V0KCBzMiAqIHMzXzEsIHMyICogYzNfMSwgYzIgKiBzMTMsIGMyICogYzEzICk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGhVdGlsczogLnNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZGVub3JtYWxpemUoIHZhbHVlLCBhcnJheSApIHtcclxuXHJcblx0c3dpdGNoICggYXJyYXkuY29uc3RydWN0b3IgKSB7XHJcblxyXG5cdFx0Y2FzZSBGbG9hdDMyQXJyYXk6XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsdWU7XHJcblxyXG5cdFx0Y2FzZSBVaW50MzJBcnJheTpcclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZSAvIDQyOTQ5NjcyOTUuMDtcclxuXHJcblx0XHRjYXNlIFVpbnQxNkFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gNjU1MzUuMDtcclxuXHJcblx0XHRjYXNlIFVpbnQ4QXJyYXk6XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyAyNTUuMDtcclxuXHJcblx0XHRjYXNlIEludDMyQXJyYXk6XHJcblxyXG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoIHZhbHVlIC8gMjE0NzQ4MzY0Ny4wLCAtIDEuMCApO1xyXG5cclxuXHRcdGNhc2UgSW50MTZBcnJheTpcclxuXHJcblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAzMjc2Ny4wLCAtIDEuMCApO1xyXG5cclxuXHRcdGNhc2UgSW50OEFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDEyNy4wLCAtIDEuMCApO1xyXG5cclxuXHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNvbXBvbmVudCB0eXBlLicgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplKCB2YWx1ZSwgYXJyYXkgKSB7XHJcblxyXG5cdHN3aXRjaCAoIGFycmF5LmNvbnN0cnVjdG9yICkge1xyXG5cclxuXHRcdGNhc2UgRmxvYXQzMkFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cclxuXHRcdGNhc2UgVWludDMyQXJyYXk6XHJcblxyXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiA0Mjk0OTY3Mjk1LjAgKTtcclxuXHJcblx0XHRjYXNlIFVpbnQxNkFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogNjU1MzUuMCApO1xyXG5cclxuXHRcdGNhc2UgVWludDhBcnJheTpcclxuXHJcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDI1NS4wICk7XHJcblxyXG5cdFx0Y2FzZSBJbnQzMkFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjE0NzQ4MzY0Ny4wICk7XHJcblxyXG5cdFx0Y2FzZSBJbnQxNkFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMzI3NjcuMCApO1xyXG5cclxuXHRcdGNhc2UgSW50OEFycmF5OlxyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMTI3LjAgKTtcclxuXHJcblx0XHRkZWZhdWx0OlxyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjb21wb25lbnQgdHlwZS4nICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IE1hdGhVdGlscyA9IHtcclxuXHRERUcyUkFEOiBERUcyUkFELFxyXG5cdFJBRDJERUc6IFJBRDJERUcsXHJcblx0Z2VuZXJhdGVVVUlEOiBnZW5lcmF0ZVVVSUQsXHJcblx0Y2xhbXA6IGNsYW1wLFxyXG5cdGV1Y2xpZGVhbk1vZHVsbzogZXVjbGlkZWFuTW9kdWxvLFxyXG5cdG1hcExpbmVhcjogbWFwTGluZWFyLFxyXG5cdGludmVyc2VMZXJwOiBpbnZlcnNlTGVycCxcclxuXHRsZXJwOiBsZXJwLFxyXG5cdGRhbXA6IGRhbXAsXHJcblx0cGluZ3Bvbmc6IHBpbmdwb25nLFxyXG5cdHNtb290aHN0ZXA6IHNtb290aHN0ZXAsXHJcblx0c21vb3RoZXJzdGVwOiBzbW9vdGhlcnN0ZXAsXHJcblx0cmFuZEludDogcmFuZEludCxcclxuXHRyYW5kRmxvYXQ6IHJhbmRGbG9hdCxcclxuXHRyYW5kRmxvYXRTcHJlYWQ6IHJhbmRGbG9hdFNwcmVhZCxcclxuXHRzZWVkZWRSYW5kb206IHNlZWRlZFJhbmRvbSxcclxuXHRkZWdUb1JhZDogZGVnVG9SYWQsXHJcblx0cmFkVG9EZWc6IHJhZFRvRGVnLFxyXG5cdGlzUG93ZXJPZlR3bzogaXNQb3dlck9mVHdvLFxyXG5cdGNlaWxQb3dlck9mVHdvOiBjZWlsUG93ZXJPZlR3byxcclxuXHRmbG9vclBvd2VyT2ZUd286IGZsb29yUG93ZXJPZlR3byxcclxuXHRzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyOiBzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyLFxyXG5cdG5vcm1hbGl6ZTogbm9ybWFsaXplLFxyXG5cdGRlbm9ybWFsaXplOiBkZW5vcm1hbGl6ZVxyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuXHRERUcyUkFELFxyXG5cdFJBRDJERUcsXHJcblx0Z2VuZXJhdGVVVUlELFxyXG5cdGNsYW1wLFxyXG5cdGV1Y2xpZGVhbk1vZHVsbyxcclxuXHRtYXBMaW5lYXIsXHJcblx0aW52ZXJzZUxlcnAsXHJcblx0bGVycCxcclxuXHRkYW1wLFxyXG5cdHBpbmdwb25nLFxyXG5cdHNtb290aHN0ZXAsXHJcblx0c21vb3RoZXJzdGVwLFxyXG5cdHJhbmRJbnQsXHJcblx0cmFuZEZsb2F0LFxyXG5cdHJhbmRGbG9hdFNwcmVhZCxcclxuXHRzZWVkZWRSYW5kb20sXHJcblx0ZGVnVG9SYWQsXHJcblx0cmFkVG9EZWcsXHJcblx0aXNQb3dlck9mVHdvLFxyXG5cdGNlaWxQb3dlck9mVHdvLFxyXG5cdGZsb29yUG93ZXJPZlR3byxcclxuXHRzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyLFxyXG5cdG5vcm1hbGl6ZSxcclxuXHRkZW5vcm1hbGl6ZSxcclxuXHRNYXRoVXRpbHNcclxufTtcclxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL01hdGhVdGlscy5qcyc7XHJcblxyXG5jbGFzcyBWZWN0b3IyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCApIHtcclxuXHJcblx0XHRWZWN0b3IyLnByb3RvdHlwZS5pc1ZlY3RvcjIgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB3aWR0aCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy54O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCB3aWR0aCggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGhlaWdodCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy55O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBoZWlnaHQoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMueSA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggeCwgeSApIHtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcclxuXHJcblx0XHR0aGlzLnggPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgPSBzY2FsYXI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WCggeCApIHtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFkoIHkgKSB7XHJcblxyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcclxuXHJcblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcclxuXHJcblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcclxuXHJcblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcclxuXHJcblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggPSB2Lng7XHJcblx0XHR0aGlzLnkgPSB2Lnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCArPSB2Lng7XHJcblx0XHR0aGlzLnkgKz0gdi55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFNjYWxhciggcyApIHtcclxuXHJcblx0XHR0aGlzLnggKz0gcztcclxuXHRcdHRoaXMueSArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xyXG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcclxuXHJcblx0XHR0aGlzLnggKz0gdi54ICogcztcclxuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN1YiggdiApIHtcclxuXHJcblx0XHR0aGlzLnggLT0gdi54O1xyXG5cdFx0dGhpcy55IC09IHYueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdWJTY2FsYXIoIHMgKSB7XHJcblxyXG5cdFx0dGhpcy54IC09IHM7XHJcblx0XHR0aGlzLnkgLT0gcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdWJWZWN0b3JzKCBhLCBiICkge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggKj0gdi54O1xyXG5cdFx0dGhpcy55ICo9IHYueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpdmlkZSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggLz0gdi54O1xyXG5cdFx0dGhpcy55IC89IHYueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkaXZpZGVTY2FsYXIoIHNjYWxhciApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4MyggbSApIHtcclxuXHJcblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55O1xyXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07XHJcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtaW4oIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYXgoIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbGFtcCggbWluLCBtYXggKSB7XHJcblxyXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcclxuXHJcblx0XHR0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW4ueCwgbWF4LnggKTtcclxuXHRcdHRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pbi55LCBtYXgueSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcclxuXHJcblx0XHR0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW5WYWwsIG1heFZhbCApO1xyXG5cdFx0dGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluVmFsLCBtYXhWYWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XHJcblxyXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIGNsYW1wKCBsZW5ndGgsIG1pbiwgbWF4ICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRmbG9vcigpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNlaWwoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cm91bmQoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3VuZFRvWmVybygpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG5lZ2F0ZSgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRvdCggdiApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xyXG5cclxuXHR9XHJcblxyXG5cdGNyb3NzKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XHJcblxyXG5cdH1cclxuXHJcblx0bGVuZ3RoU3EoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcclxuXHJcblx0fVxyXG5cclxuXHRsZW5ndGgoKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICk7XHJcblxyXG5cdH1cclxuXHJcblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICk7XHJcblxyXG5cdH1cclxuXHJcblx0bm9ybWFsaXplKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XHJcblxyXG5cdH1cclxuXHJcblx0YW5nbGUoKSB7XHJcblxyXG5cdFx0Ly8gY29tcHV0ZXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXNcclxuXHJcblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoIC0gdGhpcy55LCAtIHRoaXMueCApICsgTWF0aC5QSTtcclxuXHJcblx0XHRyZXR1cm4gYW5nbGU7XHJcblxyXG5cdH1cclxuXHJcblx0YW5nbGVUbyggdiApIHtcclxuXHJcblx0XHRjb25zdCBkZW5vbWluYXRvciA9IE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICk7XHJcblxyXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcclxuXHJcblx0XHRjb25zdCB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjtcclxuXHJcblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFjb3MoIGNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXN0YW5jZVRvKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlVG9TcXVhcmVkKCB2ICkge1xyXG5cclxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueTtcclxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcclxuXHJcblx0fVxyXG5cclxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TGVuZ3RoKCBsZW5ndGggKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxlcnAoIHYsIGFscGhhICkge1xyXG5cclxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XHJcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xyXG5cclxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcclxuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRlcXVhbHMoIHYgKSB7XHJcblxyXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xyXG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XHJcblxyXG5cdFx0cmV0dXJuIGFycmF5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XHJcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVBcm91bmQoIGNlbnRlciwgYW5nbGUgKSB7XHJcblxyXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApLCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XHJcblxyXG5cdFx0Y29uc3QgeCA9IHRoaXMueCAtIGNlbnRlci54O1xyXG5cdFx0Y29uc3QgeSA9IHRoaXMueSAtIGNlbnRlci55O1xyXG5cclxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcclxuXHRcdHRoaXMueSA9IHggKiBzICsgeSAqIGMgKyBjZW50ZXIueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyYW5kb20oKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcclxuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0KlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7XHJcblxyXG5cdFx0eWllbGQgdGhpcy54O1xyXG5cdFx0eWllbGQgdGhpcy55O1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBWZWN0b3IyIH07XHJcbiIsImNsYXNzIE1hdHJpeDMge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbjExLCBuMTIsIG4xMywgbjIxLCBuMjIsIG4yMywgbjMxLCBuMzIsIG4zMyApIHtcclxuXHJcblx0XHRNYXRyaXgzLnByb3RvdHlwZS5pc01hdHJpeDMgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZWxlbWVudHMgPSBbXHJcblxyXG5cdFx0XHQxLCAwLCAwLFxyXG5cdFx0XHQwLCAxLCAwLFxyXG5cdFx0XHQwLCAwLCAxXHJcblxyXG5cdFx0XTtcclxuXHJcblx0XHRpZiAoIG4xMSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0dGhpcy5zZXQoIG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0c2V0KCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgMSBdID0gbjIxOyB0ZVsgMiBdID0gbjMxO1xyXG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcclxuXHRcdHRlWyA2IF0gPSBuMTM7IHRlWyA3IF0gPSBuMjM7IHRlWyA4IF0gPSBuMzM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aWRlbnRpdHkoKSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCAwLCAwLFxyXG5cdFx0XHQwLCAxLCAwLFxyXG5cdFx0XHQwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBtICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdO1xyXG5cdFx0dGVbIDMgXSA9IG1lWyAzIF07IHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTtcclxuXHRcdHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xyXG5cclxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAwICk7XHJcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMSApO1xyXG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDIgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tTWF0cml4NCggbSApIHtcclxuXHJcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHRtZVsgMCBdLCBtZVsgNCBdLCBtZVsgOCBdLFxyXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxyXG5cdFx0XHRtZVsgMiBdLCBtZVsgNiBdLCBtZVsgMTAgXVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bXVsdGlwbHkoIG0gKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHByZW11bHRpcGx5KCBtICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xyXG5cclxuXHRcdGNvbnN0IGFlID0gYS5lbGVtZW50cztcclxuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgMyBdLCBhMTMgPSBhZVsgNiBdO1xyXG5cdFx0Y29uc3QgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDQgXSwgYTIzID0gYWVbIDcgXTtcclxuXHRcdGNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA1IF0sIGEzMyA9IGFlWyA4IF07XHJcblxyXG5cdFx0Y29uc3QgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDMgXSwgYjEzID0gYmVbIDYgXTtcclxuXHRcdGNvbnN0IGIyMSA9IGJlWyAxIF0sIGIyMiA9IGJlWyA0IF0sIGIyMyA9IGJlWyA3IF07XHJcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xyXG5cclxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7XHJcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xyXG5cdFx0dGVbIDYgXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMztcclxuXHJcblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xyXG5cdFx0dGVbIDQgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMjtcclxuXHRcdHRlWyA3IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XHJcblxyXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMTtcclxuXHRcdHRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XHJcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG11bHRpcGx5U2NhbGFyKCBzICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR0ZVsgMCBdICo9IHM7IHRlWyAzIF0gKj0gczsgdGVbIDYgXSAqPSBzO1xyXG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA3IF0gKj0gcztcclxuXHRcdHRlWyAyIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOCBdICo9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGV0ZXJtaW5hbnQoKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdGNvbnN0IGEgPSB0ZVsgMCBdLCBiID0gdGVbIDEgXSwgYyA9IHRlWyAyIF0sXHJcblx0XHRcdGQgPSB0ZVsgMyBdLCBlID0gdGVbIDQgXSwgZiA9IHRlWyA1IF0sXHJcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XHJcblxyXG5cdFx0cmV0dXJuIGEgKiBlICogaSAtIGEgKiBmICogaCAtIGIgKiBkICogaSArIGIgKiBmICogZyArIGMgKiBkICogaCAtIGMgKiBlICogZztcclxuXHJcblx0fVxyXG5cclxuXHRpbnZlcnQoKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxyXG5cclxuXHRcdFx0bjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSxcclxuXHRcdFx0bjEyID0gdGVbIDMgXSwgbjIyID0gdGVbIDQgXSwgbjMyID0gdGVbIDUgXSxcclxuXHRcdFx0bjEzID0gdGVbIDYgXSwgbjIzID0gdGVbIDcgXSwgbjMzID0gdGVbIDggXSxcclxuXHJcblx0XHRcdHQxMSA9IG4zMyAqIG4yMiAtIG4zMiAqIG4yMyxcclxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxyXG5cdFx0XHR0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTMsXHJcblxyXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XHJcblxyXG5cdFx0aWYgKCBkZXQgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgKTtcclxuXHJcblx0XHRjb25zdCBkZXRJbnYgPSAxIC8gZGV0O1xyXG5cclxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMSBdID0gKCBuMzEgKiBuMjMgLSBuMzMgKiBuMjEgKSAqIGRldEludjtcclxuXHRcdHRlWyAyIF0gPSAoIG4zMiAqIG4yMSAtIG4zMSAqIG4yMiApICogZGV0SW52O1xyXG5cclxuXHRcdHRlWyAzIF0gPSB0MTIgKiBkZXRJbnY7XHJcblx0XHR0ZVsgNCBdID0gKCBuMzMgKiBuMTEgLSBuMzEgKiBuMTMgKSAqIGRldEludjtcclxuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xyXG5cclxuXHRcdHRlWyA2IF0gPSB0MTMgKiBkZXRJbnY7XHJcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcclxuXHRcdHRlWyA4IF0gPSAoIG4yMiAqIG4xMSAtIG4yMSAqIG4xMiApICogZGV0SW52O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zcG9zZSgpIHtcclxuXHJcblx0XHRsZXQgdG1wO1xyXG5cdFx0Y29uc3QgbSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dG1wID0gbVsgMSBdOyBtWyAxIF0gPSBtWyAzIF07IG1bIDMgXSA9IHRtcDtcclxuXHRcdHRtcCA9IG1bIDIgXTsgbVsgMiBdID0gbVsgNiBdOyBtWyA2IF0gPSB0bXA7XHJcblx0XHR0bXAgPSBtWyA1IF07IG1bIDUgXSA9IG1bIDcgXTsgbVsgNyBdID0gdG1wO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldE5vcm1hbE1hdHJpeCggbWF0cml4NCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4NCggbWF0cml4NCApLmludmVydCgpLnRyYW5zcG9zZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zcG9zZUludG9BcnJheSggciApIHtcclxuXHJcblx0XHRjb25zdCBtID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRyWyAwIF0gPSBtWyAwIF07XHJcblx0XHRyWyAxIF0gPSBtWyAzIF07XHJcblx0XHRyWyAyIF0gPSBtWyA2IF07XHJcblx0XHRyWyAzIF0gPSBtWyAxIF07XHJcblx0XHRyWyA0IF0gPSBtWyA0IF07XHJcblx0XHRyWyA1IF0gPSBtWyA3IF07XHJcblx0XHRyWyA2IF0gPSBtWyAyIF07XHJcblx0XHRyWyA3IF0gPSBtWyA1IF07XHJcblx0XHRyWyA4IF0gPSBtWyA4IF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0VXZUcmFuc2Zvcm0oIHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5ICkge1xyXG5cclxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggcm90YXRpb24gKTtcclxuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggcm90YXRpb24gKTtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHRcdFx0c3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoIGMgKiBjeCArIHMgKiBjeSApICsgY3ggKyB0eCxcclxuXHRcdFx0LSBzeSAqIHMsIHN5ICogYywgLSBzeSAqICggLSBzICogY3ggKyBjICogY3kgKSArIGN5ICsgdHksXHJcblx0XHRcdDAsIDAsIDFcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly9cclxuXHJcblx0c2NhbGUoIHN4LCBzeSApIHtcclxuXHJcblx0XHR0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVNjYWxlKCBzeCwgc3kgKSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdGF0ZSggdGhldGEgKSB7XHJcblxyXG5cdFx0dGhpcy5wcmVtdWx0aXBseSggX20zLm1ha2VSb3RhdGlvbiggLSB0aGV0YSApICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNsYXRlKCB0eCwgdHkgKSB7XHJcblxyXG5cdFx0dGhpcy5wcmVtdWx0aXBseSggX20zLm1ha2VUcmFuc2xhdGlvbiggdHgsIHR5ICkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBmb3IgMkQgVHJhbnNmb3Jtc1xyXG5cclxuXHRtYWtlVHJhbnNsYXRpb24oIHgsIHkgKSB7XHJcblxyXG5cdFx0aWYgKCB4LmlzVmVjdG9yMiApIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0XHQxLCAwLCB4LngsXHJcblx0XHRcdFx0MCwgMSwgeC55LFxyXG5cdFx0XHRcdDAsIDAsIDFcclxuXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0XHQxLCAwLCB4LFxyXG5cdFx0XHRcdDAsIDEsIHksXHJcblx0XHRcdFx0MCwgMCwgMVxyXG5cclxuXHRcdFx0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZVJvdGF0aW9uKCB0aGV0YSApIHtcclxuXHJcblx0XHQvLyBjb3VudGVyY2xvY2t3aXNlXHJcblxyXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApO1xyXG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCB0aGV0YSApO1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0YywgLSBzLCAwLFxyXG5cdFx0XHRzLCBjLCAwLFxyXG5cdFx0XHQwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlU2NhbGUoIHgsIHkgKSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHR4LCAwLCAwLFxyXG5cdFx0XHQwLCB5LCAwLFxyXG5cdFx0XHQwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRlcXVhbHMoIG1hdHJpeCApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xyXG5cclxuXHRcdFx0aWYgKCB0ZVsgaSBdICE9PSBtZVsgaSBdICkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcclxuXHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XHJcblxyXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY29uc3QgX20zID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpO1xyXG5cclxuZXhwb3J0IHsgTWF0cml4MyB9O1xyXG4iLCJmdW5jdGlvbiBhcnJheU1pbiggYXJyYXkgKSB7XHJcblxyXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIEluZmluaXR5O1xyXG5cclxuXHRsZXQgbWluID0gYXJyYXlbIDAgXTtcclxuXHJcblx0Zm9yICggbGV0IGkgPSAxLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKysgaSApIHtcclxuXHJcblx0XHRpZiAoIGFycmF5WyBpIF0gPCBtaW4gKSBtaW4gPSBhcnJheVsgaSBdO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBtaW47XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBhcnJheU1heCggYXJyYXkgKSB7XHJcblxyXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIC0gSW5maW5pdHk7XHJcblxyXG5cdGxldCBtYXggPSBhcnJheVsgMCBdO1xyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyArKyBpICkge1xyXG5cclxuXHRcdGlmICggYXJyYXlbIGkgXSA+IG1heCApIG1heCA9IGFycmF5WyBpIF07XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG1heDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5TmVlZHNVaW50MzIoIGFycmF5ICkge1xyXG5cclxuXHQvLyBhc3N1bWVzIGxhcmdlciB2YWx1ZXMgdXN1YWxseSBvbiBsYXN0XHJcblxyXG5cdGZvciAoIGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLSBpICkge1xyXG5cclxuXHRcdGlmICggYXJyYXlbIGkgXSA+PSA2NTUzNSApIHJldHVybiB0cnVlOyAvLyBhY2NvdW50IGZvciBQUklNSVRJVkVfUkVTVEFSVF9GSVhFRF9JTkRFWCwgIzI0NTY1XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGZhbHNlO1xyXG5cclxufVxyXG5cclxuY29uc3QgVFlQRURfQVJSQVlTID0ge1xyXG5cdEludDhBcnJheTogSW50OEFycmF5LFxyXG5cdFVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXksXHJcblx0VWludDhDbGFtcGVkQXJyYXk6IFVpbnQ4Q2xhbXBlZEFycmF5LFxyXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXHJcblx0VWludDE2QXJyYXk6IFVpbnQxNkFycmF5LFxyXG5cdEludDMyQXJyYXk6IEludDMyQXJyYXksXHJcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxyXG5cdEZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LFxyXG5cdEZsb2F0NjRBcnJheTogRmxvYXQ2NEFycmF5XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRUeXBlZEFycmF5KCB0eXBlLCBidWZmZXIgKSB7XHJcblxyXG5cdHJldHVybiBuZXcgVFlQRURfQVJSQVlTWyB0eXBlIF0oIGJ1ZmZlciApO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKCBuYW1lICkge1xyXG5cclxuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsIG5hbWUgKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0VsZW1lbnQoKSB7XHJcblxyXG5cdGNvbnN0IGNhbnZhcyA9IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcclxuXHRjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0cmV0dXJuIGNhbnZhcztcclxuXHJcbn1cclxuXHJcbmNvbnN0IF9jYWNoZSA9IHt9O1xyXG5cclxuZnVuY3Rpb24gd2Fybk9uY2UoIG1lc3NhZ2UgKSB7XHJcblxyXG5cdGlmICggbWVzc2FnZSBpbiBfY2FjaGUgKSByZXR1cm47XHJcblxyXG5cdF9jYWNoZVsgbWVzc2FnZSBdID0gdHJ1ZTtcclxuXHJcblx0Y29uc29sZS53YXJuKCBtZXNzYWdlICk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9iZUFzeW5jKCBnbCwgc3luYywgaW50ZXJ2YWwgKSB7XHJcblxyXG5cdHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJvYmUoKSB7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCBnbC5jbGllbnRXYWl0U3luYyggc3luYywgZ2wuU1lOQ19GTFVTSF9DT01NQU5EU19CSVQsIDAgKSApIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBnbC5XQUlUX0ZBSUxFRDpcclxuXHRcdFx0XHRcdHJlamVjdCgpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgZ2wuVElNRU9VVF9FWFBJUkVEOlxyXG5cdFx0XHRcdFx0c2V0VGltZW91dCggcHJvYmUsIGludGVydmFsICk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdHJlc29sdmUoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0c2V0VGltZW91dCggcHJvYmUsIGludGVydmFsICk7XHJcblxyXG5cdH0gKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvTm9ybWFsaXplZFByb2plY3Rpb25NYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSB7XHJcblxyXG5cdGNvbnN0IG0gPSBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xyXG5cclxuXHQvLyBDb252ZXJ0IFstMSwgMV0gdG8gWzAsIDFdIHByb2plY3Rpb24gbWF0cml4XHJcblx0bVsgMiBdID0gMC41ICogbVsgMiBdICsgMC41ICogbVsgMyBdO1xyXG5cdG1bIDYgXSA9IDAuNSAqIG1bIDYgXSArIDAuNSAqIG1bIDcgXTtcclxuXHRtWyAxMCBdID0gMC41ICogbVsgMTAgXSArIDAuNSAqIG1bIDExIF07XHJcblx0bVsgMTQgXSA9IDAuNSAqIG1bIDE0IF0gKyAwLjUgKiBtWyAxNSBdO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdG9SZXZlcnNlZFByb2plY3Rpb25NYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSB7XHJcblxyXG5cdGNvbnN0IG0gPSBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xyXG5cdGNvbnN0IGlzUGVyc3BlY3RpdmVNYXRyaXggPSBtWyAxMSBdID09PSAtIDE7XHJcblxyXG5cdC8vIFJldmVyc2UgWzAsIDFdIHByb2plY3Rpb24gbWF0cml4XHJcblx0aWYgKCBpc1BlcnNwZWN0aXZlTWF0cml4ICkge1xyXG5cclxuXHRcdG1bIDEwIF0gPSAtIG1bIDEwIF0gLSAxO1xyXG5cdFx0bVsgMTQgXSA9IC0gbVsgMTQgXTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRtWyAxMCBdID0gLSBtWyAxMCBdO1xyXG5cdFx0bVsgMTQgXSA9IC0gbVsgMTQgXSArIDE7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IGFycmF5TWluLCBhcnJheU1heCwgYXJyYXlOZWVkc1VpbnQzMiwgZ2V0VHlwZWRBcnJheSwgY3JlYXRlRWxlbWVudE5TLCBjcmVhdGVDYW52YXNFbGVtZW50LCB3YXJuT25jZSwgcHJvYmVBc3luYywgdG9Ob3JtYWxpemVkUHJvamVjdGlvbk1hdHJpeCwgdG9SZXZlcnNlZFByb2plY3Rpb25NYXRyaXggfTtcclxuIiwiaW1wb3J0IHsgU1JHQkNvbG9yU3BhY2UsIExpbmVhclNSR0JDb2xvclNwYWNlLCBTUkdCVHJhbnNmZXIsIExpbmVhclRyYW5zZmVyLCBOb0NvbG9yU3BhY2UgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi9NYXRyaXgzLmpzJztcclxuXHJcbmNvbnN0IExJTkVBUl9SRUM3MDlfVE9fWFlaID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpLnNldChcclxuXHQwLjQxMjM5MDgsIDAuMzU3NTg0MywgMC4xODA0ODA4LFxyXG5cdDAuMjEyNjM5MCwgMC43MTUxNjg3LCAwLjA3MjE5MjMsXHJcblx0MC4wMTkzMzA4LCAwLjExOTE5NDgsIDAuOTUwNTMyMlxyXG4pO1xyXG5cclxuY29uc3QgWFlaX1RPX0xJTkVBUl9SRUM3MDkgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkuc2V0KFxyXG5cdDMuMjQwOTY5OSwgLSAxLjUzNzM4MzIsIC0gMC40OTg2MTA4LFxyXG5cdC0gMC45NjkyNDM2LCAxLjg3NTk2NzUsIDAuMDQxNTU1MSxcclxuXHQwLjA1NTYzMDEsIC0gMC4yMDM5NzcwLCAxLjA1Njk3MTVcclxuKTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbG9yTWFuYWdlbWVudCgpIHtcclxuXHJcblx0Y29uc3QgQ29sb3JNYW5hZ2VtZW50ID0ge1xyXG5cclxuXHRcdGVuYWJsZWQ6IHRydWUsXHJcblxyXG5cdFx0d29ya2luZ0NvbG9yU3BhY2U6IExpbmVhclNSR0JDb2xvclNwYWNlLFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW1wbGVtZW50YXRpb25zIG9mIHN1cHBvcnRlZCBjb2xvciBzcGFjZXMuXHJcblx0XHQgKlxyXG5cdFx0ICogUmVxdWlyZWQ6XHJcblx0XHQgKlx0LSBwcmltYXJpZXM6IGNocm9tYXRpY2l0eSBjb29yZGluYXRlcyBbIHJ4IHJ5IGd4IGd5IGJ4IGJ5IF1cclxuXHRcdCAqXHQtIHdoaXRlUG9pbnQ6IHJlZmVyZW5jZSB3aGl0ZSBbIHggeSBdXHJcblx0XHQgKlx0LSB0cmFuc2ZlcjogdHJhbnNmZXIgZnVuY3Rpb24gKHByZS1kZWZpbmVkKVxyXG5cdFx0ICpcdC0gdG9YWVo6IE1hdHJpeDMgUkdCIHRvIFhZWiB0cmFuc2Zvcm1cclxuXHRcdCAqXHQtIGZyb21YWVo6IE1hdHJpeDMgWFlaIHRvIFJHQiB0cmFuc2Zvcm1cclxuXHRcdCAqXHQtIGx1bWluYW5jZUNvZWZmaWNpZW50czogUkdCIGx1bWluYW5jZSBjb2VmZmljaWVudHNcclxuXHRcdCAqXHJcblx0XHQgKiBPcHRpb25hbDpcclxuXHRcdCAqICAtIG91dHB1dENvbG9yU3BhY2VDb25maWc6IHsgZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U6IENvbG9yU3BhY2UgfVxyXG5cdFx0ICogIC0gd29ya2luZ0NvbG9yU3BhY2VDb25maWc6IHsgdW5wYWNrQ29sb3JTcGFjZTogQ29sb3JTcGFjZSB9XHJcblx0XHQgKlxyXG5cdFx0ICogUmVmZXJlbmNlOlxyXG5cdFx0ICogLSBodHRwczovL3d3dy5ydXNzZWxsY290dHJlbGwuY29tL3Bob3RvL21hdHJpeENhbGN1bGF0b3IuaHRtXHJcblx0XHQgKi9cclxuXHRcdHNwYWNlczoge30sXHJcblxyXG5cdFx0Y29udmVydDogZnVuY3Rpb24gKCBjb2xvciwgc291cmNlQ29sb3JTcGFjZSwgdGFyZ2V0Q29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRcdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSB8fCBzb3VyY2VDb2xvclNwYWNlID09PSB0YXJnZXRDb2xvclNwYWNlIHx8ICEgc291cmNlQ29sb3JTcGFjZSB8fCAhIHRhcmdldENvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBjb2xvcjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGhpcy5zcGFjZXNbIHNvdXJjZUNvbG9yU3BhY2UgXS50cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkge1xyXG5cclxuXHRcdFx0XHRjb2xvci5yID0gU1JHQlRvTGluZWFyKCBjb2xvci5yICk7XHJcblx0XHRcdFx0Y29sb3IuZyA9IFNSR0JUb0xpbmVhciggY29sb3IuZyApO1xyXG5cdFx0XHRcdGNvbG9yLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGhpcy5zcGFjZXNbIHNvdXJjZUNvbG9yU3BhY2UgXS5wcmltYXJpZXMgIT09IHRoaXMuc3BhY2VzWyB0YXJnZXRDb2xvclNwYWNlIF0ucHJpbWFyaWVzICkge1xyXG5cclxuXHRcdFx0XHRjb2xvci5hcHBseU1hdHJpeDMoIHRoaXMuc3BhY2VzWyBzb3VyY2VDb2xvclNwYWNlIF0udG9YWVogKTtcclxuXHRcdFx0XHRjb2xvci5hcHBseU1hdHJpeDMoIHRoaXMuc3BhY2VzWyB0YXJnZXRDb2xvclNwYWNlIF0uZnJvbVhZWiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLnRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSB7XHJcblxyXG5cdFx0XHRcdGNvbG9yLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTtcclxuXHRcdFx0XHRjb2xvci5nID0gTGluZWFyVG9TUkdCKCBjb2xvci5nICk7XHJcblx0XHRcdFx0Y29sb3IuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGNvbG9yO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0ZnJvbVdvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCB0YXJnZXRDb2xvclNwYWNlICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHRoaXMud29ya2luZ0NvbG9yU3BhY2UsIHRhcmdldENvbG9yU3BhY2UgKTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHRvV29ya2luZ0NvbG9yU3BhY2U6IGZ1bmN0aW9uICggY29sb3IsIHNvdXJjZUNvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5jb252ZXJ0KCBjb2xvciwgc291cmNlQ29sb3JTcGFjZSwgdGhpcy53b3JraW5nQ29sb3JTcGFjZSApO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0UHJpbWFyaWVzOiBmdW5jdGlvbiAoIGNvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS5wcmltYXJpZXM7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRUcmFuc2ZlcjogZnVuY3Rpb24gKCBjb2xvclNwYWNlICkge1xyXG5cclxuXHRcdFx0aWYgKCBjb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgKSByZXR1cm4gTGluZWFyVHJhbnNmZXI7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS50cmFuc2ZlcjtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEx1bWluYW5jZUNvZWZmaWNpZW50czogZnVuY3Rpb24gKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSB0aGlzLndvcmtpbmdDb2xvclNwYWNlICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRhcmdldC5mcm9tQXJyYXkoIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ubHVtaW5hbmNlQ29lZmZpY2llbnRzICk7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRkZWZpbmU6IGZ1bmN0aW9uICggY29sb3JTcGFjZXMgKSB7XHJcblxyXG5cdFx0XHRPYmplY3QuYXNzaWduKCB0aGlzLnNwYWNlcywgY29sb3JTcGFjZXMgKTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEludGVybmFsIEFQSXNcclxuXHJcblx0XHRfZ2V0TWF0cml4OiBmdW5jdGlvbiAoIHRhcmdldE1hdHJpeCwgc291cmNlQ29sb3JTcGFjZSwgdGFyZ2V0Q29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRcdHJldHVybiB0YXJnZXRNYXRyaXhcclxuXHRcdFx0XHQuY29weSggdGhpcy5zcGFjZXNbIHNvdXJjZUNvbG9yU3BhY2UgXS50b1hZWiApXHJcblx0XHRcdFx0Lm11bHRpcGx5KCB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLmZyb21YWVogKTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdF9nZXREcmF3aW5nQnVmZmVyQ29sb3JTcGFjZTogZnVuY3Rpb24gKCBjb2xvclNwYWNlICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ub3V0cHV0Q29sb3JTcGFjZUNvbmZpZy5kcmF3aW5nQnVmZmVyQ29sb3JTcGFjZTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdF9nZXRVbnBhY2tDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yU3BhY2UgPSB0aGlzLndvcmtpbmdDb2xvclNwYWNlICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ud29ya2luZ0NvbG9yU3BhY2VDb25maWcudW5wYWNrQ29sb3JTcGFjZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHQgKiBzUkdCIGRlZmluaXRpb25zXHJcblx0ICovXHJcblxyXG5cdGNvbnN0IFJFQzcwOV9QUklNQVJJRVMgPSBbIDAuNjQwLCAwLjMzMCwgMC4zMDAsIDAuNjAwLCAwLjE1MCwgMC4wNjAgXTtcclxuXHRjb25zdCBSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUyA9IFsgMC4yMTI2LCAwLjcxNTIsIDAuMDcyMiBdO1xyXG5cdGNvbnN0IEQ2NSA9IFsgMC4zMTI3LCAwLjMyOTAgXTtcclxuXHJcblx0Q29sb3JNYW5hZ2VtZW50LmRlZmluZSgge1xyXG5cclxuXHRcdFsgTGluZWFyU1JHQkNvbG9yU3BhY2UgXToge1xyXG5cdFx0XHRwcmltYXJpZXM6IFJFQzcwOV9QUklNQVJJRVMsXHJcblx0XHRcdHdoaXRlUG9pbnQ6IEQ2NSxcclxuXHRcdFx0dHJhbnNmZXI6IExpbmVhclRyYW5zZmVyLFxyXG5cdFx0XHR0b1hZWjogTElORUFSX1JFQzcwOV9UT19YWVosXHJcblx0XHRcdGZyb21YWVo6IFhZWl9UT19MSU5FQVJfUkVDNzA5LFxyXG5cdFx0XHRsdW1pbmFuY2VDb2VmZmljaWVudHM6IFJFQzcwOV9MVU1JTkFOQ0VfQ09FRkZJQ0lFTlRTLFxyXG5cdFx0XHR3b3JraW5nQ29sb3JTcGFjZUNvbmZpZzogeyB1bnBhY2tDb2xvclNwYWNlOiBTUkdCQ29sb3JTcGFjZSB9LFxyXG5cdFx0XHRvdXRwdXRDb2xvclNwYWNlQ29uZmlnOiB7IGRyYXdpbmdCdWZmZXJDb2xvclNwYWNlOiBTUkdCQ29sb3JTcGFjZSB9XHJcblx0XHR9LFxyXG5cclxuXHRcdFsgU1JHQkNvbG9yU3BhY2UgXToge1xyXG5cdFx0XHRwcmltYXJpZXM6IFJFQzcwOV9QUklNQVJJRVMsXHJcblx0XHRcdHdoaXRlUG9pbnQ6IEQ2NSxcclxuXHRcdFx0dHJhbnNmZXI6IFNSR0JUcmFuc2ZlcixcclxuXHRcdFx0dG9YWVo6IExJTkVBUl9SRUM3MDlfVE9fWFlaLFxyXG5cdFx0XHRmcm9tWFlaOiBYWVpfVE9fTElORUFSX1JFQzcwOSxcclxuXHRcdFx0bHVtaW5hbmNlQ29lZmZpY2llbnRzOiBSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUyxcclxuXHRcdFx0b3V0cHV0Q29sb3JTcGFjZUNvbmZpZzogeyBkcmF3aW5nQnVmZmVyQ29sb3JTcGFjZTogU1JHQkNvbG9yU3BhY2UgfVxyXG5cdFx0fSxcclxuXHJcblx0fSApO1xyXG5cclxuXHRyZXR1cm4gQ29sb3JNYW5hZ2VtZW50O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENvbG9yTWFuYWdlbWVudCA9IC8qQF9fUFVSRV9fKi8gY3JlYXRlQ29sb3JNYW5hZ2VtZW50KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU1JHQlRvTGluZWFyKCBjICkge1xyXG5cclxuXHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7XHJcblxyXG5cdHJldHVybiAoIGMgPCAwLjAwMzEzMDggKSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKCBNYXRoLnBvdyggYywgMC40MTY2NiApICkgLSAwLjA1NTtcclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudE5TIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBTUkdCVG9MaW5lYXIgfSBmcm9tICcuLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XHJcblxyXG5sZXQgX2NhbnZhcztcclxuXHJcbmNsYXNzIEltYWdlVXRpbHMge1xyXG5cclxuXHRzdGF0aWMgZ2V0RGF0YVVSTCggaW1hZ2UgKSB7XHJcblxyXG5cdFx0aWYgKCAvXmRhdGE6L2kudGVzdCggaW1hZ2Uuc3JjICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gaW1hZ2Uuc3JjO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gaW1hZ2Uuc3JjO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY2FudmFzO1xyXG5cclxuXHRcdGlmICggaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHtcclxuXHJcblx0XHRcdGNhbnZhcyA9IGltYWdlO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XHJcblxyXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG5cclxuXHRcdFx0Y29uc3QgY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xyXG5cclxuXHRcdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlRGF0YSApIHtcclxuXHJcblx0XHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoIGltYWdlLCAwLCAwICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNhbnZhcyA9IF9jYW52YXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvcG5nJyApO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzUkdCVG9MaW5lYXIoIGltYWdlICkge1xyXG5cclxuXHRcdGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgfHxcclxuXHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxyXG5cdFx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xyXG5cclxuXHRcdFx0Y29uc3QgY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xyXG5cclxuXHRcdFx0Y2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcblxyXG5cdFx0XHRjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcclxuXHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XHJcblxyXG5cdFx0XHRjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSggMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xyXG5cdFx0XHRjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0ZGF0YVsgaSBdID0gU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gLyAyNTUgKSAqIDI1NTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZURhdGEsIDAsIDAgKTtcclxuXHJcblx0XHRcdHJldHVybiBjYW52YXM7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggaW1hZ2UuZGF0YSApIHtcclxuXHJcblx0XHRcdGNvbnN0IGRhdGEgPSBpbWFnZS5kYXRhLnNsaWNlKCAwICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgKSB7XHJcblxyXG5cdFx0XHRcdFx0ZGF0YVsgaSBdID0gTWF0aC5mbG9vciggU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gLyAyNTUgKSAqIDI1NSApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIGFzc3VtaW5nIGZsb2F0XHJcblxyXG5cdFx0XHRcdFx0ZGF0YVsgaSBdID0gU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcclxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLnNSR0JUb0xpbmVhcigpOiBVbnN1cHBvcnRlZCBpbWFnZSB0eXBlLiBObyBjb2xvciBzcGFjZSBjb252ZXJzaW9uIGFwcGxpZWQuJyApO1xyXG5cdFx0XHRyZXR1cm4gaW1hZ2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBJbWFnZVV0aWxzIH07XHJcbiIsImltcG9ydCB7IEltYWdlVXRpbHMgfSBmcm9tICcuLi9leHRyYXMvSW1hZ2VVdGlscy5qcyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuXHJcbmxldCBfc291cmNlSWQgPSAwO1xyXG5cclxuY2xhc3MgU291cmNlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGRhdGEgPSBudWxsICkge1xyXG5cclxuXHRcdHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xyXG5cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX3NvdXJjZUlkICsrIH0gKTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuXHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xyXG5cdFx0dGhpcy5kYXRhUmVhZHkgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggbWV0YSApIHtcclxuXHJcblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcclxuXHJcblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xyXG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXHJcblx0XHRcdHVybDogJydcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcclxuXHJcblx0XHRpZiAoIGRhdGEgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRsZXQgdXJsO1xyXG5cclxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIGN1YmUgdGV4dHVyZVxyXG5cclxuXHRcdFx0XHR1cmwgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggZGF0YVsgaSBdLmlzRGF0YVRleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXS5pbWFnZSApICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHVybC5wdXNoKCBzZXJpYWxpemVJbWFnZSggZGF0YVsgaSBdICkgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIHRleHR1cmVcclxuXHJcblx0XHRcdFx0dXJsID0gc2VyaWFsaXplSW1hZ2UoIGRhdGEgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG91dHB1dC51cmwgPSB1cmw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XHJcblxyXG5cdFx0XHRtZXRhLmltYWdlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvdXRwdXQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZUltYWdlKCBpbWFnZSApIHtcclxuXHJcblx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxyXG5cdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxyXG5cdFx0KCB0eXBlb2YgSW1hZ2VCaXRtYXAgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXAgKSApIHtcclxuXHJcblx0XHQvLyBkZWZhdWx0IGltYWdlc1xyXG5cclxuXHRcdHJldHVybiBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlICk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0aWYgKCBpbWFnZS5kYXRhICkge1xyXG5cclxuXHRcdFx0Ly8gaW1hZ2VzIG9mIERhdGFUZXh0dXJlXHJcblxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGRhdGE6IEFycmF5LmZyb20oIGltYWdlLmRhdGEgKSxcclxuXHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXHJcblx0XHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHQsXHJcblx0XHRcdFx0dHlwZTogaW1hZ2UuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRleHR1cmU6IFVuYWJsZSB0byBzZXJpYWxpemUgVGV4dHVyZS4nICk7XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFNvdXJjZSB9O1xyXG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyc7XHJcbmltcG9ydCB7XHJcblx0TWlycm9yZWRSZXBlYXRXcmFwcGluZyxcclxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nLFxyXG5cdFJlcGVhdFdyYXBwaW5nLFxyXG5cdFVuc2lnbmVkQnl0ZVR5cGUsXHJcblx0UkdCQUZvcm1hdCxcclxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsXHJcblx0TGluZWFyRmlsdGVyLFxyXG5cdFVWTWFwcGluZyxcclxuXHROb0NvbG9yU3BhY2UsXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgZ2VuZXJhdGVVVUlEIH0gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdGgvTWF0cml4My5qcyc7XHJcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJy4vU291cmNlLmpzJztcclxuXHJcbmxldCBfdGV4dHVyZUlkID0gMDtcclxuXHJcbmNsYXNzIFRleHR1cmUgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggaW1hZ2UgPSBUZXh0dXJlLkRFRkFVTFRfSU1BR0UsIG1hcHBpbmcgPSBUZXh0dXJlLkRFRkFVTFRfTUFQUElORywgd3JhcFMgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCB3cmFwVCA9IENsYW1wVG9FZGdlV3JhcHBpbmcsIG1hZ0ZpbHRlciA9IExpbmVhckZpbHRlciwgbWluRmlsdGVyID0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBmb3JtYXQgPSBSR0JBRm9ybWF0LCB0eXBlID0gVW5zaWduZWRCeXRlVHlwZSwgYW5pc290cm9weSA9IFRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZLCBjb2xvclNwYWNlID0gTm9Db2xvclNwYWNlICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc1RleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX3RleHR1cmVJZCArKyB9ICk7XHJcblxyXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gJyc7XHJcblxyXG5cdFx0dGhpcy5zb3VyY2UgPSBuZXcgU291cmNlKCBpbWFnZSApO1xyXG5cdFx0dGhpcy5taXBtYXBzID0gW107XHJcblxyXG5cdFx0dGhpcy5tYXBwaW5nID0gbWFwcGluZztcclxuXHRcdHRoaXMuY2hhbm5lbCA9IDA7XHJcblxyXG5cdFx0dGhpcy53cmFwUyA9IHdyYXBTO1xyXG5cdFx0dGhpcy53cmFwVCA9IHdyYXBUO1xyXG5cclxuXHRcdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyO1xyXG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXI7XHJcblxyXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weTtcclxuXHJcblx0XHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcclxuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBudWxsO1xyXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcclxuXHJcblx0XHR0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcblx0XHR0aGlzLnJlcGVhdCA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XHJcblx0XHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcblx0XHR0aGlzLnJvdGF0aW9uID0gMDtcclxuXHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xyXG5cdFx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4MygpO1xyXG5cclxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTtcclxuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mbGlwWSA9IHRydWU7XHJcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IDQ7XHQvLyB2YWxpZCB2YWx1ZXM6IDEsIDIsIDQsIDggKHNlZSBodHRwOi8vd3d3Lmtocm9ub3Mub3JnL29wZW5nbGVzL3Nkay9kb2NzL21hbi94aHRtbC9nbFBpeGVsU3RvcmVpLnhtbClcclxuXHJcblx0XHR0aGlzLmNvbG9yU3BhY2UgPSBjb2xvclNwYWNlO1xyXG5cclxuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcclxuXHJcblx0XHR0aGlzLnZlcnNpb24gPSAwO1xyXG5cdFx0dGhpcy5vblVwZGF0ZSA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBudWxsOyAvLyBhc3NpZ24gdGV4dHVyZSB0byBhIHJlbmRlciB0YXJnZXRcclxuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gZmFsc2U7IC8vIGluZGljYXRlcyB3aGV0aGVyIGEgdGV4dHVyZSBiZWxvbmdzIHRvIGEgcmVuZGVyIHRhcmdldCBvciBub3RcclxuXHRcdHRoaXMucG1yZW1WZXJzaW9uID0gMDsgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyB0ZXh0dXJlIHNob3VsZCBiZSBwcm9jZXNzZWQgYnkgUE1SRU1HZW5lcmF0b3Igb3Igbm90IChvbmx5IHJlbGV2YW50IGZvciByZW5kZXIgdGFyZ2V0IHRleHR1cmVzKVxyXG5cclxuXHR9XHJcblxyXG5cdGdldCBpbWFnZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zb3VyY2UuZGF0YTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgaW1hZ2UoIHZhbHVlID0gbnVsbCApIHtcclxuXHJcblx0XHR0aGlzLnNvdXJjZS5kYXRhID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4KCkge1xyXG5cclxuXHRcdHRoaXMubWF0cml4LnNldFV2VHJhbnNmb3JtKCB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55LCB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55LCB0aGlzLnJvdGF0aW9uLCB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHJcblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2U7XHJcblx0XHR0aGlzLm1pcG1hcHMgPSBzb3VyY2UubWlwbWFwcy5zbGljZSggMCApO1xyXG5cclxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xyXG5cdFx0dGhpcy5jaGFubmVsID0gc291cmNlLmNoYW5uZWw7XHJcblxyXG5cdFx0dGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUztcclxuXHRcdHRoaXMud3JhcFQgPSBzb3VyY2Uud3JhcFQ7XHJcblxyXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBzb3VyY2UubWFnRmlsdGVyO1xyXG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBzb3VyY2UubWluRmlsdGVyO1xyXG5cclxuXHRcdHRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5O1xyXG5cclxuXHRcdHRoaXMuZm9ybWF0ID0gc291cmNlLmZvcm1hdDtcclxuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBzb3VyY2UuaW50ZXJuYWxGb3JtYXQ7XHJcblx0XHR0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTtcclxuXHJcblx0XHR0aGlzLm9mZnNldC5jb3B5KCBzb3VyY2Uub2Zmc2V0ICk7XHJcblx0XHR0aGlzLnJlcGVhdC5jb3B5KCBzb3VyY2UucmVwZWF0ICk7XHJcblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XHJcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xyXG5cclxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xyXG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xyXG5cclxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gc291cmNlLmdlbmVyYXRlTWlwbWFwcztcclxuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhO1xyXG5cdFx0dGhpcy5mbGlwWSA9IHNvdXJjZS5mbGlwWTtcclxuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gc291cmNlLnVucGFja0FsaWdubWVudDtcclxuXHRcdHRoaXMuY29sb3JTcGFjZSA9IHNvdXJjZS5jb2xvclNwYWNlO1xyXG5cclxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0ID0gc291cmNlLnJlbmRlclRhcmdldDtcclxuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gc291cmNlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZTtcclxuXHJcblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XHJcblxyXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBtZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xyXG5cclxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xyXG5cclxuXHRcdFx0bWV0YWRhdGE6IHtcclxuXHRcdFx0XHR2ZXJzaW9uOiA0LjYsXHJcblx0XHRcdFx0dHlwZTogJ1RleHR1cmUnLFxyXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1RleHR1cmUudG9KU09OJ1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxyXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXHJcblxyXG5cdFx0XHRpbWFnZTogdGhpcy5zb3VyY2UudG9KU09OKCBtZXRhICkudXVpZCxcclxuXHJcblx0XHRcdG1hcHBpbmc6IHRoaXMubWFwcGluZyxcclxuXHRcdFx0Y2hhbm5lbDogdGhpcy5jaGFubmVsLFxyXG5cclxuXHRcdFx0cmVwZWF0OiBbIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnkgXSxcclxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcclxuXHRcdFx0Y2VudGVyOiBbIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgXSxcclxuXHRcdFx0cm90YXRpb246IHRoaXMucm90YXRpb24sXHJcblxyXG5cdFx0XHR3cmFwOiBbIHRoaXMud3JhcFMsIHRoaXMud3JhcFQgXSxcclxuXHJcblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXHJcblx0XHRcdGludGVybmFsRm9ybWF0OiB0aGlzLmludGVybmFsRm9ybWF0LFxyXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXHJcblx0XHRcdGNvbG9yU3BhY2U6IHRoaXMuY29sb3JTcGFjZSxcclxuXHJcblx0XHRcdG1pbkZpbHRlcjogdGhpcy5taW5GaWx0ZXIsXHJcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXHJcblx0XHRcdGFuaXNvdHJvcHk6IHRoaXMuYW5pc290cm9weSxcclxuXHJcblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZLFxyXG5cclxuXHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiB0aGlzLmdlbmVyYXRlTWlwbWFwcyxcclxuXHRcdFx0cHJlbXVsdGlwbHlBbHBoYTogdGhpcy5wcmVtdWx0aXBseUFscGhhLFxyXG5cdFx0XHR1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIG91dHB1dC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XHJcblxyXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCApIHtcclxuXHJcblx0XHRcdG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdID0gb3V0cHV0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNmb3JtVXYoIHV2ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5tYXBwaW5nICE9PSBVVk1hcHBpbmcgKSByZXR1cm4gdXY7XHJcblxyXG5cdFx0dXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApO1xyXG5cclxuXHRcdGlmICggdXYueCA8IDAgfHwgdXYueCA+IDEgKSB7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBTICkge1xyXG5cclxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxyXG5cclxuXHRcdFx0XHRcdHV2LnggPSB1di54IC0gTWF0aC5mbG9vciggdXYueCApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgQ2xhbXBUb0VkZ2VXcmFwcGluZzpcclxuXHJcblx0XHRcdFx0XHR1di54ID0gdXYueCA8IDAgPyAwIDogMTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueCApICUgMiApID09PSAxICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dXYueCA9IE1hdGguY2VpbCggdXYueCApIC0gdXYueDtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHV2LnkgPCAwIHx8IHV2LnkgPiAxICkge1xyXG5cclxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwVCApIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBSZXBlYXRXcmFwcGluZzpcclxuXHJcblx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XHJcblxyXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxyXG5cclxuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIE1hdGguZmxvb3IoIHV2LnkgKSAlIDIgKSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHV2LnkgPSBNYXRoLmNlaWwoIHV2LnkgKSAtIHV2Lnk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmZsaXBZICkge1xyXG5cclxuXHRcdFx0dXYueSA9IDEgLSB1di55O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdXY7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xyXG5cdFx0XHR0aGlzLnNvdXJjZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHNldCBuZWVkc1BNUkVNVXBkYXRlKCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0dGhpcy5wbXJlbVZlcnNpb24gKys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5UZXh0dXJlLkRFRkFVTFRfSU1BR0UgPSBudWxsO1xyXG5UZXh0dXJlLkRFRkFVTFRfTUFQUElORyA9IFVWTWFwcGluZztcclxuVGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFkgPSAxO1xyXG5cclxuZXhwb3J0IHsgVGV4dHVyZSB9O1xyXG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vTWF0aFV0aWxzLmpzJztcclxuXHJcbmNsYXNzIFZlY3RvcjQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XHJcblxyXG5cdFx0VmVjdG9yNC5wcm90b3R5cGUuaXNWZWN0b3I0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMueiA9IHo7XHJcblx0XHR0aGlzLncgPSB3O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB3aWR0aCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy56O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCB3aWR0aCggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy56ID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGhlaWdodCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy53O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBoZWlnaHQoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMudyA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggeCwgeSwgeiwgdyApIHtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMueiA9IHo7XHJcblx0XHR0aGlzLncgPSB3O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHRoaXMueCA9IHNjYWxhcjtcclxuXHRcdHRoaXMueSA9IHNjYWxhcjtcclxuXHRcdHRoaXMueiA9IHNjYWxhcjtcclxuXHRcdHRoaXMudyA9IHNjYWxhcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYKCB4ICkge1xyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WSggeSApIHtcclxuXHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFooIHogKSB7XHJcblxyXG5cdFx0dGhpcy56ID0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRXKCB3ICkge1xyXG5cclxuXHRcdHRoaXMudyA9IHc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XHJcblxyXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XHJcblxyXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcclxuXHJcblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcclxuXHJcblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xyXG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XHJcblx0XHRcdGNhc2UgMzogcmV0dXJuIHRoaXMudztcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCA9IHYueDtcclxuXHRcdHRoaXMueSA9IHYueTtcclxuXHRcdHRoaXMueiA9IHYuejtcclxuXHRcdHRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCArPSB2Lng7XHJcblx0XHR0aGlzLnkgKz0gdi55O1xyXG5cdFx0dGhpcy56ICs9IHYuejtcclxuXHRcdHRoaXMudyArPSB2Lnc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkU2NhbGFyKCBzICkge1xyXG5cclxuXHRcdHRoaXMueCArPSBzO1xyXG5cdFx0dGhpcy55ICs9IHM7XHJcblx0XHR0aGlzLnogKz0gcztcclxuXHRcdHRoaXMudyArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xyXG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xyXG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xyXG5cdFx0dGhpcy53ID0gYS53ICsgYi53O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcclxuXHJcblx0XHR0aGlzLnggKz0gdi54ICogcztcclxuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xyXG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XHJcblx0XHR0aGlzLncgKz0gdi53ICogcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdWIoIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54IC09IHYueDtcclxuXHRcdHRoaXMueSAtPSB2Lnk7XHJcblx0XHR0aGlzLnogLT0gdi56O1xyXG5cdFx0dGhpcy53IC09IHYudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdWJTY2FsYXIoIHMgKSB7XHJcblxyXG5cdFx0dGhpcy54IC09IHM7XHJcblx0XHR0aGlzLnkgLT0gcztcclxuXHRcdHRoaXMueiAtPSBzO1xyXG5cdFx0dGhpcy53IC09IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c3ViVmVjdG9ycyggYSwgYiApIHtcclxuXHJcblx0XHR0aGlzLnggPSBhLnggLSBiLng7XHJcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XHJcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XHJcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bXVsdGlwbHkoIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54ICo9IHYueDtcclxuXHRcdHRoaXMueSAqPSB2Lnk7XHJcblx0XHR0aGlzLnogKj0gdi56O1xyXG5cdFx0dGhpcy53ICo9IHYudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xyXG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcclxuXHRcdHRoaXMudyAqPSBzY2FsYXI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlNYXRyaXg0KCBtICkge1xyXG5cclxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLnosIHcgPSB0aGlzLnc7XHJcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdztcclxuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKiB3O1xyXG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKiB3O1xyXG5cdFx0dGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpdmlkZSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggLz0gdi54O1xyXG5cdFx0dGhpcy55IC89IHYueTtcclxuXHRcdHRoaXMueiAvPSB2Lno7XHJcblx0XHR0aGlzLncgLz0gdi53O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24oIHEgKSB7XHJcblxyXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bVxyXG5cclxuXHRcdC8vIHEgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyggcS53ICk7XHJcblxyXG5cdFx0Y29uc3QgcyA9IE1hdGguc3FydCggMSAtIHEudyAqIHEudyApO1xyXG5cclxuXHRcdGlmICggcyA8IDAuMDAwMSApIHtcclxuXHJcblx0XHRcdHRoaXMueCA9IDE7XHJcblx0XHRcdHRoaXMueSA9IDA7XHJcblx0XHRcdHRoaXMueiA9IDA7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMueCA9IHEueCAvIHM7XHJcblx0XHRcdHRoaXMueSA9IHEueSAvIHM7XHJcblx0XHRcdHRoaXMueiA9IHEueiAvIHM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeCggbSApIHtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9BbmdsZS9pbmRleC5odG1cclxuXHJcblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxyXG5cclxuXHRcdGxldCBhbmdsZSwgeCwgeSwgejsgLy8gdmFyaWFibGVzIGZvciByZXN1bHRcclxuXHRcdGNvbnN0IGVwc2lsb24gPSAwLjAxLFx0XHQvLyBtYXJnaW4gdG8gYWxsb3cgZm9yIHJvdW5kaW5nIGVycm9yc1xyXG5cdFx0XHRlcHNpbG9uMiA9IDAuMSxcdFx0Ly8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXNcclxuXHJcblx0XHRcdHRlID0gbS5lbGVtZW50cyxcclxuXHJcblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXHJcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXHJcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xyXG5cclxuXHRcdGlmICggKCBNYXRoLmFicyggbTEyIC0gbTIxICkgPCBlcHNpbG9uICkgJiZcclxuXHRcdCAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiZcclxuXHRcdCAgICAgKCBNYXRoLmFicyggbTIzIC0gbTMyICkgPCBlcHNpbG9uICkgKSB7XHJcblxyXG5cdFx0XHQvLyBzaW5ndWxhcml0eSBmb3VuZFxyXG5cdFx0XHQvLyBmaXJzdCBjaGVjayBmb3IgaWRlbnRpdHkgbWF0cml4IHdoaWNoIG11c3QgaGF2ZSArMSBmb3IgYWxsIHRlcm1zXHJcblx0XHRcdC8vIGluIGxlYWRpbmcgZGlhZ29uYWwgYW5kIHplcm8gaW4gb3RoZXIgdGVybXNcclxuXHJcblx0XHRcdGlmICggKCBNYXRoLmFicyggbTEyICsgbTIxICkgPCBlcHNpbG9uMiApICYmXHJcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTEzICsgbTMxICkgPCBlcHNpbG9uMiApICYmXHJcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTIzICsgbTMyICkgPCBlcHNpbG9uMiApICYmXHJcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTExICsgbTIyICsgbTMzIC0gMyApIDwgZXBzaWxvbjIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwXHJcblxyXG5cdFx0XHRcdHRoaXMuc2V0KCAxLCAwLCAwLCAwICk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0aGlzOyAvLyB6ZXJvIGFuZ2xlLCBhcmJpdHJhcnkgYXhpc1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRoaXMgc2luZ3VsYXJpdHkgaXMgYW5nbGUgPSAxODBcclxuXHJcblx0XHRcdGFuZ2xlID0gTWF0aC5QSTtcclxuXHJcblx0XHRcdGNvbnN0IHh4ID0gKCBtMTEgKyAxICkgLyAyO1xyXG5cdFx0XHRjb25zdCB5eSA9ICggbTIyICsgMSApIC8gMjtcclxuXHRcdFx0Y29uc3QgenogPSAoIG0zMyArIDEgKSAvIDI7XHJcblx0XHRcdGNvbnN0IHh5ID0gKCBtMTIgKyBtMjEgKSAvIDQ7XHJcblx0XHRcdGNvbnN0IHh6ID0gKCBtMTMgKyBtMzEgKSAvIDQ7XHJcblx0XHRcdGNvbnN0IHl6ID0gKCBtMjMgKyBtMzIgKSAvIDQ7XHJcblxyXG5cdFx0XHRpZiAoICggeHggPiB5eSApICYmICggeHggPiB6eiApICkge1xyXG5cclxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxyXG5cclxuXHRcdFx0XHRpZiAoIHh4IDwgZXBzaWxvbiApIHtcclxuXHJcblx0XHRcdFx0XHR4ID0gMDtcclxuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcclxuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR4ID0gTWF0aC5zcXJ0KCB4eCApO1xyXG5cdFx0XHRcdFx0eSA9IHh5IC8geDtcclxuXHRcdFx0XHRcdHogPSB4eiAvIHg7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHl5ID4genogKSB7XHJcblxyXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXHJcblxyXG5cdFx0XHRcdGlmICggeXkgPCBlcHNpbG9uICkge1xyXG5cclxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcclxuXHRcdFx0XHRcdHkgPSAwO1xyXG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHkgPSBNYXRoLnNxcnQoIHl5ICk7XHJcblx0XHRcdFx0XHR4ID0geHkgLyB5O1xyXG5cdFx0XHRcdFx0eiA9IHl6IC8geTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpc1xyXG5cclxuXHRcdFx0XHRpZiAoIHp6IDwgZXBzaWxvbiApIHtcclxuXHJcblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR6ID0gMDtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR6ID0gTWF0aC5zcXJ0KCB6eiApO1xyXG5cdFx0XHRcdFx0eCA9IHh6IC8gejtcclxuXHRcdFx0XHRcdHkgPSB5eiAvIHo7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuc2V0KCB4LCB5LCB6LCBhbmdsZSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7IC8vIHJldHVybiAxODAgZGVnIHJvdGF0aW9uXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHlcclxuXHJcblx0XHRsZXQgcyA9IE1hdGguc3FydCggKCBtMzIgLSBtMjMgKSAqICggbTMyIC0gbTIzICkgK1xyXG5cdFx0XHQoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArXHJcblx0XHRcdCggbTIxIC0gbTEyICkgKiAoIG0yMSAtIG0xMiApICk7IC8vIHVzZWQgdG8gbm9ybWFsaXplXHJcblxyXG5cdFx0aWYgKCBNYXRoLmFicyggcyApIDwgMC4wMDEgKSBzID0gMTtcclxuXHJcblx0XHQvLyBwcmV2ZW50IGRpdmlkZSBieSB6ZXJvLCBzaG91bGQgbm90IGhhcHBlbiBpZiBtYXRyaXggaXMgb3J0aG9nb25hbCBhbmQgc2hvdWxkIGJlXHJcblx0XHQvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2VcclxuXHJcblx0XHR0aGlzLnggPSAoIG0zMiAtIG0yMyApIC8gcztcclxuXHRcdHRoaXMueSA9ICggbTEzIC0gbTMxICkgLyBzO1xyXG5cdFx0dGhpcy56ID0gKCBtMjEgLSBtMTIgKSAvIHM7XHJcblx0XHR0aGlzLncgPSBNYXRoLmFjb3MoICggbTExICsgbTIyICsgbTMzIC0gMSApIC8gMiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApIHtcclxuXHJcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWyAxMiBdO1xyXG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcclxuXHRcdHRoaXMueiA9IGVbIDE0IF07XHJcblx0XHR0aGlzLncgPSBlWyAxNSBdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1pbiggdiApIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XHJcblx0XHR0aGlzLncgPSBNYXRoLm1pbiggdGhpcy53LCB2LncgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYXgoIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcclxuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xyXG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIHRoaXMudywgdi53ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXHJcblxyXG5cdFx0dGhpcy54ID0gY2xhbXAoIHRoaXMueCwgbWluLngsIG1heC54ICk7XHJcblx0XHR0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW4ueSwgbWF4LnkgKTtcclxuXHRcdHRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pbi56LCBtYXgueiApO1xyXG5cdFx0dGhpcy53ID0gY2xhbXAoIHRoaXMudywgbWluLncsIG1heC53ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xyXG5cclxuXHRcdHRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pblZhbCwgbWF4VmFsICk7XHJcblx0XHR0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW5WYWwsIG1heFZhbCApO1xyXG5cdFx0dGhpcy56ID0gY2xhbXAoIHRoaXMueiwgbWluVmFsLCBtYXhWYWwgKTtcclxuXHRcdHRoaXMudyA9IGNsYW1wKCB0aGlzLncsIG1pblZhbCwgbWF4VmFsICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xyXG5cclxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBjbGFtcCggbGVuZ3RoLCBtaW4sIG1heCApICk7XHJcblxyXG5cdH1cclxuXHJcblx0Zmxvb3IoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcclxuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xyXG5cdFx0dGhpcy53ID0gTWF0aC5mbG9vciggdGhpcy53ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2VpbCgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcclxuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XHJcblx0XHR0aGlzLncgPSBNYXRoLmNlaWwoIHRoaXMudyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdW5kKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XHJcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcclxuXHRcdHRoaXMudyA9IE1hdGgucm91bmQoIHRoaXMudyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdW5kVG9aZXJvKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC50cnVuYyggdGhpcy55ICk7XHJcblx0XHR0aGlzLnogPSBNYXRoLnRydW5jKCB0aGlzLnogKTtcclxuXHRcdHRoaXMudyA9IE1hdGgudHJ1bmMoIHRoaXMudyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG5lZ2F0ZSgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XHJcblx0XHR0aGlzLncgPSAtIHRoaXMudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkb3QoIHYgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYueiArIHRoaXMudyAqIHYudztcclxuXHJcblx0fVxyXG5cclxuXHRsZW5ndGhTcSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xyXG5cclxuXHR9XHJcblxyXG5cdGxlbmd0aCgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTtcclxuXHJcblx0fVxyXG5cclxuXHRub3JtYWxpemUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XHJcblxyXG5cdH1cclxuXHJcblx0bGVycCggdiwgYWxwaGEgKSB7XHJcblxyXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcclxuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XHJcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xyXG5cdFx0dGhpcy53ICs9ICggdi53IC0gdGhpcy53ICkgKiBhbHBoYTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcclxuXHJcblx0XHR0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7XHJcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XHJcblx0XHR0aGlzLnogPSB2MS56ICsgKCB2Mi56IC0gdjEueiApICogYWxwaGE7XHJcblx0XHR0aGlzLncgPSB2MS53ICsgKCB2Mi53IC0gdjEudyApICogYWxwaGE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xyXG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcclxuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XHJcblx0XHR0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy53O1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xyXG5cclxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xyXG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XHJcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcclxuXHRcdHRoaXMudyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJhbmRvbSgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yYW5kb20oKTtcclxuXHRcdHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XHJcblx0XHR0aGlzLncgPSBNYXRoLnJhbmRvbSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xyXG5cclxuXHRcdHlpZWxkIHRoaXMueDtcclxuXHRcdHlpZWxkIHRoaXMueTtcclxuXHRcdHlpZWxkIHRoaXMuejtcclxuXHRcdHlpZWxkIHRoaXMudztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgVmVjdG9yNCB9O1xyXG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL0V2ZW50RGlzcGF0Y2hlci5qcyc7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9UZXh0dXJlLmpzJztcclxuaW1wb3J0IHsgTGluZWFyRmlsdGVyIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uL21hdGgvVmVjdG9yNC5qcyc7XHJcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJy4uL3RleHR1cmVzL1NvdXJjZS5qcyc7XHJcblxyXG4vKlxyXG4gSW4gb3B0aW9ucywgd2UgY2FuIHNwZWNpZnk6XHJcbiAqIFRleHR1cmUgcGFyYW1ldGVycyBmb3IgYW4gYXV0by1nZW5lcmF0ZWQgdGFyZ2V0IHRleHR1cmVcclxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcclxuKi9cclxuY2xhc3MgUmVuZGVyVGFyZ2V0IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgb3B0aW9ucyA9IHt9ICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc1JlbmRlclRhcmdldCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0XHR0aGlzLmRlcHRoID0gMTtcclxuXHJcblx0XHR0aGlzLnNjaXNzb3IgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xyXG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMudmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xyXG5cclxuXHRcdGNvbnN0IGltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogMSB9O1xyXG5cclxuXHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7XHJcblx0XHRcdGdlbmVyYXRlTWlwbWFwczogZmFsc2UsXHJcblx0XHRcdGludGVybmFsRm9ybWF0OiBudWxsLFxyXG5cdFx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcclxuXHRcdFx0ZGVwdGhCdWZmZXI6IHRydWUsXHJcblx0XHRcdHN0ZW5jaWxCdWZmZXI6IGZhbHNlLFxyXG5cdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6IHRydWUsXHJcblx0XHRcdHJlc29sdmVTdGVuY2lsQnVmZmVyOiB0cnVlLFxyXG5cdFx0XHRkZXB0aFRleHR1cmU6IG51bGwsXHJcblx0XHRcdHNhbXBsZXM6IDAsXHJcblx0XHRcdGNvdW50OiAxXHJcblx0XHR9LCBvcHRpb25zICk7XHJcblxyXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCBpbWFnZSwgb3B0aW9ucy5tYXBwaW5nLCBvcHRpb25zLndyYXBTLCBvcHRpb25zLndyYXBULCBvcHRpb25zLm1hZ0ZpbHRlciwgb3B0aW9ucy5taW5GaWx0ZXIsIG9wdGlvbnMuZm9ybWF0LCBvcHRpb25zLnR5cGUsIG9wdGlvbnMuYW5pc290cm9weSwgb3B0aW9ucy5jb2xvclNwYWNlICk7XHJcblxyXG5cdFx0dGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xyXG5cdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcztcclxuXHRcdHRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSBvcHRpb25zLmludGVybmFsRm9ybWF0O1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZXMgPSBbXTtcclxuXHJcblx0XHRjb25zdCBjb3VudCA9IG9wdGlvbnMuY291bnQ7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXSA9IHRleHR1cmUuY2xvbmUoKTtcclxuXHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XHJcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5yZW5kZXJUYXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRlcHRoQnVmZmVyID0gb3B0aW9ucy5kZXB0aEJ1ZmZlcjtcclxuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlcjtcclxuXHJcblx0XHR0aGlzLnJlc29sdmVEZXB0aEJ1ZmZlciA9IG9wdGlvbnMucmVzb2x2ZURlcHRoQnVmZmVyO1xyXG5cdFx0dGhpcy5yZXNvbHZlU3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMucmVzb2x2ZVN0ZW5jaWxCdWZmZXI7XHJcblxyXG5cdFx0dGhpcy5fZGVwdGhUZXh0dXJlID0gbnVsbDtcclxuXHRcdHRoaXMuZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmU7XHJcblxyXG5cdFx0dGhpcy5zYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB0ZXh0dXJlKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVzWyAwIF07XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHRleHR1cmUoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZXNbIDAgXSA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBkZXB0aFRleHR1cmUoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLl9kZXB0aFRleHR1cmUgIT09IG51bGwgKSB0aGlzLl9kZXB0aFRleHR1cmUucmVuZGVyVGFyZ2V0ID0gbnVsbDtcclxuXHRcdGlmICggY3VycmVudCAhPT0gbnVsbCApIGN1cnJlbnQucmVuZGVyVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHR0aGlzLl9kZXB0aFRleHR1cmUgPSBjdXJyZW50O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBkZXB0aFRleHR1cmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2RlcHRoVGV4dHVyZTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRTaXplKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCA9IDEgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gaGVpZ2h0IHx8IHRoaXMuZGVwdGggIT09IGRlcHRoICkge1xyXG5cclxuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHRcdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMudGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0XHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdLmltYWdlLmRlcHRoID0gZGVwdGg7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy52aWV3cG9ydC5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcclxuXHRcdHRoaXMuc2Npc3Nvci5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XHJcblx0XHR0aGlzLmRlcHRoID0gc291cmNlLmRlcHRoO1xyXG5cclxuXHRcdHRoaXMuc2Npc3Nvci5jb3B5KCBzb3VyY2Uuc2Npc3NvciApO1xyXG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IHNvdXJjZS5zY2lzc29yVGVzdDtcclxuXHJcblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZXMubGVuZ3RoID0gMDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gc291cmNlLnRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdID0gc291cmNlLnRleHR1cmVzWyBpIF0uY2xvbmUoKTtcclxuXHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XHJcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5yZW5kZXJUYXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBlbnN1cmUgaW1hZ2Ugb2JqZWN0IGlzIG5vdCBzaGFyZWQsIHNlZSAjMjAzMjhcclxuXHJcblx0XHRjb25zdCBpbWFnZSA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudGV4dHVyZS5pbWFnZSApO1xyXG5cdFx0dGhpcy50ZXh0dXJlLnNvdXJjZSA9IG5ldyBTb3VyY2UoIGltYWdlICk7XHJcblxyXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjtcclxuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5zdGVuY2lsQnVmZmVyO1xyXG5cclxuXHRcdHRoaXMucmVzb2x2ZURlcHRoQnVmZmVyID0gc291cmNlLnJlc29sdmVEZXB0aEJ1ZmZlcjtcclxuXHRcdHRoaXMucmVzb2x2ZVN0ZW5jaWxCdWZmZXIgPSBzb3VyY2UucmVzb2x2ZVN0ZW5jaWxCdWZmZXI7XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UuZGVwdGhUZXh0dXJlICE9PSBudWxsICkgdGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlLmNsb25lKCk7XHJcblxyXG5cdFx0dGhpcy5zYW1wbGVzID0gc291cmNlLnNhbXBsZXM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUmVuZGVyVGFyZ2V0IH07XHJcbiIsImltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcclxuXHJcbmNsYXNzIFdlYkdMUmVuZGVyVGFyZ2V0IGV4dGVuZHMgUmVuZGVyVGFyZ2V0IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgb3B0aW9ucyA9IHt9ICkge1xyXG5cclxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XHJcblxyXG5cdFx0dGhpcy5pc1dlYkdMUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IENsYW1wVG9FZGdlV3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgRGF0YUFycmF5VGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxICkge1xyXG5cclxuXHRcdHN1cGVyKCBudWxsICk7XHJcblxyXG5cdFx0dGhpcy5pc0RhdGFBcnJheVRleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuaW1hZ2UgPSB7IGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoIH07XHJcblxyXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xyXG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xyXG5cclxuXHRcdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xyXG5cclxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XHJcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XHJcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IDE7XHJcblxyXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMgPSBuZXcgU2V0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkTGF5ZXJVcGRhdGUoIGxheWVySW5kZXggKSB7XHJcblxyXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuYWRkKCBsYXllckluZGV4ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xlYXJMYXllclVwZGF0ZXMoKSB7XHJcblxyXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuY2xlYXIoKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRGF0YUFycmF5VGV4dHVyZSB9O1xyXG4iLCJpbXBvcnQgeyBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJy4vV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xyXG5pbXBvcnQgeyBEYXRhQXJyYXlUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvRGF0YUFycmF5VGV4dHVyZS5qcyc7XHJcblxyXG5jbGFzcyBXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcclxuXHJcblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xyXG5cclxuXHRcdHRoaXMuaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IERhdGFBcnJheVRleHR1cmUoIG51bGwsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFdlYkdMQXJyYXlSZW5kZXJUYXJnZXQgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IENsYW1wVG9FZGdlV3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgRGF0YTNEVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxICkge1xyXG5cclxuXHRcdC8vIFdlJ3JlIGdvaW5nIHRvIGFkZCAuc2V0WFhYKCkgbWV0aG9kcyBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIGxhdGVyLlxyXG5cdFx0Ly8gVXNlcnMgY2FuIHN0aWxsIHNldCBpbiBEYXRhM0RUZXh0dXJlIGRpcmVjdGx5LlxyXG5cdFx0Ly9cclxuXHRcdC8vXHRjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGEzRFRleHR1cmUoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XHJcblx0XHQvLyBcdHRleHR1cmUuYW5pc290cm9weSA9IDE2O1xyXG5cdFx0Ly9cclxuXHRcdC8vIFNlZSAjMTQ4MzlcclxuXHJcblx0XHRzdXBlciggbnVsbCApO1xyXG5cclxuXHRcdHRoaXMuaXNEYXRhM0RUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xyXG5cclxuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuXHJcblx0XHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHJcblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xyXG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBEYXRhM0RUZXh0dXJlIH07XHJcbiIsImltcG9ydCB7IFdlYkdMUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi9XZWJHTFJlbmRlclRhcmdldC5qcyc7XHJcbmltcG9ydCB7IERhdGEzRFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhM0RUZXh0dXJlLmpzJztcclxuXHJcbmNsYXNzIFdlYkdMM0RSZW5kZXJUYXJnZXQgZXh0ZW5kcyBXZWJHTFJlbmRlclRhcmdldCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgb3B0aW9ucyA9IHt9ICkge1xyXG5cclxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XHJcblxyXG5cdFx0dGhpcy5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YTNEVGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgV2ViR0wzRFJlbmRlclRhcmdldCB9O1xyXG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vTWF0aFV0aWxzLmpzJztcclxuXHJcbmNsYXNzIFF1YXRlcm5pb24ge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XHJcblxyXG5cdFx0dGhpcy5pc1F1YXRlcm5pb24gPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuX3ggPSB4O1xyXG5cdFx0dGhpcy5feSA9IHk7XHJcblx0XHR0aGlzLl96ID0gejtcclxuXHRcdHRoaXMuX3cgPSB3O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzbGVycEZsYXQoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkge1xyXG5cclxuXHRcdC8vIGZ1enotZnJlZSwgYXJyYXktYmFzZWQgUXVhdGVybmlvbiBTTEVSUCBvcGVyYXRpb25cclxuXHJcblx0XHRsZXQgeDAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMCBdLFxyXG5cdFx0XHR5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF0sXHJcblx0XHRcdHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSxcclxuXHRcdFx0dzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xyXG5cclxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDAgXSxcclxuXHRcdFx0eTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdLFxyXG5cdFx0XHR6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sXHJcblx0XHRcdHcxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDMgXTtcclxuXHJcblx0XHRpZiAoIHQgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgwO1xyXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xyXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xyXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdCA9PT0gMSApIHtcclxuXHJcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMCBdID0geDE7XHJcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTE7XHJcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejE7XHJcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzE7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7XHJcblxyXG5cdFx0XHRsZXQgcyA9IDEgLSB0O1xyXG5cdFx0XHRjb25zdCBjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxyXG5cdFx0XHRcdGRpciA9ICggY29zID49IDAgPyAxIDogLSAxICksXHJcblx0XHRcdFx0c3FyU2luID0gMSAtIGNvcyAqIGNvcztcclxuXHJcblx0XHRcdC8vIFNraXAgdGhlIFNsZXJwIGZvciB0aW55IHN0ZXBzIHRvIGF2b2lkIG51bWVyaWMgcHJvYmxlbXM6XHJcblx0XHRcdGlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc3FydCggc3FyU2luICksXHJcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xyXG5cclxuXHRcdFx0XHRzID0gTWF0aC5zaW4oIHMgKiBsZW4gKSAvIHNpbjtcclxuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IHREaXIgPSB0ICogZGlyO1xyXG5cclxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XHJcblx0XHRcdHkwID0geTAgKiBzICsgeTEgKiB0RGlyO1xyXG5cdFx0XHR6MCA9IHowICogcyArIHoxICogdERpcjtcclxuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XHJcblxyXG5cdFx0XHQvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6XHJcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGYgPSAxIC8gTWF0aC5zcXJ0KCB4MCAqIHgwICsgeTAgKiB5MCArIHowICogejAgKyB3MCAqIHcwICk7XHJcblxyXG5cdFx0XHRcdHgwICo9IGY7XHJcblx0XHRcdFx0eTAgKj0gZjtcclxuXHRcdFx0XHR6MCAqPSBmO1xyXG5cdFx0XHRcdHcwICo9IGY7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MDtcclxuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XHJcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xyXG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxICkge1xyXG5cclxuXHRcdGNvbnN0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCBdO1xyXG5cdFx0Y29uc3QgeTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdO1xyXG5cdFx0Y29uc3QgejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdO1xyXG5cdFx0Y29uc3QgdzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xyXG5cclxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSBdO1xyXG5cdFx0Y29uc3QgeTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdO1xyXG5cdFx0Y29uc3QgejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdO1xyXG5cdFx0Y29uc3QgdzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xyXG5cclxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MCAqIHcxICsgdzAgKiB4MSArIHkwICogejEgLSB6MCAqIHkxO1xyXG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MCAqIHcxICsgdzAgKiB5MSArIHowICogeDEgLSB4MCAqIHoxO1xyXG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MCAqIHcxICsgdzAgKiB6MSArIHgwICogeTEgLSB5MCAqIHgxO1xyXG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MCAqIHcxIC0geDAgKiB4MSAtIHkwICogeTEgLSB6MCAqIHoxO1xyXG5cclxuXHRcdHJldHVybiBkc3Q7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHgoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3g7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHgoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMuX3ggPSB2YWx1ZTtcclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgeSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5feTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgeSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5feSA9IHZhbHVlO1xyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB6KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl96O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCB6KCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLl96ID0gdmFsdWU7XHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHcoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3c7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHcoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMuX3cgPSB2YWx1ZTtcclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIHgsIHksIHosIHcgKSB7XHJcblxyXG5cdFx0dGhpcy5feCA9IHg7XHJcblx0XHR0aGlzLl95ID0geTtcclxuXHRcdHRoaXMuX3ogPSB6O1xyXG5cdFx0dGhpcy5fdyA9IHc7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHF1YXRlcm5pb24gKSB7XHJcblxyXG5cdFx0dGhpcy5feCA9IHF1YXRlcm5pb24ueDtcclxuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XHJcblx0XHR0aGlzLl96ID0gcXVhdGVybmlvbi56O1xyXG5cdFx0dGhpcy5fdyA9IHF1YXRlcm5pb24udztcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUV1bGVyKCBldWxlciwgdXBkYXRlID0gdHJ1ZSApIHtcclxuXHJcblx0XHRjb25zdCB4ID0gZXVsZXIuX3gsIHkgPSBldWxlci5feSwgeiA9IGV1bGVyLl96LCBvcmRlciA9IGV1bGVyLl9vcmRlcjtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXHJcblx0XHQvLyBcdDIwNjk2LWZ1bmN0aW9uLXRvLWNvbnZlcnQtYmV0d2Vlbi1kY20tZXVsZXItYW5nbGVzLXF1YXRlcm5pb25zLWFuZC1ldWxlci12ZWN0b3JzL1xyXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxyXG5cclxuXHRcdGNvbnN0IGNvcyA9IE1hdGguY29zO1xyXG5cdFx0Y29uc3Qgc2luID0gTWF0aC5zaW47XHJcblxyXG5cdFx0Y29uc3QgYzEgPSBjb3MoIHggLyAyICk7XHJcblx0XHRjb25zdCBjMiA9IGNvcyggeSAvIDIgKTtcclxuXHRcdGNvbnN0IGMzID0gY29zKCB6IC8gMiApO1xyXG5cclxuXHRcdGNvbnN0IHMxID0gc2luKCB4IC8gMiApO1xyXG5cdFx0Y29uc3QgczIgPSBzaW4oIHkgLyAyICk7XHJcblx0XHRjb25zdCBzMyA9IHNpbiggeiAvIDIgKTtcclxuXHJcblx0XHRzd2l0Y2ggKCBvcmRlciApIHtcclxuXHJcblx0XHRcdGNhc2UgJ1hZWic6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1lYWic6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1pYWSc6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1pZWCc6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1laWCc6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1haWSc6XHJcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcclxuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHVwZGF0ZSA9PT0gdHJ1ZSApIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvYW5nbGVUb1F1YXRlcm5pb24vaW5kZXguaHRtXHJcblxyXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcclxuXHJcblx0XHRjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XHJcblxyXG5cdFx0dGhpcy5feCA9IGF4aXMueCAqIHM7XHJcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcclxuXHRcdHRoaXMuX3ogPSBheGlzLnogKiBzO1xyXG5cdFx0dGhpcy5fdyA9IE1hdGguY29zKCBoYWxmQW5nbGUgKTtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICkge1xyXG5cclxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXHJcblxyXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcclxuXHJcblx0XHRjb25zdCB0ZSA9IG0uZWxlbWVudHMsXHJcblxyXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxyXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxyXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSxcclxuXHJcblx0XHRcdHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xyXG5cclxuXHRcdGlmICggdHJhY2UgPiAwICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcyA9IDAuNSAvIE1hdGguc3FydCggdHJhY2UgKyAxLjAgKTtcclxuXHJcblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcclxuXHRcdFx0dGhpcy5feCA9ICggbTMyIC0gbTIzICkgKiBzO1xyXG5cdFx0XHR0aGlzLl95ID0gKCBtMTMgLSBtMzEgKSAqIHM7XHJcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBtMTEgPiBtMjIgJiYgbTExID4gbTMzICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTExIC0gbTIyIC0gbTMzICk7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XHJcblx0XHRcdHRoaXMuX3ggPSAwLjI1ICogcztcclxuXHRcdFx0dGhpcy5feSA9ICggbTEyICsgbTIxICkgLyBzO1xyXG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggbTIyID4gbTMzICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTIyIC0gbTExIC0gbTMzICk7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XHJcblx0XHRcdHRoaXMuX3ggPSAoIG0xMiArIG0yMSApIC8gcztcclxuXHRcdFx0dGhpcy5feSA9IDAuMjUgKiBzO1xyXG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0zMyAtIG0xMSAtIG0yMiApO1xyXG5cclxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xyXG5cdFx0XHR0aGlzLl94ID0gKCBtMTMgKyBtMzEgKSAvIHM7XHJcblx0XHRcdHRoaXMuX3kgPSAoIG0yMyArIG0zMiApIC8gcztcclxuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVVuaXRWZWN0b3JzKCB2RnJvbSwgdlRvICkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxyXG5cclxuXHRcdGxldCByID0gdkZyb20uZG90KCB2VG8gKSArIDE7XHJcblxyXG5cdFx0aWYgKCByIDwgTnVtYmVyLkVQU0lMT04gKSB7XHJcblxyXG5cdFx0XHQvLyB2RnJvbSBhbmQgdlRvIHBvaW50IGluIG9wcG9zaXRlIGRpcmVjdGlvbnNcclxuXHJcblx0XHRcdHIgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBNYXRoLmFicyggdkZyb20ueCApID4gTWF0aC5hYnMoIHZGcm9tLnogKSApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcclxuXHRcdFx0XHR0aGlzLl95ID0gdkZyb20ueDtcclxuXHRcdFx0XHR0aGlzLl96ID0gMDtcclxuXHRcdFx0XHR0aGlzLl93ID0gcjtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xyXG5cdFx0XHRcdHRoaXMuX3kgPSAtIHZGcm9tLno7XHJcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XHJcblx0XHRcdFx0dGhpcy5fdyA9IHI7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGNyb3NzVmVjdG9ycyggdkZyb20sIHZUbyApOyAvLyBpbmxpbmVkIHRvIGF2b2lkIGN5Y2xpYyBkZXBlbmRlbmN5IG9uIFZlY3RvcjNcclxuXHJcblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XHJcblx0XHRcdHRoaXMuX3kgPSB2RnJvbS56ICogdlRvLnggLSB2RnJvbS54ICogdlRvLno7XHJcblx0XHRcdHRoaXMuX3ogPSB2RnJvbS54ICogdlRvLnkgLSB2RnJvbS55ICogdlRvLng7XHJcblx0XHRcdHRoaXMuX3cgPSByO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcclxuXHJcblx0fVxyXG5cclxuXHRhbmdsZVRvKCBxICkge1xyXG5cclxuXHRcdHJldHVybiAyICogTWF0aC5hY29zKCBNYXRoLmFicyggY2xhbXAoIHRoaXMuZG90KCBxICksIC0gMSwgMSApICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVUb3dhcmRzKCBxLCBzdGVwICkge1xyXG5cclxuXHRcdGNvbnN0IGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7XHJcblxyXG5cdFx0aWYgKCBhbmdsZSA9PT0gMCApIHJldHVybiB0aGlzO1xyXG5cclxuXHRcdGNvbnN0IHQgPSBNYXRoLm1pbiggMSwgc3RlcCAvIGFuZ2xlICk7XHJcblxyXG5cdFx0dGhpcy5zbGVycCggcSwgdCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGlkZW50aXR5KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludmVydCgpIHtcclxuXHJcblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxyXG5cclxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbmp1Z2F0ZSgpIHtcclxuXHJcblx0XHR0aGlzLl94ICo9IC0gMTtcclxuXHRcdHRoaXMuX3kgKj0gLSAxO1xyXG5cdFx0dGhpcy5feiAqPSAtIDE7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRvdCggdiApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7XHJcblxyXG5cdH1cclxuXHJcblx0bGVuZ3RoU3EoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93O1xyXG5cclxuXHR9XHJcblxyXG5cdGxlbmd0aCgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdyApO1xyXG5cclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZSgpIHtcclxuXHJcblx0XHRsZXQgbCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG5cdFx0aWYgKCBsID09PSAwICkge1xyXG5cclxuXHRcdFx0dGhpcy5feCA9IDA7XHJcblx0XHRcdHRoaXMuX3kgPSAwO1xyXG5cdFx0XHR0aGlzLl96ID0gMDtcclxuXHRcdFx0dGhpcy5fdyA9IDE7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGwgPSAxIC8gbDtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSB0aGlzLl94ICogbDtcclxuXHRcdFx0dGhpcy5feSA9IHRoaXMuX3kgKiBsO1xyXG5cdFx0XHR0aGlzLl96ID0gdGhpcy5feiAqIGw7XHJcblx0XHRcdHRoaXMuX3cgPSB0aGlzLl93ICogbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG11bHRpcGx5KCBxICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHRoaXMsIHEgKTtcclxuXHJcblx0fVxyXG5cclxuXHRwcmVtdWx0aXBseSggcSApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCBxLCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcblx0bXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIHtcclxuXHJcblx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG1cclxuXHJcblx0XHRjb25zdCBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93O1xyXG5cdFx0Y29uc3QgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdztcclxuXHJcblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xyXG5cdFx0dGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcclxuXHRcdHRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XHJcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzbGVycCggcWIsIHQgKSB7XHJcblxyXG5cdFx0aWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XHJcblx0XHRpZiAoIHQgPT09IDEgKSByZXR1cm4gdGhpcy5jb3B5KCBxYiApO1xyXG5cclxuXHRcdGNvbnN0IHggPSB0aGlzLl94LCB5ID0gdGhpcy5feSwgeiA9IHRoaXMuX3osIHcgPSB0aGlzLl93O1xyXG5cclxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXHJcblxyXG5cdFx0bGV0IGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejtcclxuXHJcblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA8IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcclxuXHRcdFx0dGhpcy5feCA9IC0gcWIuX3g7XHJcblx0XHRcdHRoaXMuX3kgPSAtIHFiLl95O1xyXG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcclxuXHJcblx0XHRcdGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggY29zSGFsZlRoZXRhID49IDEuMCApIHtcclxuXHJcblx0XHRcdHRoaXMuX3cgPSB3O1xyXG5cdFx0XHR0aGlzLl94ID0geDtcclxuXHRcdFx0dGhpcy5feSA9IHk7XHJcblx0XHRcdHRoaXMuX3ogPSB6O1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHNxclNpbkhhbGZUaGV0YSA9IDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YTtcclxuXHJcblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcclxuXHJcblx0XHRcdGNvbnN0IHMgPSAxIC0gdDtcclxuXHRcdFx0dGhpcy5fdyA9IHMgKiB3ICsgdCAqIHRoaXMuX3c7XHJcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xyXG5cdFx0XHR0aGlzLl95ID0gcyAqIHkgKyB0ICogdGhpcy5feTtcclxuXHRcdFx0dGhpcy5feiA9IHMgKiB6ICsgdCAqIHRoaXMuX3o7XHJcblxyXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZSgpOyAvLyBub3JtYWxpemUgY2FsbHMgX29uQ2hhbmdlQ2FsbGJhY2soKVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCggc3FyU2luSGFsZlRoZXRhICk7XHJcblx0XHRjb25zdCBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xyXG5cdFx0Y29uc3QgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxyXG5cdFx0XHRyYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xyXG5cclxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XHJcblx0XHR0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApO1xyXG5cdFx0dGhpcy5feSA9ICggeSAqIHJhdGlvQSArIHRoaXMuX3kgKiByYXRpb0IgKTtcclxuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb3B5KCBxYSApLnNsZXJwKCBxYiwgdCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHJhbmRvbSgpIHtcclxuXHJcblx0XHQvLyBzZXRzIHRoaXMgcXVhdGVybmlvbiB0byBhIHVuaWZvcm0gcmFuZG9tIHVuaXQgcXVhdGVybm5pb25cclxuXHJcblx0XHQvLyBLZW4gU2hvZW1ha2VcclxuXHRcdC8vIFVuaWZvcm0gcmFuZG9tIHJvdGF0aW9uc1xyXG5cdFx0Ly8gRC4gS2lyaywgZWRpdG9yLCBHcmFwaGljcyBHZW1zIElJSSwgcGFnZXMgMTI0LTEzMi4gQWNhZGVtaWMgUHJlc3MsIE5ldyBZb3JrLCAxOTkyLlxyXG5cclxuXHRcdGNvbnN0IHRoZXRhMSA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcclxuXHRcdGNvbnN0IHRoZXRhMiA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcclxuXHJcblx0XHRjb25zdCB4MCA9IE1hdGgucmFuZG9tKCk7XHJcblx0XHRjb25zdCByMSA9IE1hdGguc3FydCggMSAtIHgwICk7XHJcblx0XHRjb25zdCByMiA9IE1hdGguc3FydCggeDAgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXQoXHJcblx0XHRcdHIxICogTWF0aC5zaW4oIHRoZXRhMSApLFxyXG5cdFx0XHRyMSAqIE1hdGguY29zKCB0aGV0YTEgKSxcclxuXHRcdFx0cjIgKiBNYXRoLnNpbiggdGhldGEyICksXHJcblx0XHRcdHIyICogTWF0aC5jb3MoIHRoZXRhMiApLFxyXG5cdFx0KTtcclxuXHJcblx0fVxyXG5cclxuXHRlcXVhbHMoIHF1YXRlcm5pb24gKSB7XHJcblxyXG5cdFx0cmV0dXJuICggcXVhdGVybmlvbi5feCA9PT0gdGhpcy5feCApICYmICggcXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSApICYmICggcXVhdGVybmlvbi5feiA9PT0gdGhpcy5feiApICYmICggcXVhdGVybmlvbi5fdyA9PT0gdGhpcy5fdyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0dGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTtcclxuXHRcdHRoaXMuX3kgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xyXG5cdFx0dGhpcy5feiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XHJcblx0XHR0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcclxuXHJcblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xyXG5cclxuXHRcdHRoaXMuX3ggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcclxuXHRcdHRoaXMuX3kgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcclxuXHRcdHRoaXMuX3ogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcclxuXHRcdHRoaXMuX3cgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoKTtcclxuXHJcblx0fVxyXG5cclxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRfb25DaGFuZ2VDYWxsYmFjaygpIHt9XHJcblxyXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xyXG5cclxuXHRcdHlpZWxkIHRoaXMuX3g7XHJcblx0XHR5aWVsZCB0aGlzLl95O1xyXG5cdFx0eWllbGQgdGhpcy5fejtcclxuXHRcdHlpZWxkIHRoaXMuX3c7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFF1YXRlcm5pb24gfTtcclxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24uanMnO1xyXG5cclxuY2xhc3MgVmVjdG9yMyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwICkge1xyXG5cclxuXHRcdFZlY3RvcjMucHJvdG90eXBlLmlzVmVjdG9yMyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblx0XHR0aGlzLnogPSB6O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggeCwgeSwgeiApIHtcclxuXHJcblx0XHRpZiAoIHogPT09IHVuZGVmaW5lZCApIHogPSB0aGlzLno7IC8vIHNwcml0ZS5zY2FsZS5zZXQoeCx5KVxyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy56ID0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcclxuXHJcblx0XHR0aGlzLnggPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgPSBzY2FsYXI7XHJcblx0XHR0aGlzLnogPSBzY2FsYXI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WCggeCApIHtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFkoIHkgKSB7XHJcblxyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRaKCB6ICkge1xyXG5cclxuXHRcdHRoaXMueiA9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XHJcblxyXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XHJcblxyXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xyXG5cclxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xyXG5cclxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xyXG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggPSB2Lng7XHJcblx0XHR0aGlzLnkgPSB2Lnk7XHJcblx0XHR0aGlzLnogPSB2Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCArPSB2Lng7XHJcblx0XHR0aGlzLnkgKz0gdi55O1xyXG5cdFx0dGhpcy56ICs9IHYuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRhZGRTY2FsYXIoIHMgKSB7XHJcblxyXG5cdFx0dGhpcy54ICs9IHM7XHJcblx0XHR0aGlzLnkgKz0gcztcclxuXHRcdHRoaXMueiArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xyXG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xyXG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcclxuXHJcblx0XHR0aGlzLnggKz0gdi54ICogcztcclxuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xyXG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c3ViKCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCAtPSB2Lng7XHJcblx0XHR0aGlzLnkgLT0gdi55O1xyXG5cdFx0dGhpcy56IC09IHYuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdWJTY2FsYXIoIHMgKSB7XHJcblxyXG5cdFx0dGhpcy54IC09IHM7XHJcblx0XHR0aGlzLnkgLT0gcztcclxuXHRcdHRoaXMueiAtPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xyXG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xyXG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG11bHRpcGx5KCB2ICkge1xyXG5cclxuXHRcdHRoaXMueCAqPSB2Lng7XHJcblx0XHR0aGlzLnkgKj0gdi55O1xyXG5cdFx0dGhpcy56ICo9IHYuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xyXG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVZlY3RvcnMoIGEsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54ICogYi54O1xyXG5cdFx0dGhpcy55ID0gYS55ICogYi55O1xyXG5cdFx0dGhpcy56ID0gYS56ICogYi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5RXVsZXIoIGV1bGVyICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApICk7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlBeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4MyggbSApIHtcclxuXHJcblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xyXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF0gKiB6O1xyXG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF0gKiB6O1xyXG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4MyggbSApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbSApIHtcclxuXHJcblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xyXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0Y29uc3QgdyA9IDEgLyAoIGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICk7XHJcblxyXG5cdFx0dGhpcy54ID0gKCBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICkgKiB3O1xyXG5cdFx0dGhpcy55ID0gKCBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICkgKiB3O1xyXG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XHJcblxyXG5cdFx0Ly8gcXVhdGVybmlvbiBxIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxyXG5cclxuXHRcdGNvbnN0IHZ4ID0gdGhpcy54LCB2eSA9IHRoaXMueSwgdnogPSB0aGlzLno7XHJcblx0XHRjb25zdCBxeCA9IHEueCwgcXkgPSBxLnksIHF6ID0gcS56LCBxdyA9IHEudztcclxuXHJcblx0XHQvLyB0ID0gMiAqIGNyb3NzKCBxLnh5eiwgdiApO1xyXG5cdFx0Y29uc3QgdHggPSAyICogKCBxeSAqIHZ6IC0gcXogKiB2eSApO1xyXG5cdFx0Y29uc3QgdHkgPSAyICogKCBxeiAqIHZ4IC0gcXggKiB2eiApO1xyXG5cdFx0Y29uc3QgdHogPSAyICogKCBxeCAqIHZ5IC0gcXkgKiB2eCApO1xyXG5cclxuXHRcdC8vIHYgKyBxLncgKiB0ICsgY3Jvc3MoIHEueHl6LCB0ICk7XHJcblx0XHR0aGlzLnggPSB2eCArIHF3ICogdHggKyBxeSAqIHR6IC0gcXogKiB0eTtcclxuXHRcdHRoaXMueSA9IHZ5ICsgcXcgKiB0eSArIHF6ICogdHggLSBxeCAqIHR6O1xyXG5cdFx0dGhpcy56ID0gdnogKyBxdyAqIHR6ICsgcXggKiB0eSAtIHF5ICogdHg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cHJvamVjdCggY2FtZXJhICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0fVxyXG5cclxuXHR1bnByb2plY3QoIGNhbWVyYSApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkICk7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xyXG5cclxuXHRcdC8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXhcclxuXHRcdC8vIHZlY3RvciBpbnRlcnByZXRlZCBhcyBhIGRpcmVjdGlvblxyXG5cclxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XHJcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHo7XHJcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHo7XHJcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpdmlkZSggdiApIHtcclxuXHJcblx0XHR0aGlzLnggLz0gdi54O1xyXG5cdFx0dGhpcy55IC89IHYueTtcclxuXHRcdHRoaXMueiAvPSB2Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGl2aWRlU2NhbGFyKCBzY2FsYXIgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtaW4oIHYgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcclxuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1heCggdiApIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXHJcblxyXG5cdFx0dGhpcy54ID0gY2xhbXAoIHRoaXMueCwgbWluLngsIG1heC54ICk7XHJcblx0XHR0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW4ueSwgbWF4LnkgKTtcclxuXHRcdHRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pbi56LCBtYXgueiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcclxuXHJcblx0XHR0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW5WYWwsIG1heFZhbCApO1xyXG5cdFx0dGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluVmFsLCBtYXhWYWwgKTtcclxuXHRcdHRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pblZhbCwgbWF4VmFsICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xyXG5cclxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBjbGFtcCggbGVuZ3RoLCBtaW4sIG1heCApICk7XHJcblxyXG5cdH1cclxuXHJcblx0Zmxvb3IoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcclxuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNlaWwoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XHJcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdW5kKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XHJcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3VuZFRvWmVybygpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xyXG5cdFx0dGhpcy56ID0gTWF0aC50cnVuYyggdGhpcy56ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bmVnYXRlKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xyXG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XHJcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkb3QoIHYgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XHJcblxyXG5cdGxlbmd0aFNxKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XHJcblxyXG5cdH1cclxuXHJcblx0bGVuZ3RoKCkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xyXG5cclxuXHR9XHJcblxyXG5cdG1hbmhhdHRhbkxlbmd0aCgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xyXG5cclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldExlbmd0aCggbGVuZ3RoICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcclxuXHJcblx0fVxyXG5cclxuXHRsZXJwKCB2LCBhbHBoYSApIHtcclxuXHJcblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xyXG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcclxuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xyXG5cdFx0dGhpcy55ID0gdjEueSArICggdjIueSAtIHYxLnkgKSAqIGFscGhhO1xyXG5cdFx0dGhpcy56ID0gdjEueiArICggdjIueiAtIHYxLnogKSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNyb3NzKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNyb3NzVmVjdG9ycyggYSwgYiApIHtcclxuXHJcblx0XHRjb25zdCBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xyXG5cdFx0Y29uc3QgYnggPSBiLngsIGJ5ID0gYi55LCBieiA9IGIuejtcclxuXHJcblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcclxuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xyXG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cHJvamVjdE9uVmVjdG9yKCB2ICkge1xyXG5cclxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdi5sZW5ndGhTcSgpO1xyXG5cclxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAgKTtcclxuXHJcblx0XHRjb25zdCBzY2FsYXIgPSB2LmRvdCggdGhpcyApIC8gZGVub21pbmF0b3I7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdiApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRwcm9qZWN0T25QbGFuZSggcGxhbmVOb3JtYWwgKSB7XHJcblxyXG5cdFx0X3ZlY3Rvci5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3RvciApO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlZmxlY3QoIG5vcm1hbCApIHtcclxuXHJcblx0XHQvLyByZWZsZWN0IGluY2lkZW50IHZlY3RvciBvZmYgcGxhbmUgb3J0aG9nb25hbCB0byBub3JtYWxcclxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdWIoIF92ZWN0b3IuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFuZ2xlVG8oIHYgKSB7XHJcblxyXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xyXG5cclxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gTWF0aC5QSSAvIDI7XHJcblxyXG5cdFx0Y29uc3QgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gZGVub21pbmF0b3I7XHJcblxyXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hY29zKCBjbGFtcCggdGhldGEsIC0gMSwgMSApICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzdGFuY2VUbyggdiApIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcclxuXHJcblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xyXG5cclxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHo7XHJcblxyXG5cdH1cclxuXHJcblx0bWFuaGF0dGFuRGlzdGFuY2VUbyggdiApIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApICsgTWF0aC5hYnMoIHRoaXMueiAtIHYueiApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21TcGhlcmljYWwoIHMgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVNwaGVyaWNhbENvb3Jkcyggcy5yYWRpdXMsIHMucGhpLCBzLnRoZXRhICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkcyggcmFkaXVzLCBwaGksIHRoZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IHNpblBoaVJhZGl1cyA9IE1hdGguc2luKCBwaGkgKSAqIHJhZGl1cztcclxuXHJcblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcclxuXHRcdHRoaXMueSA9IE1hdGguY29zKCBwaGkgKSAqIHJhZGl1cztcclxuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21DeWxpbmRyaWNhbCggYyApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMoIGMucmFkaXVzLCBjLnRoZXRhLCBjLnkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMoIHJhZGl1cywgdGhldGEsIHkgKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gcmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICkge1xyXG5cclxuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRoaXMueCA9IGVbIDEyIF07XHJcblx0XHR0aGlzLnkgPSBlWyAxMyBdO1xyXG5cdFx0dGhpcy56ID0gZVsgMTQgXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tTWF0cml4U2NhbGUoIG0gKSB7XHJcblxyXG5cdFx0Y29uc3Qgc3ggPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcclxuXHRcdGNvbnN0IHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XHJcblx0XHRjb25zdCBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xyXG5cclxuXHRcdHRoaXMueCA9IHN4O1xyXG5cdFx0dGhpcy55ID0gc3k7XHJcblx0XHR0aGlzLnogPSBzejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tTWF0cml4Q29sdW1uKCBtLCBpbmRleCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21NYXRyaXgzQ29sdW1uKCBtLCBpbmRleCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogMyApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21FdWxlciggZSApIHtcclxuXHJcblx0XHR0aGlzLnggPSBlLl94O1xyXG5cdFx0dGhpcy55ID0gZS5feTtcclxuXHRcdHRoaXMueiA9IGUuX3o7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUNvbG9yKCBjICkge1xyXG5cclxuXHRcdHRoaXMueCA9IGMucjtcclxuXHRcdHRoaXMueSA9IGMuZztcclxuXHRcdHRoaXMueiA9IGMuYjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRlcXVhbHMoIHYgKSB7XHJcblxyXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcclxuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XHJcblx0XHR0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XHJcblxyXG5cdFx0cmV0dXJuIGFycmF5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XHJcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcclxuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJhbmRvbSgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yYW5kb20oKTtcclxuXHRcdHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cmFuZG9tRGlyZWN0aW9uKCkge1xyXG5cclxuXHRcdC8vIGh0dHBzOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NwaGVyZVBvaW50UGlja2luZy5odG1sXHJcblxyXG5cdFx0Y29uc3QgdGhldGEgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XHJcblx0XHRjb25zdCB1ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xyXG5cdFx0Y29uc3QgYyA9IE1hdGguc3FydCggMSAtIHUgKiB1ICk7XHJcblxyXG5cdFx0dGhpcy54ID0gYyAqIE1hdGguY29zKCB0aGV0YSApO1xyXG5cdFx0dGhpcy55ID0gdTtcclxuXHRcdHRoaXMueiA9IGMgKiBNYXRoLnNpbiggdGhldGEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcclxuXHJcblx0XHR5aWVsZCB0aGlzLng7XHJcblx0XHR5aWVsZCB0aGlzLnk7XHJcblx0XHR5aWVsZCB0aGlzLno7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9xdWF0ZXJuaW9uID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxuZXhwb3J0IHsgVmVjdG9yMyB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbmNsYXNzIEJveDMge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWluID0gbmV3IFZlY3RvcjMoICsgSW5maW5pdHksICsgSW5maW5pdHksICsgSW5maW5pdHkgKSwgbWF4ID0gbmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSApIHtcclxuXHJcblx0XHR0aGlzLmlzQm94MyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5taW4gPSBtaW47XHJcblx0XHR0aGlzLm1heCA9IG1heDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIG1pbiwgbWF4ICkge1xyXG5cclxuXHRcdHRoaXMubWluLmNvcHkoIG1pbiApO1xyXG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUFycmF5KCBhcnJheSApIHtcclxuXHJcblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yLmZyb21BcnJheSggYXJyYXksIGkgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XHJcblxyXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVBvaW50cyggcG9pbnRzICkge1xyXG5cclxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcclxuXHJcblx0XHRjb25zdCBoYWxmU2l6ZSA9IF92ZWN0b3IuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcclxuXHJcblx0XHR0aGlzLm1pbi5jb3B5KCBjZW50ZXIgKS5zdWIoIGhhbGZTaXplICk7XHJcblx0XHR0aGlzLm1heC5jb3B5KCBjZW50ZXIgKS5hZGQoIGhhbGZTaXplICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7XHJcblxyXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5leHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIGJveCApIHtcclxuXHJcblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XHJcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZUVtcHR5KCkge1xyXG5cclxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7XHJcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGlzRW1wdHkoKSB7XHJcblxyXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcclxuXHJcblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKSB8fCAoIHRoaXMubWF4LnogPCB0aGlzLm1pbi56ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRTaXplKCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xyXG5cclxuXHR9XHJcblxyXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xyXG5cclxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcclxuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRCeVZlY3RvciggdmVjdG9yICkge1xyXG5cclxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XHJcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGV4cGFuZEJ5U2NhbGFyKCBzY2FsYXIgKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xyXG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZXMgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggb2YgYW4gb2JqZWN0IChpbmNsdWRpbmcgaXRzIGNoaWxkcmVuKSxcclxuXHRcdC8vIGFjY291bnRpbmcgZm9yIGJvdGggdGhlIG9iamVjdCdzLCBhbmQgY2hpbGRyZW4ncywgd29ybGQgdHJhbnNmb3Jtc1xyXG5cclxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKCBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcclxuXHJcblx0XHRcdC8vIHByZWNpc2UgQUFCQiBjb21wdXRhdGlvbiBiYXNlZCBvbiB2ZXJ0ZXggZGF0YSByZXF1aXJlcyBhdCBsZWFzdCBhIHBvc2l0aW9uIGF0dHJpYnV0ZS5cclxuXHRcdFx0Ly8gaW5zdGFuY2luZyBpc24ndCBzdXBwb3J0ZWQgc28gZmFyIGFuZCB1c2VzIHRoZSBub3JtYWwgKGNvbnNlcnZhdGl2ZSkgY29kZSBwYXRoLlxyXG5cclxuXHRcdFx0aWYgKCBwcmVjaXNlID09PSB0cnVlICYmIHBvc2l0aW9uQXR0cmlidXRlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmlzTWVzaCA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdG9iamVjdC5nZXRWZXJ0ZXhQb3NpdGlvbiggaSwgX3ZlY3RvciApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdF92ZWN0b3IuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcclxuXHRcdFx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggX3ZlY3RvciApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ0JveCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIG9iamVjdC1sZXZlbCBib3VuZGluZyBib3hcclxuXHJcblx0XHRcdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdG9iamVjdC5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0X2JveC5jb3B5KCBvYmplY3QuYm91bmRpbmdCb3ggKTtcclxuXHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZ2VvbWV0cnktbGV2ZWwgYm91bmRpbmcgYm94XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRfYm94LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0X2JveC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdFx0XHR0aGlzLnVuaW9uKCBfYm94ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmV4cGFuZEJ5T2JqZWN0KCBjaGlsZHJlblsgaSBdLCBwcmVjaXNlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xyXG5cclxuXHRcdHJldHVybiBwb2ludC54ID49IHRoaXMubWluLnggJiYgcG9pbnQueCA8PSB0aGlzLm1heC54ICYmXHJcblx0XHRcdHBvaW50LnkgPj0gdGhpcy5taW4ueSAmJiBwb2ludC55IDw9IHRoaXMubWF4LnkgJiZcclxuXHRcdFx0cG9pbnQueiA+PSB0aGlzLm1pbi56ICYmIHBvaW50LnogPD0gdGhpcy5tYXguejtcclxuXHJcblx0fVxyXG5cclxuXHRjb250YWluc0JveCggYm94ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxyXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxyXG5cdFx0XHR0aGlzLm1pbi56IDw9IGJveC5taW4ueiAmJiBib3gubWF4LnogPD0gdGhpcy5tYXguejtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcclxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXHJcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcclxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxyXG5cdFx0XHQoIHBvaW50LnogLSB0aGlzLm1pbi56ICkgLyAoIHRoaXMubWF4LnogLSB0aGlzLm1pbi56IClcclxuXHRcdCk7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xyXG5cclxuXHRcdC8vIHVzaW5nIDYgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zLlxyXG5cdFx0cmV0dXJuIGJveC5tYXgueCA+PSB0aGlzLm1pbi54ICYmIGJveC5taW4ueCA8PSB0aGlzLm1heC54ICYmXHJcblx0XHRcdGJveC5tYXgueSA+PSB0aGlzLm1pbi55ICYmIGJveC5taW4ueSA8PSB0aGlzLm1heC55ICYmXHJcblx0XHRcdGJveC5tYXgueiA+PSB0aGlzLm1pbi56ICYmIGJveC5taW4ueiA8PSB0aGlzLm1heC56O1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcclxuXHJcblx0XHQvLyBGaW5kIHRoZSBwb2ludCBvbiB0aGUgQUFCQiBjbG9zZXN0IHRvIHRoZSBzcGhlcmUgY2VudGVyLlxyXG5cdFx0dGhpcy5jbGFtcFBvaW50KCBzcGhlcmUuY2VudGVyLCBfdmVjdG9yICk7XHJcblxyXG5cdFx0Ly8gSWYgdGhhdCBwb2ludCBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgdGhlIEFBQkIgYW5kIHNwaGVyZSBpbnRlcnNlY3QuXHJcblx0XHRyZXR1cm4gX3ZlY3Rvci5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xyXG5cclxuXHRcdC8vIFdlIGNvbXB1dGUgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZG90IHByb2R1Y3QgdmFsdWVzLiBJZiB0aG9zZSB2YWx1ZXNcclxuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxyXG5cclxuXHRcdGxldCBtaW4sIG1heDtcclxuXHJcblx0XHRpZiAoIHBsYW5lLm5vcm1hbC54ID4gMCApIHtcclxuXHJcblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcclxuXHRcdFx0bWF4ID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1heC54O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRtaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XHJcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueSA+IDAgKSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHBsYW5lLm5vcm1hbC56ID4gMCApIHtcclxuXHJcblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XHJcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7XHJcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAoIG1pbiA8PSAtIHBsYW5lLmNvbnN0YW50ICYmIG1heCA+PSAtIHBsYW5lLmNvbnN0YW50ICk7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0c1RyaWFuZ2xlKCB0cmlhbmdsZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb21wdXRlIGJveCBjZW50ZXIgYW5kIGV4dGVudHNcclxuXHRcdHRoaXMuZ2V0Q2VudGVyKCBfY2VudGVyICk7XHJcblx0XHRfZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgX2NlbnRlciApO1xyXG5cclxuXHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxyXG5cdFx0X3YwLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmEsIF9jZW50ZXIgKTtcclxuXHRcdF92MS5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBfY2VudGVyICk7XHJcblx0XHRfdjIuc3ViVmVjdG9ycyggdHJpYW5nbGUuYywgX2NlbnRlciApO1xyXG5cclxuXHRcdC8vIGNvbXB1dGUgZWRnZSB2ZWN0b3JzIGZvciB0cmlhbmdsZVxyXG5cdFx0X2YwLnN1YlZlY3RvcnMoIF92MSwgX3YwICk7XHJcblx0XHRfZjEuc3ViVmVjdG9ycyggX3YyLCBfdjEgKTtcclxuXHRcdF9mMi5zdWJWZWN0b3JzKCBfdjAsIF92MiApO1xyXG5cclxuXHRcdC8vIHRlc3QgYWdhaW5zdCBheGVzIHRoYXQgYXJlIGdpdmVuIGJ5IGNyb3NzIHByb2R1Y3QgY29tYmluYXRpb25zIG9mIHRoZSBlZGdlcyBvZiB0aGUgdHJpYW5nbGUgYW5kIHRoZSBlZGdlcyBvZiB0aGUgYWFiYlxyXG5cdFx0Ly8gbWFrZSBhbiBheGlzIHRlc3Rpbmcgb2YgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgYWFiYiBhZ2FpbnN0IGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlID0gOSBheGlzIG9mIHNlcGFyYXRpb25cclxuXHRcdC8vIGF4aXNfaWogPSB1X2kgeCBmX2ogKHUwLCB1MSwgdTIgPSBmYWNlIG5vcm1hbHMgb2YgYWFiYiA9IHgseSx6IGF4ZXMgdmVjdG9ycyBzaW5jZSBhYWJiIGlzIGF4aXMgYWxpZ25lZClcclxuXHRcdGxldCBheGVzID0gW1xyXG5cdFx0XHQwLCAtIF9mMC56LCBfZjAueSwgMCwgLSBfZjEueiwgX2YxLnksIDAsIC0gX2YyLnosIF9mMi55LFxyXG5cdFx0XHRfZjAueiwgMCwgLSBfZjAueCwgX2YxLnosIDAsIC0gX2YxLngsIF9mMi56LCAwLCAtIF9mMi54LFxyXG5cdFx0XHQtIF9mMC55LCBfZjAueCwgMCwgLSBfZjEueSwgX2YxLngsIDAsIC0gX2YyLnksIF9mMi54LCAwXHJcblx0XHRdO1xyXG5cdFx0aWYgKCAhIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCwgX3YxLCBfdjIsIF9leHRlbnRzICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYlxyXG5cdFx0YXhlcyA9IFsgMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSBdO1xyXG5cdFx0aWYgKCAhIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCwgX3YxLCBfdjIsIF9leHRlbnRzICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlXHJcblx0XHQvLyB1c2UgYWxyZWFkeSBleGlzdGluZyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMgaGVyZVxyXG5cdFx0X3RyaWFuZ2xlTm9ybWFsLmNyb3NzVmVjdG9ycyggX2YwLCBfZjEgKTtcclxuXHRcdGF4ZXMgPSBbIF90cmlhbmdsZU5vcm1hbC54LCBfdHJpYW5nbGVOb3JtYWwueSwgX3RyaWFuZ2xlTm9ybWFsLnogXTtcclxuXHJcblx0XHRyZXR1cm4gc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEsIF92MiwgX2V4dGVudHMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jbGFtcFBvaW50KCBwb2ludCwgX3ZlY3RvciApLmRpc3RhbmNlVG8oIHBvaW50ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xyXG5cclxuXHRcdFx0dGFyZ2V0Lm1ha2VFbXB0eSgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xyXG5cclxuXHRcdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggX3ZlY3RvciApLmxlbmd0aCgpICogMC41O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdCggYm94ICkge1xyXG5cclxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xyXG5cdFx0dGhpcy5tYXgubWluKCBib3gubWF4ICk7XHJcblxyXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxyXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHRoaXMubWFrZUVtcHR5KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dW5pb24oIGJveCApIHtcclxuXHJcblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcclxuXHRcdHRoaXMubWF4Lm1heCggYm94Lm1heCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xyXG5cclxuXHRcdC8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LlxyXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHJldHVybiB0aGlzO1xyXG5cclxuXHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XHJcblx0XHRfcG9pbnRzWyAwIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAwXHJcblx0XHRfcG9pbnRzWyAxIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAxXHJcblx0XHRfcG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXHJcblx0XHRfcG9pbnRzWyAzIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDExXHJcblx0XHRfcG9pbnRzWyA0IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAwXHJcblx0XHRfcG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXHJcblx0XHRfcG9pbnRzWyA2IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTEwXHJcblx0XHRfcG9pbnRzWyA3IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTExXHJcblxyXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKCBfcG9pbnRzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcclxuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCBib3ggKSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5jb25zdCBfcG9pbnRzID0gW1xyXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcclxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXHJcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxyXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcclxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXHJcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxyXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcclxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKClcclxuXTtcclxuXHJcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfYm94ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xyXG5cclxuLy8gdHJpYW5nbGUgY2VudGVyZWQgdmVydGljZXNcclxuXHJcbmNvbnN0IF92MCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG4vLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcclxuXHJcbmNvbnN0IF9mMCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX2YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfZjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfY2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfZXh0ZW50cyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3RyaWFuZ2xlTm9ybWFsID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdGVzdEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5mdW5jdGlvbiBzYXRGb3JBeGVzKCBheGVzLCB2MCwgdjEsIHYyLCBleHRlbnRzICkge1xyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDAsIGogPSBheGVzLmxlbmd0aCAtIDM7IGkgPD0gajsgaSArPSAzICkge1xyXG5cclxuXHRcdF90ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcclxuXHRcdC8vIHByb2plY3QgdGhlIGFhYmIgb250byB0aGUgc2VwYXJhdGluZyBheGlzXHJcblx0XHRjb25zdCByID0gZXh0ZW50cy54ICogTWF0aC5hYnMoIF90ZXN0QXhpcy54ICkgKyBleHRlbnRzLnkgKiBNYXRoLmFicyggX3Rlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCBfdGVzdEF4aXMueiApO1xyXG5cdFx0Ly8gcHJvamVjdCBhbGwgMyB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGUgb250byB0aGUgc2VwYXJhdGluZyBheGlzXHJcblx0XHRjb25zdCBwMCA9IHYwLmRvdCggX3Rlc3RBeGlzICk7XHJcblx0XHRjb25zdCBwMSA9IHYxLmRvdCggX3Rlc3RBeGlzICk7XHJcblx0XHRjb25zdCBwMiA9IHYyLmRvdCggX3Rlc3RBeGlzICk7XHJcblx0XHQvLyBhY3R1YWwgdGVzdCwgYmFzaWNhbGx5IHNlZSBpZiBlaXRoZXIgb2YgdGhlIG1vc3QgZXh0cmVtZSBvZiB0aGUgdHJpYW5nbGUgcG9pbnRzIGludGVyc2VjdHMgclxyXG5cdFx0aWYgKCBNYXRoLm1heCggLSBNYXRoLm1heCggcDAsIHAxLCBwMiApLCBNYXRoLm1pbiggcDAsIHAxLCBwMiApICkgPiByICkge1xyXG5cclxuXHRcdFx0Ly8gcG9pbnRzIG9mIHRoZSBwcm9qZWN0ZWQgdHJpYW5nbGUgYXJlIG91dHNpZGUgdGhlIHByb2plY3RlZCBoYWxmLWxlbmd0aCBvZiB0aGUgYWFiYlxyXG5cdFx0XHQvLyB0aGUgYXhpcyBpcyBzZXBhcmF0aW5nIGFuZCB3ZSBjYW4gZXhpdFxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQm94MyB9O1xyXG4iLCJpbXBvcnQgeyBCb3gzIH0gZnJvbSAnLi9Cb3gzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XHJcblxyXG5jb25zdCBfYm94ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xyXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92MiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIFNwaGVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpLCByYWRpdXMgPSAtIDEgKSB7XHJcblxyXG5cdFx0dGhpcy5pc1NwaGVyZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5jZW50ZXIgPSBjZW50ZXI7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIGNlbnRlciwgcmFkaXVzICkge1xyXG5cclxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIGNlbnRlciApO1xyXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVBvaW50cyggcG9pbnRzLCBvcHRpb25hbENlbnRlciApIHtcclxuXHJcblx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcclxuXHJcblx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjZW50ZXIuY29weSggb3B0aW9uYWxDZW50ZXIgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X2JveC5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKS5nZXRDZW50ZXIoIGNlbnRlciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgbWF4UmFkaXVzU3EgPSAwO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNwaGVyZSApIHtcclxuXHJcblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzcGhlcmUuY2VudGVyICk7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aXNFbXB0eSgpIHtcclxuXHJcblx0XHRyZXR1cm4gKCB0aGlzLnJhZGl1cyA8IDAgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlRW1wdHkoKSB7XHJcblxyXG5cdFx0dGhpcy5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XHJcblx0XHR0aGlzLnJhZGl1cyA9IC0gMTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XHJcblxyXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xyXG5cclxuXHRcdGNvbnN0IHJhZGl1c1N1bSA9IHRoaXMucmFkaXVzICsgc3BoZXJlLnJhZGl1cztcclxuXHJcblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHJhZGl1c1N1bSAqIHJhZGl1c1N1bSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcclxuXHJcblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFicyggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLmNlbnRlciApICkgPD0gdGhpcy5yYWRpdXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcclxuXHJcblx0XHRjb25zdCBkZWx0YUxlbmd0aFNxID0gdGhpcy5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XHJcblxyXG5cdFx0dGFyZ2V0LmNvcHkoIHBvaW50ICk7XHJcblxyXG5cdFx0aWYgKCBkZWx0YUxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XHJcblxyXG5cdFx0XHR0YXJnZXQuc3ViKCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHR0YXJnZXQubXVsdGlwbHlTY2FsYXIoIHRoaXMucmFkaXVzICkuYWRkKCB0aGlzLmNlbnRlciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94KCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcclxuXHJcblx0XHRcdC8vIEVtcHR5IHNwaGVyZSBwcm9kdWNlcyBlbXB0eSBib3VuZGluZyBib3hcclxuXHRcdFx0dGFyZ2V0Lm1ha2VFbXB0eSgpO1xyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0YXJnZXQuc2V0KCB0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIgKTtcclxuXHRcdHRhcmdldC5leHBhbmRCeVNjYWxhciggdGhpcy5yYWRpdXMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xyXG5cclxuXHRcdHRoaXMuY2VudGVyLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzICogbWF0cml4LmdldE1heFNjYWxlT25BeGlzKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5jZW50ZXIuYWRkKCBvZmZzZXQgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xyXG5cclxuXHRcdFx0dGhpcy5jZW50ZXIuY29weSggcG9pbnQgKTtcclxuXHJcblx0XHRcdHRoaXMucmFkaXVzID0gMDtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfdjEuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMuY2VudGVyICk7XHJcblxyXG5cdFx0Y29uc3QgbGVuZ3RoU3EgPSBfdjEubGVuZ3RoU3EoKTtcclxuXHJcblx0XHRpZiAoIGxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIG1pbmltYWwgc3BoZXJlXHJcblxyXG5cdFx0XHRjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoIGxlbmd0aFNxICk7XHJcblxyXG5cdFx0XHRjb25zdCBkZWx0YSA9ICggbGVuZ3RoIC0gdGhpcy5yYWRpdXMgKSAqIDAuNTtcclxuXHJcblx0XHRcdHRoaXMuY2VudGVyLmFkZFNjYWxlZFZlY3RvciggX3YxLCBkZWx0YSAvIGxlbmd0aCApO1xyXG5cclxuXHRcdFx0dGhpcy5yYWRpdXMgKz0gZGVsdGE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHVuaW9uKCBzcGhlcmUgKSB7XHJcblxyXG5cdFx0aWYgKCBzcGhlcmUuaXNFbXB0eSgpICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvcHkoIHNwaGVyZSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5jZW50ZXIuZXF1YWxzKCBzcGhlcmUuY2VudGVyICkgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHQgdGhpcy5yYWRpdXMgPSBNYXRoLm1heCggdGhpcy5yYWRpdXMsIHNwaGVyZS5yYWRpdXMgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X3YyLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMuY2VudGVyICkuc2V0TGVuZ3RoKCBzcGhlcmUucmFkaXVzICk7XHJcblxyXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MS5jb3B5KCBzcGhlcmUuY2VudGVyICkuYWRkKCBfdjIgKSApO1xyXG5cclxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdjEuY29weSggc3BoZXJlLmNlbnRlciApLnN1YiggX3YyICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCBzcGhlcmUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFNwaGVyZSB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9zZWdDZW50ZXIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9zZWdEaXIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9kaWZmID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY29uc3QgX2VkZ2UxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfZWRnZTIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9ub3JtYWwgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jbGFzcyBSYXkge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggb3JpZ2luID0gbmV3IFZlY3RvcjMoKSwgZGlyZWN0aW9uID0gbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApICkge1xyXG5cclxuXHRcdHRoaXMub3JpZ2luID0gb3JpZ2luO1xyXG5cdFx0dGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcblxyXG5cdH1cclxuXHJcblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5jb3B5KCBvcmlnaW4gKTtcclxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIGRpcmVjdGlvbiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHJheSApIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5jb3B5KCByYXkub3JpZ2luICk7XHJcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXQoIHQsIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLmRpcmVjdGlvbiwgdCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvb2tBdCggdiApIHtcclxuXHJcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCB2ICkuc3ViKCB0aGlzLm9yaWdpbiApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlY2FzdCggdCApIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5jb3B5KCB0aGlzLmF0KCB0LCBfdmVjdG9yICkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKTtcclxuXHJcblx0XHRjb25zdCBkaXJlY3Rpb25EaXN0YW5jZSA9IHRhcmdldC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XHJcblxyXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuZGlyZWN0aW9uLCBkaXJlY3Rpb25EaXN0YW5jZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRjb25zdCBkaXJlY3Rpb25EaXN0YW5jZSA9IF92ZWN0b3Iuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICkuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xyXG5cclxuXHRcdC8vIHBvaW50IGJlaGluZCB0aGUgcmF5XHJcblxyXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW4uZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF92ZWN0b3IuY29weSggdGhpcy5vcmlnaW4gKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuZGlyZWN0aW9uLCBkaXJlY3Rpb25EaXN0YW5jZSApO1xyXG5cclxuXHRcdHJldHVybiBfdmVjdG9yLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlU3FUb1NlZ21lbnQoIHYwLCB2MSwgb3B0aW9uYWxQb2ludE9uUmF5LCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xyXG5cclxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Btam9uaWFrL0dlb21ldHJpY1Rvb2xzL2Jsb2IvbWFzdGVyL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlRGlzdFJheVNlZ21lbnQuaFxyXG5cdFx0Ly8gSXQgcmV0dXJucyB0aGUgbWluIGRpc3RhbmNlIGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIHNlZ21lbnRcclxuXHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXHJcblx0XHQvLyBJdCBjYW4gYWxzbyBzZXQgdHdvIG9wdGlvbmFsIHRhcmdldHMgOlxyXG5cdFx0Ly8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgcmF5XHJcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XHJcblxyXG5cdFx0X3NlZ0NlbnRlci5jb3B5KCB2MCApLmFkZCggdjEgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XHJcblx0XHRfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0X2RpZmYuY29weSggdGhpcy5vcmlnaW4gKS5zdWIoIF9zZWdDZW50ZXIgKTtcclxuXHJcblx0XHRjb25zdCBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKCB2MSApICogMC41O1xyXG5cdFx0Y29uc3QgYTAxID0gLSB0aGlzLmRpcmVjdGlvbi5kb3QoIF9zZWdEaXIgKTtcclxuXHRcdGNvbnN0IGIwID0gX2RpZmYuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xyXG5cdFx0Y29uc3QgYjEgPSAtIF9kaWZmLmRvdCggX3NlZ0RpciApO1xyXG5cdFx0Y29uc3QgYyA9IF9kaWZmLmxlbmd0aFNxKCk7XHJcblx0XHRjb25zdCBkZXQgPSBNYXRoLmFicyggMSAtIGEwMSAqIGEwMSApO1xyXG5cdFx0bGV0IHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xyXG5cclxuXHRcdGlmICggZGV0ID4gMCApIHtcclxuXHJcblx0XHRcdC8vIFRoZSByYXkgYW5kIHNlZ21lbnQgYXJlIG5vdCBwYXJhbGxlbC5cclxuXHJcblx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcclxuXHRcdFx0czEgPSBhMDEgKiBiMCAtIGIxO1xyXG5cdFx0XHRleHREZXQgPSBzZWdFeHRlbnQgKiBkZXQ7XHJcblxyXG5cdFx0XHRpZiAoIHMwID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBzMSA8PSBleHREZXQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMFxyXG5cdFx0XHRcdFx0XHQvLyBNaW5pbXVtIGF0IGludGVyaW9yIHBvaW50cyBvZiByYXkgYW5kIHNlZ21lbnQuXHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBpbnZEZXQgPSAxIC8gZGV0O1xyXG5cdFx0XHRcdFx0XHRzMCAqPSBpbnZEZXQ7XHJcblx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcclxuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMwICogKCBzMCArIGEwMSAqIHMxICsgMiAqIGIwICkgKyBzMSAqICggYTAxICogczAgKyBzMSArIDIgKiBiMSApICsgYztcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDFcclxuXHJcblx0XHRcdFx0XHRcdHMxID0gc2VnRXh0ZW50O1xyXG5cdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XHJcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlZ2lvbiA1XHJcblxyXG5cdFx0XHRcdFx0czEgPSAtIHNlZ0V4dGVudDtcclxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcclxuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGlmICggczEgPD0gLSBleHREZXQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDRcclxuXHJcblx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggLSBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XHJcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDNcclxuXHJcblx0XHRcdFx0XHRzMCA9IDA7XHJcblx0XHRcdFx0XHRzMSA9IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlZ2lvbiAyXHJcblxyXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcclxuXHRcdFx0XHRcdHMxID0gKCBzMCA+IDAgKSA/IHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFJheSBhbmQgc2VnbWVudCBhcmUgcGFyYWxsZWwuXHJcblxyXG5cdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XHJcblx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcclxuXHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7XHJcblxyXG5cdFx0XHRvcHRpb25hbFBvaW50T25SYXkuY29weSggdGhpcy5vcmlnaW4gKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuZGlyZWN0aW9uLCBzMCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XHJcblxyXG5cdFx0XHRvcHRpb25hbFBvaW50T25TZWdtZW50LmNvcHkoIF9zZWdDZW50ZXIgKS5hZGRTY2FsZWRWZWN0b3IoIF9zZWdEaXIsIHMxICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBzcXJEaXN0O1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdFNwaGVyZSggc3BoZXJlLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0X3ZlY3Rvci5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApO1xyXG5cdFx0Y29uc3QgdGNhID0gX3ZlY3Rvci5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XHJcblx0XHRjb25zdCBkMiA9IF92ZWN0b3IuZG90KCBfdmVjdG9yICkgLSB0Y2EgKiB0Y2E7XHJcblx0XHRjb25zdCByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0aWYgKCBkMiA+IHJhZGl1czIgKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRjb25zdCB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xyXG5cclxuXHRcdC8vIHQwID0gZmlyc3QgaW50ZXJzZWN0IHBvaW50IC0gZW50cmFuY2Ugb24gZnJvbnQgb2Ygc3BoZXJlXHJcblx0XHRjb25zdCB0MCA9IHRjYSAtIHRoYztcclxuXHJcblx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXHJcblx0XHRjb25zdCB0MSA9IHRjYSArIHRoYztcclxuXHJcblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MSBpcyBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxyXG5cdFx0aWYgKCB0MSA8IDAgKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MCBpcyBiZWhpbmQgdGhlIHJheTpcclxuXHRcdC8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSxcclxuXHRcdC8vIGluIG9yZGVyIHRvIGFsd2F5cyByZXR1cm4gYW4gaW50ZXJzZWN0IHBvaW50IHRoYXQgaXMgaW4gZnJvbnQgb2YgdGhlIHJheS5cclxuXHRcdGlmICggdDAgPCAwICkgcmV0dXJuIHRoaXMuYXQoIHQxLCB0YXJnZXQgKTtcclxuXHJcblx0XHQvLyBlbHNlIHQwIGlzIGluIGZyb250IG9mIHRoZSByYXksIHNvIHJldHVybiB0aGUgZmlyc3QgY29sbGlzaW9uIHBvaW50IHNjYWxlZCBieSB0MFxyXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApIHtcclxuXHJcblx0XHRjb25zdCBkZW5vbWluYXRvciA9IHBsYW5lLm5vcm1hbC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XHJcblxyXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcclxuXHJcblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cclxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTnVsbCBpcyBwcmVmZXJhYmxlIHRvIHVuZGVmaW5lZCBzaW5jZSB1bmRlZmluZWQgbWVhbnMuLi4uIGl0IGlzIHVuZGVmaW5lZFxyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHQgPSAtICggdGhpcy5vcmlnaW4uZG90KCBwbGFuZS5ub3JtYWwgKSArIHBsYW5lLmNvbnN0YW50ICkgLyBkZW5vbWluYXRvcjtcclxuXHJcblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxyXG5cclxuXHRcdHJldHVybiB0ID49IDAgPyB0IDogbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RQbGFuZSggcGxhbmUsIHRhcmdldCApIHtcclxuXHJcblx0XHRjb25zdCB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7XHJcblxyXG5cdFx0aWYgKCB0ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmF0KCB0LCB0YXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xyXG5cclxuXHRcdC8vIGNoZWNrIGlmIHRoZSByYXkgbGllcyBvbiB0aGUgcGxhbmUgZmlyc3RcclxuXHJcblx0XHRjb25zdCBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTtcclxuXHJcblx0XHRpZiAoIGRpc3RUb1BvaW50ID09PSAwICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcclxuXHJcblx0XHRpZiAoIGRlbm9taW5hdG9yICogZGlzdFRvUG9pbnQgPCAwICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJheSBvcmlnaW4gaXMgYmVoaW5kIHRoZSBwbGFuZSAoYW5kIGlzIHBvaW50aW5nIGJlaGluZCBpdClcclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0Qm94KCBib3gsIHRhcmdldCApIHtcclxuXHJcblx0XHRsZXQgdG1pbiwgdG1heCwgdHltaW4sIHR5bWF4LCB0em1pbiwgdHptYXg7XHJcblxyXG5cdFx0Y29uc3QgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxyXG5cdFx0XHRpbnZkaXJ5ID0gMSAvIHRoaXMuZGlyZWN0aW9uLnksXHJcblx0XHRcdGludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejtcclxuXHJcblx0XHRjb25zdCBvcmlnaW4gPSB0aGlzLm9yaWdpbjtcclxuXHJcblx0XHRpZiAoIGludmRpcnggPj0gMCApIHtcclxuXHJcblx0XHRcdHRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xyXG5cdFx0XHR0bWF4ID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dG1pbiA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XHJcblx0XHRcdHRtYXggPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGludmRpcnkgPj0gMCApIHtcclxuXHJcblx0XHRcdHR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcclxuXHRcdFx0dHltYXggPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XHJcblx0XHRcdHR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAoIHRtaW4gPiB0eW1heCApIHx8ICggdHltaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRpZiAoIHR5bWluID4gdG1pbiB8fCBpc05hTiggdG1pbiApICkgdG1pbiA9IHR5bWluO1xyXG5cclxuXHRcdGlmICggdHltYXggPCB0bWF4IHx8IGlzTmFOKCB0bWF4ICkgKSB0bWF4ID0gdHltYXg7XHJcblxyXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XHJcblxyXG5cdFx0XHR0em1pbiA9ICggYm94Lm1pbi56IC0gb3JpZ2luLnogKSAqIGludmRpcno7XHJcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dHptaW4gPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xyXG5cdFx0XHR0em1heCA9ICggYm94Lm1pbi56IC0gb3JpZ2luLnogKSAqIGludmRpcno7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0aWYgKCB0em1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0em1pbjtcclxuXHJcblx0XHRpZiAoIHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR6bWF4O1xyXG5cclxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcclxuXHJcblx0XHRpZiAoIHRtYXggPCAwICkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0Qm94KCBib3gsIF92ZWN0b3IgKSAhPT0gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RUcmlhbmdsZSggYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZSB0aGUgb2Zmc2V0IG9yaWdpbiwgZWRnZXMsIGFuZCBub3JtYWwuXHJcblxyXG5cdFx0Ly8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcG1qb25pYWsvR2VvbWV0cmljVG9vbHMvYmxvYi9tYXN0ZXIvR1RFbmdpbmUvSW5jbHVkZS9NYXRoZW1hdGljcy9HdGVJbnRyUmF5M1RyaWFuZ2xlMy5oXHJcblxyXG5cdFx0X2VkZ2UxLnN1YlZlY3RvcnMoIGIsIGEgKTtcclxuXHRcdF9lZGdlMi5zdWJWZWN0b3JzKCBjLCBhICk7XHJcblx0XHRfbm9ybWFsLmNyb3NzVmVjdG9ycyggX2VkZ2UxLCBfZWRnZTIgKTtcclxuXHJcblx0XHQvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbixcclxuXHRcdC8vIEUxID0ga0VkZ2UxLCBFMiA9IGtFZGdlMiwgTiA9IENyb3NzKEUxLEUyKSkgYnlcclxuXHRcdC8vICAgfERvdChELE4pfCpiMSA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKFEsRTIpKVxyXG5cdFx0Ly8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpXHJcblx0XHQvLyAgIHxEb3QoRCxOKXwqdCA9IC1zaWduKERvdChELE4pKSpEb3QoUSxOKVxyXG5cdFx0bGV0IERkTiA9IHRoaXMuZGlyZWN0aW9uLmRvdCggX25vcm1hbCApO1xyXG5cdFx0bGV0IHNpZ247XHJcblxyXG5cdFx0aWYgKCBEZE4gPiAwICkge1xyXG5cclxuXHRcdFx0aWYgKCBiYWNrZmFjZUN1bGxpbmcgKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0c2lnbiA9IDE7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggRGROIDwgMCApIHtcclxuXHJcblx0XHRcdHNpZ24gPSAtIDE7XHJcblx0XHRcdERkTiA9IC0gRGROO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X2RpZmYuc3ViVmVjdG9ycyggdGhpcy5vcmlnaW4sIGEgKTtcclxuXHRcdGNvbnN0IERkUXhFMiA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIF9lZGdlMi5jcm9zc1ZlY3RvcnMoIF9kaWZmLCBfZWRnZTIgKSApO1xyXG5cclxuXHRcdC8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uXHJcblx0XHRpZiAoIERkUXhFMiA8IDAgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgRGRFMXhRID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UxLmNyb3NzKCBfZGlmZiApICk7XHJcblxyXG5cdFx0Ly8gYjIgPCAwLCBubyBpbnRlcnNlY3Rpb25cclxuXHRcdGlmICggRGRFMXhRIDwgMCApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxyXG5cdFx0aWYgKCBEZFF4RTIgKyBEZEUxeFEgPiBEZE4gKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy5cclxuXHRcdGNvbnN0IFFkTiA9IC0gc2lnbiAqIF9kaWZmLmRvdCggX25vcm1hbCApO1xyXG5cclxuXHRcdC8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb25cclxuXHRcdGlmICggUWROIDwgMCApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cclxuXHRcdHJldHVybiB0aGlzLmF0KCBRZE4gLyBEZE4sIHRhcmdldCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4NCApIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoIG1hdHJpeDQgKTtcclxuXHRcdHRoaXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4NCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGVxdWFscyggcmF5ICkge1xyXG5cclxuXHRcdHJldHVybiByYXkub3JpZ2luLmVxdWFscyggdGhpcy5vcmlnaW4gKSAmJiByYXkuZGlyZWN0aW9uLmVxdWFscyggdGhpcy5kaXJlY3Rpb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFJheSB9O1xyXG4iLCJpbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0sIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbmNsYXNzIE1hdHJpeDQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICkge1xyXG5cclxuXHRcdE1hdHJpeDQucHJvdG90eXBlLmlzTWF0cml4NCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcclxuXHJcblx0XHRcdDEsIDAsIDAsIDAsXHJcblx0XHRcdDAsIDEsIDAsIDAsXHJcblx0XHRcdDAsIDAsIDEsIDAsXHJcblx0XHRcdDAsIDAsIDAsIDFcclxuXHJcblx0XHRdO1xyXG5cclxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldCggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHNldCggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcclxuXHRcdHRlWyAxIF0gPSBuMjE7IHRlWyA1IF0gPSBuMjI7IHRlWyA5IF0gPSBuMjM7IHRlWyAxMyBdID0gbjI0O1xyXG5cdFx0dGVbIDIgXSA9IG4zMTsgdGVbIDYgXSA9IG4zMjsgdGVbIDEwIF0gPSBuMzM7IHRlWyAxNCBdID0gbjM0O1xyXG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGlkZW50aXR5KCkge1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0MSwgMCwgMCwgMCxcclxuXHRcdFx0MCwgMSwgMCwgMCxcclxuXHRcdFx0MCwgMCwgMSwgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggbSApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTsgdGVbIDMgXSA9IG1lWyAzIF07XHJcblx0XHR0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTtcclxuXHRcdHRlWyA4IF0gPSBtZVsgOCBdOyB0ZVsgOSBdID0gbWVbIDkgXTsgdGVbIDEwIF0gPSBtZVsgMTAgXTsgdGVbIDExIF0gPSBtZVsgMTEgXTtcclxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07IHRlWyAxMyBdID0gbWVbIDEzIF07IHRlWyAxNCBdID0gbWVbIDE0IF07IHRlWyAxNSBdID0gbWVbIDE1IF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weVBvc2l0aW9uKCBtICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cywgbWUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07XHJcblx0XHR0ZVsgMTMgXSA9IG1lWyAxMyBdO1xyXG5cdFx0dGVbIDE0IF0gPSBtZVsgMTQgXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tTWF0cml4MyggbSApIHtcclxuXHJcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHRtZVsgMCBdLCBtZVsgMyBdLCBtZVsgNiBdLCAwLFxyXG5cdFx0XHRtZVsgMSBdLCBtZVsgNCBdLCBtZVsgNyBdLCAwLFxyXG5cdFx0XHRtZVsgMiBdLCBtZVsgNSBdLCBtZVsgOCBdLCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHRyYWN0QmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XHJcblxyXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMCApO1xyXG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApO1xyXG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1ha2VCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHRcdFx0eEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMCxcclxuXHRcdFx0eEF4aXMueSwgeUF4aXMueSwgekF4aXMueSwgMCxcclxuXHRcdFx0eEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHRyYWN0Um90YXRpb24oIG0gKSB7XHJcblxyXG5cdFx0Ly8gdGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCByZWZsZWN0aW9uIG1hdHJpY2VzXHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdGNvbnN0IHNjYWxlWCA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xyXG5cdFx0Y29uc3Qgc2NhbGVZID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XHJcblx0XHRjb25zdCBzY2FsZVogPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcclxuXHJcblx0XHR0ZVsgMCBdID0gbWVbIDAgXSAqIHNjYWxlWDtcclxuXHRcdHRlWyAxIF0gPSBtZVsgMSBdICogc2NhbGVYO1xyXG5cdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XHJcblx0XHR0ZVsgMyBdID0gMDtcclxuXHJcblx0XHR0ZVsgNCBdID0gbWVbIDQgXSAqIHNjYWxlWTtcclxuXHRcdHRlWyA1IF0gPSBtZVsgNSBdICogc2NhbGVZO1xyXG5cdFx0dGVbIDYgXSA9IG1lWyA2IF0gKiBzY2FsZVk7XHJcblx0XHR0ZVsgNyBdID0gMDtcclxuXHJcblx0XHR0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjtcclxuXHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xyXG5cdFx0dGVbIDEwIF0gPSBtZVsgMTAgXSAqIHNjYWxlWjtcclxuXHRcdHRlWyAxMSBdID0gMDtcclxuXHJcblx0XHR0ZVsgMTIgXSA9IDA7XHJcblx0XHR0ZVsgMTMgXSA9IDA7XHJcblx0XHR0ZVsgMTQgXSA9IDA7XHJcblx0XHR0ZVsgMTUgXSA9IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBldWxlciApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0Y29uc3QgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejtcclxuXHRcdGNvbnN0IGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTtcclxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcclxuXHRcdGNvbnN0IGUgPSBNYXRoLmNvcyggeiApLCBmID0gTWF0aC5zaW4oIHogKTtcclxuXHJcblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XHJcblxyXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XHJcblx0XHRcdHRlWyA0IF0gPSAtIGMgKiBmO1xyXG5cdFx0XHR0ZVsgOCBdID0gZDtcclxuXHJcblx0XHRcdHRlWyAxIF0gPSBhZiArIGJlICogZDtcclxuXHRcdFx0dGVbIDUgXSA9IGFlIC0gYmYgKiBkO1xyXG5cdFx0XHR0ZVsgOSBdID0gLSBiICogYztcclxuXHJcblx0XHRcdHRlWyAyIF0gPSBiZiAtIGFlICogZDtcclxuXHRcdFx0dGVbIDYgXSA9IGJlICsgYWYgKiBkO1xyXG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVhaJyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XHJcblxyXG5cdFx0XHR0ZVsgMCBdID0gY2UgKyBkZiAqIGI7XHJcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcclxuXHRcdFx0dGVbIDggXSA9IGEgKiBkO1xyXG5cclxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xyXG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XHJcblx0XHRcdHRlWyA5IF0gPSAtIGI7XHJcblxyXG5cdFx0XHR0ZVsgMiBdID0gY2YgKiBiIC0gZGU7XHJcblx0XHRcdHRlWyA2IF0gPSBkZiArIGNlICogYjtcclxuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pYWScgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xyXG5cclxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xyXG5cdFx0XHR0ZVsgNCBdID0gLSBhICogZjtcclxuXHRcdFx0dGVbIDggXSA9IGRlICsgY2YgKiBiO1xyXG5cclxuXHRcdFx0dGVbIDEgXSA9IGNmICsgZGUgKiBiO1xyXG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XHJcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcclxuXHJcblx0XHRcdHRlWyAyIF0gPSAtIGEgKiBkO1xyXG5cdFx0XHR0ZVsgNiBdID0gYjtcclxuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xyXG5cclxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xyXG5cdFx0XHR0ZVsgNCBdID0gYmUgKiBkIC0gYWY7XHJcblx0XHRcdHRlWyA4IF0gPSBhZSAqIGQgKyBiZjtcclxuXHJcblx0XHRcdHRlWyAxIF0gPSBjICogZjtcclxuXHRcdFx0dGVbIDUgXSA9IGJmICogZCArIGFlO1xyXG5cdFx0XHR0ZVsgOSBdID0gYWYgKiBkIC0gYmU7XHJcblxyXG5cdFx0XHR0ZVsgMiBdID0gLSBkO1xyXG5cdFx0XHR0ZVsgNiBdID0gYiAqIGM7XHJcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWlgnICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcclxuXHJcblx0XHRcdHRlWyAwIF0gPSBjICogZTtcclxuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xyXG5cdFx0XHR0ZVsgOCBdID0gYmMgKiBmICsgYWQ7XHJcblxyXG5cdFx0XHR0ZVsgMSBdID0gZjtcclxuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xyXG5cdFx0XHR0ZVsgOSBdID0gLSBiICogZTtcclxuXHJcblx0XHRcdHRlWyAyIF0gPSAtIGQgKiBlO1xyXG5cdFx0XHR0ZVsgNiBdID0gYWQgKiBmICsgYmM7XHJcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdYWlknICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcclxuXHJcblx0XHRcdHRlWyAwIF0gPSBjICogZTtcclxuXHRcdFx0dGVbIDQgXSA9IC0gZjtcclxuXHRcdFx0dGVbIDggXSA9IGQgKiBlO1xyXG5cclxuXHRcdFx0dGVbIDEgXSA9IGFjICogZiArIGJkO1xyXG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XHJcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcclxuXHJcblx0XHRcdHRlWyAyIF0gPSBiYyAqIGYgLSBhZDtcclxuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xyXG5cdFx0XHR0ZVsgMTAgXSA9IGJkICogZiArIGFjO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBib3R0b20gcm93XHJcblx0XHR0ZVsgMyBdID0gMDtcclxuXHRcdHRlWyA3IF0gPSAwO1xyXG5cdFx0dGVbIDExIF0gPSAwO1xyXG5cclxuXHRcdC8vIGxhc3QgY29sdW1uXHJcblx0XHR0ZVsgMTIgXSA9IDA7XHJcblx0XHR0ZVsgMTMgXSA9IDA7XHJcblx0XHR0ZVsgMTQgXSA9IDA7XHJcblx0XHR0ZVsgMTUgXSA9IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRsb29rQXQoIGV5ZSwgdGFyZ2V0LCB1cCApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0X3ouc3ViVmVjdG9ycyggZXllLCB0YXJnZXQgKTtcclxuXHJcblx0XHRpZiAoIF96Lmxlbmd0aFNxKCkgPT09IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cclxuXHJcblx0XHRcdF96LnogPSAxO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfei5ub3JtYWxpemUoKTtcclxuXHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XHJcblxyXG5cdFx0aWYgKCBfeC5sZW5ndGhTcSgpID09PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXHJcblxyXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB1cC56ICkgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdF96LnggKz0gMC4wMDAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0X3oueiArPSAwLjAwMDE7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfei5ub3JtYWxpemUoKTtcclxuXHRcdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X3gubm9ybWFsaXplKCk7XHJcblx0XHRfeS5jcm9zc1ZlY3RvcnMoIF96LCBfeCApO1xyXG5cclxuXHRcdHRlWyAwIF0gPSBfeC54OyB0ZVsgNCBdID0gX3kueDsgdGVbIDggXSA9IF96Lng7XHJcblx0XHR0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55O1xyXG5cdFx0dGVbIDIgXSA9IF94Lno7IHRlWyA2IF0gPSBfeS56OyB0ZVsgMTAgXSA9IF96Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bXVsdGlwbHkoIG0gKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHByZW11bHRpcGx5KCBtICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xyXG5cclxuXHRcdGNvbnN0IGFlID0gYS5lbGVtZW50cztcclxuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcclxuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xyXG5cdFx0Y29uc3QgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDYgXSwgYTMzID0gYWVbIDEwIF0sIGEzNCA9IGFlWyAxNCBdO1xyXG5cdFx0Y29uc3QgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xyXG5cclxuXHRcdGNvbnN0IGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyA0IF0sIGIxMyA9IGJlWyA4IF0sIGIxNCA9IGJlWyAxMiBdO1xyXG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDUgXSwgYjIzID0gYmVbIDkgXSwgYjI0ID0gYmVbIDEzIF07XHJcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNiBdLCBiMzMgPSBiZVsgMTAgXSwgYjM0ID0gYmVbIDE0IF07XHJcblx0XHRjb25zdCBiNDEgPSBiZVsgMyBdLCBiNDIgPSBiZVsgNyBdLCBiNDMgPSBiZVsgMTEgXSwgYjQ0ID0gYmVbIDE1IF07XHJcblxyXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcclxuXHRcdHRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XHJcblx0XHR0ZVsgOCBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzICsgYTE0ICogYjQzO1xyXG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XHJcblxyXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTtcclxuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XHJcblx0XHR0ZVsgOSBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzICsgYTI0ICogYjQzO1xyXG5cdFx0dGVbIDEzIF0gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7XHJcblxyXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcclxuXHRcdHRlWyA2IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzIgKyBhMzQgKiBiNDI7XHJcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0MztcclxuXHRcdHRlWyAxNCBdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xyXG5cclxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XHJcblx0XHR0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xyXG5cdFx0dGVbIDExIF0gPSBhNDEgKiBiMTMgKyBhNDIgKiBiMjMgKyBhNDMgKiBiMzMgKyBhNDQgKiBiNDM7XHJcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dGVbIDAgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA4IF0gKj0gczsgdGVbIDEyIF0gKj0gcztcclxuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XHJcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcclxuXHRcdHRlWyAzIF0gKj0gczsgdGVbIDcgXSAqPSBzOyB0ZVsgMTEgXSAqPSBzOyB0ZVsgMTUgXSAqPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRldGVybWluYW50KCkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRjb25zdCBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcclxuXHRcdGNvbnN0IG4yMSA9IHRlWyAxIF0sIG4yMiA9IHRlWyA1IF0sIG4yMyA9IHRlWyA5IF0sIG4yNCA9IHRlWyAxMyBdO1xyXG5cdFx0Y29uc3QgbjMxID0gdGVbIDIgXSwgbjMyID0gdGVbIDYgXSwgbjMzID0gdGVbIDEwIF0sIG4zNCA9IHRlWyAxNCBdO1xyXG5cdFx0Y29uc3QgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xyXG5cclxuXHRcdC8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50XHJcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRuNDEgKiAoXHJcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcclxuXHRcdFx0XHQgLSBuMTMgKiBuMjQgKiBuMzJcclxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcclxuXHRcdFx0XHQgKyBuMTIgKiBuMjQgKiBuMzNcclxuXHRcdFx0XHQgKyBuMTMgKiBuMjIgKiBuMzRcclxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcclxuXHRcdFx0KSArXHJcblx0XHRcdG40MiAqIChcclxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxyXG5cdFx0XHRcdCAtIG4xMSAqIG4yNCAqIG4zM1xyXG5cdFx0XHRcdCArIG4xNCAqIG4yMSAqIG4zM1xyXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxyXG5cdFx0XHRcdCArIG4xMyAqIG4yNCAqIG4zMVxyXG5cdFx0XHRcdCAtIG4xNCAqIG4yMyAqIG4zMVxyXG5cdFx0XHQpICtcclxuXHRcdFx0bjQzICogKFxyXG5cdFx0XHRcdCsgbjExICogbjI0ICogbjMyXHJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XHJcblx0XHRcdFx0IC0gbjE0ICogbjIxICogbjMyXHJcblx0XHRcdFx0ICsgbjEyICogbjIxICogbjM0XHJcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXHJcblx0XHRcdFx0IC0gbjEyICogbjI0ICogbjMxXHJcblx0XHRcdCkgK1xyXG5cdFx0XHRuNDQgKiAoXHJcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcclxuXHRcdFx0XHQgLSBuMTEgKiBuMjMgKiBuMzJcclxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcclxuXHRcdFx0XHQgKyBuMTMgKiBuMjEgKiBuMzJcclxuXHRcdFx0XHQgLSBuMTIgKiBuMjEgKiBuMzNcclxuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcclxuXHRcdFx0KVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNwb3NlKCkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHRcdGxldCB0bXA7XHJcblxyXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XHJcblx0XHR0bXAgPSB0ZVsgMiBdOyB0ZVsgMiBdID0gdGVbIDggXTsgdGVbIDggXSA9IHRtcDtcclxuXHRcdHRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wO1xyXG5cclxuXHRcdHRtcCA9IHRlWyAzIF07IHRlWyAzIF0gPSB0ZVsgMTIgXTsgdGVbIDEyIF0gPSB0bXA7XHJcblx0XHR0bXAgPSB0ZVsgNyBdOyB0ZVsgNyBdID0gdGVbIDEzIF07IHRlWyAxMyBdID0gdG1wO1xyXG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFBvc2l0aW9uKCB4LCB5LCB6ICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xyXG5cclxuXHRcdFx0dGVbIDEyIF0gPSB4Lng7XHJcblx0XHRcdHRlWyAxMyBdID0geC55O1xyXG5cdFx0XHR0ZVsgMTQgXSA9IHguejtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGVbIDEyIF0gPSB4O1xyXG5cdFx0XHR0ZVsgMTMgXSA9IHk7XHJcblx0XHRcdHRlWyAxNCBdID0gejtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aW52ZXJ0KCkge1xyXG5cclxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxyXG5cclxuXHRcdFx0bjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSwgbjQxID0gdGVbIDMgXSxcclxuXHRcdFx0bjEyID0gdGVbIDQgXSwgbjIyID0gdGVbIDUgXSwgbjMyID0gdGVbIDYgXSwgbjQyID0gdGVbIDcgXSxcclxuXHRcdFx0bjEzID0gdGVbIDggXSwgbjIzID0gdGVbIDkgXSwgbjMzID0gdGVbIDEwIF0sIG40MyA9IHRlWyAxMSBdLFxyXG5cdFx0XHRuMTQgPSB0ZVsgMTIgXSwgbjI0ID0gdGVbIDEzIF0sIG4zNCA9IHRlWyAxNCBdLCBuNDQgPSB0ZVsgMTUgXSxcclxuXHJcblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcclxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxyXG5cdFx0XHR0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsXHJcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcclxuXHJcblx0XHRjb25zdCBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XHJcblxyXG5cdFx0aWYgKCBkZXQgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgKTtcclxuXHJcblx0XHRjb25zdCBkZXRJbnYgPSAxIC8gZGV0O1xyXG5cclxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMSBdID0gKCBuMjQgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzEgKiBuNDMgKyBuMjEgKiBuMzQgKiBuNDMgKyBuMjMgKiBuMzEgKiBuNDQgLSBuMjEgKiBuMzMgKiBuNDQgKSAqIGRldEludjtcclxuXHRcdHRlWyAyIF0gPSAoIG4yMiAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMiAqIG40MSArIG4yNCAqIG4zMSAqIG40MiAtIG4yMSAqIG4zNCAqIG40MiAtIG4yMiAqIG4zMSAqIG40NCArIG4yMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xyXG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XHJcblxyXG5cdFx0dGVbIDQgXSA9IHQxMiAqIGRldEludjtcclxuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xyXG5cdFx0dGVbIDYgXSA9ICggbjE0ICogbjMyICogbjQxIC0gbjEyICogbjM0ICogbjQxIC0gbjE0ICogbjMxICogbjQyICsgbjExICogbjM0ICogbjQyICsgbjEyICogbjMxICogbjQ0IC0gbjExICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XHJcblx0XHR0ZVsgNyBdID0gKCBuMTIgKiBuMzMgKiBuNDEgLSBuMTMgKiBuMzIgKiBuNDEgKyBuMTMgKiBuMzEgKiBuNDIgLSBuMTEgKiBuMzMgKiBuNDIgLSBuMTIgKiBuMzEgKiBuNDMgKyBuMTEgKiBuMzIgKiBuNDMgKSAqIGRldEludjtcclxuXHJcblx0XHR0ZVsgOCBdID0gdDEzICogZGV0SW52O1xyXG5cdFx0dGVbIDkgXSA9ICggbjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0ICkgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMTEgXSA9ICggbjEzICogbjIyICogbjQxIC0gbjEyICogbjIzICogbjQxIC0gbjEzICogbjIxICogbjQyICsgbjExICogbjIzICogbjQyICsgbjEyICogbjIxICogbjQzIC0gbjExICogbjIyICogbjQzICkgKiBkZXRJbnY7XHJcblxyXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMTMgXSA9ICggbjEzICogbjI0ICogbjMxIC0gbjE0ICogbjIzICogbjMxICsgbjE0ICogbjIxICogbjMzIC0gbjExICogbjI0ICogbjMzIC0gbjEzICogbjIxICogbjM0ICsgbjExICogbjIzICogbjM0ICkgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMTQgXSA9ICggbjE0ICogbjIyICogbjMxIC0gbjEyICogbjI0ICogbjMxIC0gbjE0ICogbjIxICogbjMyICsgbjExICogbjI0ICogbjMyICsgbjEyICogbjIxICogbjM0IC0gbjExICogbjIyICogbjM0ICkgKiBkZXRJbnY7XHJcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2NhbGUoIHYgKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0Y29uc3QgeCA9IHYueCwgeSA9IHYueSwgeiA9IHYuejtcclxuXHJcblx0XHR0ZVsgMCBdICo9IHg7IHRlWyA0IF0gKj0geTsgdGVbIDggXSAqPSB6O1xyXG5cdFx0dGVbIDEgXSAqPSB4OyB0ZVsgNSBdICo9IHk7IHRlWyA5IF0gKj0gejtcclxuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xyXG5cdFx0dGVbIDMgXSAqPSB4OyB0ZVsgNyBdICo9IHk7IHRlWyAxMSBdICo9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0TWF4U2NhbGVPbkF4aXMoKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdGNvbnN0IHNjYWxlWFNxID0gdGVbIDAgXSAqIHRlWyAwIF0gKyB0ZVsgMSBdICogdGVbIDEgXSArIHRlWyAyIF0gKiB0ZVsgMiBdO1xyXG5cdFx0Y29uc3Qgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XHJcblx0XHRjb25zdCBzY2FsZVpTcSA9IHRlWyA4IF0gKiB0ZVsgOCBdICsgdGVbIDkgXSAqIHRlWyA5IF0gKyB0ZVsgMTAgXSAqIHRlWyAxMCBdO1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgubWF4KCBzY2FsZVhTcSwgc2NhbGVZU3EsIHNjYWxlWlNxICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKSB7XHJcblxyXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0XHQxLCAwLCAwLCB4LngsXHJcblx0XHRcdFx0MCwgMSwgMCwgeC55LFxyXG5cdFx0XHRcdDAsIDAsIDEsIHgueixcclxuXHRcdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldChcclxuXHJcblx0XHRcdFx0MSwgMCwgMCwgeCxcclxuXHRcdFx0XHQwLCAxLCAwLCB5LFxyXG5cdFx0XHRcdDAsIDAsIDEsIHosXHJcblx0XHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdFx0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZVJvdGF0aW9uWCggdGhldGEgKSB7XHJcblxyXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCAwLCAwLCAwLFxyXG5cdFx0XHQwLCBjLCAtIHMsIDAsXHJcblx0XHRcdDAsIHMsIGMsIDAsXHJcblx0XHRcdDAsIDAsIDAsIDFcclxuXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1ha2VSb3RhdGlvblkoIHRoZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0IGMsIDAsIHMsIDAsXHJcblx0XHRcdCAwLCAxLCAwLCAwLFxyXG5cdFx0XHQtIHMsIDAsIGMsIDAsXHJcblx0XHRcdCAwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlUm90YXRpb25aKCB0aGV0YSApIHtcclxuXHJcblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHJcblx0XHRcdGMsIC0gcywgMCwgMCxcclxuXHRcdFx0cywgYywgMCwgMCxcclxuXHRcdFx0MCwgMCwgMSwgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bWFrZVJvdGF0aW9uQXhpcyggYXhpcywgYW5nbGUgKSB7XHJcblxyXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXHJcblxyXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApO1xyXG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApO1xyXG5cdFx0Y29uc3QgdCA9IDEgLSBjO1xyXG5cdFx0Y29uc3QgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcclxuXHRcdGNvbnN0IHR4ID0gdCAqIHgsIHR5ID0gdCAqIHk7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXHJcblx0XHRcdHR4ICogeSArIHMgKiB6LCB0eSAqIHkgKyBjLCB0eSAqIHogLSBzICogeCwgMCxcclxuXHRcdFx0dHggKiB6IC0gcyAqIHksIHR5ICogeiArIHMgKiB4LCB0ICogeiAqIHogKyBjLCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlU2NhbGUoIHgsIHksIHogKSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHR4LCAwLCAwLCAwLFxyXG5cdFx0XHQwLCB5LCAwLCAwLFxyXG5cdFx0XHQwLCAwLCB6LCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtYWtlU2hlYXIoIHh5LCB4eiwgeXgsIHl6LCB6eCwgenkgKSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCB5eCwgengsIDAsXHJcblx0XHRcdHh5LCAxLCB6eSwgMCxcclxuXHRcdFx0eHosIHl6LCAxLCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdGNvbnN0IHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xyXG5cdFx0Y29uc3QgeDIgPSB4ICsgeCxcdHkyID0geSArIHksIHoyID0geiArIHo7XHJcblx0XHRjb25zdCB4eCA9IHggKiB4MiwgeHkgPSB4ICogeTIsIHh6ID0geCAqIHoyO1xyXG5cdFx0Y29uc3QgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6MjtcclxuXHRcdGNvbnN0IHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7XHJcblxyXG5cdFx0Y29uc3Qgc3ggPSBzY2FsZS54LCBzeSA9IHNjYWxlLnksIHN6ID0gc2NhbGUuejtcclxuXHJcblx0XHR0ZVsgMCBdID0gKCAxIC0gKCB5eSArIHp6ICkgKSAqIHN4O1xyXG5cdFx0dGVbIDEgXSA9ICggeHkgKyB3eiApICogc3g7XHJcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcclxuXHRcdHRlWyAzIF0gPSAwO1xyXG5cclxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xyXG5cdFx0dGVbIDUgXSA9ICggMSAtICggeHggKyB6eiApICkgKiBzeTtcclxuXHRcdHRlWyA2IF0gPSAoIHl6ICsgd3ggKSAqIHN5O1xyXG5cdFx0dGVbIDcgXSA9IDA7XHJcblxyXG5cdFx0dGVbIDggXSA9ICggeHogKyB3eSApICogc3o7XHJcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcclxuXHRcdHRlWyAxMCBdID0gKCAxIC0gKCB4eCArIHl5ICkgKSAqIHN6O1xyXG5cdFx0dGVbIDExIF0gPSAwO1xyXG5cclxuXHRcdHRlWyAxMiBdID0gcG9zaXRpb24ueDtcclxuXHRcdHRlWyAxMyBdID0gcG9zaXRpb24ueTtcclxuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcclxuXHRcdHRlWyAxNSBdID0gMTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0bGV0IHN4ID0gX3YxLnNldCggdGVbIDAgXSwgdGVbIDEgXSwgdGVbIDIgXSApLmxlbmd0aCgpO1xyXG5cdFx0Y29uc3Qgc3kgPSBfdjEuc2V0KCB0ZVsgNCBdLCB0ZVsgNSBdLCB0ZVsgNiBdICkubGVuZ3RoKCk7XHJcblx0XHRjb25zdCBzeiA9IF92MS5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XHJcblxyXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcclxuXHRcdGNvbnN0IGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTtcclxuXHRcdGlmICggZGV0IDwgMCApIHN4ID0gLSBzeDtcclxuXHJcblx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XHJcblx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XHJcblx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XHJcblxyXG5cdFx0Ly8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcclxuXHRcdF9tMS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdFx0Y29uc3QgaW52U1ggPSAxIC8gc3g7XHJcblx0XHRjb25zdCBpbnZTWSA9IDEgLyBzeTtcclxuXHRcdGNvbnN0IGludlNaID0gMSAvIHN6O1xyXG5cclxuXHRcdF9tMS5lbGVtZW50c1sgMCBdICo9IGludlNYO1xyXG5cdFx0X20xLmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XHJcblx0XHRfbTEuZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcclxuXHJcblx0XHRfbTEuZWxlbWVudHNbIDQgXSAqPSBpbnZTWTtcclxuXHRcdF9tMS5lbGVtZW50c1sgNSBdICo9IGludlNZO1xyXG5cdFx0X20xLmVsZW1lbnRzWyA2IF0gKj0gaW52U1k7XHJcblxyXG5cdFx0X20xLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7XHJcblx0XHRfbTEuZWxlbWVudHNbIDkgXSAqPSBpbnZTWjtcclxuXHRcdF9tMS5lbGVtZW50c1sgMTAgXSAqPSBpbnZTWjtcclxuXHJcblx0XHRxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xICk7XHJcblxyXG5cdFx0c2NhbGUueCA9IHN4O1xyXG5cdFx0c2NhbGUueSA9IHN5O1xyXG5cdFx0c2NhbGUueiA9IHN6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIsIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0Y29uc3QgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcclxuXHRcdGNvbnN0IHkgPSAyICogbmVhciAvICggdG9wIC0gYm90dG9tICk7XHJcblxyXG5cdFx0Y29uc3QgYSA9ICggcmlnaHQgKyBsZWZ0ICkgLyAoIHJpZ2h0IC0gbGVmdCApO1xyXG5cdFx0Y29uc3QgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xyXG5cclxuXHRcdGxldCBjLCBkO1xyXG5cclxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xyXG5cclxuXHRcdFx0YyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcclxuXHRcdFx0ZCA9ICggLSAyICogZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcclxuXHJcblx0XHRcdGMgPSAtIGZhciAvICggZmFyIC0gbmVhciApO1xyXG5cdFx0XHRkID0gKCAtIGZhciAqIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5NYXRyaXg0Lm1ha2VQZXJzcGVjdGl2ZSgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0ZVsgMCBdID0geDtcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IGE7IFx0dGVbIDEyIF0gPSAwO1xyXG5cdFx0dGVbIDEgXSA9IDA7XHR0ZVsgNSBdID0geTtcdHRlWyA5IF0gPSBiOyBcdHRlWyAxMyBdID0gMDtcclxuXHRcdHRlWyAyIF0gPSAwO1x0dGVbIDYgXSA9IDA7XHR0ZVsgMTAgXSA9IGM7IFx0dGVbIDE0IF0gPSBkO1xyXG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gLSAxO1x0dGVbIDE1IF0gPSAwO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyLCBjb29yZGluYXRlU3lzdGVtID0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHRcdGNvbnN0IHcgPSAxLjAgLyAoIHJpZ2h0IC0gbGVmdCApO1xyXG5cdFx0Y29uc3QgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XHJcblx0XHRjb25zdCBwID0gMS4wIC8gKCBmYXIgLSBuZWFyICk7XHJcblxyXG5cdFx0Y29uc3QgeCA9ICggcmlnaHQgKyBsZWZ0ICkgKiB3O1xyXG5cdFx0Y29uc3QgeSA9ICggdG9wICsgYm90dG9tICkgKiBoO1xyXG5cclxuXHRcdGxldCB6LCB6SW52O1xyXG5cclxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xyXG5cclxuXHRcdFx0eiA9ICggZmFyICsgbmVhciApICogcDtcclxuXHRcdFx0ekludiA9IC0gMiAqIHA7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcclxuXHJcblx0XHRcdHogPSBuZWFyICogcDtcclxuXHRcdFx0ekludiA9IC0gMSAqIHA7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk1hdHJpeDQubWFrZU9ydGhvZ3JhcGhpYygpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0ZVsgMCBdID0gMiAqIHc7XHR0ZVsgNCBdID0gMDtcdFx0dGVbIDggXSA9IDA7IFx0XHR0ZVsgMTIgXSA9IC0geDtcclxuXHRcdHRlWyAxIF0gPSAwOyBcdFx0dGVbIDUgXSA9IDIgKiBoO1x0dGVbIDkgXSA9IDA7IFx0XHR0ZVsgMTMgXSA9IC0geTtcclxuXHRcdHRlWyAyIF0gPSAwOyBcdFx0dGVbIDYgXSA9IDA7XHRcdHRlWyAxMCBdID0gekludjtcdHRlWyAxNCBdID0gLSB6O1xyXG5cdFx0dGVbIDMgXSA9IDA7IFx0XHR0ZVsgNyBdID0gMDtcdFx0dGVbIDExIF0gPSAwO1x0XHR0ZVsgMTUgXSA9IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCBtYXRyaXggKSB7XHJcblxyXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0Y29uc3QgbWUgPSBtYXRyaXguZWxlbWVudHM7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xyXG5cclxuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xyXG5cclxuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDkgXSA9IHRlWyA5IF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDExIF0gPSB0ZVsgMTEgXTtcclxuXHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEzIF0gPSB0ZVsgMTMgXTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAxNCBdID0gdGVbIDE0IF07XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF96ZXJvID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xyXG5jb25zdCBfb25lID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xyXG5jb25zdCBfeCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3kgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF96ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuZXhwb3J0IHsgTWF0cml4NCB9O1xyXG4iLCJpbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi9RdWF0ZXJuaW9uLmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4vTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xyXG5cclxuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG5jbGFzcyBFdWxlciB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCBvcmRlciA9IEV1bGVyLkRFRkFVTFRfT1JERVIgKSB7XHJcblxyXG5cdFx0dGhpcy5pc0V1bGVyID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLl94ID0geDtcclxuXHRcdHRoaXMuX3kgPSB5O1xyXG5cdFx0dGhpcy5feiA9IHo7XHJcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB4KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl94O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCB4KCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLl94ID0gdmFsdWU7XHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHkoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3k7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHkoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMuX3kgPSB2YWx1ZTtcclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgeigpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fejtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgeiggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5feiA9IHZhbHVlO1xyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBvcmRlcigpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fb3JkZXI7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IG9yZGVyKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLl9vcmRlciA9IHZhbHVlO1xyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggeCwgeSwgeiwgb3JkZXIgPSB0aGlzLl9vcmRlciApIHtcclxuXHJcblx0XHR0aGlzLl94ID0geDtcclxuXHRcdHRoaXMuX3kgPSB5O1xyXG5cdFx0dGhpcy5feiA9IHo7XHJcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggZXVsZXIgKSB7XHJcblxyXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xyXG5cdFx0dGhpcy5feSA9IGV1bGVyLl95O1xyXG5cdFx0dGhpcy5feiA9IGV1bGVyLl96O1xyXG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSwgb3JkZXIgPSB0aGlzLl9vcmRlciwgdXBkYXRlID0gdHJ1ZSApIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxyXG5cclxuXHRcdGNvbnN0IHRlID0gbS5lbGVtZW50cztcclxuXHRcdGNvbnN0IG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07XHJcblx0XHRjb25zdCBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdO1xyXG5cdFx0Y29uc3QgbTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07XHJcblxyXG5cdFx0c3dpdGNoICggb3JkZXIgKSB7XHJcblxyXG5cdFx0XHRjYXNlICdYWVonOlxyXG5cclxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCBjbGFtcCggbTEzLCAtIDEsIDEgKSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xyXG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMTEgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcclxuXHRcdFx0XHRcdHRoaXMuX3ogPSAwO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnWVhaJzpcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXNpbiggLSBjbGFtcCggbTIzLCAtIDEsIDEgKSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMjMgKSA8IDAuOTk5OTk5OSApIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcclxuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0yMiApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XHJcblx0XHRcdFx0XHR0aGlzLl96ID0gMDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1pYWSc6XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIGNsYW1wKCBtMzIsIC0gMSwgMSApICk7XHJcblxyXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0zMiApIDwgMC45OTk5OTk5ICkge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTMzICk7XHJcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX3kgPSAwO1xyXG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdaWVgnOlxyXG5cclxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMzEsIC0gMSwgMSApICk7XHJcblxyXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0zMyApO1xyXG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5feCA9IDA7XHJcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnWVpYJzpcclxuXHJcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXNpbiggY2xhbXAoIG0yMSwgLSAxLCAxICkgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTIxICkgPCAwLjk5OTk5OTkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMjIgKTtcclxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5feCA9IDA7XHJcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1haWSc6XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0xMiwgLSAxLCAxICkgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTEyICkgPCAwLjk5OTk5OTkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XHJcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMTEgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xyXG5cdFx0XHRcdFx0dGhpcy5feSA9IDA7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5FdWxlcjogLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xyXG5cclxuXHRcdGlmICggdXBkYXRlID09PSB0cnVlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21RdWF0ZXJuaW9uKCBxLCBvcmRlciwgdXBkYXRlICkge1xyXG5cclxuXHRcdF9tYXRyaXgubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tYXRyaXgsIG9yZGVyLCB1cGRhdGUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tVmVjdG9yMyggdiwgb3JkZXIgPSB0aGlzLl9vcmRlciApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyICk7XHJcblxyXG5cdH1cclxuXHJcblx0cmVvcmRlciggbmV3T3JkZXIgKSB7XHJcblxyXG5cdFx0Ly8gV0FSTklORzogdGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uIC1iaG91c3RvblxyXG5cclxuXHRcdF9xdWF0ZXJuaW9uLnNldEZyb21FdWxlciggdGhpcyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiwgbmV3T3JkZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRlcXVhbHMoIGV1bGVyICkge1xyXG5cclxuXHRcdHJldHVybiAoIGV1bGVyLl94ID09PSB0aGlzLl94ICkgJiYgKCBldWxlci5feSA9PT0gdGhpcy5feSApICYmICggZXVsZXIuX3ogPT09IHRoaXMuX3ogKSAmJiAoIGV1bGVyLl9vcmRlciA9PT0gdGhpcy5fb3JkZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5ICkge1xyXG5cclxuXHRcdHRoaXMuX3ggPSBhcnJheVsgMCBdO1xyXG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XHJcblx0XHR0aGlzLl96ID0gYXJyYXlbIDIgXTtcclxuXHRcdGlmICggYXJyYXlbIDMgXSAhPT0gdW5kZWZpbmVkICkgdGhpcy5fb3JkZXIgPSBhcnJheVsgMyBdO1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XHJcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRfb25DaGFuZ2VDYWxsYmFjaygpIHt9XHJcblxyXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xyXG5cclxuXHRcdHlpZWxkIHRoaXMuX3g7XHJcblx0XHR5aWVsZCB0aGlzLl95O1xyXG5cdFx0eWllbGQgdGhpcy5fejtcclxuXHRcdHlpZWxkIHRoaXMuX29yZGVyO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5FdWxlci5ERUZBVUxUX09SREVSID0gJ1hZWic7XHJcblxyXG5leHBvcnQgeyBFdWxlciB9O1xyXG4iLCJjbGFzcyBMYXllcnMge1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgPSAxIHwgMDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIGNoYW5uZWwgKSB7XHJcblxyXG5cdFx0dGhpcy5tYXNrID0gKCAxIDw8IGNoYW5uZWwgfCAwICkgPj4+IDA7XHJcblxyXG5cdH1cclxuXHJcblx0ZW5hYmxlKCBjaGFubmVsICkge1xyXG5cclxuXHRcdHRoaXMubWFzayB8PSAxIDw8IGNoYW5uZWwgfCAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGVuYWJsZUFsbCgpIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgPSAweGZmZmZmZmZmIHwgMDtcclxuXHJcblx0fVxyXG5cclxuXHR0b2dnbGUoIGNoYW5uZWwgKSB7XHJcblxyXG5cdFx0dGhpcy5tYXNrIF49IDEgPDwgY2hhbm5lbCB8IDA7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzYWJsZSggY2hhbm5lbCApIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgJj0gfiAoIDEgPDwgY2hhbm5lbCB8IDAgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNhYmxlQWxsKCkge1xyXG5cclxuXHRcdHRoaXMubWFzayA9IDA7XHJcblxyXG5cdH1cclxuXHJcblx0dGVzdCggbGF5ZXJzICkge1xyXG5cclxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XHJcblxyXG5cdH1cclxuXHJcblx0aXNFbmFibGVkKCBjaGFubmVsICkge1xyXG5cclxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmICggMSA8PCBjaGFubmVsIHwgMCApICkgIT09IDA7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBMYXllcnMgfTtcclxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL21hdGgvUXVhdGVybmlvbi5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi9FdmVudERpc3BhdGNoZXIuanMnO1xyXG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xyXG5pbXBvcnQgeyBMYXllcnMgfSBmcm9tICcuL0xheWVycy5qcyc7XHJcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuLi9tYXRoL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcblxyXG5sZXQgX29iamVjdDNESWQgPSAwO1xyXG5cclxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfcTEgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX3RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IF9wb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3NjYWxlID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfcXVhdGVybmlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcclxuXHJcbmNvbnN0IF94QXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcclxuY29uc3QgX3lBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xyXG5jb25zdCBfekF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XHJcblxyXG5jb25zdCBfYWRkZWRFdmVudCA9IHsgdHlwZTogJ2FkZGVkJyB9O1xyXG5jb25zdCBfcmVtb3ZlZEV2ZW50ID0geyB0eXBlOiAncmVtb3ZlZCcgfTtcclxuXHJcbmNvbnN0IF9jaGlsZGFkZGVkRXZlbnQgPSB7IHR5cGU6ICdjaGlsZGFkZGVkJywgY2hpbGQ6IG51bGwgfTtcclxuY29uc3QgX2NoaWxkcmVtb3ZlZEV2ZW50ID0geyB0eXBlOiAnY2hpbGRyZW1vdmVkJywgY2hpbGQ6IG51bGwgfTtcclxuXHJcbmNsYXNzIE9iamVjdDNEIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzT2JqZWN0M0QgPSB0cnVlO1xyXG5cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX29iamVjdDNESWQgKysgfSApO1xyXG5cclxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9ICcnO1xyXG5cdFx0dGhpcy50eXBlID0gJ09iamVjdDNEJztcclxuXHJcblx0XHR0aGlzLnBhcmVudCA9IG51bGw7XHJcblx0XHR0aGlzLmNoaWxkcmVuID0gW107XHJcblxyXG5cdFx0dGhpcy51cCA9IE9iamVjdDNELkRFRkFVTFRfVVAuY2xvbmUoKTtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCByb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xyXG5cdFx0Y29uc3QgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblx0XHRjb25zdCBzY2FsZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gb25Sb3RhdGlvbkNoYW5nZSgpIHtcclxuXHJcblx0XHRcdHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCByb3RhdGlvbiwgZmFsc2UgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkge1xyXG5cclxuXHRcdFx0cm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24sIHVuZGVmaW5lZCwgZmFsc2UgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cm90YXRpb24uX29uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XHJcblx0XHRxdWF0ZXJuaW9uLl9vbkNoYW5nZSggb25RdWF0ZXJuaW9uQ2hhbmdlICk7XHJcblxyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMsIHtcclxuXHRcdFx0cG9zaXRpb246IHtcclxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0XHR2YWx1ZTogcG9zaXRpb25cclxuXHRcdFx0fSxcclxuXHRcdFx0cm90YXRpb246IHtcclxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0XHR2YWx1ZTogcm90YXRpb25cclxuXHRcdFx0fSxcclxuXHRcdFx0cXVhdGVybmlvbjoge1xyXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdHZhbHVlOiBxdWF0ZXJuaW9uXHJcblx0XHRcdH0sXHJcblx0XHRcdHNjYWxlOiB7XHJcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdFx0dmFsdWU6IHNjYWxlXHJcblx0XHRcdH0sXHJcblx0XHRcdG1vZGVsVmlld01hdHJpeDoge1xyXG5cdFx0XHRcdHZhbHVlOiBuZXcgTWF0cml4NCgpXHJcblx0XHRcdH0sXHJcblx0XHRcdG5vcm1hbE1hdHJpeDoge1xyXG5cdFx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5ERUZBVUxUX01BVFJJWF9BVVRPX1VQREFURTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9IE9iamVjdDNELkRFRkFVTFRfTUFUUklYX1dPUkxEX0FVVE9fVVBEQVRFOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxyXG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XHJcblx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxuXHRcdHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xyXG5cclxuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcclxuXHJcblx0fVxyXG5cclxuXHRvbkJlZm9yZVNoYWRvdyggLyogcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCAqLyApIHt9XHJcblxyXG5cdG9uQWZ0ZXJTaGFkb3coIC8qIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fVxyXG5cclxuXHRvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fVxyXG5cclxuXHRvbkFmdGVyUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCAqLyApIHt9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeC5wcmVtdWx0aXBseSggbWF0cml4ICk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXguZGVjb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBxICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFJvdGF0aW9uRnJvbUV1bGVyKCBldWxlciApIHtcclxuXHJcblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFJvdGF0aW9uRnJvbU1hdHJpeCggbSApIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgcSBpcyBub3JtYWxpemVkXHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTtcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVPbkF4aXMoIGF4aXMsIGFuZ2xlICkge1xyXG5cclxuXHRcdC8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiBvYmplY3Qgc3BhY2VcclxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLm11bHRpcGx5KCBfcTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XHJcblxyXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXHJcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxyXG5cdFx0Ly8gbWV0aG9kIGFzc3VtZXMgbm8gcm90YXRlZCBwYXJlbnRcclxuXHJcblx0XHRfcTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcclxuXHJcblx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdGF0ZVgoIGFuZ2xlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3hBeGlzLCBhbmdsZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdGF0ZVkoIGFuZ2xlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3lBeGlzLCBhbmdsZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdGF0ZVooIGFuZ2xlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3pBeGlzLCBhbmdsZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSB7XHJcblxyXG5cdFx0Ly8gdHJhbnNsYXRlIG9iamVjdCBieSBkaXN0YW5jZSBhbG9uZyBheGlzIGluIG9iamVjdCBzcGFjZVxyXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcclxuXHJcblx0XHRfdjEuY29weSggYXhpcyApLmFwcGx5UXVhdGVybmlvbiggdGhpcy5xdWF0ZXJuaW9uICk7XHJcblxyXG5cdFx0dGhpcy5wb3NpdGlvbi5hZGQoIF92MS5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zbGF0ZVgoIGRpc3RhbmNlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3hBeGlzLCBkaXN0YW5jZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zbGF0ZVkoIGRpc3RhbmNlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3lBeGlzLCBkaXN0YW5jZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3pBeGlzLCBkaXN0YW5jZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvY2FsVG9Xb3JsZCggdmVjdG9yICkge1xyXG5cclxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XHJcblxyXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTtcclxuXHJcblx0fVxyXG5cclxuXHR3b3JsZFRvTG9jYWwoIHZlY3RvciApIHtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBfbTEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpICk7XHJcblxyXG5cdH1cclxuXHJcblx0bG9va0F0KCB4LCB5LCB6ICkge1xyXG5cclxuXHRcdC8vIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpXHJcblxyXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcclxuXHJcblx0XHRcdF90YXJnZXQuY29weSggeCApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfdGFyZ2V0LnNldCggeCwgeSwgeiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdF9wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0ICkge1xyXG5cclxuXHRcdFx0X20xLmxvb2tBdCggX3Bvc2l0aW9uLCBfdGFyZ2V0LCB0aGlzLnVwICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdF9tMS5sb29rQXQoIF90YXJnZXQsIF9wb3NpdGlvbiwgdGhpcy51cCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEgKTtcclxuXHJcblx0XHRpZiAoIHBhcmVudCApIHtcclxuXHJcblx0XHRcdF9tMS5leHRyYWN0Um90YXRpb24oIHBhcmVudC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0XHRfcTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEgKTtcclxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEuaW52ZXJ0KCkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCBvYmplY3QgKSB7XHJcblxyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuYWRkKCBhcmd1bWVudHNbIGkgXSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb2JqZWN0ID09PSB0aGlzICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhblxcJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuJywgb2JqZWN0ICk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApIHtcclxuXHJcblx0XHRcdG9iamVjdC5yZW1vdmVGcm9tUGFyZW50KCk7XHJcblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xyXG5cdFx0XHR0aGlzLmNoaWxkcmVuLnB1c2goIG9iamVjdCApO1xyXG5cclxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9hZGRlZEV2ZW50ICk7XHJcblxyXG5cdFx0XHRfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gb2JqZWN0O1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGlsZGFkZGVkRXZlbnQgKTtcclxuXHRcdFx0X2NoaWxkYWRkZWRFdmVudC5jaGlsZCA9IG51bGw7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuT2JqZWN0M0QuJywgb2JqZWN0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlbW92ZSggb2JqZWN0ICkge1xyXG5cclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLnJlbW92ZSggYXJndW1lbnRzWyBpIF0gKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZiggb2JqZWN0ICk7XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xyXG5cclxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XHJcblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cclxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9yZW1vdmVkRXZlbnQgKTtcclxuXHJcblx0XHRcdF9jaGlsZHJlbW92ZWRFdmVudC5jaGlsZCA9IG9iamVjdDtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRyZW1vdmVkRXZlbnQgKTtcclxuXHRcdFx0X2NoaWxkcmVtb3ZlZEV2ZW50LmNoaWxkID0gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cmVtb3ZlRnJvbVBhcmVudCgpIHtcclxuXHJcblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuXHJcblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHBhcmVudC5yZW1vdmUoIHRoaXMgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xlYXIoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKCAuLi4gdGhpcy5jaGlsZHJlbiApO1xyXG5cclxuXHR9XHJcblxyXG5cdGF0dGFjaCggb2JqZWN0ICkge1xyXG5cclxuXHRcdC8vIGFkZHMgb2JqZWN0IGFzIGEgY2hpbGQgb2YgdGhpcywgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9iamVjdCdzIHdvcmxkIHRyYW5zZm9ybVxyXG5cclxuXHRcdC8vIE5vdGU6IFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgc2NlbmUgZ3JhcGhzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBub2RlcyhzKVxyXG5cclxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XHJcblxyXG5cdFx0X20xLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcclxuXHJcblx0XHRpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRvYmplY3QucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdFx0X20xLm11bHRpcGx5KCBvYmplY3QucGFyZW50Lm1hdHJpeFdvcmxkICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdG9iamVjdC5hcHBseU1hdHJpeDQoIF9tMSApO1xyXG5cclxuXHRcdG9iamVjdC5yZW1vdmVGcm9tUGFyZW50KCk7XHJcblx0XHRvYmplY3QucGFyZW50ID0gdGhpcztcclxuXHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XHJcblxyXG5cdFx0b2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApO1xyXG5cclxuXHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfYWRkZWRFdmVudCApO1xyXG5cclxuXHRcdF9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBvYmplY3Q7XHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGlsZGFkZGVkRXZlbnQgKTtcclxuXHRcdF9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBudWxsO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldE9iamVjdEJ5SWQoIGlkICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICdpZCcsIGlkICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0T2JqZWN0QnlOYW1lKCBuYW1lICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICduYW1lJywgbmFtZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICkge1xyXG5cclxuXHRcdGlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJldHVybiB0aGlzO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdO1xyXG5cdFx0XHRjb25zdCBvYmplY3QgPSBjaGlsZC5nZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0aWYgKCBvYmplY3QgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRPYmplY3RzQnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUsIHJlc3VsdCA9IFtdICkge1xyXG5cclxuXHRcdGlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJlc3VsdC5wdXNoKCB0aGlzICk7XHJcblxyXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjaGlsZHJlblsgaSBdLmdldE9iamVjdHNCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSwgcmVzdWx0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0V29ybGRQb3NpdGlvbiggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRXb3JsZFF1YXRlcm5pb24oIHRhcmdldCApIHtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24sIHRhcmdldCwgX3NjYWxlICk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRXb3JsZFNjYWxlKCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiwgdGFyZ2V0ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRXb3JsZERpcmVjdGlvbiggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XHJcblxyXG5cdFx0Y29uc3QgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIGVbIDggXSwgZVsgOSBdLCBlWyAxMCBdICkubm9ybWFsaXplKCk7XHJcblxyXG5cdH1cclxuXHJcblx0cmF5Y2FzdCggLyogcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICovICkge31cclxuXHJcblx0dHJhdmVyc2UoIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XHJcblxyXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR0cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcclxuXHJcblx0XHRjYWxsYmFjayggdGhpcyApO1xyXG5cclxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApIHtcclxuXHJcblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuXHJcblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcclxuXHJcblx0XHRcdHBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4KCkge1xyXG5cclxuXHRcdHRoaXMubWF0cml4LmNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHRpZiAoIHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSB8fCBmb3JjZSApIHtcclxuXHJcblx0XHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtYWtlIHN1cmUgZGVzY2VuZGFudHMgYXJlIHVwZGF0ZWQgaWYgcmVxdWlyZWRcclxuXHJcblx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcclxuXHJcblx0XHRcdGNoaWxkLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVXb3JsZE1hdHJpeCggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7XHJcblxyXG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcblxyXG5cdFx0aWYgKCB1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtYWtlIHN1cmUgZGVzY2VuZGFudHMgYXJlIHVwZGF0ZWRcclxuXHJcblx0XHRpZiAoIHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgY2hpbGQgPSBjaGlsZHJlblsgaSBdO1xyXG5cclxuXHRcdFx0XHRjaGlsZC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIHRydWUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBtZXRhICkge1xyXG5cclxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxyXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XHJcblxyXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge307XHJcblxyXG5cdFx0Ly8gbWV0YSBpcyBhIGhhc2ggdXNlZCB0byBjb2xsZWN0IGdlb21ldHJpZXMsIG1hdGVyaWFscy5cclxuXHRcdC8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0XHJcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxyXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XHJcblxyXG5cdFx0XHQvLyBpbml0aWFsaXplIG1ldGEgb2JqXHJcblx0XHRcdG1ldGEgPSB7XHJcblx0XHRcdFx0Z2VvbWV0cmllczoge30sXHJcblx0XHRcdFx0bWF0ZXJpYWxzOiB7fSxcclxuXHRcdFx0XHR0ZXh0dXJlczoge30sXHJcblx0XHRcdFx0aW1hZ2VzOiB7fSxcclxuXHRcdFx0XHRzaGFwZXM6IHt9LFxyXG5cdFx0XHRcdHNrZWxldG9uczoge30sXHJcblx0XHRcdFx0YW5pbWF0aW9uczoge30sXHJcblx0XHRcdFx0bm9kZXM6IHt9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRvdXRwdXQubWV0YWRhdGEgPSB7XHJcblx0XHRcdFx0dmVyc2lvbjogNC42LFxyXG5cdFx0XHRcdHR5cGU6ICdPYmplY3QnLFxyXG5cdFx0XHRcdGdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTidcclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc3RhbmRhcmQgT2JqZWN0M0Qgc2VyaWFsaXphdGlvblxyXG5cclxuXHRcdGNvbnN0IG9iamVjdCA9IHt9O1xyXG5cclxuXHRcdG9iamVjdC51dWlkID0gdGhpcy51dWlkO1xyXG5cdFx0b2JqZWN0LnR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7XHJcblx0XHRpZiAoIHRoaXMuY2FzdFNoYWRvdyA9PT0gdHJ1ZSApIG9iamVjdC5jYXN0U2hhZG93ID0gdHJ1ZTtcclxuXHRcdGlmICggdGhpcy5yZWNlaXZlU2hhZG93ID09PSB0cnVlICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xyXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTtcclxuXHRcdGlmICggdGhpcy5mcnVzdHVtQ3VsbGVkID09PSBmYWxzZSApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZmFsc2U7XHJcblx0XHRpZiAoIHRoaXMucmVuZGVyT3JkZXIgIT09IDAgKSBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyO1xyXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBvYmplY3QudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xyXG5cclxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xyXG5cdFx0b2JqZWN0Lm1hdHJpeCA9IHRoaXMubWF0cml4LnRvQXJyYXkoKTtcclxuXHRcdG9iamVjdC51cCA9IHRoaXMudXAudG9BcnJheSgpO1xyXG5cclxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlID09PSBmYWxzZSApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNJbnN0YW5jZWRNZXNoICkge1xyXG5cclxuXHRcdFx0b2JqZWN0LnR5cGUgPSAnSW5zdGFuY2VkTWVzaCc7XHJcblx0XHRcdG9iamVjdC5jb3VudCA9IHRoaXMuY291bnQ7XHJcblx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IHRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCk7XHJcblx0XHRcdGlmICggdGhpcy5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgb2JqZWN0Lmluc3RhbmNlQ29sb3IgPSB0aGlzLmluc3RhbmNlQ29sb3IudG9KU09OKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5pc0JhdGNoZWRNZXNoICkge1xyXG5cclxuXHRcdFx0b2JqZWN0LnR5cGUgPSAnQmF0Y2hlZE1lc2gnO1xyXG5cdFx0XHRvYmplY3QucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCA9IHRoaXMucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZDtcclxuXHRcdFx0b2JqZWN0LnNvcnRPYmplY3RzID0gdGhpcy5zb3J0T2JqZWN0cztcclxuXHJcblx0XHRcdG9iamVjdC5kcmF3UmFuZ2VzID0gdGhpcy5fZHJhd1JhbmdlcztcclxuXHRcdFx0b2JqZWN0LnJlc2VydmVkUmFuZ2VzID0gdGhpcy5fcmVzZXJ2ZWRSYW5nZXM7XHJcblxyXG5cdFx0XHRvYmplY3QudmlzaWJpbGl0eSA9IHRoaXMuX3Zpc2liaWxpdHk7XHJcblx0XHRcdG9iamVjdC5hY3RpdmUgPSB0aGlzLl9hY3RpdmU7XHJcblx0XHRcdG9iamVjdC5ib3VuZHMgPSB0aGlzLl9ib3VuZHMubWFwKCBib3VuZCA9PiAoIHtcclxuXHRcdFx0XHRib3hJbml0aWFsaXplZDogYm91bmQuYm94SW5pdGlhbGl6ZWQsXHJcblx0XHRcdFx0Ym94TWluOiBib3VuZC5ib3gubWluLnRvQXJyYXkoKSxcclxuXHRcdFx0XHRib3hNYXg6IGJvdW5kLmJveC5tYXgudG9BcnJheSgpLFxyXG5cclxuXHRcdFx0XHRzcGhlcmVJbml0aWFsaXplZDogYm91bmQuc3BoZXJlSW5pdGlhbGl6ZWQsXHJcblx0XHRcdFx0c3BoZXJlUmFkaXVzOiBib3VuZC5zcGhlcmUucmFkaXVzLFxyXG5cdFx0XHRcdHNwaGVyZUNlbnRlcjogYm91bmQuc3BoZXJlLmNlbnRlci50b0FycmF5KClcclxuXHRcdFx0fSApICk7XHJcblxyXG5cdFx0XHRvYmplY3QubWF4SW5zdGFuY2VDb3VudCA9IHRoaXMuX21heEluc3RhbmNlQ291bnQ7XHJcblx0XHRcdG9iamVjdC5tYXhWZXJ0ZXhDb3VudCA9IHRoaXMuX21heFZlcnRleENvdW50O1xyXG5cdFx0XHRvYmplY3QubWF4SW5kZXhDb3VudCA9IHRoaXMuX21heEluZGV4Q291bnQ7XHJcblxyXG5cdFx0XHRvYmplY3QuZ2VvbWV0cnlJbml0aWFsaXplZCA9IHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQ7XHJcblx0XHRcdG9iamVjdC5nZW9tZXRyeUNvdW50ID0gdGhpcy5fZ2VvbWV0cnlDb3VudDtcclxuXHJcblx0XHRcdG9iamVjdC5tYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmUudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSBvYmplY3QuY29sb3JzVGV4dHVyZSA9IHRoaXMuX2NvbG9yc1RleHR1cmUudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9IHtcclxuXHRcdFx0XHRcdGNlbnRlcjogb2JqZWN0LmJvdW5kaW5nU3BoZXJlLmNlbnRlci50b0FycmF5KCksXHJcblx0XHRcdFx0XHRyYWRpdXM6IG9iamVjdC5ib3VuZGluZ1NwaGVyZS5yYWRpdXNcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRvYmplY3QuYm91bmRpbmdCb3ggPSB7XHJcblx0XHRcdFx0XHRtaW46IG9iamVjdC5ib3VuZGluZ0JveC5taW4udG9BcnJheSgpLFxyXG5cdFx0XHRcdFx0bWF4OiBvYmplY3QuYm91bmRpbmdCb3gubWF4LnRvQXJyYXkoKVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0ZnVuY3Rpb24gc2VyaWFsaXplKCBsaWJyYXJ5LCBlbGVtZW50ICkge1xyXG5cclxuXHRcdFx0aWYgKCBsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9IGVsZW1lbnQudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZWxlbWVudC51dWlkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuaXNTY2VuZSApIHtcclxuXHJcblx0XHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZC5pc0NvbG9yICkge1xyXG5cclxuXHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTigpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0aGlzLmJhY2tncm91bmQuaXNUZXh0dXJlICkge1xyXG5cclxuXHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGhpcy5lbnZpcm9ubWVudCAmJiB0aGlzLmVudmlyb25tZW50LmlzVGV4dHVyZSAmJiB0aGlzLmVudmlyb25tZW50LmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSAhPT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0b2JqZWN0LmVudmlyb25tZW50ID0gdGhpcy5lbnZpcm9ubWVudC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaXNNZXNoIHx8IHRoaXMuaXNMaW5lIHx8IHRoaXMuaXNQb2ludHMgKSB7XHJcblxyXG5cdFx0XHRvYmplY3QuZ2VvbWV0cnkgPSBzZXJpYWxpemUoIG1ldGEuZ2VvbWV0cmllcywgdGhpcy5nZW9tZXRyeSApO1xyXG5cclxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMuZ2VvbWV0cnkucGFyYW1ldGVycztcclxuXHJcblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHNoYXBlcyA9IHBhcmFtZXRlcnMuc2hhcGVzO1xyXG5cclxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5pc1NraW5uZWRNZXNoICkge1xyXG5cclxuXHRcdFx0b2JqZWN0LmJpbmRNb2RlID0gdGhpcy5iaW5kTW9kZTtcclxuXHRcdFx0b2JqZWN0LmJpbmRNYXRyaXggPSB0aGlzLmJpbmRNYXRyaXgudG9BcnJheSgpO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLnNrZWxldG9uICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5za2VsZXRvbnMsIHRoaXMuc2tlbGV0b24gKTtcclxuXHJcblx0XHRcdFx0b2JqZWN0LnNrZWxldG9uID0gdGhpcy5za2VsZXRvbi51dWlkO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdGhpcy5tYXRlcmlhbCApICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB1dWlkcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0dXVpZHMucHVzaCggc2VyaWFsaXplKCBtZXRhLm1hdGVyaWFscywgdGhpcy5tYXRlcmlhbFsgaSBdICkgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSB1dWlkcztcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRpZiAoIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdG9iamVjdC5jaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5jaGlsZHJlbi5wdXNoKCB0aGlzLmNoaWxkcmVuWyBpIF0udG9KU09OKCBtZXRhICkub2JqZWN0ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gW107XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBhbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggc2VyaWFsaXplKCBtZXRhLmFuaW1hdGlvbnMsIGFuaW1hdGlvbiApICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xyXG5cclxuXHRcdFx0Y29uc3QgZ2VvbWV0cmllcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuZ2VvbWV0cmllcyApO1xyXG5cdFx0XHRjb25zdCBtYXRlcmlhbHMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm1hdGVyaWFscyApO1xyXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcclxuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcclxuXHRcdFx0Y29uc3Qgc2hhcGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5zaGFwZXMgKTtcclxuXHRcdFx0Y29uc3Qgc2tlbGV0b25zID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5za2VsZXRvbnMgKTtcclxuXHRcdFx0Y29uc3QgYW5pbWF0aW9ucyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuYW5pbWF0aW9ucyApO1xyXG5cdFx0XHRjb25zdCBub2RlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubm9kZXMgKTtcclxuXHJcblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xyXG5cdFx0XHRpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAwICkgb3V0cHV0Lm1hdGVyaWFscyA9IG1hdGVyaWFscztcclxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgb3V0cHV0LnRleHR1cmVzID0gdGV4dHVyZXM7XHJcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xyXG5cdFx0XHRpZiAoIHNoYXBlcy5sZW5ndGggPiAwICkgb3V0cHV0LnNoYXBlcyA9IHNoYXBlcztcclxuXHRcdFx0aWYgKCBza2VsZXRvbnMubGVuZ3RoID4gMCApIG91dHB1dC5za2VsZXRvbnMgPSBza2VsZXRvbnM7XHJcblx0XHRcdGlmICggYW5pbWF0aW9ucy5sZW5ndGggPiAwICkgb3V0cHV0LmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xyXG5cdFx0XHRpZiAoIG5vZGVzLmxlbmd0aCA+IDAgKSBvdXRwdXQubm9kZXMgPSBub2RlcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0b3V0cHV0Lm9iamVjdCA9IG9iamVjdDtcclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXHJcblx0XHQvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtXHJcblx0XHQvLyBhbmQgcmV0dXJuIGFzIGFycmF5XHJcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcclxuXHJcblx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xyXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBjYWNoZVsga2V5IF07XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XHJcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCByZWN1cnNpdmUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcywgcmVjdXJzaXZlICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgPSB0cnVlICkge1xyXG5cclxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xyXG5cclxuXHRcdHRoaXMudXAuY29weSggc291cmNlLnVwICk7XHJcblxyXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBzb3VyY2UucG9zaXRpb24gKTtcclxuXHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSBzb3VyY2Uucm90YXRpb24ub3JkZXI7XHJcblx0XHR0aGlzLnF1YXRlcm5pb24uY29weSggc291cmNlLnF1YXRlcm5pb24gKTtcclxuXHRcdHRoaXMuc2NhbGUuY29weSggc291cmNlLnNjYWxlICk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xyXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCBzb3VyY2UubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZEF1dG9VcGRhdGU7XHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBzb3VyY2UubWF0cml4V29ybGROZWVkc1VwZGF0ZTtcclxuXHJcblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xyXG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XHJcblxyXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XHJcblx0XHR0aGlzLnJlY2VpdmVTaGFkb3cgPSBzb3VyY2UucmVjZWl2ZVNoYWRvdztcclxuXHJcblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcclxuXHRcdHRoaXMucmVuZGVyT3JkZXIgPSBzb3VyY2UucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0dGhpcy5hbmltYXRpb25zID0gc291cmNlLmFuaW1hdGlvbnMuc2xpY2UoKTtcclxuXHJcblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XHJcblxyXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBzb3VyY2UuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHNvdXJjZS5jaGlsZHJlblsgaSBdO1xyXG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5PYmplY3QzRC5ERUZBVUxUX1VQID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xyXG5PYmplY3QzRC5ERUZBVUxUX01BVFJJWF9BVVRPX1VQREFURSA9IHRydWU7XHJcbk9iamVjdDNELkRFRkFVTFRfTUFUUklYX1dPUkxEX0FVVE9fVVBEQVRFID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCB7IE9iamVjdDNEIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi9WZWN0b3I0LmpzJztcclxuXHJcbmNvbnN0IF92MCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92MyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IF92YWIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92YWMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92YmMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92YXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92YnAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92Y3AgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfdjQwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBfdjQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBfdjQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xyXG5cclxuY2xhc3MgVHJpYW5nbGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYSA9IG5ldyBWZWN0b3IzKCksIGIgPSBuZXcgVmVjdG9yMygpLCBjID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHR0aGlzLmEgPSBhO1xyXG5cdFx0dGhpcy5iID0gYjtcclxuXHRcdHRoaXMuYyA9IGM7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBjLCBiICk7XHJcblx0XHRfdjAuc3ViVmVjdG9ycyggYSwgYiApO1xyXG5cdFx0dGFyZ2V0LmNyb3NzKCBfdjAgKTtcclxuXHJcblx0XHRjb25zdCB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xyXG5cdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCAxIC8gTWF0aC5zcXJ0KCB0YXJnZXRMZW5ndGhTcSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gc3RhdGljL2luc3RhbmNlIG1ldGhvZCB0byBjYWxjdWxhdGUgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXNcclxuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxyXG5cdHN0YXRpYyBnZXRCYXJ5Y29vcmQoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0X3YwLnN1YlZlY3RvcnMoIGMsIGEgKTtcclxuXHRcdF92MS5zdWJWZWN0b3JzKCBiLCBhICk7XHJcblx0XHRfdjIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcclxuXHJcblx0XHRjb25zdCBkb3QwMCA9IF92MC5kb3QoIF92MCApO1xyXG5cdFx0Y29uc3QgZG90MDEgPSBfdjAuZG90KCBfdjEgKTtcclxuXHRcdGNvbnN0IGRvdDAyID0gX3YwLmRvdCggX3YyICk7XHJcblx0XHRjb25zdCBkb3QxMSA9IF92MS5kb3QoIF92MSApO1xyXG5cdFx0Y29uc3QgZG90MTIgPSBfdjEuZG90KCBfdjIgKTtcclxuXHJcblx0XHRjb25zdCBkZW5vbSA9ICggZG90MDAgKiBkb3QxMSAtIGRvdDAxICogZG90MDEgKTtcclxuXHJcblx0XHQvLyBjb2xsaW5lYXIgb3Igc2luZ3VsYXIgdHJpYW5nbGVcclxuXHRcdGlmICggZGVub20gPT09IDAgKSB7XHJcblxyXG5cdFx0XHR0YXJnZXQuc2V0KCAwLCAwLCAwICk7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcclxuXHRcdGNvbnN0IHUgPSAoIGRvdDExICogZG90MDIgLSBkb3QwMSAqIGRvdDEyICkgKiBpbnZEZW5vbTtcclxuXHRcdGNvbnN0IHYgPSAoIGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyICkgKiBpbnZEZW5vbTtcclxuXHJcblx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjb250YWluc1BvaW50KCBwb2ludCwgYSwgYiwgYyApIHtcclxuXHJcblx0XHQvLyBpZiB0aGUgdHJpYW5nbGUgaXMgZGVnZW5lcmF0ZSB0aGVuIHdlIGNhbid0IGNvbnRhaW4gYSBwb2ludFxyXG5cdFx0aWYgKCB0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIF92MyApID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gKCBfdjMueCA+PSAwICkgJiYgKCBfdjMueSA+PSAwICkgJiYgKCAoIF92My54ICsgX3YzLnkgKSA8PSAxICk7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldEludGVycG9sYXRpb24oIHBvaW50LCBwMSwgcDIsIHAzLCB2MSwgdjIsIHYzLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHAxLCBwMiwgcDMsIF92MyApID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGFyZ2V0LnggPSAwO1xyXG5cdFx0XHR0YXJnZXQueSA9IDA7XHJcblx0XHRcdGlmICggJ3onIGluIHRhcmdldCApIHRhcmdldC56ID0gMDtcclxuXHRcdFx0aWYgKCAndycgaW4gdGFyZ2V0ICkgdGFyZ2V0LncgPSAwO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGFyZ2V0LnNldFNjYWxhciggMCApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdjEsIF92My54ICk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB2MiwgX3YzLnkgKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHYzLCBfdjMueiApO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggYXR0ciwgaTEsIGkyLCBpMywgYmFyeWNvb3JkLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0X3Y0MC5zZXRTY2FsYXIoIDAgKTtcclxuXHRcdF92NDEuc2V0U2NhbGFyKCAwICk7XHJcblx0XHRfdjQyLnNldFNjYWxhciggMCApO1xyXG5cclxuXHRcdF92NDAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0ciwgaTEgKTtcclxuXHRcdF92NDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0ciwgaTIgKTtcclxuXHRcdF92NDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0ciwgaTMgKTtcclxuXHJcblx0XHR0YXJnZXQuc2V0U2NhbGFyKCAwICk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBfdjQwLCBiYXJ5Y29vcmQueCApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggX3Y0MSwgYmFyeWNvb3JkLnkgKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIF92NDIsIGJhcnljb29yZC56ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgaXNGcm9udEZhY2luZyggYSwgYiwgYywgZGlyZWN0aW9uICkge1xyXG5cclxuXHRcdF92MC5zdWJWZWN0b3JzKCBjLCBiICk7XHJcblx0XHRfdjEuc3ViVmVjdG9ycyggYSwgYiApO1xyXG5cclxuXHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xyXG5cdFx0cmV0dXJuICggX3YwLmNyb3NzKCBfdjEgKS5kb3QoIGRpcmVjdGlvbiApIDwgMCApID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggYSwgYiwgYyApIHtcclxuXHJcblx0XHR0aGlzLmEuY29weSggYSApO1xyXG5cdFx0dGhpcy5iLmNvcHkoIGIgKTtcclxuXHRcdHRoaXMuYy5jb3B5KCBjICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXMoIHBvaW50cywgaTAsIGkxLCBpMiApIHtcclxuXHJcblx0XHR0aGlzLmEuY29weSggcG9pbnRzWyBpMCBdICk7XHJcblx0XHR0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7XHJcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMoIGF0dHJpYnV0ZSwgaTAsIGkxLCBpMiApIHtcclxuXHJcblx0XHR0aGlzLmEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpMCApO1xyXG5cdFx0dGhpcy5iLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaTEgKTtcclxuXHRcdHRoaXMuYy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkyICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHRyaWFuZ2xlICkge1xyXG5cclxuXHRcdHRoaXMuYS5jb3B5KCB0cmlhbmdsZS5hICk7XHJcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xyXG5cdFx0dGhpcy5jLmNvcHkoIHRyaWFuZ2xlLmMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRBcmVhKCkge1xyXG5cclxuXHRcdF92MC5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApO1xyXG5cdFx0X3YxLnN1YlZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICk7XHJcblxyXG5cdFx0cmV0dXJuIF92MC5jcm9zcyggX3YxICkubGVuZ3RoKCkgKiAwLjU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0TWlkcG9pbnQoIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICkuYWRkKCB0aGlzLmMgKS5tdWx0aXBseVNjYWxhciggMSAvIDMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXROb3JtYWwoIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQbGFuZSggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0QmFyeWNvb3JkKCBwb2ludCwgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRJbnRlcnBvbGF0aW9uKCBwb2ludCwgdjEsIHYyLCB2MywgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0aW9uKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdjEsIHYyLCB2MywgdGFyZ2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XHJcblxyXG5cdH1cclxuXHJcblx0aXNGcm9udEZhY2luZyggZGlyZWN0aW9uICkge1xyXG5cclxuXHRcdHJldHVybiBUcmlhbmdsZS5pc0Zyb250RmFjaW5nKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCBkaXJlY3Rpb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzVHJpYW5nbGUoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Y29uc3QgYSA9IHRoaXMuYSwgYiA9IHRoaXMuYiwgYyA9IHRoaXMuYztcclxuXHRcdGxldCB2LCB3O1xyXG5cclxuXHRcdC8vIGFsZ29yaXRobSB0aGFua3MgdG8gUmVhbC1UaW1lIENvbGxpc2lvbiBEZXRlY3Rpb24gYnkgQ2hyaXN0ZXIgRXJpY3NvbixcclxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcclxuXHRcdC8vIHVuZGVyIHRoZSBhY2NvbXBhbnlpbmcgbGljZW5zZTsgc2VlIGNoYXB0ZXIgNS4xLjUgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uLlxyXG5cdFx0Ly8gYmFzaWNhbGx5LCB3ZSdyZSBkaXN0aW5ndWlzaGluZyB3aGljaCBvZiB0aGUgdm9yb25vaSByZWdpb25zIG9mIHRoZSB0cmlhbmdsZVxyXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxyXG5cclxuXHRcdF92YWIuc3ViVmVjdG9ycyggYiwgYSApO1xyXG5cdFx0X3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XHJcblx0XHRfdmFwLnN1YlZlY3RvcnMoIHAsIGEgKTtcclxuXHRcdGNvbnN0IGQxID0gX3ZhYi5kb3QoIF92YXAgKTtcclxuXHRcdGNvbnN0IGQyID0gX3ZhYy5kb3QoIF92YXAgKTtcclxuXHRcdGlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApXHJcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfdmJwLnN1YlZlY3RvcnMoIHAsIGIgKTtcclxuXHRcdGNvbnN0IGQzID0gX3ZhYi5kb3QoIF92YnAgKTtcclxuXHRcdGNvbnN0IGQ0ID0gX3ZhYy5kb3QoIF92YnAgKTtcclxuXHRcdGlmICggZDMgPj0gMCAmJiBkNCA8PSBkMyApIHtcclxuXHJcblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKVxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjtcclxuXHRcdGlmICggdmMgPD0gMCAmJiBkMSA+PSAwICYmIGQzIDw9IDAgKSB7XHJcblxyXG5cdFx0XHR2ID0gZDEgLyAoIGQxIC0gZDMgKTtcclxuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUI7IGJhcnljZW50cmljIGNvb3JkcyAoMS12LCB2LCAwKVxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWIsIHYgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X3ZjcC5zdWJWZWN0b3JzKCBwLCBjICk7XHJcblx0XHRjb25zdCBkNSA9IF92YWIuZG90KCBfdmNwICk7XHJcblx0XHRjb25zdCBkNiA9IF92YWMuZG90KCBfdmNwICk7XHJcblx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XHJcblxyXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSlcclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBjICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHZiID0gZDUgKiBkMiAtIGQxICogZDY7XHJcblx0XHRpZiAoIHZiIDw9IDAgJiYgZDIgPj0gMCAmJiBkNiA8PSAwICkge1xyXG5cclxuXHRcdFx0dyA9IGQyIC8gKCBkMiAtIGQ2ICk7XHJcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdywgMCwgdylcclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHZhID0gZDMgKiBkNiAtIGQ1ICogZDQ7XHJcblx0XHRpZiAoIHZhIDw9IDAgJiYgKCBkNCAtIGQzICkgPj0gMCAmJiAoIGQ1IC0gZDYgKSA+PSAwICkge1xyXG5cclxuXHRcdFx0X3ZiYy5zdWJWZWN0b3JzKCBjLCBiICk7XHJcblx0XHRcdHcgPSAoIGQ0IC0gZDMgKSAvICggKCBkNCAtIGQzICkgKyAoIGQ1IC0gZDYgKSApO1xyXG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXHJcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApLmFkZFNjYWxlZFZlY3RvciggX3ZiYywgdyApOyAvLyBlZGdlIHJlZ2lvbiBvZiBCQ1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBmYWNlIHJlZ2lvblxyXG5cdFx0Y29uc3QgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcclxuXHRcdC8vIHUgPSB2YSAqIGRlbm9tXHJcblx0XHR2ID0gdmIgKiBkZW5vbTtcclxuXHRcdHcgPSB2YyAqIGRlbm9tO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApLmFkZFNjYWxlZFZlY3RvciggX3ZhYywgdyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGVxdWFscyggdHJpYW5nbGUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBUcmlhbmdsZSB9O1xyXG4iLCJpbXBvcnQgeyBjbGFtcCwgZXVjbGlkZWFuTW9kdWxvLCBsZXJwIH0gZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQsIFNSR0JUb0xpbmVhciwgTGluZWFyVG9TUkdCIH0gZnJvbSAnLi9Db2xvck1hbmFnZW1lbnQuanMnO1xyXG5pbXBvcnQgeyBTUkdCQ29sb3JTcGFjZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBfY29sb3JLZXl3b3JkcyA9IHsgJ2FsaWNlYmx1ZSc6IDB4RjBGOEZGLCAnYW50aXF1ZXdoaXRlJzogMHhGQUVCRDcsICdhcXVhJzogMHgwMEZGRkYsICdhcXVhbWFyaW5lJzogMHg3RkZGRDQsICdhenVyZSc6IDB4RjBGRkZGLFxyXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcclxuXHQnYnJvd24nOiAweEE1MkEyQSwgJ2J1cmx5d29vZCc6IDB4REVCODg3LCAnY2FkZXRibHVlJzogMHg1RjlFQTAsICdjaGFydHJldXNlJzogMHg3RkZGMDAsICdjaG9jb2xhdGUnOiAweEQyNjkxRSwgJ2NvcmFsJzogMHhGRjdGNTAsXHJcblx0J2Nvcm5mbG93ZXJibHVlJzogMHg2NDk1RUQsICdjb3Juc2lsayc6IDB4RkZGOERDLCAnY3JpbXNvbic6IDB4REMxNDNDLCAnY3lhbic6IDB4MDBGRkZGLCAnZGFya2JsdWUnOiAweDAwMDA4QiwgJ2RhcmtjeWFuJzogMHgwMDhCOEIsXHJcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXHJcblx0J2RhcmtvbGl2ZWdyZWVuJzogMHg1NTZCMkYsICdkYXJrb3JhbmdlJzogMHhGRjhDMDAsICdkYXJrb3JjaGlkJzogMHg5OTMyQ0MsICdkYXJrcmVkJzogMHg4QjAwMDAsICdkYXJrc2FsbW9uJzogMHhFOTk2N0EsICdkYXJrc2VhZ3JlZW4nOiAweDhGQkM4RixcclxuXHQnZGFya3NsYXRlYmx1ZSc6IDB4NDgzRDhCLCAnZGFya3NsYXRlZ3JheSc6IDB4MkY0RjRGLCAnZGFya3NsYXRlZ3JleSc6IDB4MkY0RjRGLCAnZGFya3R1cnF1b2lzZSc6IDB4MDBDRUQxLCAnZGFya3Zpb2xldCc6IDB4OTQwMEQzLFxyXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxyXG5cdCdmbG9yYWx3aGl0ZSc6IDB4RkZGQUYwLCAnZm9yZXN0Z3JlZW4nOiAweDIyOEIyMiwgJ2Z1Y2hzaWEnOiAweEZGMDBGRiwgJ2dhaW5zYm9ybyc6IDB4RENEQ0RDLCAnZ2hvc3R3aGl0ZSc6IDB4RjhGOEZGLCAnZ29sZCc6IDB4RkZENzAwLFxyXG5cdCdnb2xkZW5yb2QnOiAweERBQTUyMCwgJ2dyYXknOiAweDgwODA4MCwgJ2dyZWVuJzogMHgwMDgwMDAsICdncmVlbnllbGxvdyc6IDB4QURGRjJGLCAnZ3JleSc6IDB4ODA4MDgwLCAnaG9uZXlkZXcnOiAweEYwRkZGMCwgJ2hvdHBpbmsnOiAweEZGNjlCNCxcclxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxyXG5cdCdsZW1vbmNoaWZmb24nOiAweEZGRkFDRCwgJ2xpZ2h0Ymx1ZSc6IDB4QUREOEU2LCAnbGlnaHRjb3JhbCc6IDB4RjA4MDgwLCAnbGlnaHRjeWFuJzogMHhFMEZGRkYsICdsaWdodGdvbGRlbnJvZHllbGxvdyc6IDB4RkFGQUQyLCAnbGlnaHRncmF5JzogMHhEM0QzRDMsXHJcblx0J2xpZ2h0Z3JlZW4nOiAweDkwRUU5MCwgJ2xpZ2h0Z3JleSc6IDB4RDNEM0QzLCAnbGlnaHRwaW5rJzogMHhGRkI2QzEsICdsaWdodHNhbG1vbic6IDB4RkZBMDdBLCAnbGlnaHRzZWFncmVlbic6IDB4MjBCMkFBLCAnbGlnaHRza3libHVlJzogMHg4N0NFRkEsXHJcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcclxuXHQnbGluZW4nOiAweEZBRjBFNiwgJ21hZ2VudGEnOiAweEZGMDBGRiwgJ21hcm9vbic6IDB4ODAwMDAwLCAnbWVkaXVtYXF1YW1hcmluZSc6IDB4NjZDREFBLCAnbWVkaXVtYmx1ZSc6IDB4MDAwMENELCAnbWVkaXVtb3JjaGlkJzogMHhCQTU1RDMsXHJcblx0J21lZGl1bXB1cnBsZSc6IDB4OTM3MERCLCAnbWVkaXVtc2VhZ3JlZW4nOiAweDNDQjM3MSwgJ21lZGl1bXNsYXRlYmx1ZSc6IDB4N0I2OEVFLCAnbWVkaXVtc3ByaW5nZ3JlZW4nOiAweDAwRkE5QSwgJ21lZGl1bXR1cnF1b2lzZSc6IDB4NDhEMUNDLFxyXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxyXG5cdCduYXZ5JzogMHgwMDAwODAsICdvbGRsYWNlJzogMHhGREY1RTYsICdvbGl2ZSc6IDB4ODA4MDAwLCAnb2xpdmVkcmFiJzogMHg2QjhFMjMsICdvcmFuZ2UnOiAweEZGQTUwMCwgJ29yYW5nZXJlZCc6IDB4RkY0NTAwLCAnb3JjaGlkJzogMHhEQTcwRDYsXHJcblx0J3BhbGVnb2xkZW5yb2QnOiAweEVFRThBQSwgJ3BhbGVncmVlbic6IDB4OThGQjk4LCAncGFsZXR1cnF1b2lzZSc6IDB4QUZFRUVFLCAncGFsZXZpb2xldHJlZCc6IDB4REI3MDkzLCAncGFwYXlhd2hpcCc6IDB4RkZFRkQ1LCAncGVhY2hwdWZmJzogMHhGRkRBQjksXHJcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4RixcclxuXHQncm95YWxibHVlJzogMHg0MTY5RTEsICdzYWRkbGVicm93bic6IDB4OEI0NTEzLCAnc2FsbW9uJzogMHhGQTgwNzIsICdzYW5keWJyb3duJzogMHhGNEE0NjAsICdzZWFncmVlbic6IDB4MkU4QjU3LCAnc2Vhc2hlbGwnOiAweEZGRjVFRSxcclxuXHQnc2llbm5hJzogMHhBMDUyMkQsICdzaWx2ZXInOiAweEMwQzBDMCwgJ3NreWJsdWUnOiAweDg3Q0VFQiwgJ3NsYXRlYmx1ZSc6IDB4NkE1QUNELCAnc2xhdGVncmF5JzogMHg3MDgwOTAsICdzbGF0ZWdyZXknOiAweDcwODA5MCwgJ3Nub3cnOiAweEZGRkFGQSxcclxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxyXG5cdCd2aW9sZXQnOiAweEVFODJFRSwgJ3doZWF0JzogMHhGNURFQjMsICd3aGl0ZSc6IDB4RkZGRkZGLCAnd2hpdGVzbW9rZSc6IDB4RjVGNUY1LCAneWVsbG93JzogMHhGRkZGMDAsICd5ZWxsb3dncmVlbic6IDB4OUFDRDMyIH07XHJcblxyXG5jb25zdCBfaHNsQSA9IHsgaDogMCwgczogMCwgbDogMCB9O1xyXG5jb25zdCBfaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xyXG5cclxuZnVuY3Rpb24gaHVlMnJnYiggcCwgcSwgdCApIHtcclxuXHJcblx0aWYgKCB0IDwgMCApIHQgKz0gMTtcclxuXHRpZiAoIHQgPiAxICkgdCAtPSAxO1xyXG5cdGlmICggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogdDtcclxuXHRpZiAoIHQgPCAxIC8gMiApIHJldHVybiBxO1xyXG5cdGlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTtcclxuXHRyZXR1cm4gcDtcclxuXHJcbn1cclxuXHJcbmNsYXNzIENvbG9yIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHIsIGcsIGIgKSB7XHJcblxyXG5cdFx0dGhpcy5pc0NvbG9yID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnIgPSAxO1xyXG5cdFx0dGhpcy5nID0gMTtcclxuXHRcdHRoaXMuYiA9IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCByLCBnLCBiICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0KCByLCBnLCBiICkge1xyXG5cclxuXHRcdGlmICggZyA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdC8vIHIgaXMgVEhSRUUuQ29sb3IsIGhleCBvciBzdHJpbmdcclxuXHJcblx0XHRcdGNvbnN0IHZhbHVlID0gcjtcclxuXHJcblx0XHRcdGlmICggdmFsdWUgJiYgdmFsdWUuaXNDb2xvciApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5jb3B5KCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5zZXRIZXgoIHZhbHVlICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLnNldFN0eWxlKCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldFJHQiggciwgZywgYiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcclxuXHJcblx0XHR0aGlzLnIgPSBzY2FsYXI7XHJcblx0XHR0aGlzLmcgPSBzY2FsYXI7XHJcblx0XHR0aGlzLmIgPSBzY2FsYXI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0SGV4KCBoZXgsIGNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRoZXggPSBNYXRoLmZsb29yKCBoZXggKTtcclxuXHJcblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xyXG5cdFx0dGhpcy5nID0gKCBoZXggPj4gOCAmIDI1NSApIC8gMjU1O1xyXG5cdFx0dGhpcy5iID0gKCBoZXggJiAyNTUgKSAvIDI1NTtcclxuXHJcblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFJHQiggciwgZywgYiwgY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHtcclxuXHJcblx0XHR0aGlzLnIgPSByO1xyXG5cdFx0dGhpcy5nID0gZztcclxuXHRcdHRoaXMuYiA9IGI7XHJcblxyXG5cdFx0Q29sb3JNYW5hZ2VtZW50LnRvV29ya2luZ0NvbG9yU3BhY2UoIHRoaXMsIGNvbG9yU3BhY2UgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRIU0woIGgsIHMsIGwsIGNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcclxuXHRcdGggPSBldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcclxuXHRcdHMgPSBjbGFtcCggcywgMCwgMSApO1xyXG5cdFx0bCA9IGNsYW1wKCBsLCAwLCAxICk7XHJcblxyXG5cdFx0aWYgKCBzID09PSAwICkge1xyXG5cclxuXHRcdFx0dGhpcy5yID0gdGhpcy5nID0gdGhpcy5iID0gbDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc3QgcCA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gKCBsICogcyApO1xyXG5cdFx0XHRjb25zdCBxID0gKCAyICogbCApIC0gcDtcclxuXHJcblx0XHRcdHRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApO1xyXG5cdFx0XHR0aGlzLmcgPSBodWUycmdiKCBxLCBwLCBoICk7XHJcblx0XHRcdHRoaXMuYiA9IGh1ZTJyZ2IoIHEsIHAsIGggLSAxIC8gMyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFN0eWxlKCBzdHlsZSwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xyXG5cclxuXHRcdGZ1bmN0aW9uIGhhbmRsZUFscGhhKCBzdHJpbmcgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHN0cmluZyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xyXG5cclxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBBbHBoYSBjb21wb25lbnQgb2YgJyArIHN0eWxlICsgJyB3aWxsIGJlIGlnbm9yZWQuJyApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0bGV0IG07XHJcblxyXG5cdFx0aWYgKCBtID0gL14oXFx3KylcXCgoW15cXCldKilcXCkvLmV4ZWMoIHN0eWxlICkgKSB7XHJcblxyXG5cdFx0XHQvLyByZ2IgLyBoc2xcclxuXHJcblx0XHRcdGxldCBjb2xvcjtcclxuXHRcdFx0Y29uc3QgbmFtZSA9IG1bIDEgXTtcclxuXHRcdFx0Y29uc3QgY29tcG9uZW50cyA9IG1bIDIgXTtcclxuXHJcblx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ3JnYic6XHJcblx0XHRcdFx0Y2FzZSAncmdiYSc6XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpXHJcblxyXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxyXG5cdFx0XHRcdFx0XHRcdE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAyNTUsXHJcblx0XHRcdFx0XHRcdFx0TWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDI1NSxcclxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMjU1LFxyXG5cdFx0XHRcdFx0XHRcdGNvbG9yU3BhY2VcclxuXHRcdFx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpXHJcblxyXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxyXG5cdFx0XHRcdFx0XHRcdE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAxMDAsXHJcblx0XHRcdFx0XHRcdFx0TWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMCxcclxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMTAwLFxyXG5cdFx0XHRcdFx0XHRcdGNvbG9yU3BhY2VcclxuXHRcdFx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ2hzbCc6XHJcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQqXFwuP1xcZCspXFxzKixcXHMqKFxcZCpcXC4/XFxkKylcXCVcXHMqLFxccyooXFxkKlxcLj9cXGQrKVxcJVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gaHNsKDEyMCw1MCUsNTAlKSBoc2xhKDEyMCw1MCUsNTAlLDAuNSlcclxuXHJcblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNCBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIU0woXHJcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggY29sb3JbIDEgXSApIC8gMzYwLFxyXG5cdFx0XHRcdFx0XHRcdHBhcnNlRmxvYXQoIGNvbG9yWyAyIF0gKSAvIDEwMCxcclxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBjb2xvclsgMyBdICkgLyAxMDAsXHJcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciBtb2RlbCAnICsgc3R5bGUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKCBtID0gL15cXCMoW0EtRmEtZlxcZF0rKSQvLmV4ZWMoIHN0eWxlICkgKSB7XHJcblxyXG5cdFx0XHQvLyBoZXggY29sb3JcclxuXHJcblx0XHRcdGNvbnN0IGhleCA9IG1bIDEgXTtcclxuXHRcdFx0Y29uc3Qgc2l6ZSA9IGhleC5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIHNpemUgPT09IDMgKSB7XHJcblxyXG5cdFx0XHRcdC8vICNmZjBcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRSR0IoXHJcblx0XHRcdFx0XHRwYXJzZUludCggaGV4LmNoYXJBdCggMCApLCAxNiApIC8gMTUsXHJcblx0XHRcdFx0XHRwYXJzZUludCggaGV4LmNoYXJBdCggMSApLCAxNiApIC8gMTUsXHJcblx0XHRcdFx0XHRwYXJzZUludCggaGV4LmNoYXJBdCggMiApLCAxNiApIC8gMTUsXHJcblx0XHRcdFx0XHRjb2xvclNwYWNlXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHNpemUgPT09IDYgKSB7XHJcblxyXG5cdFx0XHRcdC8vICNmZjAwMDBcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIZXgoIHBhcnNlSW50KCBoZXgsIDE2ICksIGNvbG9yU3BhY2UgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBJbnZhbGlkIGhleCBjb2xvciAnICsgc3R5bGUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKCBzdHlsZSAmJiBzdHlsZS5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0Q29sb3JOYW1lKCBzdHlsZSwgY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRDb2xvck5hbWUoIHN0eWxlLCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0Ly8gY29sb3Iga2V5d29yZHNcclxuXHRcdGNvbnN0IGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0aWYgKCBoZXggIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdC8vIHJlZFxyXG5cdFx0XHR0aGlzLnNldEhleCggaGV4LCBjb2xvclNwYWNlICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIHVua25vd24gY29sb3JcclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IFVua25vd24gY29sb3IgJyArIHN0eWxlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5yLCB0aGlzLmcsIHRoaXMuYiApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIGNvbG9yICkge1xyXG5cclxuXHRcdHRoaXMuciA9IGNvbG9yLnI7XHJcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xyXG5cdFx0dGhpcy5iID0gY29sb3IuYjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5U1JHQlRvTGluZWFyKCBjb2xvciApIHtcclxuXHJcblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcclxuXHRcdHRoaXMuZyA9IFNSR0JUb0xpbmVhciggY29sb3IuZyApO1xyXG5cdFx0dGhpcy5iID0gU1JHQlRvTGluZWFyKCBjb2xvci5iICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weUxpbmVhclRvU1JHQiggY29sb3IgKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gTGluZWFyVG9TUkdCKCBjb2xvci5yICk7XHJcblx0XHR0aGlzLmcgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLmcgKTtcclxuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXIoKSB7XHJcblxyXG5cdFx0dGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29udmVydExpbmVhclRvU1JHQigpIHtcclxuXHJcblx0XHR0aGlzLmNvcHlMaW5lYXJUb1NSR0IoIHRoaXMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRIZXgoIGNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIGNsYW1wKCBfY29sb3IuciAqIDI1NSwgMCwgMjU1ICkgKSAqIDY1NTM2ICsgTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5nICogMjU1LCAwLCAyNTUgKSApICogMjU2ICsgTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5iICogMjU1LCAwLCAyNTUgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEhleFN0cmluZyggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xyXG5cclxuXHRcdHJldHVybiAoICcwMDAwMDAnICsgdGhpcy5nZXRIZXgoIGNvbG9yU3BhY2UgKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtIDYgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRIU0woIHRhcmdldCwgY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHtcclxuXHJcblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxyXG5cclxuXHRcdENvbG9yTWFuYWdlbWVudC5mcm9tV29ya2luZ0NvbG9yU3BhY2UoIF9jb2xvci5jb3B5KCB0aGlzICksIGNvbG9yU3BhY2UgKTtcclxuXHJcblx0XHRjb25zdCByID0gX2NvbG9yLnIsIGcgPSBfY29sb3IuZywgYiA9IF9jb2xvci5iO1xyXG5cclxuXHRcdGNvbnN0IG1heCA9IE1hdGgubWF4KCByLCBnLCBiICk7XHJcblx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggciwgZywgYiApO1xyXG5cclxuXHRcdGxldCBodWUsIHNhdHVyYXRpb247XHJcblx0XHRjb25zdCBsaWdodG5lc3MgPSAoIG1pbiArIG1heCApIC8gMi4wO1xyXG5cclxuXHRcdGlmICggbWluID09PSBtYXggKSB7XHJcblxyXG5cdFx0XHRodWUgPSAwO1xyXG5cdFx0XHRzYXR1cmF0aW9uID0gMDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc3QgZGVsdGEgPSBtYXggLSBtaW47XHJcblxyXG5cdFx0XHRzYXR1cmF0aW9uID0gbGlnaHRuZXNzIDw9IDAuNSA/IGRlbHRhIC8gKCBtYXggKyBtaW4gKSA6IGRlbHRhIC8gKCAyIC0gbWF4IC0gbWluICk7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCBtYXggKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBnOiBodWUgPSAoIGIgLSByICkgLyBkZWx0YSArIDI7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgYjogaHVlID0gKCByIC0gZyApIC8gZGVsdGEgKyA0OyBicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGh1ZSAvPSA2O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0YXJnZXQuaCA9IGh1ZTtcclxuXHRcdHRhcmdldC5zID0gc2F0dXJhdGlvbjtcclxuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0UkdCKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0Q29sb3JNYW5hZ2VtZW50LmZyb21Xb3JraW5nQ29sb3JTcGFjZSggX2NvbG9yLmNvcHkoIHRoaXMgKSwgY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdHRhcmdldC5yID0gX2NvbG9yLnI7XHJcblx0XHR0YXJnZXQuZyA9IF9jb2xvci5nO1xyXG5cdFx0dGFyZ2V0LmIgPSBfY29sb3IuYjtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFN0eWxlKCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XHJcblxyXG5cdFx0Q29sb3JNYW5hZ2VtZW50LmZyb21Xb3JraW5nQ29sb3JTcGFjZSggX2NvbG9yLmNvcHkoIHRoaXMgKSwgY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdGNvbnN0IHIgPSBfY29sb3IuciwgZyA9IF9jb2xvci5nLCBiID0gX2NvbG9yLmI7XHJcblxyXG5cdFx0aWYgKCBjb2xvclNwYWNlICE9PSBTUkdCQ29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRcdC8vIFJlcXVpcmVzIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgNCAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1jb2xvci00LykuXHJcblx0XHRcdHJldHVybiBgY29sb3IoJHsgY29sb3JTcGFjZSB9ICR7IHIudG9GaXhlZCggMyApIH0gJHsgZy50b0ZpeGVkKCAzICkgfSAkeyBiLnRvRml4ZWQoIDMgKSB9KWA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBgcmdiKCR7IE1hdGgucm91bmQoIHIgKiAyNTUgKSB9LCR7IE1hdGgucm91bmQoIGcgKiAyNTUgKSB9LCR7IE1hdGgucm91bmQoIGIgKiAyNTUgKSB9KWA7XHJcblxyXG5cdH1cclxuXHJcblx0b2Zmc2V0SFNMKCBoLCBzLCBsICkge1xyXG5cclxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEhTTCggX2hzbEEuaCArIGgsIF9oc2xBLnMgKyBzLCBfaHNsQS5sICsgbCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZCggY29sb3IgKSB7XHJcblxyXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XHJcblx0XHR0aGlzLmcgKz0gY29sb3IuZztcclxuXHRcdHRoaXMuYiArPSBjb2xvci5iO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZENvbG9ycyggY29sb3IxLCBjb2xvcjIgKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gY29sb3IxLnIgKyBjb2xvcjIucjtcclxuXHRcdHRoaXMuZyA9IGNvbG9yMS5nICsgY29sb3IyLmc7XHJcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFNjYWxhciggcyApIHtcclxuXHJcblx0XHR0aGlzLnIgKz0gcztcclxuXHRcdHRoaXMuZyArPSBzO1xyXG5cdFx0dGhpcy5iICs9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c3ViKCBjb2xvciApIHtcclxuXHJcblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xyXG5cdFx0dGhpcy5nID0gTWF0aC5tYXgoIDAsIHRoaXMuZyAtIGNvbG9yLmcgKTtcclxuXHRcdHRoaXMuYiA9IE1hdGgubWF4KCAwLCB0aGlzLmIgLSBjb2xvci5iICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bXVsdGlwbHkoIGNvbG9yICkge1xyXG5cclxuXHRcdHRoaXMuciAqPSBjb2xvci5yO1xyXG5cdFx0dGhpcy5nICo9IGNvbG9yLmc7XHJcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcclxuXHJcblx0XHR0aGlzLnIgKj0gcztcclxuXHRcdHRoaXMuZyAqPSBzO1xyXG5cdFx0dGhpcy5iICo9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bGVycCggY29sb3IsIGFscGhhICkge1xyXG5cclxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xyXG5cdFx0dGhpcy5nICs9ICggY29sb3IuZyAtIHRoaXMuZyApICogYWxwaGE7XHJcblx0XHR0aGlzLmIgKz0gKCBjb2xvci5iIC0gdGhpcy5iICkgKiBhbHBoYTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRsZXJwQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiwgYWxwaGEgKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gY29sb3IxLnIgKyAoIGNvbG9yMi5yIC0gY29sb3IxLnIgKSAqIGFscGhhO1xyXG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyAoIGNvbG9yMi5nIC0gY29sb3IxLmcgKSAqIGFscGhhO1xyXG5cdFx0dGhpcy5iID0gY29sb3IxLmIgKyAoIGNvbG9yMi5iIC0gY29sb3IxLmIgKSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGxlcnBIU0woIGNvbG9yLCBhbHBoYSApIHtcclxuXHJcblx0XHR0aGlzLmdldEhTTCggX2hzbEEgKTtcclxuXHRcdGNvbG9yLmdldEhTTCggX2hzbEIgKTtcclxuXHJcblx0XHRjb25zdCBoID0gbGVycCggX2hzbEEuaCwgX2hzbEIuaCwgYWxwaGEgKTtcclxuXHRcdGNvbnN0IHMgPSBsZXJwKCBfaHNsQS5zLCBfaHNsQi5zLCBhbHBoYSApO1xyXG5cdFx0Y29uc3QgbCA9IGxlcnAoIF9oc2xBLmwsIF9oc2xCLmwsIGFscGhhICk7XHJcblxyXG5cdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcclxuXHJcblx0XHR0aGlzLnIgPSB2Lng7XHJcblx0XHR0aGlzLmcgPSB2Lnk7XHJcblx0XHR0aGlzLmIgPSB2Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlNYXRyaXgzKCBtICkge1xyXG5cclxuXHRcdGNvbnN0IHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XHJcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnIgPSBlWyAwIF0gKiByICsgZVsgMyBdICogZyArIGVbIDYgXSAqIGI7XHJcblx0XHR0aGlzLmcgPSBlWyAxIF0gKiByICsgZVsgNCBdICogZyArIGVbIDcgXSAqIGI7XHJcblx0XHR0aGlzLmIgPSBlWyAyIF0gKiByICsgZVsgNSBdICogZyArIGVbIDggXSAqIGI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCBjICkge1xyXG5cclxuXHRcdHJldHVybiAoIGMuciA9PT0gdGhpcy5yICkgJiYgKCBjLmcgPT09IHRoaXMuZyApICYmICggYy5iID09PSB0aGlzLmIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdHRoaXMuciA9IGFycmF5WyBvZmZzZXQgXTtcclxuXHRcdHRoaXMuZyA9IGFycmF5WyBvZmZzZXQgKyAxIF07XHJcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5yO1xyXG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuZztcclxuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLmI7XHJcblxyXG5cdFx0cmV0dXJuIGFycmF5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XHJcblx0XHR0aGlzLmcgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcclxuXHRcdHRoaXMuYiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5nZXRIZXgoKTtcclxuXHJcblx0fVxyXG5cclxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcclxuXHJcblx0XHR5aWVsZCB0aGlzLnI7XHJcblx0XHR5aWVsZCB0aGlzLmc7XHJcblx0XHR5aWVsZCB0aGlzLmI7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IF9jb2xvciA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XHJcblxyXG5Db2xvci5OQU1FUyA9IF9jb2xvcktleXdvcmRzO1xyXG5cclxuZXhwb3J0IHsgQ29sb3IgfTtcclxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vY29yZS9FdmVudERpc3BhdGNoZXIuanMnO1xyXG5pbXBvcnQgeyBGcm9udFNpZGUsIE5vcm1hbEJsZW5kaW5nLCBMZXNzRXF1YWxEZXB0aCwgQWRkRXF1YXRpb24sIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIFNyY0FscGhhRmFjdG9yLCBBbHdheXNTdGVuY2lsRnVuYywgS2VlcFN0ZW5jaWxPcCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuXHJcbmxldCBfbWF0ZXJpYWxJZCA9IDA7XHJcblxyXG5jbGFzcyBNYXRlcmlhbCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9tYXRlcmlhbElkICsrIH0gKTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSAnJztcclxuXHRcdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XHJcblxyXG5cdFx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xyXG5cdFx0dGhpcy5zaWRlID0gRnJvbnRTaWRlO1xyXG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLm9wYWNpdHkgPSAxO1xyXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5hbHBoYUhhc2ggPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmJsZW5kU3JjID0gU3JjQWxwaGFGYWN0b3I7XHJcblx0XHR0aGlzLmJsZW5kRHN0ID0gT25lTWludXNTcmNBbHBoYUZhY3RvcjtcclxuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xyXG5cdFx0dGhpcy5ibGVuZFNyY0FscGhhID0gbnVsbDtcclxuXHRcdHRoaXMuYmxlbmREc3RBbHBoYSA9IG51bGw7XHJcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XHJcblx0XHR0aGlzLmJsZW5kQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTtcclxuXHRcdHRoaXMuYmxlbmRBbHBoYSA9IDA7XHJcblxyXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBMZXNzRXF1YWxEZXB0aDtcclxuXHRcdHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcclxuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gMHhmZjtcclxuXHRcdHRoaXMuc3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYztcclxuXHRcdHRoaXMuc3RlbmNpbFJlZiA9IDA7XHJcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IDB4ZmY7XHJcblx0XHR0aGlzLnN0ZW5jaWxGYWlsID0gS2VlcFN0ZW5jaWxPcDtcclxuXHRcdHRoaXMuc3RlbmNpbFpGYWlsID0gS2VlcFN0ZW5jaWxPcDtcclxuXHRcdHRoaXMuc3RlbmNpbFpQYXNzID0gS2VlcFN0ZW5jaWxPcDtcclxuXHRcdHRoaXMuc3RlbmNpbFdyaXRlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IG51bGw7XHJcblx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBmYWxzZTtcclxuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxyXG5cclxuXHRcdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gMDtcclxuXHRcdHRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gMDtcclxuXHJcblx0XHR0aGlzLmRpdGhlcmluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFUb0NvdmVyYWdlID0gZmFsc2U7XHJcblx0XHR0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mb3JjZVNpbmdsZVBhc3MgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudG9uZU1hcHBlZCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xyXG5cclxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XHJcblxyXG5cdFx0dGhpcy5fYWxwaGFUZXN0ID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgYWxwaGFUZXN0KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9hbHBoYVRlc3Q7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IGFscGhhVGVzdCggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLl9hbHBoYVRlc3QgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2FscGhhVGVzdCA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIG9uQmVmb3JlUmVuZGVyIGFuZCBvbkJlZm9yZUNvbXBpbGUgb25seSBzdXBwb3J0ZWQgaW4gV2ViR0xSZW5kZXJlclxyXG5cclxuXHRvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICovICkge31cclxuXHJcblx0b25CZWZvcmVDb21waWxlKCAvKiBzaGFkZXJvYmplY3QsIHJlbmRlcmVyICovICkge31cclxuXHJcblx0Y3VzdG9tUHJvZ3JhbUNhY2hlS2V5KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFZhbHVlcyggdmFsdWVzICkge1xyXG5cclxuXHRcdGlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSByZXR1cm47XHJcblxyXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIHZhbHVlcyApIHtcclxuXHJcblx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTtcclxuXHJcblx0XHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCBgVEhSRUUuTWF0ZXJpYWw6IHBhcmFtZXRlciAnJHsga2V5IH0nIGhhcyB2YWx1ZSBvZiB1bmRlZmluZWQuYCApO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07XHJcblxyXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oIGBUSFJFRS5NYXRlcmlhbDogJyR7IGtleSB9JyBpcyBub3QgYSBwcm9wZXJ0eSBvZiBUSFJFRS4keyB0aGlzLnR5cGUgfS5gICk7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNDb2xvciApIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudFZhbHVlLnNldCggbmV3VmFsdWUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkge1xyXG5cclxuXHRcdFx0XHRjdXJyZW50VmFsdWUuY29weSggbmV3VmFsdWUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggbWV0YSApIHtcclxuXHJcblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcclxuXHJcblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcclxuXHJcblx0XHRcdG1ldGEgPSB7XHJcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxyXG5cdFx0XHRcdGltYWdlczoge31cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHtcclxuXHRcdFx0bWV0YWRhdGE6IHtcclxuXHRcdFx0XHR2ZXJzaW9uOiA0LjYsXHJcblx0XHRcdFx0dHlwZTogJ01hdGVyaWFsJyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc3RhbmRhcmQgTWF0ZXJpYWwgc2VyaWFsaXphdGlvblxyXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xyXG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xyXG5cclxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcclxuXHJcblx0XHRpZiAoIHRoaXMuY29sb3IgJiYgdGhpcy5jb2xvci5pc0NvbG9yICkgZGF0YS5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcclxuXHRcdGlmICggdGhpcy5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEubWV0YWxuZXNzID0gdGhpcy5tZXRhbG5lc3M7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnNoZWVuICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbjtcclxuXHRcdGlmICggdGhpcy5zaGVlbkNvbG9yICYmIHRoaXMuc2hlZW5Db2xvci5pc0NvbG9yICkgZGF0YS5zaGVlbkNvbG9yID0gdGhpcy5zaGVlbkNvbG9yLmdldEhleCgpO1xyXG5cdFx0aWYgKCB0aGlzLnNoZWVuUm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuUm91Z2huZXNzID0gdGhpcy5zaGVlblJvdWdobmVzcztcclxuXHRcdGlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSBkYXRhLmVtaXNzaXZlID0gdGhpcy5lbWlzc2l2ZS5nZXRIZXgoKTtcclxuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgIT09IDEgKSBkYXRhLmVtaXNzaXZlSW50ZW5zaXR5ID0gdGhpcy5lbWlzc2l2ZUludGVuc2l0eTtcclxuXHJcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yICkgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7XHJcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIGRhdGEuc3BlY3VsYXJJbnRlbnNpdHkgPSB0aGlzLnNwZWN1bGFySW50ZW5zaXR5O1xyXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyQ29sb3IgJiYgdGhpcy5zcGVjdWxhckNvbG9yLmlzQ29sb3IgKSBkYXRhLnNwZWN1bGFyQ29sb3IgPSB0aGlzLnNwZWN1bGFyQ29sb3IuZ2V0SGV4KCk7XHJcblx0XHRpZiAoIHRoaXMuc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzO1xyXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdCAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXQgPSB0aGlzLmNsZWFyY29hdDtcclxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0Um91Z2huZXNzID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3M7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdE1hcCAmJiB0aGlzLmNsZWFyY29hdE1hcC5pc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRkYXRhLmNsZWFyY29hdE1hcCA9IHRoaXMuY2xlYXJjb2F0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgJiYgdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAuaXNUZXh0dXJlICkge1xyXG5cclxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwICYmIHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdFx0ZGF0YS5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudG9BcnJheSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuZGlzcGVyc2lvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5kaXNwZXJzaW9uID0gdGhpcy5kaXNwZXJzaW9uO1xyXG5cclxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5pcmlkZXNjZW5jZSA9IHRoaXMuaXJpZGVzY2VuY2U7XHJcblx0XHRpZiAoIHRoaXMuaXJpZGVzY2VuY2VJT1IgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2VJT1IgPSB0aGlzLmlyaWRlc2NlbmNlSU9SO1xyXG5cdFx0aWYgKCB0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZTtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXJpZGVzY2VuY2VNYXAgJiYgdGhpcy5pcmlkZXNjZW5jZU1hcC5pc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRkYXRhLmlyaWRlc2NlbmNlTWFwID0gdGhpcy5pcmlkZXNjZW5jZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgJiYgdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcC5pc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRkYXRhLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwID0gdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgZGF0YS5hbmlzb3Ryb3B5ID0gdGhpcy5hbmlzb3Ryb3B5O1xyXG5cdFx0aWYgKCB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5hbmlzb3Ryb3B5Um90YXRpb24gPSB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbjtcclxuXHJcblx0XHRpZiAoIHRoaXMuYW5pc290cm9weU1hcCAmJiB0aGlzLmFuaXNvdHJvcHlNYXAuaXNUZXh0dXJlICkge1xyXG5cclxuXHRcdFx0ZGF0YS5hbmlzb3Ryb3B5TWFwID0gdGhpcy5hbmlzb3Ryb3B5TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5tYXAgJiYgdGhpcy5tYXAuaXNUZXh0dXJlICkgZGF0YS5tYXAgPSB0aGlzLm1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cdFx0aWYgKCB0aGlzLm1hdGNhcCAmJiB0aGlzLm1hdGNhcC5pc1RleHR1cmUgKSBkYXRhLm1hdGNhcCA9IHRoaXMubWF0Y2FwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblx0XHRpZiAoIHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUgKSBkYXRhLmFscGhhTWFwID0gdGhpcy5hbHBoYU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdGlmICggdGhpcy5saWdodE1hcCAmJiB0aGlzLmxpZ2h0TWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEubGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblx0XHRcdGRhdGEubGlnaHRNYXBJbnRlbnNpdHkgPSB0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuYW9NYXAgJiYgdGhpcy5hb01hcC5pc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cdFx0XHRkYXRhLmFvTWFwSW50ZW5zaXR5ID0gdGhpcy5hb01hcEludGVuc2l0eTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJ1bXBNYXAgJiYgdGhpcy5idW1wTWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEuYnVtcE1hcCA9IHRoaXMuYnVtcE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cdFx0XHRkYXRhLmJ1bXBTY2FsZSA9IHRoaXMuYnVtcFNjYWxlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEubm9ybWFsTWFwID0gdGhpcy5ub3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xyXG5cdFx0XHRkYXRhLm5vcm1hbFNjYWxlID0gdGhpcy5ub3JtYWxTY2FsZS50b0FycmF5KCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5kaXNwbGFjZW1lbnRNYXAgJiYgdGhpcy5kaXNwbGFjZW1lbnRNYXAuaXNUZXh0dXJlICkge1xyXG5cclxuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRNYXAgPSB0aGlzLmRpc3BsYWNlbWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudFNjYWxlID0gdGhpcy5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMucm91Z2huZXNzTWFwICYmIHRoaXMucm91Z2huZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEucm91Z2huZXNzTWFwID0gdGhpcy5yb3VnaG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdGlmICggdGhpcy5tZXRhbG5lc3NNYXAgJiYgdGhpcy5tZXRhbG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5tZXRhbG5lc3NNYXAgPSB0aGlzLm1ldGFsbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cclxuXHRcdGlmICggdGhpcy5lbWlzc2l2ZU1hcCAmJiB0aGlzLmVtaXNzaXZlTWFwLmlzVGV4dHVyZSApIGRhdGEuZW1pc3NpdmVNYXAgPSB0aGlzLmVtaXNzaXZlTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJNYXAgJiYgdGhpcy5zcGVjdWxhck1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFyTWFwID0gdGhpcy5zcGVjdWxhck1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xyXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwICYmIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckludGVuc2l0eU1hcCA9IHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdGlmICggdGhpcy5zcGVjdWxhckNvbG9yTWFwICYmIHRoaXMuc3BlY3VsYXJDb2xvck1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFyQ29sb3JNYXAgPSB0aGlzLnNwZWN1bGFyQ29sb3JNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHJcblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEuZW52TWFwID0gdGhpcy5lbnZNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHJcblx0XHRcdGlmICggdGhpcy5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5lbnZNYXBSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBSb3RhdGlvbiA9IHRoaXMuZW52TWFwUm90YXRpb24udG9BcnJheSgpO1xyXG5cdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcclxuXHRcdGlmICggdGhpcy5yZWZsZWN0aXZpdHkgIT09IHVuZGVmaW5lZCApIGRhdGEucmVmbGVjdGl2aXR5ID0gdGhpcy5yZWZsZWN0aXZpdHk7XHJcblx0XHRpZiAoIHRoaXMucmVmcmFjdGlvblJhdGlvICE9PSB1bmRlZmluZWQgKSBkYXRhLnJlZnJhY3Rpb25SYXRpbyA9IHRoaXMucmVmcmFjdGlvblJhdGlvO1xyXG5cclxuXHRcdGlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHtcclxuXHJcblx0XHRcdGRhdGEuZ3JhZGllbnRNYXAgPSB0aGlzLmdyYWRpZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy50cmFuc21pc3Npb24gIT09IHVuZGVmaW5lZCApIGRhdGEudHJhbnNtaXNzaW9uID0gdGhpcy50cmFuc21pc3Npb247XHJcblx0XHRpZiAoIHRoaXMudHJhbnNtaXNzaW9uTWFwICYmIHRoaXMudHJhbnNtaXNzaW9uTWFwLmlzVGV4dHVyZSApIGRhdGEudHJhbnNtaXNzaW9uTWFwID0gdGhpcy50cmFuc21pc3Npb25NYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdGlmICggdGhpcy50aGlja25lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEudGhpY2tuZXNzID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRpZiAoIHRoaXMudGhpY2tuZXNzTWFwICYmIHRoaXMudGhpY2tuZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEudGhpY2tuZXNzTWFwID0gdGhpcy50aGlja25lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcclxuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlICE9PSBJbmZpbml0eSApIGRhdGEuYXR0ZW51YXRpb25EaXN0YW5jZSA9IHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZTtcclxuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uQ29sb3IgPSB0aGlzLmF0dGVudWF0aW9uQ29sb3IuZ2V0SGV4KCk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZSA9IHRoaXMuc2l6ZTtcclxuXHRcdGlmICggdGhpcy5zaGFkb3dTaWRlICE9PSBudWxsICkgZGF0YS5zaGFkb3dTaWRlID0gdGhpcy5zaGFkb3dTaWRlO1xyXG5cdFx0aWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcclxuXHJcblx0XHRpZiAoIHRoaXMuYmxlbmRpbmcgIT09IE5vcm1hbEJsZW5kaW5nICkgZGF0YS5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7XHJcblx0XHRpZiAoIHRoaXMuc2lkZSAhPT0gRnJvbnRTaWRlICkgZGF0YS5zaWRlID0gdGhpcy5zaWRlO1xyXG5cdFx0aWYgKCB0aGlzLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSApIGRhdGEudmVydGV4Q29sb3JzID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMub3BhY2l0eSA8IDEgKSBkYXRhLm9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XHJcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgKSBkYXRhLnRyYW5zcGFyZW50ID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMuYmxlbmRTcmMgIT09IFNyY0FscGhhRmFjdG9yICkgZGF0YS5ibGVuZFNyYyA9IHRoaXMuYmxlbmRTcmM7XHJcblx0XHRpZiAoIHRoaXMuYmxlbmREc3QgIT09IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgKSBkYXRhLmJsZW5kRHN0ID0gdGhpcy5ibGVuZERzdDtcclxuXHRcdGlmICggdGhpcy5ibGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiApIGRhdGEuYmxlbmRFcXVhdGlvbiA9IHRoaXMuYmxlbmRFcXVhdGlvbjtcclxuXHRcdGlmICggdGhpcy5ibGVuZFNyY0FscGhhICE9PSBudWxsICkgZGF0YS5ibGVuZFNyY0FscGhhID0gdGhpcy5ibGVuZFNyY0FscGhhO1xyXG5cdFx0aWYgKCB0aGlzLmJsZW5kRHN0QWxwaGEgIT09IG51bGwgKSBkYXRhLmJsZW5kRHN0QWxwaGEgPSB0aGlzLmJsZW5kRHN0QWxwaGE7XHJcblx0XHRpZiAoIHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhICE9PSBudWxsICkgZGF0YS5ibGVuZEVxdWF0aW9uQWxwaGEgPSB0aGlzLmJsZW5kRXF1YXRpb25BbHBoYTtcclxuXHRcdGlmICggdGhpcy5ibGVuZENvbG9yICYmIHRoaXMuYmxlbmRDb2xvci5pc0NvbG9yICkgZGF0YS5ibGVuZENvbG9yID0gdGhpcy5ibGVuZENvbG9yLmdldEhleCgpO1xyXG5cdFx0aWYgKCB0aGlzLmJsZW5kQWxwaGEgIT09IDAgKSBkYXRhLmJsZW5kQWxwaGEgPSB0aGlzLmJsZW5kQWxwaGE7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmRlcHRoRnVuYyAhPT0gTGVzc0VxdWFsRGVwdGggKSBkYXRhLmRlcHRoRnVuYyA9IHRoaXMuZGVwdGhGdW5jO1xyXG5cdFx0aWYgKCB0aGlzLmRlcHRoVGVzdCA9PT0gZmFsc2UgKSBkYXRhLmRlcHRoVGVzdCA9IHRoaXMuZGVwdGhUZXN0O1xyXG5cdFx0aWYgKCB0aGlzLmRlcHRoV3JpdGUgPT09IGZhbHNlICkgZGF0YS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlO1xyXG5cdFx0aWYgKCB0aGlzLmNvbG9yV3JpdGUgPT09IGZhbHNlICkgZGF0YS5jb2xvcldyaXRlID0gdGhpcy5jb2xvcldyaXRlO1xyXG5cclxuXHRcdGlmICggdGhpcy5zdGVuY2lsV3JpdGVNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrO1xyXG5cdFx0aWYgKCB0aGlzLnN0ZW5jaWxGdW5jICE9PSBBbHdheXNTdGVuY2lsRnVuYyApIGRhdGEuc3RlbmNpbEZ1bmMgPSB0aGlzLnN0ZW5jaWxGdW5jO1xyXG5cdFx0aWYgKCB0aGlzLnN0ZW5jaWxSZWYgIT09IDAgKSBkYXRhLnN0ZW5jaWxSZWYgPSB0aGlzLnN0ZW5jaWxSZWY7XHJcblx0XHRpZiAoIHRoaXMuc3RlbmNpbEZ1bmNNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcclxuXHRcdGlmICggdGhpcy5zdGVuY2lsRmFpbCAhPT0gS2VlcFN0ZW5jaWxPcCApIGRhdGEuc3RlbmNpbEZhaWwgPSB0aGlzLnN0ZW5jaWxGYWlsO1xyXG5cdFx0aWYgKCB0aGlzLnN0ZW5jaWxaRmFpbCAhPT0gS2VlcFN0ZW5jaWxPcCApIGRhdGEuc3RlbmNpbFpGYWlsID0gdGhpcy5zdGVuY2lsWkZhaWw7XHJcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFpQYXNzICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzcztcclxuXHRcdGlmICggdGhpcy5zdGVuY2lsV3JpdGUgPT09IHRydWUgKSBkYXRhLnN0ZW5jaWxXcml0ZSA9IHRoaXMuc3RlbmNpbFdyaXRlO1xyXG5cclxuXHRcdC8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbClcclxuXHRcdGlmICggdGhpcy5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHRoaXMucm90YXRpb24gIT09IDAgKSBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcclxuXHJcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XHJcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldEZhY3RvciAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldEZhY3RvciA9IHRoaXMucG9seWdvbk9mZnNldEZhY3RvcjtcclxuXHRcdGlmICggdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRVbml0cyA9IHRoaXMucG9seWdvbk9mZnNldFVuaXRzO1xyXG5cclxuXHRcdGlmICggdGhpcy5saW5ld2lkdGggIT09IHVuZGVmaW5lZCAmJiB0aGlzLmxpbmV3aWR0aCAhPT0gMSApIGRhdGEubGluZXdpZHRoID0gdGhpcy5saW5ld2lkdGg7XHJcblx0XHRpZiAoIHRoaXMuZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZGFzaFNpemUgPSB0aGlzLmRhc2hTaXplO1xyXG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcclxuXHRcdGlmICggdGhpcy5zY2FsZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zY2FsZSA9IHRoaXMuc2NhbGU7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMuYWxwaGFUZXN0ID4gMCApIGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7XHJcblx0XHRpZiAoIHRoaXMuYWxwaGFIYXNoID09PSB0cnVlICkgZGF0YS5hbHBoYUhhc2ggPSB0cnVlO1xyXG5cdFx0aWYgKCB0aGlzLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZSApIGRhdGEuYWxwaGFUb0NvdmVyYWdlID0gdHJ1ZTtcclxuXHRcdGlmICggdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSBkYXRhLnByZW11bHRpcGxpZWRBbHBoYSA9IHRydWU7XHJcblx0XHRpZiAoIHRoaXMuZm9yY2VTaW5nbGVQYXNzID09PSB0cnVlICkgZGF0YS5mb3JjZVNpbmdsZVBhc3MgPSB0cnVlO1xyXG5cclxuXHRcdGlmICggdGhpcy53aXJlZnJhbWUgPT09IHRydWUgKSBkYXRhLndpcmVmcmFtZSA9IHRydWU7XHJcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWNhcCA9IHRoaXMud2lyZWZyYW1lTGluZWNhcDtcclxuXHRcdGlmICggdGhpcy53aXJlZnJhbWVMaW5lam9pbiAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWpvaW4gPSB0aGlzLndpcmVmcmFtZUxpbmVqb2luO1xyXG5cclxuXHRcdGlmICggdGhpcy5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIGRhdGEuZmxhdFNoYWRpbmcgPSB0cnVlO1xyXG5cclxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdGlmICggdGhpcy50b25lTWFwcGVkID09PSBmYWxzZSApIGRhdGEudG9uZU1hcHBlZCA9IGZhbHNlO1xyXG5cclxuXHRcdGlmICggdGhpcy5mb2cgPT09IGZhbHNlICkgZGF0YS5mb2cgPSBmYWxzZTtcclxuXHJcblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xyXG5cclxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxyXG5cclxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBjYWNoZVsga2V5IF07XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XHJcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XHJcblx0XHRcdGNvbnN0IGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XHJcblxyXG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBkYXRhLnRleHR1cmVzID0gdGV4dHVyZXM7XHJcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBkYXRhLmltYWdlcyA9IGltYWdlcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHJcblx0XHR0aGlzLmJsZW5kaW5nID0gc291cmNlLmJsZW5kaW5nO1xyXG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XHJcblx0XHR0aGlzLnZlcnRleENvbG9ycyA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnM7XHJcblxyXG5cdFx0dGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7XHJcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gc291cmNlLnRyYW5zcGFyZW50O1xyXG5cclxuXHRcdHRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7XHJcblx0XHR0aGlzLmJsZW5kRHN0ID0gc291cmNlLmJsZW5kRHN0O1xyXG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uID0gc291cmNlLmJsZW5kRXF1YXRpb247XHJcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTtcclxuXHRcdHRoaXMuYmxlbmREc3RBbHBoYSA9IHNvdXJjZS5ibGVuZERzdEFscGhhO1xyXG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBzb3VyY2UuYmxlbmRFcXVhdGlvbkFscGhhO1xyXG5cdFx0dGhpcy5ibGVuZENvbG9yLmNvcHkoIHNvdXJjZS5ibGVuZENvbG9yICk7XHJcblx0XHR0aGlzLmJsZW5kQWxwaGEgPSBzb3VyY2UuYmxlbmRBbHBoYTtcclxuXHJcblx0XHR0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7XHJcblx0XHR0aGlzLmRlcHRoVGVzdCA9IHNvdXJjZS5kZXB0aFRlc3Q7XHJcblx0XHR0aGlzLmRlcHRoV3JpdGUgPSBzb3VyY2UuZGVwdGhXcml0ZTtcclxuXHJcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSBzb3VyY2Uuc3RlbmNpbFdyaXRlTWFzaztcclxuXHRcdHRoaXMuc3RlbmNpbEZ1bmMgPSBzb3VyY2Uuc3RlbmNpbEZ1bmM7XHJcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSBzb3VyY2Uuc3RlbmNpbFJlZjtcclxuXHRcdHRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gc291cmNlLnN0ZW5jaWxGdW5jTWFzaztcclxuXHRcdHRoaXMuc3RlbmNpbEZhaWwgPSBzb3VyY2Uuc3RlbmNpbEZhaWw7XHJcblx0XHR0aGlzLnN0ZW5jaWxaRmFpbCA9IHNvdXJjZS5zdGVuY2lsWkZhaWw7XHJcblx0XHR0aGlzLnN0ZW5jaWxaUGFzcyA9IHNvdXJjZS5zdGVuY2lsWlBhc3M7XHJcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZSA9IHNvdXJjZS5zdGVuY2lsV3JpdGU7XHJcblxyXG5cdFx0Y29uc3Qgc3JjUGxhbmVzID0gc291cmNlLmNsaXBwaW5nUGxhbmVzO1xyXG5cdFx0bGV0IGRzdFBsYW5lcyA9IG51bGw7XHJcblxyXG5cdFx0aWYgKCBzcmNQbGFuZXMgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBuID0gc3JjUGxhbmVzLmxlbmd0aDtcclxuXHRcdFx0ZHN0UGxhbmVzID0gbmV3IEFycmF5KCBuICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRcdGRzdFBsYW5lc1sgaSBdID0gc3JjUGxhbmVzWyBpIF0uY2xvbmUoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcclxuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IHNvdXJjZS5jbGlwSW50ZXJzZWN0aW9uO1xyXG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IHNvdXJjZS5jbGlwU2hhZG93cztcclxuXHJcblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBzb3VyY2Uuc2hhZG93U2lkZTtcclxuXHJcblx0XHR0aGlzLmNvbG9yV3JpdGUgPSBzb3VyY2UuY29sb3JXcml0ZTtcclxuXHJcblx0XHR0aGlzLnByZWNpc2lvbiA9IHNvdXJjZS5wcmVjaXNpb247XHJcblxyXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XHJcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBzb3VyY2UucG9seWdvbk9mZnNldEZhY3RvcjtcclxuXHRcdHRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gc291cmNlLnBvbHlnb25PZmZzZXRVbml0cztcclxuXHJcblx0XHR0aGlzLmRpdGhlcmluZyA9IHNvdXJjZS5kaXRoZXJpbmc7XHJcblxyXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xyXG5cdFx0dGhpcy5hbHBoYUhhc2ggPSBzb3VyY2UuYWxwaGFIYXNoO1xyXG5cdFx0dGhpcy5hbHBoYVRvQ292ZXJhZ2UgPSBzb3VyY2UuYWxwaGFUb0NvdmVyYWdlO1xyXG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xyXG5cdFx0dGhpcy5mb3JjZVNpbmdsZVBhc3MgPSBzb3VyY2UuZm9yY2VTaW5nbGVQYXNzO1xyXG5cclxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xyXG5cclxuXHRcdHRoaXMudG9uZU1hcHBlZCA9IHNvdXJjZS50b25lTWFwcGVkO1xyXG5cclxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0fVxyXG5cclxuXHRvbkJ1aWxkKCAvKiBzaGFkZXJvYmplY3QsIHJlbmRlcmVyICovICkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybiggJ01hdGVyaWFsOiBvbkJ1aWxkKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7IC8vIEBkZXByZWNhdGVkLCByMTY2XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IE11bHRpcGx5T3BlcmF0aW9uIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcclxuXHJcbmNsYXNzIE1lc2hCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNNZXNoQmFzaWNNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcclxuXHJcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBlbWlzc2l2ZVxyXG5cclxuXHRcdHRoaXMubWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcclxuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XHJcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcclxuXHRcdHRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcclxuXHRcdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xyXG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xyXG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xyXG5cclxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XHJcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xyXG5cclxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XHJcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xyXG5cclxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XHJcblx0XHR0aGlzLmVudk1hcFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5lbnZNYXBSb3RhdGlvbiApO1xyXG5cdFx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XHJcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XHJcblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XHJcblxyXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTWVzaEJhc2ljTWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcblxyXG4vLyBGYXN0IEhhbGYgRmxvYXQgQ29udmVyc2lvbnMsIGh0dHA6Ly93d3cuZm94LXRvb2xraXQub3JnL2Z0cC9mYXN0aGFsZmZsb2F0Y29udmVyc2lvbi5wZGZcclxuXHJcbmNvbnN0IF90YWJsZXMgPSAvKkBfX1BVUkVfXyovIF9nZW5lcmF0ZVRhYmxlcygpO1xyXG5cclxuZnVuY3Rpb24gX2dlbmVyYXRlVGFibGVzKCkge1xyXG5cclxuXHQvLyBmbG9hdDMyIHRvIGZsb2F0MTYgaGVscGVyc1xyXG5cclxuXHRjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoIDQgKTtcclxuXHRjb25zdCBmbG9hdFZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KCBidWZmZXIgKTtcclxuXHRjb25zdCB1aW50MzJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KCBidWZmZXIgKTtcclxuXHJcblx0Y29uc3QgYmFzZVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KCA1MTIgKTtcclxuXHRjb25zdCBzaGlmdFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KCA1MTIgKTtcclxuXHJcblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMjU2OyArKyBpICkge1xyXG5cclxuXHRcdGNvbnN0IGUgPSBpIC0gMTI3O1xyXG5cclxuXHRcdC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcclxuXHJcblx0XHRpZiAoIGUgPCAtIDI3ICkge1xyXG5cclxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDAwMDA7XHJcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAweDgwMDA7XHJcblx0XHRcdHNoaWZ0VGFibGVbIGkgXSA9IDI0O1xyXG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDI0O1xyXG5cclxuXHRcdFx0Ly8gc21hbGwgbnVtYmVyIChkZW5vcm0pXHJcblxyXG5cdFx0fSBlbHNlIGlmICggZSA8IC0gMTQgKSB7XHJcblxyXG5cdFx0XHRiYXNlVGFibGVbIGkgXSA9IDB4MDQwMCA+PiAoIC0gZSAtIDE0ICk7XHJcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAoIDB4MDQwMCA+PiAoIC0gZSAtIDE0ICkgKSB8IDB4ODAwMDtcclxuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gLSBlIC0gMTtcclxuXHRcdFx0c2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAtIGUgLSAxO1xyXG5cclxuXHRcdFx0Ly8gbm9ybWFsIG51bWJlclxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGUgPD0gMTUgKSB7XHJcblxyXG5cdFx0XHRiYXNlVGFibGVbIGkgXSA9ICggZSArIDE1ICkgPDwgMTA7XHJcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAoICggZSArIDE1ICkgPDwgMTAgKSB8IDB4ODAwMDtcclxuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gMTM7XHJcblx0XHRcdHNoaWZ0VGFibGVbIGkgfCAweDEwMCBdID0gMTM7XHJcblxyXG5cdFx0XHQvLyBsYXJnZSBudW1iZXIgKEluZmluaXR5LCAtSW5maW5pdHkpXHJcblxyXG5cdFx0fSBlbHNlIGlmICggZSA8IDEyOCApIHtcclxuXHJcblx0XHRcdGJhc2VUYWJsZVsgaSBdID0gMHg3YzAwO1xyXG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gMHhmYzAwO1xyXG5cdFx0XHRzaGlmdFRhYmxlWyBpIF0gPSAyNDtcclxuXHRcdFx0c2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAyNDtcclxuXHJcblx0XHRcdC8vIHN0YXkgKE5hTiwgSW5maW5pdHksIC1JbmZpbml0eSlcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDdjMDA7XHJcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAweGZjMDA7XHJcblx0XHRcdHNoaWZ0VGFibGVbIGkgXSA9IDEzO1xyXG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDEzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBmbG9hdDE2IHRvIGZsb2F0MzIgaGVscGVyc1xyXG5cclxuXHRjb25zdCBtYW50aXNzYVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KCAyMDQ4ICk7XHJcblx0Y29uc3QgZXhwb25lbnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNjQgKTtcclxuXHRjb25zdCBvZmZzZXRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNjQgKTtcclxuXHJcblx0Zm9yICggbGV0IGkgPSAxOyBpIDwgMTAyNDsgKysgaSApIHtcclxuXHJcblx0XHRsZXQgbSA9IGkgPDwgMTM7IC8vIHplcm8gcGFkIG1hbnRpc3NhIGJpdHNcclxuXHRcdGxldCBlID0gMDsgLy8gemVybyBleHBvbmVudFxyXG5cclxuXHRcdC8vIG5vcm1hbGl6ZWRcclxuXHRcdHdoaWxlICggKCBtICYgMHgwMDgwMDAwMCApID09PSAwICkge1xyXG5cclxuXHRcdFx0bSA8PD0gMTtcclxuXHRcdFx0ZSAtPSAweDAwODAwMDAwOyAvLyBkZWNyZW1lbnQgZXhwb25lbnRcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bSAmPSB+IDB4MDA4MDAwMDA7IC8vIGNsZWFyIGxlYWRpbmcgMSBiaXRcclxuXHRcdGUgKz0gMHgzODgwMDAwMDsgLy8gYWRqdXN0IGJpYXNcclxuXHJcblx0XHRtYW50aXNzYVRhYmxlWyBpIF0gPSBtIHwgZTtcclxuXHJcblx0fVxyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDEwMjQ7IGkgPCAyMDQ4OyArKyBpICkge1xyXG5cclxuXHRcdG1hbnRpc3NhVGFibGVbIGkgXSA9IDB4MzgwMDAwMDAgKyAoICggaSAtIDEwMjQgKSA8PCAxMyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZvciAoIGxldCBpID0gMTsgaSA8IDMxOyArKyBpICkge1xyXG5cclxuXHRcdGV4cG9uZW50VGFibGVbIGkgXSA9IGkgPDwgMjM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXhwb25lbnRUYWJsZVsgMzEgXSA9IDB4NDc4MDAwMDA7XHJcblx0ZXhwb25lbnRUYWJsZVsgMzIgXSA9IDB4ODAwMDAwMDA7XHJcblxyXG5cdGZvciAoIGxldCBpID0gMzM7IGkgPCA2MzsgKysgaSApIHtcclxuXHJcblx0XHRleHBvbmVudFRhYmxlWyBpIF0gPSAweDgwMDAwMDAwICsgKCAoIGkgLSAzMiApIDw8IDIzICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZXhwb25lbnRUYWJsZVsgNjMgXSA9IDB4Yzc4MDAwMDA7XHJcblxyXG5cdGZvciAoIGxldCBpID0gMTsgaSA8IDY0OyArKyBpICkge1xyXG5cclxuXHRcdGlmICggaSAhPT0gMzIgKSB7XHJcblxyXG5cdFx0XHRvZmZzZXRUYWJsZVsgaSBdID0gMTAyNDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGZsb2F0VmlldzogZmxvYXRWaWV3LFxyXG5cdFx0dWludDMyVmlldzogdWludDMyVmlldyxcclxuXHRcdGJhc2VUYWJsZTogYmFzZVRhYmxlLFxyXG5cdFx0c2hpZnRUYWJsZTogc2hpZnRUYWJsZSxcclxuXHRcdG1hbnRpc3NhVGFibGU6IG1hbnRpc3NhVGFibGUsXHJcblx0XHRleHBvbmVudFRhYmxlOiBleHBvbmVudFRhYmxlLFxyXG5cdFx0b2Zmc2V0VGFibGU6IG9mZnNldFRhYmxlXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8vIGZsb2F0MzIgdG8gZmxvYXQxNlxyXG5cclxuZnVuY3Rpb24gdG9IYWxmRmxvYXQoIHZhbCApIHtcclxuXHJcblx0aWYgKCBNYXRoLmFicyggdmFsICkgPiA2NTUwNCApIGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFVdGlscy50b0hhbGZGbG9hdCgpOiBWYWx1ZSBvdXQgb2YgcmFuZ2UuJyApO1xyXG5cclxuXHR2YWwgPSBjbGFtcCggdmFsLCAtIDY1NTA0LCA2NTUwNCApO1xyXG5cclxuXHRfdGFibGVzLmZsb2F0Vmlld1sgMCBdID0gdmFsO1xyXG5cdGNvbnN0IGYgPSBfdGFibGVzLnVpbnQzMlZpZXdbIDAgXTtcclxuXHRjb25zdCBlID0gKCBmID4+IDIzICkgJiAweDFmZjtcclxuXHRyZXR1cm4gX3RhYmxlcy5iYXNlVGFibGVbIGUgXSArICggKCBmICYgMHgwMDdmZmZmZiApID4+IF90YWJsZXMuc2hpZnRUYWJsZVsgZSBdICk7XHJcblxyXG59XHJcblxyXG4vLyBmbG9hdDE2IHRvIGZsb2F0MzJcclxuXHJcbmZ1bmN0aW9uIGZyb21IYWxmRmxvYXQoIHZhbCApIHtcclxuXHJcblx0Y29uc3QgbSA9IHZhbCA+PiAxMDtcclxuXHRfdGFibGVzLnVpbnQzMlZpZXdbIDAgXSA9IF90YWJsZXMubWFudGlzc2FUYWJsZVsgX3RhYmxlcy5vZmZzZXRUYWJsZVsgbSBdICsgKCB2YWwgJiAweDNmZiApIF0gKyBfdGFibGVzLmV4cG9uZW50VGFibGVbIG0gXTtcclxuXHRyZXR1cm4gX3RhYmxlcy5mbG9hdFZpZXdbIDAgXTtcclxuXHJcbn1cclxuXHJcbmNvbnN0IERhdGFVdGlscyA9IHtcclxuXHR0b0hhbGZGbG9hdDogdG9IYWxmRmxvYXQsXHJcblx0ZnJvbUhhbGZGbG9hdDogZnJvbUhhbGZGbG9hdCxcclxufTtcclxuXHJcbmV4cG9ydCB7XHJcblx0dG9IYWxmRmxvYXQsXHJcblx0ZnJvbUhhbGZGbG9hdCxcclxuXHREYXRhVXRpbHNcclxufTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBkZW5vcm1hbGl6ZSwgbm9ybWFsaXplIH0gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBTdGF0aWNEcmF3VXNhZ2UsIEZsb2F0VHlwZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IGZyb21IYWxmRmxvYXQsIHRvSGFsZkZsb2F0IH0gZnJvbSAnLi4vZXh0cmFzL0RhdGFVdGlscy5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdmVjdG9yMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcclxuXHJcbmxldCBfaWQgPSAwO1xyXG5cclxuY2xhc3MgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCA9IGZhbHNlICkge1xyXG5cclxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggYXJyYXkgKSApIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5pc0J1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XHJcblxyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQgKysgfSApO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9ICcnO1xyXG5cclxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcclxuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcclxuXHRcdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gaXRlbVNpemUgOiAwO1xyXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcclxuXHJcblx0XHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xyXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMgPSBbXTtcclxuXHRcdHRoaXMuZ3B1VHlwZSA9IEZsb2F0VHlwZTtcclxuXHJcblx0XHR0aGlzLnZlcnNpb24gPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdG9uVXBsb2FkQ2FsbGJhY2soKSB7fVxyXG5cclxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xyXG5cclxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0VXNhZ2UoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMudXNhZ2UgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRhZGRVcGRhdGVSYW5nZSggc3RhcnQsIGNvdW50ICkge1xyXG5cclxuXHRcdHRoaXMudXBkYXRlUmFuZ2VzLnB1c2goIHsgc3RhcnQsIGNvdW50IH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGVhclVwZGF0ZVJhbmdlcygpIHtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVJhbmdlcy5sZW5ndGggPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcclxuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XHJcblx0XHR0aGlzLmNvdW50ID0gc291cmNlLmNvdW50O1xyXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gc291cmNlLm5vcm1hbGl6ZWQ7XHJcblxyXG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcclxuXHRcdHRoaXMuZ3B1VHlwZSA9IHNvdXJjZS5ncHVUeXBlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHlBdCggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcclxuXHJcblx0XHRpbmRleDEgKj0gdGhpcy5pdGVtU2l6ZTtcclxuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5pdGVtU2l6ZTsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weUFycmF5KCBhcnJheSApIHtcclxuXHJcblx0XHR0aGlzLmFycmF5LnNldCggYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRhcHBseU1hdHJpeDMoIG0gKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLml0ZW1TaXplID09PSAyICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdF92ZWN0b3IyLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcclxuXHRcdFx0XHRfdmVjdG9yMi5hcHBseU1hdHJpeDMoIG0gKTtcclxuXHJcblx0XHRcdFx0dGhpcy5zZXRYWSggaSwgX3ZlY3RvcjIueCwgX3ZlY3RvcjIueSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaXRlbVNpemUgPT09IDMgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XHJcblx0XHRcdFx0X3ZlY3Rvci5hcHBseU1hdHJpeDMoIG0gKTtcclxuXHJcblx0XHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlNYXRyaXg0KCBtICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XHJcblxyXG5cdFx0XHRfdmVjdG9yLmFwcGx5TWF0cml4NCggbSApO1xyXG5cclxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcclxuXHJcblx0XHRcdF92ZWN0b3IuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcclxuXHJcblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zZm9ybURpcmVjdGlvbiggbSApIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xyXG5cclxuXHRcdFx0X3ZlY3Rvci50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcclxuXHJcblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggdmFsdWUsIG9mZnNldCA9IDAgKSB7XHJcblxyXG5cdFx0Ly8gTWF0Y2hpbmcgQnVmZmVyQXR0cmlidXRlIGNvbnN0cnVjdG9yLCBkbyBub3Qgbm9ybWFsaXplIHRoZSBhcnJheS5cclxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50ICkge1xyXG5cclxuXHRcdGxldCB2YWx1ZSA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdmFsdWUgPSBkZW5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50LCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHZhbHVlID0gbm9ybWFsaXplKCB2YWx1ZSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdID0gdmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0WCggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHggPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBkZW5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHJldHVybiB4O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFgoIGluZGV4LCB4ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdID0geDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRZKCBpbmRleCApIHtcclxuXHJcblx0XHRsZXQgeSA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBkZW5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHJldHVybiB5O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFkoIGluZGV4LCB5ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0WiggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHogPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gZGVub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gejtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRaKCBpbmRleCwgeiApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFcoIGluZGV4ICkge1xyXG5cclxuXHRcdGxldCB3ID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IGRlbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0cmV0dXJuIHc7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0VyggaW5kZXgsIHcgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYWSggaW5kZXgsIHgsIHkgKSB7XHJcblxyXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WFlaKCBpbmRleCwgeCwgeSwgeiApIHtcclxuXHJcblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xyXG5cclxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XHJcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFhZWlcoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xyXG5cclxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XHJcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0eiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRvblVwbG9hZCggY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplICkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0ge1xyXG5cdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcclxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxyXG5cdFx0XHRhcnJheTogQXJyYXkuZnJvbSggdGhpcy5hcnJheSApLFxyXG5cdFx0XHRub3JtYWxpemVkOiB0aGlzLm5vcm1hbGl6ZWRcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xyXG5cdFx0aWYgKCB0aGlzLnVzYWdlICE9PSBTdGF0aWNEcmF3VXNhZ2UgKSBkYXRhLnVzYWdlID0gdGhpcy51c2FnZTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbmNsYXNzIEludDhCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xyXG5cclxuXHRcdHN1cGVyKCBuZXcgSW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5jbGFzcyBVaW50OEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG5ldyBVaW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5jbGFzcyBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xyXG5cclxuXHRcdHN1cGVyKCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIEludDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRzdXBlciggbmV3IEludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY2xhc3MgSW50MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xyXG5cclxuXHRcdHN1cGVyKCBuZXcgSW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY2xhc3MgVWludDMyQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRzdXBlciggbmV3IFVpbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5jbGFzcyBGbG9hdDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRzdXBlciggbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHRcdHRoaXMuaXNGbG9hdDE2QnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRYKCBpbmRleCApIHtcclxuXHJcblx0XHRsZXQgeCA9IGZyb21IYWxmRmxvYXQoIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdICk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gZGVub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4geDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYKCBpbmRleCwgeCApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0WSggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHkgPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gKTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBkZW5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHJldHVybiB5O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFkoIGluZGV4LCB5ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHRvSGFsZkZsb2F0KCB5ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0WiggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHogPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gKTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBkZW5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHJldHVybiB6O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFooIGluZGV4LCB6ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXSA9IHRvSGFsZkZsb2F0KCB6ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0VyggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHcgPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gKTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBkZW5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHJldHVybiB3O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFcoIGluZGV4LCB3ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXSA9IHRvSGFsZkZsb2F0KCB3ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WFkoIGluZGV4LCB4LCB5ICkge1xyXG5cclxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XHJcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB0b0hhbGZGbG9hdCggeCApO1xyXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB0b0hhbGZGbG9hdCggeSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XHJcblxyXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0gdG9IYWxmRmxvYXQoIHggKTtcclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0gdG9IYWxmRmxvYXQoIHkgKTtcclxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gdG9IYWxmRmxvYXQoIHogKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcclxuXHJcblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xyXG5cclxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XHJcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0dyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHRvSGFsZkZsb2F0KCB5ICk7XHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHRvSGFsZkZsb2F0KCB6ICk7XHJcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDMgXSA9IHRvSGFsZkZsb2F0KCB3ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5jbGFzcyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRzdXBlciggbmV3IEZsb2F0MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbmV4cG9ydCB7XHJcblx0RmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSxcclxuXHRGbG9hdDE2QnVmZmVyQXR0cmlidXRlLFxyXG5cdFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSxcclxuXHRJbnQzMkJ1ZmZlckF0dHJpYnV0ZSxcclxuXHRVaW50MTZCdWZmZXJBdHRyaWJ1dGUsXHJcblx0SW50MTZCdWZmZXJBdHRyaWJ1dGUsXHJcblx0VWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLFxyXG5cdFVpbnQ4QnVmZmVyQXR0cmlidXRlLFxyXG5cdEludDhCdWZmZXJBdHRyaWJ1dGUsXHJcblx0QnVmZmVyQXR0cmlidXRlXHJcbn07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XHJcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4vRXZlbnREaXNwYXRjaGVyLmpzJztcclxuaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBVaW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4vQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xyXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4vT2JqZWN0M0QuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdGgvTWF0cml4My5qcyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuaW1wb3J0IHsgYXJyYXlOZWVkc1VpbnQzMiB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuXHJcbmxldCBfaWQgPSAwO1xyXG5cclxuY29uc3QgX20xID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xyXG5jb25zdCBfb2JqID0gLypAX19QVVJFX18qLyBuZXcgT2JqZWN0M0QoKTtcclxuY29uc3QgX29mZnNldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX2JveCA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcclxuY29uc3QgX2JveE1vcnBoVGFyZ2V0cyA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcclxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIEJ1ZmZlckdlb21ldHJ5IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzQnVmZmVyR2VvbWV0cnkgPSB0cnVlO1xyXG5cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX2lkICsrIH0gKTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSAnJztcclxuXHRcdHRoaXMudHlwZSA9ICdCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5pbmRleCA9IG51bGw7XHJcblx0XHR0aGlzLmluZGlyZWN0ID0gbnVsbDtcclxuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG5cclxuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XHJcblx0XHR0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XHJcblxyXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEluZGV4KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmluZGV4O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEluZGV4KCBpbmRleCApIHtcclxuXHJcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGluZGV4ICkgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmluZGV4ID0gbmV3ICggYXJyYXlOZWVkc1VpbnQzMiggaW5kZXggKSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRleCwgMSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmluZGV4ID0gaW5kZXg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEluZGlyZWN0KCBpbmRpcmVjdCApIHtcclxuXHJcblx0XHR0aGlzLmluZGlyZWN0ID0gaW5kaXJlY3Q7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0SW5kaXJlY3QoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaW5kaXJlY3Q7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0QXR0cmlidXRlKCBuYW1lICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRBdHRyaWJ1dGUoIG5hbWUsIGF0dHJpYnV0ZSApIHtcclxuXHJcblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkZWxldGVBdHRyaWJ1dGUoIG5hbWUgKSB7XHJcblxyXG5cdFx0ZGVsZXRlIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGhhc0F0dHJpYnV0ZSggbmFtZSApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF0gIT09IHVuZGVmaW5lZDtcclxuXHJcblx0fVxyXG5cclxuXHRhZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ID0gMCApIHtcclxuXHJcblx0XHR0aGlzLmdyb3Vwcy5wdXNoKCB7XHJcblxyXG5cdFx0XHRzdGFydDogc3RhcnQsXHJcblx0XHRcdGNvdW50OiBjb3VudCxcclxuXHRcdFx0bWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleFxyXG5cclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGVhckdyb3VwcygpIHtcclxuXHJcblx0XHR0aGlzLmdyb3VwcyA9IFtdO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldERyYXdSYW5nZSggc3RhcnQsIGNvdW50ICkge1xyXG5cclxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XHJcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xyXG5cclxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHRcdGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHBvc2l0aW9uLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XHJcblxyXG5cdFx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IG5vcm1hbCA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XHJcblxyXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGNvbnN0IG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcclxuXHJcblx0XHRcdG5vcm1hbC5hcHBseU5vcm1hbE1hdHJpeCggbm9ybWFsTWF0cml4ICk7XHJcblxyXG5cdFx0XHRub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0YW5nZW50ID0gdGhpcy5hdHRyaWJ1dGVzLnRhbmdlbnQ7XHJcblxyXG5cdFx0aWYgKCB0YW5nZW50ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0YW5nZW50LnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICk7XHJcblxyXG5cdFx0XHR0YW5nZW50Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xyXG5cclxuXHRcdF9tMS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVYKCBhbmdsZSApIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xyXG5cclxuXHRcdF9tMS5tYWtlUm90YXRpb25YKCBhbmdsZSApO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVZKCBhbmdsZSApIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xyXG5cclxuXHRcdF9tMS5tYWtlUm90YXRpb25ZKCBhbmdsZSApO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyb3RhdGVaKCBhbmdsZSApIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xyXG5cclxuXHRcdF9tMS5tYWtlUm90YXRpb25aKCBhbmdsZSApO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0cmFuc2xhdGUoIHgsIHksIHogKSB7XHJcblxyXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XHJcblxyXG5cdFx0X20xLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzY2FsZSggeCwgeSwgeiApIHtcclxuXHJcblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxyXG5cclxuXHRcdF9tMS5tYWtlU2NhbGUoIHgsIHksIHogKTtcclxuXHJcblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bG9va0F0KCB2ZWN0b3IgKSB7XHJcblxyXG5cdFx0X29iai5sb29rQXQoIHZlY3RvciApO1xyXG5cclxuXHRcdF9vYmoudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9vYmoubWF0cml4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2VudGVyKCkge1xyXG5cclxuXHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcblxyXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIF9vZmZzZXQgKS5uZWdhdGUoKTtcclxuXHJcblx0XHR0aGlzLnRyYW5zbGF0ZSggX29mZnNldC54LCBfb2Zmc2V0LnksIF9vZmZzZXQueiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XHJcblxyXG5cdFx0aWYgKCBwb3NpdGlvbkF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBbXTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBwb2ludCA9IHBvaW50c1sgaSBdO1xyXG5cdFx0XHRcdHBvc2l0aW9uLnB1c2goIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgMyApICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnN0IGwgPSBNYXRoLm1pbiggcG9pbnRzLmxlbmd0aCwgcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKTsgLy8gbWFrZSBzdXJlIGRhdGEgZG8gbm90IGV4Y2VlZCBidWZmZXIgc2l6ZVxyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgcG9pbnQgPSBwb2ludHNbIGkgXTtcclxuXHRcdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5zZXRYWVooIGksIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBwb2ludHMubGVuZ3RoID4gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiBCdWZmZXIgc2l6ZSB0b28gc21hbGwgZm9yIHBvaW50cyBkYXRhLiBVc2UgLmRpc3Bvc2UoKSBhbmQgY3JlYXRlIGEgbmV3IGdlb21ldHJ5LicgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBvc2l0aW9uQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29tcHV0ZUJvdW5kaW5nQm94KCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0aWYgKCBwb3NpdGlvbiAmJiBwb3NpdGlvbi5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpOiBHTEJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBhIG1hbnVhbCBib3VuZGluZyBib3guJywgdGhpcyApO1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5zZXQoXHJcblx0XHRcdFx0bmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcclxuXHJcblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XHJcblxyXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xyXG5cdFx0XHRcdFx0X2JveC5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdF92ZWN0b3IuYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5taW4sIF9ib3gubWluICk7XHJcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciApO1xyXG5cclxuXHRcdFx0XHRcdFx0X3ZlY3Rvci5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1heCwgX2JveC5tYXggKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveC5taW4gKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94Lm1heCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpOiBDb21wdXRlZCBtaW4vbWF4IGhhdmUgTmFOIHZhbHVlcy4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0aWYgKCBwb3NpdGlvbiAmJiBwb3NpdGlvbi5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBHTEJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBhIG1hbnVhbCBib3VuZGluZyBzcGhlcmUuJywgdGhpcyApO1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXQoIG5ldyBWZWN0b3IzKCksIEluZmluaXR5ICk7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggcG9zaXRpb24gKSB7XHJcblxyXG5cdFx0XHQvLyBmaXJzdCwgZmluZCB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBzcGhlcmVcclxuXHJcblx0XHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO1xyXG5cclxuXHRcdFx0X2JveC5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiApO1xyXG5cclxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcclxuXHJcblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XHJcblx0XHRcdFx0XHRfYm94TW9ycGhUYXJnZXRzLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0X3ZlY3Rvci5hZGRWZWN0b3JzKCBfYm94Lm1pbiwgX2JveE1vcnBoVGFyZ2V0cy5taW4gKTtcclxuXHRcdFx0XHRcdFx0X2JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yICk7XHJcblxyXG5cdFx0XHRcdFx0XHRfdmVjdG9yLmFkZFZlY3RvcnMoIF9ib3gubWF4LCBfYm94TW9ycGhUYXJnZXRzLm1heCApO1xyXG5cdFx0XHRcdFx0XHRfYm94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IgKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0X2JveC5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1pbiApO1xyXG5cdFx0XHRcdFx0XHRfYm94LmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfYm94LmdldENlbnRlciggY2VudGVyICk7XHJcblxyXG5cdFx0XHQvLyBzZWNvbmQsIHRyeSB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXHJcblx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcclxuXHJcblx0XHRcdGxldCBtYXhSYWRpdXNTcSA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb24uY291bnQ7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaSApO1xyXG5cclxuXHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XHJcblxyXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xyXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSBtb3JwaEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaiApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0X29mZnNldC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaiApO1xyXG5cdFx0XHRcdFx0XHRcdF92ZWN0b3IuYWRkKCBfb2Zmc2V0ICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yICkgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xyXG5cclxuXHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y29tcHV0ZVRhbmdlbnRzKCkge1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcclxuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy50ZXJhdGhvbi5jb20vY29kZS90YW5nZW50Lmh0bWxcclxuXHRcdC8vIChwZXIgdmVydGV4IHRhbmdlbnRzKVxyXG5cclxuXHRcdGlmICggaW5kZXggPT09IG51bGwgfHxcclxuXHRcdFx0IGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHQgYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHQgYXR0cmlidXRlcy51diA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgZmFpbGVkLiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KScgKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMucG9zaXRpb247XHJcblx0XHRjb25zdCBub3JtYWxBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLm5vcm1hbDtcclxuXHRcdGNvbnN0IHV2QXR0cmlidXRlID0gYXR0cmlidXRlcy51djtcclxuXHJcblx0XHRpZiAoIHRoaXMuaGFzQXR0cmlidXRlKCAndGFuZ2VudCcgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3RhbmdlbnQnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCA0ICogcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKSwgNCApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHRhbmdlbnRBdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3RhbmdlbnQnICk7XHJcblxyXG5cdFx0Y29uc3QgdGFuMSA9IFtdLCB0YW4yID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0YW4xWyBpIF0gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHR0YW4yWyBpIF0gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB2QSA9IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdHZCID0gbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0dkMgPSBuZXcgVmVjdG9yMygpLFxyXG5cclxuXHRcdFx0dXZBID0gbmV3IFZlY3RvcjIoKSxcclxuXHRcdFx0dXZCID0gbmV3IFZlY3RvcjIoKSxcclxuXHRcdFx0dXZDID0gbmV3IFZlY3RvcjIoKSxcclxuXHJcblx0XHRcdHNkaXIgPSBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHR0ZGlyID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBoYW5kbGVUcmlhbmdsZSggYSwgYiwgYyApIHtcclxuXHJcblx0XHRcdHZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7XHJcblx0XHRcdHZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBiICk7XHJcblx0XHRcdHZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBjICk7XHJcblxyXG5cdFx0XHR1dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXZBdHRyaWJ1dGUsIGEgKTtcclxuXHRcdFx0dXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2QXR0cmlidXRlLCBiICk7XHJcblx0XHRcdHV2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1dkF0dHJpYnV0ZSwgYyApO1xyXG5cclxuXHRcdFx0dkIuc3ViKCB2QSApO1xyXG5cdFx0XHR2Qy5zdWIoIHZBICk7XHJcblxyXG5cdFx0XHR1dkIuc3ViKCB1dkEgKTtcclxuXHRcdFx0dXZDLnN1YiggdXZBICk7XHJcblxyXG5cdFx0XHRjb25zdCByID0gMS4wIC8gKCB1dkIueCAqIHV2Qy55IC0gdXZDLnggKiB1dkIueSApO1xyXG5cclxuXHRcdFx0Ly8gc2lsZW50bHkgaWdub3JlIGRlZ2VuZXJhdGUgdXYgdHJpYW5nbGVzIGhhdmluZyBjb2luY2lkZW50IG9yIGNvbGluZWFyIHZlcnRpY2VzXHJcblxyXG5cdFx0XHRpZiAoICEgaXNGaW5pdGUoIHIgKSApIHJldHVybjtcclxuXHJcblx0XHRcdHNkaXIuY29weSggdkIgKS5tdWx0aXBseVNjYWxhciggdXZDLnkgKS5hZGRTY2FsZWRWZWN0b3IoIHZDLCAtIHV2Qi55ICkubXVsdGlwbHlTY2FsYXIoIHIgKTtcclxuXHRcdFx0dGRpci5jb3B5KCB2QyApLm11bHRpcGx5U2NhbGFyKCB1dkIueCApLmFkZFNjYWxlZFZlY3RvciggdkIsIC0gdXZDLnggKS5tdWx0aXBseVNjYWxhciggciApO1xyXG5cclxuXHRcdFx0dGFuMVsgYSBdLmFkZCggc2RpciApO1xyXG5cdFx0XHR0YW4xWyBiIF0uYWRkKCBzZGlyICk7XHJcblx0XHRcdHRhbjFbIGMgXS5hZGQoIHNkaXIgKTtcclxuXHJcblx0XHRcdHRhbjJbIGEgXS5hZGQoIHRkaXIgKTtcclxuXHRcdFx0dGFuMlsgYiBdLmFkZCggdGRpciApO1xyXG5cdFx0XHR0YW4yWyBjIF0uYWRkKCB0ZGlyICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBncm91cHMgPSB0aGlzLmdyb3VwcztcclxuXHJcblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XHJcblxyXG5cdFx0XHRncm91cHMgPSBbIHtcclxuXHRcdFx0XHRzdGFydDogMCxcclxuXHRcdFx0XHRjb3VudDogaW5kZXguY291bnRcclxuXHRcdFx0fSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcclxuXHJcblx0XHRcdGNvbnN0IHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XHJcblx0XHRcdGNvbnN0IGNvdW50ID0gZ3JvdXAuY291bnQ7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xyXG5cclxuXHRcdFx0XHRoYW5kbGVUcmlhbmdsZShcclxuXHRcdFx0XHRcdGluZGV4LmdldFgoIGogKyAwICksXHJcblx0XHRcdFx0XHRpbmRleC5nZXRYKCBqICsgMSApLFxyXG5cdFx0XHRcdFx0aW5kZXguZ2V0WCggaiArIDIgKVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHRtcCA9IG5ldyBWZWN0b3IzKCksIHRtcDIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgbiA9IG5ldyBWZWN0b3IzKCksIG4yID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBoYW5kbGVWZXJ0ZXgoIHYgKSB7XHJcblxyXG5cdFx0XHRuLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdiApO1xyXG5cdFx0XHRuMi5jb3B5KCBuICk7XHJcblxyXG5cdFx0XHRjb25zdCB0ID0gdGFuMVsgdiBdO1xyXG5cclxuXHRcdFx0Ly8gR3JhbS1TY2htaWR0IG9ydGhvZ29uYWxpemVcclxuXHJcblx0XHRcdHRtcC5jb3B5KCB0ICk7XHJcblx0XHRcdHRtcC5zdWIoIG4ubXVsdGlwbHlTY2FsYXIoIG4uZG90KCB0ICkgKSApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGhhbmRlZG5lc3NcclxuXHJcblx0XHRcdHRtcDIuY3Jvc3NWZWN0b3JzKCBuMiwgdCApO1xyXG5cdFx0XHRjb25zdCB0ZXN0ID0gdG1wMi5kb3QoIHRhbjJbIHYgXSApO1xyXG5cdFx0XHRjb25zdCB3ID0gKCB0ZXN0IDwgMC4wICkgPyAtIDEuMCA6IDEuMDtcclxuXHJcblx0XHRcdHRhbmdlbnRBdHRyaWJ1dGUuc2V0WFlaVyggdiwgdG1wLngsIHRtcC55LCB0bXAueiwgdyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcclxuXHJcblx0XHRcdGNvbnN0IHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XHJcblx0XHRcdGNvbnN0IGNvdW50ID0gZ3JvdXAuY291bnQ7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xyXG5cclxuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGV4LmdldFgoIGogKyAwICkgKTtcclxuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGV4LmdldFgoIGogKyAxICkgKTtcclxuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGV4LmdldFgoIGogKyAyICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y29tcHV0ZVZlcnRleE5vcm1hbHMoKSB7XHJcblxyXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xyXG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xyXG5cclxuXHRcdGlmICggcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGxldCBub3JtYWxBdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcclxuXHJcblx0XHRcdGlmICggbm9ybWFsQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50ICogMyApLCAzICk7XHJcblx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBub3JtYWxBdHRyaWJ1dGUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIHJlc2V0IGV4aXN0aW5nIG5vcm1hbHMgdG8gemVyb1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbm9ybWFsQXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSwgMCwgMCwgMCApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBwQSA9IG5ldyBWZWN0b3IzKCksIHBCID0gbmV3IFZlY3RvcjMoKSwgcEMgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCBuQSA9IG5ldyBWZWN0b3IzKCksIG5CID0gbmV3IFZlY3RvcjMoKSwgbkMgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcclxuXHJcblx0XHRcdGlmICggaW5kZXggKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgdkEgPSBpbmRleC5nZXRYKCBpICsgMCApO1xyXG5cdFx0XHRcdFx0Y29uc3QgdkIgPSBpbmRleC5nZXRYKCBpICsgMSApO1xyXG5cdFx0XHRcdFx0Y29uc3QgdkMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xyXG5cclxuXHRcdFx0XHRcdHBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCB2QSApO1xyXG5cdFx0XHRcdFx0cEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZCICk7XHJcblx0XHRcdFx0XHRwQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgdkMgKTtcclxuXHJcblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcclxuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xyXG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XHJcblxyXG5cdFx0XHRcdFx0bkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QSApO1xyXG5cdFx0XHRcdFx0bkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QiApO1xyXG5cdFx0XHRcdFx0bkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QyApO1xyXG5cclxuXHRcdFx0XHRcdG5BLmFkZCggY2IgKTtcclxuXHRcdFx0XHRcdG5CLmFkZCggY2IgKTtcclxuXHRcdFx0XHRcdG5DLmFkZCggY2IgKTtcclxuXHJcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCB2QSwgbkEueCwgbkEueSwgbkEueiApO1xyXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkIsIG5CLngsIG5CLnksIG5CLnogKTtcclxuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIHZDLCBuQy54LCBuQy55LCBuQy56ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdHBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMCApO1xyXG5cdFx0XHRcdFx0cEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7XHJcblx0XHRcdFx0XHRwQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDIgKTtcclxuXHJcblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcclxuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xyXG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XHJcblxyXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSArIDAsIGNiLngsIGNiLnksIGNiLnogKTtcclxuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGkgKyAxLCBjYi54LCBjYi55LCBjYi56ICk7XHJcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMiwgY2IueCwgY2IueSwgY2IueiApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcclxuXHJcblx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZU5vcm1hbHMoKSB7XHJcblxyXG5cdFx0Y29uc3Qgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgaSApO1xyXG5cclxuXHRcdFx0X3ZlY3Rvci5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdG5vcm1hbHMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHRvTm9uSW5kZXhlZCgpIHtcclxuXHJcblx0XHRmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcclxuXHRcdFx0Y29uc3QgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XHJcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBhdHRyaWJ1dGUubm9ybWFsaXplZDtcclxuXHJcblx0XHRcdGNvbnN0IGFycmF5MiA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggaW5kaWNlcy5sZW5ndGggKiBpdGVtU2l6ZSApO1xyXG5cclxuXHRcdFx0bGV0IGluZGV4ID0gMCwgaW5kZXgyID0gMDtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcclxuXHJcblx0XHRcdFx0XHRpbmRleCA9IGluZGljZXNbIGkgXSAqIGF0dHJpYnV0ZS5kYXRhLnN0cmlkZSArIGF0dHJpYnV0ZS5vZmZzZXQ7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBpdGVtU2l6ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheTIsIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKCB0aGlzLmluZGV4ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEJ1ZmZlckdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XHJcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdC8vIGF0dHJpYnV0ZXNcclxuXHJcblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XHJcblxyXG5cdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcclxuXHJcblx0XHRcdGdlb21ldHJ5Mi5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5ld0F0dHJpYnV0ZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXHJcblxyXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBtb3JwaEFycmF5ID0gW107XHJcblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZVsgaSBdO1xyXG5cclxuXHRcdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcclxuXHJcblx0XHRcdFx0bW9ycGhBcnJheS5wdXNoKCBuZXdBdHRyaWJ1dGUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJ5Mi5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IG1vcnBoQXJyYXk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGdlb21ldHJ5Mi5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7XHJcblxyXG5cdFx0Ly8gZ3JvdXBzXHJcblxyXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xyXG5cdFx0XHRnZW9tZXRyeTIuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0ge1xyXG5cdFx0XHRtZXRhZGF0YToge1xyXG5cdFx0XHRcdHZlcnNpb246IDQuNixcclxuXHRcdFx0XHR0eXBlOiAnQnVmZmVyR2VvbWV0cnknLFxyXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0J1ZmZlckdlb21ldHJ5LnRvSlNPTidcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzdGFuZGFyZCBCdWZmZXJHZW9tZXRyeSBzZXJpYWxpemF0aW9uXHJcblxyXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xyXG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xyXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xyXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcclxuXHJcblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcnNbIGtleSBdICE9PSB1bmRlZmluZWQgKSBkYXRhWyBrZXkgXSA9IHBhcmFtZXRlcnNbIGtleSBdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZvciBzaW1wbGljaXR5IHRoZSBjb2RlIGFzc3VtZXMgYXR0cmlidXRlcyBhcmUgbm90IHNoYXJlZCBhY3Jvc3MgZ2VvbWV0cmllcywgc2VlICMxNTgxMVxyXG5cclxuXHRcdGRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTtcclxuXHJcblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcclxuXHRcdFx0XHR0eXBlOiBpbmRleC5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxyXG5cdFx0XHRcdGFycmF5OiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggaW5kZXguYXJyYXkgKVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sga2V5IF07XHJcblxyXG5cdFx0XHRkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSBhdHRyaWJ1dGUudG9KU09OKCBkYXRhLmRhdGEgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0ge307XHJcblx0XHRsZXQgaGFzTW9ycGhBdHRyaWJ1dGVzID0gZmFsc2U7XHJcblxyXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIHRoaXMubW9ycGhBdHRyaWJ1dGVzICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkgPSB0aGlzLm1vcnBoQXR0cmlidXRlc1sga2V5IF07XHJcblxyXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xyXG5cclxuXHRcdFx0XHRhcnJheS5wdXNoKCBhdHRyaWJ1dGUudG9KU09OKCBkYXRhLmRhdGEgKSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBhcnJheS5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0XHRtb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XHJcblxyXG5cdFx0XHRcdGhhc01vcnBoQXR0cmlidXRlcyA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaGFzTW9ycGhBdHRyaWJ1dGVzICkge1xyXG5cclxuXHRcdFx0ZGF0YS5kYXRhLm1vcnBoQXR0cmlidXRlcyA9IG1vcnBoQXR0cmlidXRlcztcclxuXHRcdFx0ZGF0YS5kYXRhLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XHJcblxyXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdGRhdGEuZGF0YS5ncm91cHMgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggZ3JvdXBzICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSB0aGlzLmJvdW5kaW5nU3BoZXJlO1xyXG5cclxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRkYXRhLmRhdGEuYm91bmRpbmdTcGhlcmUgPSB7XHJcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxyXG5cdFx0XHRcdHJhZGl1czogYm91bmRpbmdTcGhlcmUucmFkaXVzXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0Ly8gcmVzZXRcclxuXHJcblx0XHR0aGlzLmluZGV4ID0gbnVsbDtcclxuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG5cdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXMgPSB7fTtcclxuXHRcdHRoaXMuZ3JvdXBzID0gW107XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHRcdC8vIHVzZWQgZm9yIHN0b3JpbmcgY2xvbmVkLCBzaGFyZWQgZGF0YVxyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSB7fTtcclxuXHJcblx0XHQvLyBuYW1lXHJcblxyXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XHJcblxyXG5cdFx0Ly8gaW5kZXhcclxuXHJcblx0XHRjb25zdCBpbmRleCA9IHNvdXJjZS5pbmRleDtcclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5zZXRJbmRleCggaW5kZXguY2xvbmUoIGRhdGEgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBhdHRyaWJ1dGVzXHJcblxyXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHNvdXJjZS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTtcclxuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIGF0dHJpYnV0ZS5jbG9uZSggZGF0YSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcclxuXHJcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcclxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzXHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRhcnJheS5wdXNoKCBtb3JwaEF0dHJpYnV0ZVsgaSBdLmNsb25lKCBkYXRhICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBhcnJheTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHNvdXJjZS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcclxuXHJcblx0XHQvLyBncm91cHNcclxuXHJcblx0XHRjb25zdCBncm91cHMgPSBzb3VyY2UuZ3JvdXBzO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcclxuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJvdW5kaW5nIGJveFxyXG5cclxuXHRcdGNvbnN0IGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xyXG5cclxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3guY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXHJcblxyXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XHJcblxyXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBkcmF3IHJhbmdlXHJcblxyXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzb3VyY2UuZHJhd1JhbmdlLnN0YXJ0O1xyXG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBzb3VyY2UuZHJhd1JhbmdlLmNvdW50O1xyXG5cclxuXHRcdC8vIHVzZXIgZGF0YVxyXG5cclxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XHJcbmltcG9ydCB7IFJheSB9IGZyb20gJy4uL21hdGgvUmF5LmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi4vbWF0aC9UcmlhbmdsZS5qcyc7XHJcbmltcG9ydCB7IEJhY2tTaWRlLCBGcm9udFNpZGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9NZXNoQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcblxyXG5jb25zdCBfaW52ZXJzZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX3JheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFJheSgpO1xyXG5jb25zdCBfc3BoZXJlID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XHJcbmNvbnN0IF9zcGhlcmVIaXRBdCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IF92QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3ZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdkMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfdGVtcEEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9tb3JwaEEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfaW50ZXJzZWN0aW9uUG9pbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgTWVzaCBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCkgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzTWVzaCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ01lc2gnO1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IHNvdXJjZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMuc2xpY2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBzb3VyY2UubWF0ZXJpYWwgKSA/IHNvdXJjZS5tYXRlcmlhbC5zbGljZSgpIDogc291cmNlLm1hdGVyaWFsO1xyXG5cdFx0dGhpcy5nZW9tZXRyeSA9IHNvdXJjZS5nZW9tZXRyeTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cclxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcclxuXHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyggbW9ycGhBdHRyaWJ1dGVzICk7XHJcblxyXG5cdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XHJcblxyXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XHJcblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xyXG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0VmVydGV4UG9zaXRpb24oIGluZGV4LCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0Y29uc3QgbW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XHJcblxyXG5cdFx0dGFyZ2V0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleCApO1xyXG5cclxuXHRcdGNvbnN0IG1vcnBoSW5mbHVlbmNlcyA9IHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xyXG5cclxuXHRcdGlmICggbW9ycGhQb3NpdGlvbiAmJiBtb3JwaEluZmx1ZW5jZXMgKSB7XHJcblxyXG5cdFx0XHRfbW9ycGhBLnNldCggMCwgMCwgMCApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdO1xyXG5cdFx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhQb3NpdGlvblsgaSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRfdGVtcEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGluZGV4ICk7XHJcblxyXG5cdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XHJcblxyXG5cdFx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQSwgaW5mbHVlbmNlICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQS5zdWIoIHRhcmdldCApLCBpbmZsdWVuY2UgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGFyZ2V0LmFkZCggX21vcnBoQSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XHJcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XHJcblxyXG5cdFx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIHRlc3Qgd2l0aCBib3VuZGluZyBzcGhlcmUgaW4gd29ybGQgc3BhY2VcclxuXHJcblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdFx0X3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xyXG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XHJcblxyXG5cdFx0Ly8gY2hlY2sgZGlzdGFuY2UgZnJvbSByYXkgb3JpZ2luIHRvIGJvdW5kaW5nIHNwaGVyZVxyXG5cclxuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLnJlY2FzdCggcmF5Y2FzdGVyLm5lYXIgKTtcclxuXHJcblx0XHRpZiAoIF9zcGhlcmUuY29udGFpbnNQb2ludCggX3JheS5vcmlnaW4gKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRpZiAoIF9yYXkuaW50ZXJzZWN0U3BoZXJlKCBfc3BoZXJlLCBfc3BoZXJlSGl0QXQgKSA9PT0gbnVsbCApIHJldHVybjtcclxuXHJcblx0XHRcdGlmICggX3JheS5vcmlnaW4uZGlzdGFuY2VUb1NxdWFyZWQoIF9zcGhlcmVIaXRBdCApID4gKCByYXljYXN0ZXIuZmFyIC0gcmF5Y2FzdGVyLm5lYXIgKSAqKiAyICkgcmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb252ZXJ0IHJheSB0byBsb2NhbCBzcGFjZSBvZiBtZXNoXHJcblxyXG5cdFx0X2ludmVyc2VNYXRyaXguY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcclxuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXggKTtcclxuXHJcblx0XHQvLyB0ZXN0IHdpdGggYm91bmRpbmcgYm94IGluIGxvY2FsIHNwYWNlXHJcblxyXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGlmICggX3JheS5pbnRlcnNlY3RzQm94KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApID09PSBmYWxzZSApIHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdGVzdCBmb3IgaW50ZXJzZWN0aW9ucyB3aXRoIGdlb21ldHJ5XHJcblxyXG5cdFx0dGhpcy5fY29tcHV0ZUludGVyc2VjdGlvbnMoIHJheWNhc3RlciwgaW50ZXJzZWN0cywgX3JheSApO1xyXG5cclxuXHR9XHJcblxyXG5cdF9jb21wdXRlSW50ZXJzZWN0aW9ucyggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByYXlMb2NhbFNwYWNlICkge1xyXG5cclxuXHRcdGxldCBpbnRlcnNlY3Rpb247XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblx0XHRjb25zdCB1diA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXY7XHJcblx0XHRjb25zdCB1djEgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2MTtcclxuXHRcdGNvbnN0IG5vcm1hbCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xyXG5cdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xyXG5cdFx0Y29uc3QgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xyXG5cclxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxyXG5cclxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XHJcblx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XHJcblx0XHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsIE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApICk7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgYSA9IGluZGV4LmdldFgoIGogKTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGogKyAxICk7XHJcblx0XHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleC5nZXRYKCBqICsgMiApO1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcclxuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XHJcblx0XHRcdFx0XHRjb25zdCBiID0gaW5kZXguZ2V0WCggaSArIDEgKTtcclxuXHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xyXG5cclxuXHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheUxvY2FsU3BhY2UsIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3NcclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Ly8gbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XHJcblxyXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcclxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcclxuXHRcdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICkgKTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gajtcclxuXHRcdFx0XHRcdFx0Y29uc3QgYiA9IGogKyAxO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBjID0gaiArIDI7XHJcblxyXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIHJheUxvY2FsU3BhY2UsIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcclxuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpO1xyXG5cdFx0XHRcdFx0Y29uc3QgYiA9IGkgKyAxO1xyXG5cdFx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xyXG5cclxuXHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheUxvY2FsU3BhY2UsIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXHJcblx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBBLCBwQiwgcEMsIHBvaW50ICkge1xyXG5cclxuXHRsZXQgaW50ZXJzZWN0O1xyXG5cclxuXHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xyXG5cclxuXHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEMsIHBCLCBwQSwgdHJ1ZSwgcG9pbnQgKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBBLCBwQiwgcEMsICggbWF0ZXJpYWwuc2lkZSA9PT0gRnJvbnRTaWRlICksIHBvaW50ICk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcclxuXHJcblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTtcclxuXHRfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkICk7XHJcblxyXG5cdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm4gbnVsbDtcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdHBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxyXG5cdFx0b2JqZWN0OiBvYmplY3RcclxuXHR9O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApIHtcclxuXHJcblx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBhLCBfdkEgKTtcclxuXHRvYmplY3QuZ2V0VmVydGV4UG9zaXRpb24oIGIsIF92QiApO1xyXG5cdG9iamVjdC5nZXRWZXJ0ZXhQb3NpdGlvbiggYywgX3ZDICk7XHJcblxyXG5cdGNvbnN0IGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgX3ZBLCBfdkIsIF92QywgX2ludGVyc2VjdGlvblBvaW50ICk7XHJcblxyXG5cdGlmICggaW50ZXJzZWN0aW9uICkge1xyXG5cclxuXHRcdGNvbnN0IGJhcnljb29yZCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIF9pbnRlcnNlY3Rpb25Qb2ludCwgX3ZBLCBfdkIsIF92QywgYmFyeWNvb3JkICk7XHJcblxyXG5cdFx0aWYgKCB1diApIHtcclxuXHJcblx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggdXYsIGEsIGIsIGMsIGJhcnljb29yZCwgbmV3IFZlY3RvcjIoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHV2MSApIHtcclxuXHJcblx0XHRcdGludGVyc2VjdGlvbi51djEgPSBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0ZWRBdHRyaWJ1dGUoIHV2MSwgYSwgYiwgYywgYmFyeWNvb3JkLCBuZXcgVmVjdG9yMigpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbm9ybWFsICkge1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0aW9uLm5vcm1hbCA9IFRyaWFuZ2xlLmdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggbm9ybWFsLCBhLCBiLCBjLCBiYXJ5Y29vcmQsIG5ldyBWZWN0b3IzKCkgKTtcclxuXHJcblx0XHRcdGlmICggaW50ZXJzZWN0aW9uLm5vcm1hbC5kb3QoIHJheS5kaXJlY3Rpb24gKSA+IDAgKSB7XHJcblxyXG5cdFx0XHRcdGludGVyc2VjdGlvbi5ub3JtYWwubXVsdGlwbHlTY2FsYXIoIC0gMSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBmYWNlID0ge1xyXG5cdFx0XHRhOiBhLFxyXG5cdFx0XHRiOiBiLFxyXG5cdFx0XHRjOiBjLFxyXG5cdFx0XHRub3JtYWw6IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdG1hdGVyaWFsSW5kZXg6IDBcclxuXHRcdH07XHJcblxyXG5cdFx0VHJpYW5nbGUuZ2V0Tm9ybWFsKCBfdkEsIF92QiwgX3ZDLCBmYWNlLm5vcm1hbCApO1xyXG5cclxuXHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcclxuXHRcdGludGVyc2VjdGlvbi5iYXJ5Y29vcmQgPSBiYXJ5Y29vcmQ7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGludGVyc2VjdGlvbjtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2ggfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcblxyXG5jbGFzcyBCb3hHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxLCBkZXB0aFNlZ21lbnRzID0gMSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHR3aWR0aDogd2lkdGgsXHJcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxyXG5cdFx0XHRkZXB0aDogZGVwdGgsXHJcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXHJcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gc2VnbWVudHNcclxuXHJcblx0XHR3aWR0aFNlZ21lbnRzID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xyXG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xyXG5cdFx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKTtcclxuXHJcblx0XHQvLyBidWZmZXJzXHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cclxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0XHRsZXQgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XHJcblx0XHRsZXQgZ3JvdXBTdGFydCA9IDA7XHJcblxyXG5cdFx0Ly8gYnVpbGQgZWFjaCBzaWRlIG9mIHRoZSBib3ggZ2VvbWV0cnlcclxuXHJcblx0XHRidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAtIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAwICk7IC8vIHB4XHJcblx0XHRidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAxLCAtIDEsIGRlcHRoLCBoZWlnaHQsIC0gd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAxICk7IC8vIG54XHJcblx0XHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxyXG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgLSAxLCB3aWR0aCwgZGVwdGgsIC0gaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAzICk7IC8vIG55XHJcblx0XHRidWlsZFBsYW5lKCAneCcsICd5JywgJ3onLCAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNCApOyAvLyBwelxyXG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XHJcblxyXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XHJcblxyXG5cdFx0XHRjb25zdCBzZWdtZW50V2lkdGggPSB3aWR0aCAvIGdyaWRYO1xyXG5cdFx0XHRjb25zdCBzZWdtZW50SGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7XHJcblxyXG5cdFx0XHRjb25zdCB3aWR0aEhhbGYgPSB3aWR0aCAvIDI7XHJcblx0XHRcdGNvbnN0IGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyO1xyXG5cdFx0XHRjb25zdCBkZXB0aEhhbGYgPSBkZXB0aCAvIDI7XHJcblxyXG5cdFx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XHJcblx0XHRcdGNvbnN0IGdyaWRZMSA9IGdyaWRZICsgMTtcclxuXHJcblx0XHRcdGxldCB2ZXJ0ZXhDb3VudGVyID0gMDtcclxuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0Y29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcclxuXHJcblx0XHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudEhlaWdodCAtIGhlaWdodEhhbGY7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCB4ID0gaXggKiBzZWdtZW50V2lkdGggLSB3aWR0aEhhbGY7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcclxuXHJcblx0XHRcdFx0XHR2ZWN0b3JbIHUgXSA9IHggKiB1ZGlyO1xyXG5cdFx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcclxuXHRcdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGhIYWxmO1xyXG5cclxuXHRcdFx0XHRcdC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gdmVydGV4IGJ1ZmZlclxyXG5cclxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudFxyXG5cclxuXHRcdFx0XHRcdHZlY3RvclsgdSBdID0gMDtcclxuXHRcdFx0XHRcdHZlY3RvclsgdiBdID0gMDtcclxuXHRcdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcclxuXHJcblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcclxuXHJcblx0XHRcdFx0XHQvLyB1dnNcclxuXHJcblx0XHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xyXG5cdFx0XHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIGNvdW50ZXJzXHJcblxyXG5cdFx0XHRcdFx0dmVydGV4Q291bnRlciArPSAxO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpbmRpY2VzXHJcblxyXG5cdFx0XHQvLyAxLiB5b3UgbmVlZCB0aHJlZSBpbmRpY2VzIHRvIGRyYXcgYSBzaW5nbGUgZmFjZVxyXG5cdFx0XHQvLyAyLiBhIHNpbmdsZSBzZWdtZW50IGNvbnNpc3RzIG9mIHR3byBmYWNlc1xyXG5cdFx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgYSA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqIGl5O1xyXG5cdFx0XHRcdFx0Y29uc3QgYiA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7XHJcblx0XHRcdFx0XHRjb25zdCBjID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApO1xyXG5cdFx0XHRcdFx0Y29uc3QgZCA9IG51bWJlck9mVmVydGljZXMgKyAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZmFjZXNcclxuXHJcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcclxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xyXG5cclxuXHRcdFx0XHRcdC8vIGluY3JlYXNlIGNvdW50ZXJcclxuXHJcblx0XHRcdFx0XHRncm91cENvdW50ICs9IDY7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XHJcblxyXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgbWF0ZXJpYWxJbmRleCApO1xyXG5cclxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXHJcblxyXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XHJcblxyXG5cdFx0XHQvLyB1cGRhdGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzXHJcblxyXG5cdFx0XHRudW1iZXJPZlZlcnRpY2VzICs9IHZlcnRleENvdW50ZXI7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBCb3hHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5kZXB0aFNlZ21lbnRzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEJveEdlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IENvbG9yTWFuYWdlbWVudCB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiBVbmlmb3JtIFV0aWxpdGllc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVVuaWZvcm1zKCBzcmMgKSB7XHJcblxyXG5cdGNvbnN0IGRzdCA9IHt9O1xyXG5cclxuXHRmb3IgKCBjb25zdCB1IGluIHNyYyApIHtcclxuXHJcblx0XHRkc3RbIHUgXSA9IHt9O1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IHAgaW4gc3JjWyB1IF0gKSB7XHJcblxyXG5cdFx0XHRjb25zdCBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07XHJcblxyXG5cdFx0XHRpZiAoIHByb3BlcnR5ICYmICggcHJvcGVydHkuaXNDb2xvciB8fFxyXG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcclxuXHRcdFx0XHRwcm9wZXJ0eS5pc1ZlY3RvcjIgfHwgcHJvcGVydHkuaXNWZWN0b3IzIHx8IHByb3BlcnR5LmlzVmVjdG9yNCB8fFxyXG5cdFx0XHRcdHByb3BlcnR5LmlzVGV4dHVyZSB8fCBwcm9wZXJ0eS5pc1F1YXRlcm5pb24gKSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBwcm9wZXJ0eS5pc1JlbmRlclRhcmdldFRleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVW5pZm9ybXNVdGlsczogVGV4dHVyZXMgb2YgcmVuZGVyIHRhcmdldHMgY2Fubm90IGJlIGNsb25lZCB2aWEgY2xvbmVVbmlmb3JtcygpIG9yIG1lcmdlVW5pZm9ybXMoKS4nICk7XHJcblx0XHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gbnVsbDtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHkuY2xvbmUoKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcHJvcGVydHkgKSApIHtcclxuXHJcblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LnNsaWNlKCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBkc3Q7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VVbmlmb3JtcyggdW5pZm9ybXMgKSB7XHJcblxyXG5cdGNvbnN0IG1lcmdlZCA9IHt9O1xyXG5cclxuXHRmb3IgKCBsZXQgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7XHJcblxyXG5cdFx0Y29uc3QgdG1wID0gY2xvbmVVbmlmb3JtcyggdW5pZm9ybXNbIHUgXSApO1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IHAgaW4gdG1wICkge1xyXG5cclxuXHRcdFx0bWVyZ2VkWyBwIF0gPSB0bXBbIHAgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG1lcmdlZDtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVVuaWZvcm1zR3JvdXBzKCBzcmMgKSB7XHJcblxyXG5cdGNvbnN0IGRzdCA9IFtdO1xyXG5cclxuXHRmb3IgKCBsZXQgdSA9IDA7IHUgPCBzcmMubGVuZ3RoOyB1ICsrICkge1xyXG5cclxuXHRcdGRzdC5wdXNoKCBzcmNbIHUgXS5jbG9uZSgpICk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRzdDtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmxpdFVuaWZvcm1Db2xvclNwYWNlKCByZW5kZXJlciApIHtcclxuXHJcblx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xyXG5cclxuXHRpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzIzOTM3I2lzc3VlY29tbWVudC0xMTExMDY3Mzk4XHJcblx0XHRyZXR1cm4gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yNzg2OFxyXG5cdGlmICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xyXG5cclxuXHRcdHJldHVybiBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuY29sb3JTcGFjZTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlO1xyXG5cclxufVxyXG5cclxuLy8gTGVnYWN5XHJcblxyXG5jb25zdCBVbmlmb3Jtc1V0aWxzID0geyBjbG9uZTogY2xvbmVVbmlmb3JtcywgbWVyZ2U6IG1lcmdlVW5pZm9ybXMgfTtcclxuXHJcbmV4cG9ydCB7IFVuaWZvcm1zVXRpbHMgfTtcclxuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgY2xvbmVVbmlmb3JtcywgY2xvbmVVbmlmb3Jtc0dyb3VwcyB9IGZyb20gJy4uL3JlbmRlcmVycy9zaGFkZXJzL1VuaWZvcm1zVXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IGRlZmF1bHRfdmVydGV4IGZyb20gJy4uL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RlZmF1bHRfdmVydGV4Lmdsc2wuanMnO1xyXG5pbXBvcnQgZGVmYXVsdF9mcmFnbWVudCBmcm9tICcuLi9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9kZWZhdWx0X2ZyYWdtZW50Lmdsc2wuanMnO1xyXG5cclxuY2xhc3MgU2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuZGVmaW5lcyA9IHt9O1xyXG5cdFx0dGhpcy51bmlmb3JtcyA9IHt9O1xyXG5cdFx0dGhpcy51bmlmb3Jtc0dyb3VwcyA9IFtdO1xyXG5cclxuXHRcdHRoaXMudmVydGV4U2hhZGVyID0gZGVmYXVsdF92ZXJ0ZXg7XHJcblx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZGVmYXVsdF9mcmFnbWVudDtcclxuXHJcblx0XHR0aGlzLmxpbmV3aWR0aCA9IDE7XHJcblxyXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcclxuXHJcblx0XHR0aGlzLmZvZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNjZW5lIGZvZ1xyXG5cdFx0dGhpcy5saWdodHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBsaWdodHNcclxuXHRcdHRoaXMuY2xpcHBpbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSB1c2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzXHJcblxyXG5cdFx0dGhpcy5mb3JjZVNpbmdsZVBhc3MgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IHtcclxuXHRcdFx0Y2xpcEN1bGxEaXN0YW5jZTogZmFsc2UsIC8vIHNldCB0byB1c2UgdmVydGV4IHNoYWRlciBjbGlwcGluZ1xyXG5cdFx0XHRtdWx0aURyYXc6IGZhbHNlIC8vIHNldCB0byB1c2UgdmVydGV4IHNoYWRlciBtdWx0aV9kcmF3IC8gZW5hYmxlIGdsX0RyYXdJRFxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcclxuXHRcdC8vIHVzZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpbiBXZWJHTC4gVGhpcyBhdm9pZHMgZXJyb3JzIHdoZW4gYnVmZmVyIGRhdGEgaXMgbWlzc2luZy5cclxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHtcclxuXHRcdFx0J2NvbG9yJzogWyAxLCAxLCAxIF0sXHJcblx0XHRcdCd1dic6IFsgMCwgMCBdLFxyXG5cdFx0XHQndXYxJzogWyAwLCAwIF1cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gbnVsbDtcclxuXHJcblx0XHRpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xyXG5cdFx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBzb3VyY2UudmVydGV4U2hhZGVyO1xyXG5cclxuXHRcdHRoaXMudW5pZm9ybXMgPSBjbG9uZVVuaWZvcm1zKCBzb3VyY2UudW5pZm9ybXMgKTtcclxuXHRcdHRoaXMudW5pZm9ybXNHcm91cHMgPSBjbG9uZVVuaWZvcm1zR3JvdXBzKCBzb3VyY2UudW5pZm9ybXNHcm91cHMgKTtcclxuXHJcblx0XHR0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmRlZmluZXMgKTtcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xyXG5cdFx0dGhpcy5saWdodHMgPSBzb3VyY2UubGlnaHRzO1xyXG5cdFx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcclxuXHJcblx0XHR0aGlzLmV4dGVuc2lvbnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmV4dGVuc2lvbnMgKTtcclxuXHJcblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gc291cmNlLmdsc2xWZXJzaW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggbWV0YSApIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0ZGF0YS5nbHNsVmVyc2lvbiA9IHRoaXMuZ2xzbFZlcnNpb247XHJcblx0XHRkYXRhLnVuaWZvcm1zID0ge307XHJcblxyXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiB0aGlzLnVuaWZvcm1zICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcclxuXHRcdFx0Y29uc3QgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcclxuXHRcdFx0XHRcdHR5cGU6ICd0JyxcclxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0pTT04oIG1ldGEgKS51dWlkXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XHJcblxyXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcclxuXHRcdFx0XHRcdHR5cGU6ICdjJyxcclxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZS5nZXRIZXgoKVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjIgKSB7XHJcblxyXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcclxuXHRcdFx0XHRcdHR5cGU6ICd2MicsXHJcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMyApIHtcclxuXHJcblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xyXG5cdFx0XHRcdFx0dHlwZTogJ3YzJyxcclxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNWZWN0b3I0ICkge1xyXG5cclxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XHJcblx0XHRcdFx0XHR0eXBlOiAndjQnLFxyXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDMgKSB7XHJcblxyXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcclxuXHRcdFx0XHRcdHR5cGU6ICdtMycsXHJcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4NCApIHtcclxuXHJcblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xyXG5cdFx0XHRcdFx0dHlwZTogJ200JyxcclxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xyXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gbm90ZTogdGhlIGFycmF5IHZhcmlhbnRzIHYydiwgdjN2LCB2NHYsIG00diBhbmQgdHYgYXJlIG5vdCBzdXBwb3J0ZWQgc28gZmFyXHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMuZGVmaW5lcyApLmxlbmd0aCA+IDAgKSBkYXRhLmRlZmluZXMgPSB0aGlzLmRlZmluZXM7XHJcblxyXG5cdFx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcclxuXHRcdGRhdGEuZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmZyYWdtZW50U2hhZGVyO1xyXG5cclxuXHRcdGRhdGEubGlnaHRzID0gdGhpcy5saWdodHM7XHJcblx0XHRkYXRhLmNsaXBwaW5nID0gdGhpcy5jbGlwcGluZztcclxuXHJcblx0XHRjb25zdCBleHRlbnNpb25zID0ge307XHJcblxyXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIHRoaXMuZXh0ZW5zaW9ucyApIHtcclxuXHJcblx0XHRcdGlmICggdGhpcy5leHRlbnNpb25zWyBrZXkgXSA9PT0gdHJ1ZSApIGV4dGVuc2lvbnNbIGtleSBdID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggZXh0ZW5zaW9ucyApLmxlbmd0aCA+IDAgKSBkYXRhLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTaGFkZXJNYXRlcmlhbCB9O1xyXG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxyXG52b2lkIG1haW4oKSB7XHJcblx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xyXG59XHJcbmA7XHJcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXHJcbnZvaWQgbWFpbigpIHtcclxuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcclxufVxyXG5gO1xyXG4iLCJpbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuXHJcbmNsYXNzIENhbWVyYSBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzQ2FtZXJhID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhJztcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHRcdHRoaXMuY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZEludmVyc2UgKTtcclxuXHJcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXguY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXggKTtcclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XHJcblxyXG5cdFx0dGhpcy5jb29yZGluYXRlU3lzdGVtID0gc291cmNlLmNvb3JkaW5hdGVTeXN0ZW07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0V29ybGREaXJlY3Rpb24oIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0V29ybGREaXJlY3Rpb24oIHRhcmdldCApLm5lZ2F0ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcclxuXHJcblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xyXG5cclxuXHRcdHN1cGVyLnVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENhbWVyYSB9O1xyXG4iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuL0NhbWVyYS5qcyc7XHJcbmltcG9ydCB7IFJBRDJERUcsIERFRzJSQUQgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuXHJcbmNvbnN0IF92MyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX21pblRhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgX21heFRhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcclxuXHJcblxyXG5jbGFzcyBQZXJzcGVjdGl2ZUNhbWVyYSBleHRlbmRzIENhbWVyYSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBmb3YgPSA1MCwgYXNwZWN0ID0gMSwgbmVhciA9IDAuMSwgZmFyID0gMjAwMCApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNQZXJzcGVjdGl2ZUNhbWVyYSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJztcclxuXHJcblx0XHR0aGlzLmZvdiA9IGZvdjtcclxuXHRcdHRoaXMuem9vbSA9IDE7XHJcblxyXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcclxuXHRcdHRoaXMuZmFyID0gZmFyO1xyXG5cdFx0dGhpcy5mb2N1cyA9IDEwO1xyXG5cclxuXHRcdHRoaXMuYXNwZWN0ID0gYXNwZWN0O1xyXG5cdFx0dGhpcy52aWV3ID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmZpbG1HYXVnZSA9IDM1O1x0Ly8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpXHJcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSAwO1x0Ly8gaG9yaXpvbnRhbCBmaWxtIG9mZnNldCAoc2FtZSB1bml0IGFzIGdhdWdlKVxyXG5cclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5mb3YgPSBzb3VyY2UuZm92O1xyXG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XHJcblxyXG5cdFx0dGhpcy5uZWFyID0gc291cmNlLm5lYXI7XHJcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XHJcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xyXG5cclxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcclxuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xyXG5cclxuXHRcdHRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTtcclxuXHRcdHRoaXMuZmlsbU9mZnNldCA9IHNvdXJjZS5maWxtT2Zmc2V0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgdGhlIEZPViBieSBmb2NhbCBsZW5ndGggaW4gcmVzcGVjdCB0byB0aGUgY3VycmVudCAuZmlsbUdhdWdlLlxyXG5cdCAqXHJcblx0ICogVGhlIGRlZmF1bHQgZmlsbSBnYXVnZSBpcyAzNSwgc28gdGhhdCB0aGUgZm9jYWwgbGVuZ3RoIGNhbiBiZSBzcGVjaWZpZWQgZm9yXHJcblx0ICogYSAzNW1tIChmdWxsIGZyYW1lKSBjYW1lcmEuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gZm9jYWxMZW5ndGggLSBWYWx1ZXMgZm9yIGZvY2FsIGxlbmd0aCBhbmQgZmlsbSBnYXVnZSBtdXN0IGhhdmUgdGhlIHNhbWUgdW5pdC5cclxuXHQgKi9cclxuXHRzZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKSB7XHJcblxyXG5cdFx0LyoqIHNlZSB7QGxpbmsgaHR0cDovL3d3dy5ib2JhdGtpbnMuY29tL3Bob3RvZ3JhcGh5L3RlY2huaWNhbC9maWVsZF9vZl92aWV3Lmh0bWx9ICovXHJcblx0XHRjb25zdCB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xyXG5cclxuXHRcdHRoaXMuZm92ID0gUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oIHZFeHRlbnRTbG9wZSApO1xyXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2FsY3VsYXRlcyB0aGUgZm9jYWwgbGVuZ3RoIGZyb20gdGhlIGN1cnJlbnQgLmZvdiBhbmQgLmZpbG1HYXVnZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0ICovXHJcblx0Z2V0Rm9jYWxMZW5ndGgoKSB7XHJcblxyXG5cdFx0Y29uc3QgdkV4dGVudFNsb3BlID0gTWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApO1xyXG5cclxuXHRcdHJldHVybiAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIHZFeHRlbnRTbG9wZTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRFZmZlY3RpdmVGT1YoKSB7XHJcblxyXG5cdFx0cmV0dXJuIFJBRDJERUcgKiAyICogTWF0aC5hdGFuKFxyXG5cdFx0XHRNYXRoLnRhbiggREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb20gKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRGaWxtV2lkdGgoKSB7XHJcblxyXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIHBvcnRyYWl0IGZvcm1hdCAoYXNwZWN0IDwgMSlcclxuXHRcdHJldHVybiB0aGlzLmZpbG1HYXVnZSAqIE1hdGgubWluKCB0aGlzLmFzcGVjdCwgMSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEZpbG1IZWlnaHQoKSB7XHJcblxyXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIGxhbmRzY2FwZSBmb3JtYXQgKGFzcGVjdCA+IDEpXHJcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTtcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDb21wdXRlcyB0aGUgMkQgYm91bmRzIG9mIHRoZSBjYW1lcmEncyB2aWV3YWJsZSByZWN0YW5nbGUgYXQgYSBnaXZlbiBkaXN0YW5jZSBhbG9uZyB0aGUgdmlld2luZyBkaXJlY3Rpb24uXHJcblx0ICogU2V0cyBtaW5UYXJnZXQgYW5kIG1heFRhcmdldCB0byB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGxvd2VyLWxlZnQgYW5kIHVwcGVyLXJpZ2h0IGNvcm5lcnMgb2YgdGhlIHZpZXcgcmVjdGFuZ2xlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlXHJcblx0ICogQHBhcmFtIHtWZWN0b3IyfSBtaW5UYXJnZXRcclxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1heFRhcmdldFxyXG5cdCAqL1xyXG5cdGdldFZpZXdCb3VuZHMoIGRpc3RhbmNlLCBtaW5UYXJnZXQsIG1heFRhcmdldCApIHtcclxuXHJcblx0XHRfdjMuc2V0KCAtIDEsIC0gMSwgMC41ICkuYXBwbHlNYXRyaXg0KCB0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XHJcblxyXG5cdFx0bWluVGFyZ2V0LnNldCggX3YzLngsIF92My55ICkubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgLyBfdjMueiApO1xyXG5cclxuXHRcdF92My5zZXQoIDEsIDEsIDAuNSApLmFwcGx5TWF0cml4NCggdGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xyXG5cclxuXHRcdG1heFRhcmdldC5zZXQoIF92My54LCBfdjMueSApLm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlIC8gX3YzLnogKTtcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDb21wdXRlcyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgY2FtZXJhJ3Mgdmlld2FibGUgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZGlzdGFuY2UgYWxvbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlXHJcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBWZWN0b3IyIHRhcmdldCB1c2VkIHRvIHN0b3JlIHJlc3VsdCB3aGVyZSB4IGlzIHdpZHRoIGFuZCB5IGlzIGhlaWdodC5cclxuXHQgKiBAcmV0dXJucyB7VmVjdG9yMn1cclxuXHQgKi9cclxuXHRnZXRWaWV3U2l6ZSggZGlzdGFuY2UsIHRhcmdldCApIHtcclxuXHJcblx0XHR0aGlzLmdldFZpZXdCb3VuZHMoIGRpc3RhbmNlLCBfbWluVGFyZ2V0LCBfbWF4VGFyZ2V0ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCBfbWF4VGFyZ2V0LCBfbWluVGFyZ2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyBhbiBvZmZzZXQgaW4gYSBsYXJnZXIgZnJ1c3R1bS4gVGhpcyBpcyB1c2VmdWwgZm9yIG11bHRpLXdpbmRvdyBvclxyXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXHJcblx0ICpcclxuXHQgKiBGb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgM3gyIG1vbml0b3JzIGFuZCBlYWNoIG1vbml0b3IgaXMgMTkyMHgxMDgwIGFuZFxyXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcclxuXHQgKlxyXG5cdCAqICAgKy0tLSstLS0rLS0tK1xyXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxyXG5cdCAqICAgKy0tLSstLS0rLS0tK1xyXG5cdCAqICAgfCBEIHwgRSB8IEYgfFxyXG5cdCAqICAgKy0tLSstLS0rLS0tK1xyXG5cdCAqXHJcblx0ICogdGhlbiBmb3IgZWFjaCBtb25pdG9yIHlvdSB3b3VsZCBjYWxsIGl0IGxpa2UgdGhpc1xyXG5cdCAqXHJcblx0ICogICBjb25zdCB3ID0gMTkyMDtcclxuXHQgKiAgIGNvbnN0IGggPSAxMDgwO1xyXG5cdCAqICAgY29uc3QgZnVsbFdpZHRoID0gdyAqIDM7XHJcblx0ICogICBjb25zdCBmdWxsSGVpZ2h0ID0gaCAqIDI7XHJcblx0ICpcclxuXHQgKiAgIC0tQS0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDAsIHcsIGggKTtcclxuXHQgKiAgIC0tQi0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDAsIHcsIGggKTtcclxuXHQgKiAgIC0tQy0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDAsIHcsIGggKTtcclxuXHQgKiAgIC0tRC0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDEsIHcsIGggKTtcclxuXHQgKiAgIC0tRS0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDEsIHcsIGggKTtcclxuXHQgKiAgIC0tRi0tXHJcblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDEsIHcsIGggKTtcclxuXHQgKlxyXG5cdCAqICAgTm90ZSB0aGVyZSBpcyBubyByZWFzb24gbW9uaXRvcnMgaGF2ZSB0byBiZSB0aGUgc2FtZSBzaXplIG9yIGluIGEgZ3JpZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsV2lkdGhcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gZnVsbEhlaWdodFxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4XHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IHlcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XHJcblx0ICovXHJcblx0c2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xyXG5cclxuXHRcdHRoaXMuYXNwZWN0ID0gZnVsbFdpZHRoIC8gZnVsbEhlaWdodDtcclxuXHJcblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMudmlldyA9IHtcclxuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxyXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcclxuXHRcdFx0XHRmdWxsSGVpZ2h0OiAxLFxyXG5cdFx0XHRcdG9mZnNldFg6IDAsXHJcblx0XHRcdFx0b2Zmc2V0WTogMCxcclxuXHRcdFx0XHR3aWR0aDogMSxcclxuXHRcdFx0XHRoZWlnaHQ6IDFcclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy52aWV3LmVuYWJsZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcclxuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcclxuXHRcdHRoaXMudmlldy5vZmZzZXRYID0geDtcclxuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcclxuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IGhlaWdodDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGVhclZpZXdPZmZzZXQoKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkge1xyXG5cclxuXHRcdGNvbnN0IG5lYXIgPSB0aGlzLm5lYXI7XHJcblx0XHRsZXQgdG9wID0gbmVhciAqIE1hdGgudGFuKCBERUcyUkFEICogMC41ICogdGhpcy5mb3YgKSAvIHRoaXMuem9vbTtcclxuXHRcdGxldCBoZWlnaHQgPSAyICogdG9wO1xyXG5cdFx0bGV0IHdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQ7XHJcblx0XHRsZXQgbGVmdCA9IC0gMC41ICogd2lkdGg7XHJcblx0XHRjb25zdCB2aWV3ID0gdGhpcy52aWV3O1xyXG5cclxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgZnVsbFdpZHRoID0gdmlldy5mdWxsV2lkdGgsXHJcblx0XHRcdFx0ZnVsbEhlaWdodCA9IHZpZXcuZnVsbEhlaWdodDtcclxuXHJcblx0XHRcdGxlZnQgKz0gdmlldy5vZmZzZXRYICogd2lkdGggLyBmdWxsV2lkdGg7XHJcblx0XHRcdHRvcCAtPSB2aWV3Lm9mZnNldFkgKiBoZWlnaHQgLyBmdWxsSGVpZ2h0O1xyXG5cdFx0XHR3aWR0aCAqPSB2aWV3LndpZHRoIC8gZnVsbFdpZHRoO1xyXG5cdFx0XHRoZWlnaHQgKj0gdmlldy5oZWlnaHQgLyBmdWxsSGVpZ2h0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBza2V3ID0gdGhpcy5maWxtT2Zmc2V0O1xyXG5cdFx0aWYgKCBza2V3ICE9PSAwICkgbGVmdCArPSBuZWFyICogc2tldyAvIHRoaXMuZ2V0RmlsbVdpZHRoKCk7XHJcblxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIsIHRoaXMuY29vcmRpbmF0ZVN5c3RlbSApO1xyXG5cclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBtZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcclxuXHJcblx0XHRkYXRhLm9iamVjdC5mb3YgPSB0aGlzLmZvdjtcclxuXHRcdGRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207XHJcblxyXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcclxuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xyXG5cdFx0ZGF0YS5vYmplY3QuZm9jdXMgPSB0aGlzLmZvY3VzO1xyXG5cclxuXHRcdGRhdGEub2JqZWN0LmFzcGVjdCA9IHRoaXMuYXNwZWN0O1xyXG5cclxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcclxuXHJcblx0XHRkYXRhLm9iamVjdC5maWxtR2F1Z2UgPSB0aGlzLmZpbG1HYXVnZTtcclxuXHRcdGRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH07XHJcbiIsImltcG9ydCB7IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSwgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XHJcblxyXG5jb25zdCBmb3YgPSAtIDkwOyAvLyBuZWdhdGl2ZSBmb3YgaXMgbm90IGFuIGVycm9yXHJcbmNvbnN0IGFzcGVjdCA9IDE7XHJcblxyXG5jbGFzcyBDdWJlQ2FtZXJhIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbmVhciwgZmFyLCByZW5kZXJUYXJnZXQgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ3ViZUNhbWVyYSc7XHJcblxyXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XHJcblx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSBudWxsO1xyXG5cdFx0dGhpcy5hY3RpdmVNaXBtYXBMZXZlbCA9IDA7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhUFggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYVBYLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBYICk7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYU5YLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5YICk7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYVBZLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBZICk7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhTlkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYU5ZLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5ZICk7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhUFogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYVBaLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBaICk7XHJcblxyXG5cdFx0Y29uc3QgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcclxuXHRcdGNhbWVyYU5aLmxheWVycyA9IHRoaXMubGF5ZXJzO1xyXG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5aICk7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlQ29vcmRpbmF0ZVN5c3RlbSgpIHtcclxuXHJcblx0XHRjb25zdCBjb29yZGluYXRlU3lzdGVtID0gdGhpcy5jb29yZGluYXRlU3lzdGVtO1xyXG5cclxuXHRcdGNvbnN0IGNhbWVyYXMgPSB0aGlzLmNoaWxkcmVuLmNvbmNhdCgpO1xyXG5cclxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gY2FtZXJhcztcclxuXHJcblx0XHRmb3IgKCBjb25zdCBjYW1lcmEgb2YgY2FtZXJhcyApIHRoaXMucmVtb3ZlKCBjYW1lcmEgKTtcclxuXHJcblx0XHRpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcclxuXHJcblx0XHRcdGNhbWVyYVBYLnVwLnNldCggMCwgMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFQWC5sb29rQXQoIDEsIDAsIDAgKTtcclxuXHJcblx0XHRcdGNhbWVyYU5YLnVwLnNldCggMCwgMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFOWC5sb29rQXQoIC0gMSwgMCwgMCApO1xyXG5cclxuXHRcdFx0Y2FtZXJhUFkudXAuc2V0KCAwLCAwLCAtIDEgKTtcclxuXHRcdFx0Y2FtZXJhUFkubG9va0F0KCAwLCAxLCAwICk7XHJcblxyXG5cdFx0XHRjYW1lcmFOWS51cC5zZXQoIDAsIDAsIDEgKTtcclxuXHRcdFx0Y2FtZXJhTlkubG9va0F0KCAwLCAtIDEsIDAgKTtcclxuXHJcblx0XHRcdGNhbWVyYVBaLnVwLnNldCggMCwgMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFQWi5sb29rQXQoIDAsIDAsIDEgKTtcclxuXHJcblx0XHRcdGNhbWVyYU5aLnVwLnNldCggMCwgMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFOWi5sb29rQXQoIDAsIDAsIC0gMSApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSB7XHJcblxyXG5cdFx0XHRjYW1lcmFQWC51cC5zZXQoIDAsIC0gMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFQWC5sb29rQXQoIC0gMSwgMCwgMCApO1xyXG5cclxuXHRcdFx0Y2FtZXJhTlgudXAuc2V0KCAwLCAtIDEsIDAgKTtcclxuXHRcdFx0Y2FtZXJhTlgubG9va0F0KCAxLCAwLCAwICk7XHJcblxyXG5cdFx0XHRjYW1lcmFQWS51cC5zZXQoIDAsIDAsIDEgKTtcclxuXHRcdFx0Y2FtZXJhUFkubG9va0F0KCAwLCAxLCAwICk7XHJcblxyXG5cdFx0XHRjYW1lcmFOWS51cC5zZXQoIDAsIDAsIC0gMSApO1xyXG5cdFx0XHRjYW1lcmFOWS5sb29rQXQoIDAsIC0gMSwgMCApO1xyXG5cclxuXHRcdFx0Y2FtZXJhUFoudXAuc2V0KCAwLCAtIDEsIDAgKTtcclxuXHRcdFx0Y2FtZXJhUFoubG9va0F0KCAwLCAwLCAxICk7XHJcblxyXG5cdFx0XHRjYW1lcmFOWi51cC5zZXQoIDAsIC0gMSwgMCApO1xyXG5cdFx0XHRjYW1lcmFOWi5sb29rQXQoIDAsIDAsIC0gMSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5DdWJlQ2FtZXJhLnVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKTogSW52YWxpZCBjb29yZGluYXRlIHN5c3RlbTogJyArIGNvb3JkaW5hdGVTeXN0ZW0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggY29uc3QgY2FtZXJhIG9mIGNhbWVyYXMgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmFkZCggY2FtZXJhICk7XHJcblxyXG5cdFx0XHRjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcblx0XHRjb25zdCB7IHJlbmRlclRhcmdldCwgYWN0aXZlTWlwbWFwTGV2ZWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gIT09IHJlbmRlcmVyLmNvb3JkaW5hdGVTeXN0ZW0gKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSByZW5kZXJlci5jb29yZGluYXRlU3lzdGVtO1xyXG5cclxuXHRcdFx0dGhpcy51cGRhdGVDb29yZGluYXRlU3lzdGVtKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gdGhpcy5jaGlsZHJlbjtcclxuXHJcblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XHJcblx0XHRjb25zdCBjdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xyXG5cdFx0Y29uc3QgY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcclxuXHJcblx0XHRjb25zdCBjdXJyZW50WHJFbmFibGVkID0gcmVuZGVyZXIueHIuZW5hYmxlZDtcclxuXHJcblx0XHRyZW5kZXJlci54ci5lbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0Y29uc3QgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xyXG5cclxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAwLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xyXG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcclxuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5YICk7XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDIsIGFjdGl2ZU1pcG1hcExldmVsICk7XHJcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWSApO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAzLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xyXG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNCwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcclxuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBaICk7XHJcblxyXG5cdFx0Ly8gbWlwbWFwcyBhcmUgZ2VuZXJhdGVkIGR1cmluZyB0aGUgbGFzdCBjYWxsIG9mIHJlbmRlcigpXHJcblx0XHQvLyBhdCB0aGlzIHBvaW50LCBhbGwgc2lkZXMgb2YgdGhlIGN1YmUgcmVuZGVyIHRhcmdldCBhcmUgZGVmaW5lZFxyXG5cclxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGdlbmVyYXRlTWlwbWFwcztcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcclxuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5aICk7XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0LCBjdXJyZW50QWN0aXZlQ3ViZUZhY2UsIGN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCApO1xyXG5cclxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkO1xyXG5cclxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLm5lZWRzUE1SRU1VcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDdWJlQ2FtZXJhIH07XHJcbiIsImltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgQ3ViZVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICkge1xyXG5cclxuXHRcdGltYWdlcyA9IGltYWdlcyAhPT0gdW5kZWZpbmVkID8gaW1hZ2VzIDogW107XHJcblx0XHRtYXBwaW5nID0gbWFwcGluZyAhPT0gdW5kZWZpbmVkID8gbWFwcGluZyA6IEN1YmVSZWZsZWN0aW9uTWFwcGluZztcclxuXHJcblx0XHRzdXBlciggaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKTtcclxuXHJcblx0XHR0aGlzLmlzQ3ViZVRleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZmxpcFkgPSBmYWxzZTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgaW1hZ2VzKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmltYWdlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBpbWFnZXMoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMuaW1hZ2UgPSB2YWx1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ3ViZVRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgQmFja1NpZGUsIExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBOb0JsZW5kaW5nIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XHJcbmltcG9ydCB7IEJveEdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cmllcy9Cb3hHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IFNoYWRlck1hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL1NoYWRlck1hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgY2xvbmVVbmlmb3JtcyB9IGZyb20gJy4vc2hhZGVycy9Vbmlmb3Jtc1V0aWxzLmpzJztcclxuaW1wb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICcuL1dlYkdMUmVuZGVyVGFyZ2V0LmpzJztcclxuaW1wb3J0IHsgQ3ViZUNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvQ3ViZUNhbWVyYS5qcyc7XHJcbmltcG9ydCB7IEN1YmVUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvQ3ViZVRleHR1cmUuanMnO1xyXG5cclxuY2xhc3MgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggc2l6ZSA9IDEsIG9wdGlvbnMgPSB7fSApIHtcclxuXHJcblx0XHRzdXBlciggc2l6ZSwgc2l6ZSwgb3B0aW9ucyApO1xyXG5cclxuXHRcdHRoaXMuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xyXG5cclxuXHRcdGNvbnN0IGltYWdlID0geyB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBkZXB0aDogMSB9O1xyXG5cdFx0Y29uc3QgaW1hZ2VzID0gWyBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlIF07XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCBpbWFnZXMsIG9wdGlvbnMubWFwcGluZywgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuY29sb3JTcGFjZSApO1xyXG5cclxuXHRcdC8vIEJ5IGNvbnZlbnRpb24gLS0gbGlrZWx5IGJhc2VkIG9uIHRoZSBSZW5kZXJNYW4gc3BlYyBmcm9tIHRoZSAxOTkwJ3MgLS0gY3ViZSBtYXBzIGFyZSBzcGVjaWZpZWQgYnkgV2ViR0wgKGFuZCB0aHJlZS5qcylcclxuXHRcdC8vIGluIGEgY29vcmRpbmF0ZSBzeXN0ZW0gaW4gd2hpY2ggcG9zaXRpdmUteCBpcyB0byB0aGUgcmlnaHQgd2hlbiBsb29raW5nIHVwIHRoZSBwb3NpdGl2ZS16IGF4aXMgLS0gaW4gb3RoZXIgd29yZHMsXHJcblx0XHQvLyBpbiBhIGxlZnQtaGFuZGVkIGNvb3JkaW5hdGUgc3lzdGVtLiBCeSBjb250aW51aW5nIHRoaXMgY29udmVudGlvbiwgcHJlZXhpc3RpbmcgY3ViZSBtYXBzIGNvbnRpbnVlZCB0byByZW5kZXIgY29ycmVjdGx5LlxyXG5cclxuXHRcdC8vIHRocmVlLmpzIHVzZXMgYSByaWdodC1oYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0uIFNvIGVudmlyb25tZW50IG1hcHMgdXNlZCBpbiB0aHJlZS5qcyBhcHBlYXIgdG8gaGF2ZSBweCBhbmQgbnggc3dhcHBlZFxyXG5cdFx0Ly8gYW5kIHRoZSBmbGFnIGlzUmVuZGVyVGFyZ2V0VGV4dHVyZSBjb250cm9scyB0aGlzIGNvbnZlcnNpb24uIFRoZSBmbGlwIGlzIG5vdCByZXF1aXJlZCB3aGVuIHVzaW5nIFdlYkdMQ3ViZVJlbmRlclRhcmdldC50ZXh0dXJlXHJcblx0XHQvLyBhcyBhIGN1YmUgdGV4dHVyZSAodGhpcyBpcyBkZXRlY3RlZCB3aGVuIGlzUmVuZGVyVGFyZ2V0VGV4dHVyZSBpcyBzZXQgdG8gdHJ1ZSBmb3IgY3ViZSB0ZXh0dXJlcykuXHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IGZhbHNlO1xyXG5cdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSggcmVuZGVyZXIsIHRleHR1cmUgKSB7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7XHJcblx0XHR0aGlzLnRleHR1cmUuY29sb3JTcGFjZSA9IHRleHR1cmUuY29sb3JTcGFjZTtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XHJcblx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXI7XHJcblx0XHR0aGlzLnRleHR1cmUubWFnRmlsdGVyID0gdGV4dHVyZS5tYWdGaWx0ZXI7XHJcblxyXG5cdFx0Y29uc3Qgc2hhZGVyID0ge1xyXG5cclxuXHRcdFx0dW5pZm9ybXM6IHtcclxuXHRcdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHZlcnRleFNoYWRlcjogLyogZ2xzbCAqL2BcclxuXHJcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcclxuXHJcblx0XHRcdFx0dmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XHJcblxyXG5cdFx0XHRcdFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcclxuXHJcblx0XHRcdFx0XHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxyXG5cdFx0XHRcdFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdGAsXHJcblxyXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2BcclxuXHJcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xyXG5cclxuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xyXG5cclxuXHRcdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxyXG5cclxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XHJcblxyXG5cdFx0XHRcdFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xyXG5cclxuXHRcdFx0XHRcdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcclxuXHJcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRgXHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCA1LCA1LCA1ICk7XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcclxuXHJcblx0XHRcdG5hbWU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JyxcclxuXHJcblx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBzaGFkZXIudW5pZm9ybXMgKSxcclxuXHRcdFx0dmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLFxyXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLFxyXG5cdFx0XHRzaWRlOiBCYWNrU2lkZSxcclxuXHRcdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmdcclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdFx0bWF0ZXJpYWwudW5pZm9ybXMudEVxdWlyZWN0LnZhbHVlID0gdGV4dHVyZTtcclxuXHJcblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdGNvbnN0IGN1cnJlbnRNaW5GaWx0ZXIgPSB0ZXh0dXJlLm1pbkZpbHRlcjtcclxuXHJcblx0XHQvLyBBdm9pZCBibHVycmVkIHBvbGVzXHJcblx0XHRpZiAoIHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgKSB0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcclxuXHJcblx0XHRjb25zdCBjYW1lcmEgPSBuZXcgQ3ViZUNhbWVyYSggMSwgMTAsIHRoaXMgKTtcclxuXHRcdGNhbWVyYS51cGRhdGUoIHJlbmRlcmVyLCBtZXNoICk7XHJcblxyXG5cdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBjdXJyZW50TWluRmlsdGVyO1xyXG5cclxuXHRcdG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0bWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xlYXIoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XHJcblxyXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMsIGkgKTtcclxuXHJcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFdlYkdMQ3ViZVJlbmRlclRhcmdldCB9O1xyXG4iLCJpbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5cclxuY2xhc3MgR3JvdXAgZXh0ZW5kcyBPYmplY3QzRCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc0dyb3VwID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBHcm91cCB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgR3JvdXAgfSBmcm9tICcuLi8uLi9vYmplY3RzL0dyb3VwLmpzJztcclxuXHJcbmNvbnN0IF9tb3ZlRXZlbnQgPSB7IHR5cGU6ICdtb3ZlJyB9O1xyXG5cclxuY2xhc3MgV2ViWFJDb250cm9sbGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0dGhpcy5fdGFyZ2V0UmF5ID0gbnVsbDtcclxuXHRcdHRoaXMuX2dyaXAgPSBudWxsO1xyXG5cdFx0dGhpcy5faGFuZCA9IG51bGw7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0SGFuZFNwYWNlKCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5faGFuZCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuX2hhbmQgPSBuZXcgR3JvdXAoKTtcclxuXHRcdFx0dGhpcy5faGFuZC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuX2hhbmQudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0dGhpcy5faGFuZC5qb2ludHMgPSB7fTtcclxuXHRcdFx0dGhpcy5faGFuZC5pbnB1dFN0YXRlID0geyBwaW5jaGluZzogZmFsc2UgfTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2hhbmQ7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0VGFyZ2V0UmF5U3BhY2UoKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl90YXJnZXRSYXkgPSBuZXcgR3JvdXAoKTtcclxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuX3RhcmdldFJheS5saW5lYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRcdHRoaXMuX3RhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLl90YXJnZXRSYXk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0R3JpcFNwYWNlKCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5fZ3JpcCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuX2dyaXAgPSBuZXcgR3JvdXAoKTtcclxuXHRcdFx0dGhpcy5fZ3JpcC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuX2dyaXAudmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLl9ncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuX2dyaXAubGluZWFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHR0aGlzLl9ncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLl9ncmlwLmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9ncmlwO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3BhdGNoRXZlbnQoIGV2ZW50ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5fdGFyZ2V0UmF5ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5fZ3JpcCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuX2dyaXAuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLl9oYW5kICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5faGFuZC5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjb25uZWN0KCBpbnB1dFNvdXJjZSApIHtcclxuXHJcblx0XHRpZiAoIGlucHV0U291cmNlICYmIGlucHV0U291cmNlLmhhbmQgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBoYW5kID0gdGhpcy5faGFuZDtcclxuXHJcblx0XHRcdGlmICggaGFuZCApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEluaXRpYWxpemUgaGFuZCB3aXRoIGpvaW50cyB3aGVuIGNvbm5lY3RlZFxyXG5cdFx0XHRcdFx0dGhpcy5fZ2V0SGFuZEpvaW50KCBoYW5kLCBpbnB1dGpvaW50ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl90YXJnZXRSYXkudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuX2dyaXAgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl9ncmlwLnZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLl9oYW5kICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5faGFuZC52aXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSggaW5wdXRTb3VyY2UsIGZyYW1lLCByZWZlcmVuY2VTcGFjZSApIHtcclxuXHJcblx0XHRsZXQgaW5wdXRQb3NlID0gbnVsbDtcclxuXHRcdGxldCBncmlwUG9zZSA9IG51bGw7XHJcblx0XHRsZXQgaGFuZFBvc2UgPSBudWxsO1xyXG5cclxuXHRcdGNvbnN0IHRhcmdldFJheSA9IHRoaXMuX3RhcmdldFJheTtcclxuXHRcdGNvbnN0IGdyaXAgPSB0aGlzLl9ncmlwO1xyXG5cdFx0Y29uc3QgaGFuZCA9IHRoaXMuX2hhbmQ7XHJcblxyXG5cdFx0aWYgKCBpbnB1dFNvdXJjZSAmJiBmcmFtZS5zZXNzaW9uLnZpc2liaWxpdHlTdGF0ZSAhPT0gJ3Zpc2libGUtYmx1cnJlZCcgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGhhbmQgJiYgaW5wdXRTb3VyY2UuaGFuZCApIHtcclxuXHJcblx0XHRcdFx0aGFuZFBvc2UgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBjb25zdCBpbnB1dGpvaW50IG9mIGlucHV0U291cmNlLmhhbmQudmFsdWVzKCkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBqb2ludHMgZ3JvdXBzIHdpdGggdGhlIFhSSm9pbnQgcG9zZXNcclxuXHRcdFx0XHRcdGNvbnN0IGpvaW50UG9zZSA9IGZyYW1lLmdldEpvaW50UG9zZSggaW5wdXRqb2ludCwgcmVmZXJlbmNlU3BhY2UgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBUaGUgdHJhbnNmb3JtIG9mIHRoaXMgam9pbnQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIGpvaW50IHBvc2Ugb24gZWFjaCBmcmFtZVxyXG5cdFx0XHRcdFx0Y29uc3Qgam9pbnQgPSB0aGlzLl9nZXRIYW5kSm9pbnQoIGhhbmQsIGlucHV0am9pbnQgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGpvaW50UG9zZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeC5mcm9tQXJyYXkoIGpvaW50UG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XHJcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeC5kZWNvbXBvc2UoIGpvaW50LnBvc2l0aW9uLCBqb2ludC5yb3RhdGlvbiwgam9pbnQuc2NhbGUgKTtcclxuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGpvaW50LmpvaW50UmFkaXVzID0gam9pbnRQb3NlLnJhZGl1cztcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0am9pbnQudmlzaWJsZSA9IGpvaW50UG9zZSAhPT0gbnVsbDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDdXN0b20gZXZlbnRzXHJcblxyXG5cdFx0XHRcdC8vIENoZWNrIHBpbmNoelxyXG5cdFx0XHRcdGNvbnN0IGluZGV4VGlwID0gaGFuZC5qb2ludHNbICdpbmRleC1maW5nZXItdGlwJyBdO1xyXG5cdFx0XHRcdGNvbnN0IHRodW1iVGlwID0gaGFuZC5qb2ludHNbICd0aHVtYi10aXAnIF07XHJcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBpbmRleFRpcC5wb3NpdGlvbi5kaXN0YW5jZVRvKCB0aHVtYlRpcC5wb3NpdGlvbiApO1xyXG5cclxuXHRcdFx0XHRjb25zdCBkaXN0YW5jZVRvUGluY2ggPSAwLjAyO1xyXG5cdFx0XHRcdGNvbnN0IHRocmVzaG9sZCA9IDAuMDA1O1xyXG5cclxuXHRcdFx0XHRpZiAoIGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyAmJiBkaXN0YW5jZSA+IGRpc3RhbmNlVG9QaW5jaCArIHRocmVzaG9sZCApIHtcclxuXHJcblx0XHRcdFx0XHRoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCgge1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAncGluY2hlbmQnLFxyXG5cdFx0XHRcdFx0XHRoYW5kZWRuZXNzOiBpbnB1dFNvdXJjZS5oYW5kZWRuZXNzLFxyXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmICggISBoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgJiYgZGlzdGFuY2UgPD0gZGlzdGFuY2VUb1BpbmNoIC0gdGhyZXNob2xkICkge1xyXG5cclxuXHRcdFx0XHRcdGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyA9IHRydWU7XHJcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ3BpbmNoc3RhcnQnLFxyXG5cdFx0XHRcdFx0XHRoYW5kZWRuZXNzOiBpbnB1dFNvdXJjZS5oYW5kZWRuZXNzLFxyXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0aWYgKCBncmlwICE9PSBudWxsICYmIGlucHV0U291cmNlLmdyaXBTcGFjZSApIHtcclxuXHJcblx0XHRcdFx0XHRncmlwUG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLmdyaXBTcGFjZSwgcmVmZXJlbmNlU3BhY2UgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGdyaXBQb3NlICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Z3JpcC5tYXRyaXguZnJvbUFycmF5KCBncmlwUG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XHJcblx0XHRcdFx0XHRcdGdyaXAubWF0cml4LmRlY29tcG9zZSggZ3JpcC5wb3NpdGlvbiwgZ3JpcC5yb3RhdGlvbiwgZ3JpcC5zY2FsZSApO1xyXG5cdFx0XHRcdFx0XHRncmlwLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5saW5lYXJWZWxvY2l0eSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0Z3JpcC5saW5lYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5saW5lYXJWZWxvY2l0eSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGdyaXAuaGFzQW5ndWxhclZlbG9jaXR5ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRncmlwLmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGdyaXAuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHRhcmdldFJheSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0aW5wdXRQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UudGFyZ2V0UmF5U3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7XHJcblxyXG5cdFx0XHRcdC8vIFNvbWUgcnVudGltZXMgKG5hbWVseSBWaXZlIENvc21vcyB3aXRoIFZpdmUgT3BlblhSIFJ1bnRpbWUpIGhhdmUgb25seSBncmlwIHNwYWNlIGFuZCByYXkgc3BhY2UgaXMgZXF1YWwgdG8gaXRcclxuXHRcdFx0XHRpZiAoIGlucHV0UG9zZSA9PT0gbnVsbCAmJiBncmlwUG9zZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRpbnB1dFBvc2UgPSBncmlwUG9zZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcclxuXHRcdFx0XHRcdHRhcmdldFJheS5tYXRyaXguZGVjb21wb3NlKCB0YXJnZXRSYXkucG9zaXRpb24sIHRhcmdldFJheS5yb3RhdGlvbiwgdGFyZ2V0UmF5LnNjYWxlICk7XHJcblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBpbnB1dFBvc2UubGluZWFyVmVsb2NpdHkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkubGluZWFyVmVsb2NpdHkuY29weSggaW5wdXRQb3NlLmxpbmVhclZlbG9jaXR5ICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGlucHV0UG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBpbnB1dFBvc2UuYW5ndWxhclZlbG9jaXR5ICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfbW92ZUV2ZW50ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGFyZ2V0UmF5ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGFyZ2V0UmF5LnZpc2libGUgPSAoIGlucHV0UG9zZSAhPT0gbnVsbCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGdyaXAgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRncmlwLnZpc2libGUgPSAoIGdyaXBQb3NlICE9PSBudWxsICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaGFuZCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGhhbmQudmlzaWJsZSA9ICggaGFuZFBvc2UgIT09IG51bGwgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcHJpdmF0ZSBtZXRob2RcclxuXHJcblx0X2dldEhhbmRKb2ludCggaGFuZCwgaW5wdXRqb2ludCApIHtcclxuXHJcblx0XHRpZiAoIGhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBqb2ludCA9IG5ldyBHcm91cCgpO1xyXG5cdFx0XHRqb2ludC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0XHRcdGpvaW50LnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0aGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF0gPSBqb2ludDtcclxuXHJcblx0XHRcdGhhbmQuYWRkKCBqb2ludCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF07XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBXZWJYUkNvbnRyb2xsZXIgfTtcclxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuXHJcbmNsYXNzIEZvZ0V4cDIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGRlbnNpdHkgPSAwLjAwMDI1ICkge1xyXG5cclxuXHRcdHRoaXMuaXNGb2dFeHAyID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSAnJztcclxuXHJcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xyXG5cdFx0dGhpcy5kZW5zaXR5ID0gZGVuc2l0eTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEZvZ0V4cDIoIHRoaXMuY29sb3IsIHRoaXMuZGVuc2l0eSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0eXBlOiAnRm9nRXhwMicsXHJcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcclxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXHJcblx0XHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRm9nRXhwMiB9O1xyXG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5cclxuY2xhc3MgRm9nIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGNvbG9yLCBuZWFyID0gMSwgZmFyID0gMTAwMCApIHtcclxuXHJcblx0XHR0aGlzLmlzRm9nID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSAnJztcclxuXHJcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xyXG5cclxuXHRcdHRoaXMubmVhciA9IG5lYXI7XHJcblx0XHR0aGlzLmZhciA9IGZhcjtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEZvZyggdGhpcy5jb2xvciwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0eXBlOiAnRm9nJyxcclxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxyXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcclxuXHRcdFx0bmVhcjogdGhpcy5uZWFyLFxyXG5cdFx0XHRmYXI6IHRoaXMuZmFyXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBGb2cgfTtcclxuIiwiaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcclxuXHJcbmNsYXNzIFNjZW5lIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNTY2VuZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1NjZW5lJztcclxuXHJcblx0XHR0aGlzLmJhY2tncm91bmQgPSBudWxsO1xyXG5cdFx0dGhpcy5lbnZpcm9ubWVudCA9IG51bGw7XHJcblx0XHR0aGlzLmZvZyA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IDA7XHJcblx0XHR0aGlzLmJhY2tncm91bmRJbnRlbnNpdHkgPSAxO1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcclxuXHJcblx0XHR0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5ID0gMTtcclxuXHRcdHRoaXMuZW52aXJvbm1lbnRSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xyXG5cclxuXHRcdHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IG51bGw7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcclxuXHJcblx0XHRcdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XHJcblx0XHRpZiAoIHNvdXJjZS5lbnZpcm9ubWVudCAhPT0gbnVsbCApIHRoaXMuZW52aXJvbm1lbnQgPSBzb3VyY2UuZW52aXJvbm1lbnQuY2xvbmUoKTtcclxuXHRcdGlmICggc291cmNlLmZvZyAhPT0gbnVsbCApIHRoaXMuZm9nID0gc291cmNlLmZvZy5jbG9uZSgpO1xyXG5cclxuXHRcdHRoaXMuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBzb3VyY2UuYmFja2dyb3VuZEJsdXJyaW5lc3M7XHJcblx0XHR0aGlzLmJhY2tncm91bmRJbnRlbnNpdHkgPSBzb3VyY2UuYmFja2dyb3VuZEludGVuc2l0eTtcclxuXHRcdHRoaXMuYmFja2dyb3VuZFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5iYWNrZ3JvdW5kUm90YXRpb24gKTtcclxuXHJcblx0XHR0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5ID0gc291cmNlLmVudmlyb25tZW50SW50ZW5zaXR5O1xyXG5cdFx0dGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5lbnZpcm9ubWVudFJvdGF0aW9uICk7XHJcblxyXG5cdFx0aWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBtZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuZm9nICE9PSBudWxsICkgZGF0YS5vYmplY3QuZm9nID0gdGhpcy5mb2cudG9KU09OKCk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmRCbHVycmluZXNzID4gMCApIGRhdGEub2JqZWN0LmJhY2tncm91bmRCbHVycmluZXNzID0gdGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcztcclxuXHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5vYmplY3QuYmFja2dyb3VuZEludGVuc2l0eSA9IHRoaXMuYmFja2dyb3VuZEludGVuc2l0eTtcclxuXHRcdGRhdGEub2JqZWN0LmJhY2tncm91bmRSb3RhdGlvbiA9IHRoaXMuYmFja2dyb3VuZFJvdGF0aW9uLnRvQXJyYXkoKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuZW52aXJvbm1lbnRJbnRlbnNpdHkgIT09IDEgKSBkYXRhLm9iamVjdC5lbnZpcm9ubWVudEludGVuc2l0eSA9IHRoaXMuZW52aXJvbm1lbnRJbnRlbnNpdHk7XHJcblx0XHRkYXRhLm9iamVjdC5lbnZpcm9ubWVudFJvdGF0aW9uID0gdGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uLnRvQXJyYXkoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgU2NlbmUgfTtcclxuIiwiaW1wb3J0IHsgZ2VuZXJhdGVVVUlEIH0gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBTdGF0aWNEcmF3VXNhZ2UgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSApIHtcclxuXHJcblx0XHR0aGlzLmlzSW50ZXJsZWF2ZWRCdWZmZXIgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcclxuXHRcdHRoaXMuc3RyaWRlID0gc3RyaWRlO1xyXG5cdFx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBzdHJpZGUgOiAwO1xyXG5cclxuXHRcdHRoaXMudXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7XHJcblx0XHR0aGlzLnVwZGF0ZVJhbmdlcyA9IFtdO1xyXG5cclxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XHJcblxyXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdH1cclxuXHJcblx0b25VcGxvYWRDYWxsYmFjaygpIHt9XHJcblxyXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRVc2FnZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZFVwZGF0ZVJhbmdlKCBzdGFydCwgY291bnQgKSB7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMucHVzaCggeyBzdGFydCwgY291bnQgfSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsZWFyVXBkYXRlUmFuZ2VzKCkge1xyXG5cclxuXHRcdHRoaXMudXBkYXRlUmFuZ2VzLmxlbmd0aCA9IDA7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcclxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XHJcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XHJcblx0XHR0aGlzLnVzYWdlID0gc291cmNlLnVzYWdlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHlBdCggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcclxuXHJcblx0XHRpbmRleDEgKj0gdGhpcy5zdHJpZGU7XHJcblx0XHRpbmRleDIgKj0gYXR0cmlidXRlLnN0cmlkZTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnN0cmlkZTsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0KCB2YWx1ZSwgb2Zmc2V0ID0gMCApIHtcclxuXHJcblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCBkYXRhICkge1xyXG5cclxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzID0ge307XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID0gdGhpcy5hcnJheS5zbGljZSggMCApLmJ1ZmZlcjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYXJyYXkgPSBuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3RvciggZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gKTtcclxuXHJcblx0XHRjb25zdCBpYiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCBhcnJheSwgdGhpcy5zdHJpZGUgKTtcclxuXHRcdGliLnNldFVzYWdlKCB0aGlzLnVzYWdlICk7XHJcblxyXG5cdFx0cmV0dXJuIGliO1xyXG5cclxuXHR9XHJcblxyXG5cdG9uVXBsb2FkKCBjYWxsYmFjayApIHtcclxuXHJcblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0ZGF0YS5hcnJheUJ1ZmZlcnMgPSB7fTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgVVVJRCBmb3IgYXJyYXkgYnVmZmVyIGlmIG5lY2Vzc2FyeVxyXG5cclxuXHRcdGlmICggdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID0gQXJyYXkuZnJvbSggbmV3IFVpbnQzMkFycmF5KCB0aGlzLmFycmF5LmJ1ZmZlciApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxyXG5cdFx0XHRidWZmZXI6IHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkLFxyXG5cdFx0XHR0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXHJcblx0XHRcdHN0cmlkZTogdGhpcy5zdHJpZGVcclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEludGVybGVhdmVkQnVmZmVyIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IGRlbm9ybWFsaXplLCBub3JtYWxpemUgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggaW50ZXJsZWF2ZWRCdWZmZXIsIGl0ZW1TaXplLCBvZmZzZXQsIG5vcm1hbGl6ZWQgPSBmYWxzZSApIHtcclxuXHJcblx0XHR0aGlzLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9ICcnO1xyXG5cclxuXHRcdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xyXG5cdFx0dGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplO1xyXG5cdFx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgY291bnQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5jb3VudDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgYXJyYXkoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMuZGF0YS5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbSApIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmRhdGEuY291bnQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XHJcblxyXG5cdFx0XHRfdmVjdG9yLmFwcGx5TWF0cml4NCggbSApO1xyXG5cclxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcclxuXHJcblx0XHRcdF92ZWN0b3IuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcclxuXHJcblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyYW5zZm9ybURpcmVjdGlvbiggbSApIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xyXG5cclxuXHRcdFx0X3ZlY3Rvci50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcclxuXHJcblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldENvbXBvbmVudCggaW5kZXgsIGNvbXBvbmVudCApIHtcclxuXHJcblx0XHRsZXQgdmFsdWUgPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIGNvbXBvbmVudCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdmFsdWUgPSBkZW5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50LCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHZhbHVlID0gbm9ybWFsaXplKCB2YWx1ZSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyBjb21wb25lbnQgXSA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFgoIGluZGV4LCB4ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXSA9IHg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WSggaW5kZXgsIHkgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0WiggaW5kZXgsIHogKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXSA9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0VyggaW5kZXgsIHcgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXSA9IHc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0WCggaW5kZXggKSB7XHJcblxyXG5cdFx0bGV0IHggPSB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gZGVub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4geDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRZKCBpbmRleCApIHtcclxuXHJcblx0XHRsZXQgeSA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB5ID0gZGVub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4geTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRaKCBpbmRleCApIHtcclxuXHJcblx0XHRsZXQgeiA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gZGVub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gejtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRXKCBpbmRleCApIHtcclxuXHJcblx0XHRsZXQgdyA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gZGVub3JtYWxpemUoIHcsIHRoaXMuYXJyYXkgKTtcclxuXHJcblx0XHRyZXR1cm4gdztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYWSggaW5kZXgsIHgsIHkgKSB7XHJcblxyXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcclxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XHJcblxyXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcclxuXHJcblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcclxuXHJcblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xyXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcclxuXHJcblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xyXG5cclxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xyXG5cclxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xyXG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XHJcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcclxuXHRcdFx0dyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcclxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xyXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSggZGF0YSApIHtcclxuXHJcblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuY2xvbmUoKTogQ2xvbmluZyBhbiBpbnRlcmxlYXZlZCBidWZmZXIgYXR0cmlidXRlIHdpbGwgZGUtaW50ZXJsZWF2ZSBidWZmZXIgZGF0YS4nICk7XHJcblxyXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jb3VudDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0aGlzLml0ZW1TaXplOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGFycmF5LnB1c2goIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyBqIF0gKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyB0aGlzLmFycmF5LmNvbnN0cnVjdG9yKCBhcnJheSApLCB0aGlzLml0ZW1TaXplLCB0aGlzLm5vcm1hbGl6ZWQgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVycyA9IHt9O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9IHRoaXMuZGF0YS5jbG9uZSggZGF0YSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0sIHRoaXMuaXRlbVNpemUsIHRoaXMub2Zmc2V0LCB0aGlzLm5vcm1hbGl6ZWQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBkYXRhICkge1xyXG5cclxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS50b0pTT04oKTogU2VyaWFsaXppbmcgYW4gaW50ZXJsZWF2ZWQgYnVmZmVyIGF0dHJpYnV0ZSB3aWxsIGRlLWludGVybGVhdmUgYnVmZmVyIGRhdGEuJyApO1xyXG5cclxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQ7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdGhpcy5pdGVtU2l6ZTsgaiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRhcnJheS5wdXNoKCB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgaiBdICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGRlLWludGVybGVhdmUgZGF0YSBhbmQgc2F2ZSBpdCBhcyBhbiBvcmRpbmFyeSBidWZmZXIgYXR0cmlidXRlIGZvciBub3dcclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0aXRlbVNpemU6IHRoaXMuaXRlbVNpemUsXHJcblx0XHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxyXG5cdFx0XHRcdGFycmF5OiBhcnJheSxcclxuXHRcdFx0XHRub3JtYWxpemVkOiB0aGlzLm5vcm1hbGl6ZWRcclxuXHRcdFx0fTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gc2F2ZSBhcyB0cnVlIGludGVybGVhdmVkIGF0dHJpYnV0ZVxyXG5cclxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVycyA9IHt9O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9IHRoaXMuZGF0YS50b0pTT04oIGRhdGEgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0aXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcclxuXHRcdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcclxuXHRcdFx0XHRkYXRhOiB0aGlzLmRhdGEudXVpZCxcclxuXHRcdFx0XHRvZmZzZXQ6IHRoaXMub2Zmc2V0LFxyXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIH07XHJcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBTcHJpdGVNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzU3ByaXRlTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdTcHJpdGVNYXRlcmlhbCc7XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5yb3RhdGlvbiA9IDA7XHJcblxyXG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xyXG5cclxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XHJcblxyXG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgU3ByaXRlTWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tYXRoL1RyaWFuZ2xlLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyLmpzJztcclxuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgU3ByaXRlTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvU3ByaXRlTWF0ZXJpYWwuanMnO1xyXG5cclxubGV0IF9nZW9tZXRyeTtcclxuXHJcbmNvbnN0IF9pbnRlcnNlY3RQb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3dvcmxkU2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9tdlBvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY29uc3QgX2FsaWduZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgX3JvdGF0ZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgX3ZpZXdXb3JsZE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuXHJcbmNvbnN0IF92QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3ZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdkMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfdXZBID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBfdXZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBfdXZDID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xyXG5cclxuY2xhc3MgU3ByaXRlIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWF0ZXJpYWwgPSBuZXcgU3ByaXRlTWF0ZXJpYWwoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNTcHJpdGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdTcHJpdGUnO1xyXG5cclxuXHRcdGlmICggX2dlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRfZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcblx0XHRcdGNvbnN0IGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIFtcclxuXHRcdFx0XHQtIDAuNSwgLSAwLjUsIDAsIDAsIDAsXHJcblx0XHRcdFx0MC41LCAtIDAuNSwgMCwgMSwgMCxcclxuXHRcdFx0XHQwLjUsIDAuNSwgMCwgMSwgMSxcclxuXHRcdFx0XHQtIDAuNSwgMC41LCAwLCAwLCAxXHJcblx0XHRcdF0gKTtcclxuXHJcblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBmbG9hdDMyQXJyYXksIDUgKTtcclxuXHJcblx0XHRcdF9nZW9tZXRyeS5zZXRJbmRleCggWyAwLCAxLCAyLFx0MCwgMiwgMyBdICk7XHJcblx0XHRcdF9nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIDMsIDAsIGZhbHNlICkgKTtcclxuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gX2dlb21ldHJ5O1xyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG5cclxuXHRcdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICk7XHJcblxyXG5cdH1cclxuXHJcblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xyXG5cclxuXHRcdGlmICggcmF5Y2FzdGVyLmNhbWVyYSA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcHJpdGU6IFwiUmF5Y2FzdGVyLmNhbWVyYVwiIG5lZWRzIHRvIGJlIHNldCBpbiBvcmRlciB0byByYXljYXN0IGFnYWluc3Qgc3ByaXRlcy4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF93b3JsZFNjYWxlLnNldEZyb21NYXRyaXhTY2FsZSggdGhpcy5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdF92aWV3V29ybGRNYXRyaXguY29weSggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZCApO1xyXG5cdFx0dGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHRoaXMubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHRfbXZQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubW9kZWxWaWV3TWF0cml4ICk7XHJcblxyXG5cdFx0aWYgKCByYXljYXN0ZXIuY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgJiYgdGhpcy5tYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0X3dvcmxkU2NhbGUubXVsdGlwbHlTY2FsYXIoIC0gX212UG9zaXRpb24ueiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCByb3RhdGlvbiA9IHRoaXMubWF0ZXJpYWwucm90YXRpb247XHJcblx0XHRsZXQgc2luLCBjb3M7XHJcblxyXG5cdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcclxuXHJcblx0XHRcdGNvcyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xyXG5cdFx0XHRzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XHJcblxyXG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XHJcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qi5zZXQoIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XHJcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qy5zZXQoIDAuNSwgMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xyXG5cclxuXHRcdF91dkEuc2V0KCAwLCAwICk7XHJcblx0XHRfdXZCLnNldCggMSwgMCApO1xyXG5cdFx0X3V2Qy5zZXQoIDEsIDEgKTtcclxuXHJcblx0XHQvLyBjaGVjayBmaXJzdCB0cmlhbmdsZVxyXG5cdFx0bGV0IGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZCLCBfdkMsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcclxuXHJcblx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdC8vIGNoZWNrIHNlY29uZCB0cmlhbmdsZVxyXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qi5zZXQoIC0gMC41LCAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XHJcblx0XHRcdF91dkIuc2V0KCAwLCAxICk7XHJcblxyXG5cdFx0XHRpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCBfdkEsIF92QywgX3ZCLCBmYWxzZSwgX2ludGVyc2VjdFBvaW50ICk7XHJcblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggX2ludGVyc2VjdFBvaW50ICk7XHJcblxyXG5cdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcclxuXHJcblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcclxuXHJcblx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxyXG5cdFx0XHR1djogVHJpYW5nbGUuZ2V0SW50ZXJwb2xhdGlvbiggX2ludGVyc2VjdFBvaW50LCBfdkEsIF92QiwgX3ZDLCBfdXZBLCBfdXZCLCBfdXZDLCBuZXcgVmVjdG9yMigpICksXHJcblx0XHRcdGZhY2U6IG51bGwsXHJcblx0XHRcdG9iamVjdDogdGhpc1xyXG5cclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xyXG5cclxuXHRcdGlmICggc291cmNlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xyXG5cclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBzb3VyY2UubWF0ZXJpYWw7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybVZlcnRleCggdmVydGV4UG9zaXRpb24sIG12UG9zaXRpb24sIGNlbnRlciwgc2NhbGUsIHNpbiwgY29zICkge1xyXG5cclxuXHQvLyBjb21wdXRlIHBvc2l0aW9uIGluIGNhbWVyYSBzcGFjZVxyXG5cdF9hbGlnbmVkUG9zaXRpb24uc3ViVmVjdG9ycyggdmVydGV4UG9zaXRpb24sIGNlbnRlciApLmFkZFNjYWxhciggMC41ICkubXVsdGlwbHkoIHNjYWxlICk7XHJcblxyXG5cdC8vIHRvIGNoZWNrIGlmIHJvdGF0aW9uIGlzIG5vdCB6ZXJvXHJcblx0aWYgKCBzaW4gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRfcm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTtcclxuXHRcdF9yb3RhdGVkUG9zaXRpb24ueSA9ICggc2luICogX2FsaWduZWRQb3NpdGlvbi54ICkgKyAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueSApO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdF9yb3RhdGVkUG9zaXRpb24uY29weSggX2FsaWduZWRQb3NpdGlvbiApO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHR2ZXJ0ZXhQb3NpdGlvbi5jb3B5KCBtdlBvc2l0aW9uICk7XHJcblx0dmVydGV4UG9zaXRpb24ueCArPSBfcm90YXRlZFBvc2l0aW9uLng7XHJcblx0dmVydGV4UG9zaXRpb24ueSArPSBfcm90YXRlZFBvc2l0aW9uLnk7XHJcblxyXG5cdC8vIHRyYW5zZm9ybSB0byB3b3JsZCBzcGFjZVxyXG5cdHZlcnRleFBvc2l0aW9uLmFwcGx5TWF0cml4NCggX3ZpZXdXb3JsZE1hdHJpeCApO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgU3ByaXRlIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5cclxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jbGFzcyBMT0QgZXh0ZW5kcyBPYmplY3QzRCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5fY3VycmVudExldmVsID0gMDtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTE9EJztcclxuXHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xyXG5cdFx0XHRsZXZlbHM6IHtcclxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdHZhbHVlOiBbXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRpc0xPRDoge1xyXG5cdFx0XHRcdHZhbHVlOiB0cnVlLFxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblxyXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xyXG5cclxuXHRcdGNvbnN0IGxldmVscyA9IHNvdXJjZS5sZXZlbHM7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xyXG5cclxuXHRcdFx0dGhpcy5hZGRMZXZlbCggbGV2ZWwub2JqZWN0LmNsb25lKCksIGxldmVsLmRpc3RhbmNlLCBsZXZlbC5oeXN0ZXJlc2lzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZExldmVsKCBvYmplY3QsIGRpc3RhbmNlID0gMCwgaHlzdGVyZXNpcyA9IDAgKSB7XHJcblxyXG5cdFx0ZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTtcclxuXHJcblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcclxuXHJcblx0XHRsZXQgbDtcclxuXHJcblx0XHRmb3IgKCBsID0gMDsgbCA8IGxldmVscy5sZW5ndGg7IGwgKysgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRsZXZlbHMuc3BsaWNlKCBsLCAwLCB7IGRpc3RhbmNlOiBkaXN0YW5jZSwgaHlzdGVyZXNpczogaHlzdGVyZXNpcywgb2JqZWN0OiBvYmplY3QgfSApO1xyXG5cclxuXHRcdHRoaXMuYWRkKCBvYmplY3QgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyZW1vdmVMZXZlbCggZGlzdGFuY2UgKSB7XHJcblxyXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdGlmICggbGV2ZWxzWyBpIF0uZGlzdGFuY2UgPT09IGRpc3RhbmNlICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCByZW1vdmVkRWxlbWVudHMgPSBsZXZlbHMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0dGhpcy5yZW1vdmUoIHJlbW92ZWRFbGVtZW50c1sgMCBdLm9iamVjdCApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEN1cnJlbnRMZXZlbCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fY3VycmVudExldmVsO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHJcblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkge1xyXG5cclxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xyXG5cclxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHRsZXQgaSwgbDtcclxuXHJcblx0XHRcdGZvciAoIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGxldCBsZXZlbERpc3RhbmNlID0gbGV2ZWxzWyBpIF0uZGlzdGFuY2U7XHJcblxyXG5cdFx0XHRcdGlmICggbGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0bGV2ZWxEaXN0YW5jZSAtPSBsZXZlbERpc3RhbmNlICogbGV2ZWxzWyBpIF0uaHlzdGVyZXNpcztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxEaXN0YW5jZSApIHtcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGxldmVsc1sgaSAtIDEgXS5vYmplY3Q7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsO1xyXG5cclxuXHR9XHJcblxyXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcclxuXHJcblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcclxuXHJcblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0X3YxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfdjEgKTtcclxuXHJcblx0XHRcdHRoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSggY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xyXG5cclxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7XHJcblxyXG5cdFx0XHRfdjEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcclxuXHRcdFx0X3YyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBfdjEuZGlzdGFuY2VUbyggX3YyICkgLyBjYW1lcmEuem9vbTtcclxuXHJcblx0XHRcdGxldmVsc1sgMCBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRcdGxldCBpLCBsO1xyXG5cclxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0bGV0IGxldmVsRGlzdGFuY2UgPSBsZXZlbHNbIGkgXS5kaXN0YW5jZTtcclxuXHJcblx0XHRcdFx0aWYgKCBsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSApIHtcclxuXHJcblx0XHRcdFx0XHRsZXZlbERpc3RhbmNlIC09IGxldmVsRGlzdGFuY2UgKiBsZXZlbHNbIGkgXS5oeXN0ZXJlc2lzO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPj0gbGV2ZWxEaXN0YW5jZSApIHtcclxuXHJcblx0XHRcdFx0XHRsZXZlbHNbIGkgLSAxIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY3VycmVudExldmVsID0gaSAtIDE7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oIG1ldGEgKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xyXG5cclxuXHRcdGlmICggdGhpcy5hdXRvVXBkYXRlID09PSBmYWxzZSApIGRhdGEub2JqZWN0LmF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHRkYXRhLm9iamVjdC5sZXZlbHMgPSBbXTtcclxuXHJcblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGxldmVsID0gbGV2ZWxzWyBpIF07XHJcblxyXG5cdFx0XHRkYXRhLm9iamVjdC5sZXZlbHMucHVzaCgge1xyXG5cdFx0XHRcdG9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsXHJcblx0XHRcdFx0ZGlzdGFuY2U6IGxldmVsLmRpc3RhbmNlLFxyXG5cdFx0XHRcdGh5c3RlcmVzaXM6IGxldmVsLmh5c3RlcmVzaXNcclxuXHRcdFx0fSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IExPRCB9O1xyXG4iLCJpbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi9NZXNoLmpzJztcclxuaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xyXG5pbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vbWF0aC9WZWN0b3I0LmpzJztcclxuaW1wb3J0IHsgUmF5IH0gZnJvbSAnLi4vbWF0aC9SYXkuanMnO1xyXG5pbXBvcnQgeyBBdHRhY2hlZEJpbmRNb2RlLCBEZXRhY2hlZEJpbmRNb2RlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IF9iYXNlUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfc2tpbkluZGV4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBfc2tpbldlaWdodCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTtcclxuXHJcbmNvbnN0IF92ZWN0b3IzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfbWF0cml4NCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX3ZlcnRleCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcclxuY29uc3QgX2ludmVyc2VNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF9yYXkgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcclxuXHJcbmNsYXNzIFNraW5uZWRNZXNoIGV4dGVuZHMgTWVzaCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdHRoaXMuaXNTa2lubmVkTWVzaCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcclxuXHJcblx0XHR0aGlzLmJpbmRNb2RlID0gQXR0YWNoZWRCaW5kTW9kZTtcclxuXHRcdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7XHJcblxyXG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuZ2V0VmVydGV4UG9zaXRpb24oIGksIF92ZXJ0ZXggKTtcclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVydGV4ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy5nZXRWZXJ0ZXhQb3NpdGlvbiggaSwgX3ZlcnRleCApO1xyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLmV4cGFuZEJ5UG9pbnQoIF92ZXJ0ZXggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcclxuXHJcblx0XHR0aGlzLmJpbmRNb2RlID0gc291cmNlLmJpbmRNb2RlO1xyXG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4ICk7XHJcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4SW52ZXJzZSApO1xyXG5cclxuXHRcdHRoaXMuc2tlbGV0b24gPSBzb3VyY2Uuc2tlbGV0b247XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UuYm91bmRpbmdCb3ggIT09IG51bGwgKSB0aGlzLmJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xyXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xyXG5cclxuXHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcclxuXHJcblx0XHQvLyB0ZXN0IHdpdGggYm91bmRpbmcgc3BoZXJlIGluIHdvcmxkIHNwYWNlXHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHRfc3BoZXJlLmNvcHkoIHRoaXMuYm91bmRpbmdTcGhlcmUgKTtcclxuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIGNvbnZlcnQgcmF5IHRvIGxvY2FsIHNwYWNlIG9mIHNraW5uZWQgbWVzaFxyXG5cclxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XHJcblx0XHRfcmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4ICk7XHJcblxyXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIGJveCBpbiBsb2NhbCBzcGFjZVxyXG5cclxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGlmICggX3JheS5pbnRlcnNlY3RzQm94KCB0aGlzLmJvdW5kaW5nQm94ICkgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB0ZXN0IGZvciBpbnRlcnNlY3Rpb25zIHdpdGggZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLl9jb21wdXRlSW50ZXJzZWN0aW9ucyggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCBfcmF5ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0VmVydGV4UG9zaXRpb24oIGluZGV4LCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0c3VwZXIuZ2V0VmVydGV4UG9zaXRpb24oIGluZGV4LCB0YXJnZXQgKTtcclxuXHJcblx0XHR0aGlzLmFwcGx5Qm9uZVRyYW5zZm9ybSggaW5kZXgsIHRhcmdldCApO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH1cclxuXHJcblx0YmluZCggc2tlbGV0b24sIGJpbmRNYXRyaXggKSB7XHJcblxyXG5cdFx0dGhpcy5za2VsZXRvbiA9IHNrZWxldG9uO1xyXG5cclxuXHRcdGlmICggYmluZE1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xyXG5cclxuXHRcdFx0dGhpcy5za2VsZXRvbi5jYWxjdWxhdGVJbnZlcnNlcygpO1xyXG5cclxuXHRcdFx0YmluZE1hdHJpeCA9IHRoaXMubWF0cml4V29ybGQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYmluZE1hdHJpeC5jb3B5KCBiaW5kTWF0cml4ICk7XHJcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIGJpbmRNYXRyaXggKS5pbnZlcnQoKTtcclxuXHJcblx0fVxyXG5cclxuXHRwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuc2tlbGV0b24ucG9zZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZVNraW5XZWlnaHRzKCkge1xyXG5cclxuXHRcdGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7XHJcblxyXG5cdFx0Y29uc3Qgc2tpbldlaWdodCA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0O1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNraW5XZWlnaHQuY291bnQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0dmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHNraW5XZWlnaHQsIGkgKTtcclxuXHJcblx0XHRcdGNvbnN0IHNjYWxlID0gMS4wIC8gdmVjdG9yLm1hbmhhdHRhbkxlbmd0aCgpO1xyXG5cclxuXHRcdFx0aWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7XHJcblxyXG5cdFx0XHRcdHZlY3Rvci5tdWx0aXBseVNjYWxhciggc2NhbGUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHZlY3Rvci5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNraW5XZWlnaHQuc2V0WFlaVyggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdmVjdG9yLncgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xyXG5cclxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xyXG5cclxuXHRcdGlmICggdGhpcy5iaW5kTW9kZSA9PT0gQXR0YWNoZWRCaW5kTW9kZSApIHtcclxuXHJcblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYmluZE1vZGUgPT09IERldGFjaGVkQmluZE1vZGUgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMuYmluZE1hdHJpeCApLmludmVydCgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRhcHBseUJvbmVUcmFuc2Zvcm0oIGluZGV4LCB2ZWN0b3IgKSB7XHJcblxyXG5cdFx0Y29uc3Qgc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cclxuXHRcdF9za2luSW5kZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luSW5kZXgsIGluZGV4ICk7XHJcblx0XHRfc2tpbldlaWdodC5mcm9tQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQsIGluZGV4ICk7XHJcblxyXG5cdFx0X2Jhc2VQb3NpdGlvbi5jb3B5KCB2ZWN0b3IgKS5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeCApO1xyXG5cclxuXHRcdHZlY3Rvci5zZXQoIDAsIDAsIDAgKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA0OyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gX3NraW5XZWlnaHQuZ2V0Q29tcG9uZW50KCBpICk7XHJcblxyXG5cdFx0XHRpZiAoIHdlaWdodCAhPT0gMCApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgYm9uZUluZGV4ID0gX3NraW5JbmRleC5nZXRDb21wb25lbnQoIGkgKTtcclxuXHJcblx0XHRcdFx0X21hdHJpeDQubXVsdGlwbHlNYXRyaWNlcyggc2tlbGV0b24uYm9uZXNbIGJvbmVJbmRleCBdLm1hdHJpeFdvcmxkLCBza2VsZXRvbi5ib25lSW52ZXJzZXNbIGJvbmVJbmRleCBdICk7XHJcblxyXG5cdFx0XHRcdHZlY3Rvci5hZGRTY2FsZWRWZWN0b3IoIF92ZWN0b3IzLmNvcHkoIF9iYXNlUG9zaXRpb24gKS5hcHBseU1hdHJpeDQoIF9tYXRyaXg0ICksIHdlaWdodCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcy5iaW5kTWF0cml4SW52ZXJzZSApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTa2lubmVkTWVzaCB9O1xyXG4iLCJpbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5cclxuY2xhc3MgQm9uZSBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzQm9uZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0JvbmUnO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCb25lIH07XHJcbiIsImltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBOZWFyZXN0RmlsdGVyIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuXHJcbmNsYXNzIERhdGFUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCwgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlciwgbWluRmlsdGVyID0gTmVhcmVzdEZpbHRlciwgYW5pc290cm9weSwgY29sb3JTcGFjZSApIHtcclxuXHJcblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XHJcblxyXG5cdFx0dGhpcy5pc0RhdGFUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcblxyXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHRcdHRoaXMuZmxpcFkgPSBmYWxzZTtcclxuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRGF0YVRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHtcclxuXHRSR0JBRm9ybWF0LFxyXG5cdEZsb2F0VHlwZVxyXG59IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IEJvbmUgfSBmcm9tICcuL0JvbmUuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgRGF0YVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuXHJcbmNvbnN0IF9vZmZzZXRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF9pZGVudGl0eU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuXHJcbmNsYXNzIFNrZWxldG9uIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGJvbmVzID0gW10sIGJvbmVJbnZlcnNlcyA9IFtdICkge1xyXG5cclxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHRcdHRoaXMuYm9uZXMgPSBib25lcy5zbGljZSggMCApO1xyXG5cdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBib25lSW52ZXJzZXM7XHJcblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5ib25lVGV4dHVyZSA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5pbml0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0aW5pdCgpIHtcclxuXHJcblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XHJcblx0XHRjb25zdCBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcclxuXHJcblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIGJvbmVzLmxlbmd0aCAqIDE2ICk7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIGludmVyc2UgYm9uZSBtYXRyaWNlcyBpZiBuZWNlc3NhcnlcclxuXHJcblx0XHRpZiAoIGJvbmVJbnZlcnNlcy5sZW5ndGggPT09IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2VcclxuXHJcblx0XHRcdGlmICggYm9uZXMubGVuZ3RoICE9PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogTnVtYmVyIG9mIGludmVyc2UgYm9uZSBtYXRyaWNlcyBkb2VzIG5vdCBtYXRjaCBhbW91bnQgb2YgYm9uZXMuJyApO1xyXG5cclxuXHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBuZXcgTWF0cml4NCgpICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y2FsY3VsYXRlSW52ZXJzZXMoKSB7XHJcblxyXG5cdFx0dGhpcy5ib25lSW52ZXJzZXMubGVuZ3RoID0gMDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmJvbmVzWyBpIF0gKSB7XHJcblxyXG5cdFx0XHRcdGludmVyc2UuY29weSggdGhpcy5ib25lc1sgaSBdLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBpbnZlcnNlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHBvc2UoKSB7XHJcblxyXG5cdFx0Ly8gcmVjb3ZlciB0aGUgYmluZC10aW1lIHdvcmxkIG1hdHJpY2VzXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCBib25lICkge1xyXG5cclxuXHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMuYm9uZUludmVyc2VzWyBpIF0gKS5pbnZlcnQoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XHJcblxyXG5cdFx0XHRpZiAoIGJvbmUgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xyXG5cclxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XHJcblx0XHRcdFx0XHRib25lLm1hdHJpeC5tdWx0aXBseSggYm9uZS5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRib25lLm1hdHJpeC5kZWNvbXBvc2UoIGJvbmUucG9zaXRpb24sIGJvbmUucXVhdGVybmlvbiwgYm9uZS5zY2FsZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xyXG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XHJcblx0XHRjb25zdCBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcclxuXHRcdGNvbnN0IGJvbmVUZXh0dXJlID0gdGhpcy5ib25lVGV4dHVyZTtcclxuXHJcblx0XHQvLyBmbGF0dGVuIGJvbmUgbWF0cmljZXMgdG8gYXJyYXlcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHQvLyBjb21wdXRlIHRoZSBvZmZzZXQgYmV0d2VlbiB0aGUgY3VycmVudCBhbmQgdGhlIG9yaWdpbmFsIHRyYW5zZm9ybVxyXG5cclxuXHRcdFx0Y29uc3QgbWF0cml4ID0gYm9uZXNbIGkgXSA/IGJvbmVzWyBpIF0ubWF0cml4V29ybGQgOiBfaWRlbnRpdHlNYXRyaXg7XHJcblxyXG5cdFx0XHRfb2Zmc2V0TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgYm9uZUludmVyc2VzWyBpIF0gKTtcclxuXHRcdFx0X29mZnNldE1hdHJpeC50b0FycmF5KCBib25lTWF0cmljZXMsIGkgKiAxNiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGJvbmVUZXh0dXJlICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb25lVGV4dHVyZSgpIHtcclxuXHJcblx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXHJcblx0XHQvLyAgICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgKD0+IGNvbHVtbjEsIGNvbHVtbjIsIGNvbHVtbjMsIGNvbHVtbjQpXHJcblx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IGJvbmVzICogNCBwaXhlbHMgPSAgKDggKiA4KVxyXG5cdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBib25lcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXHJcblx0XHQvLyAgICAgICAzMngzMiBwaXhlbCB0ZXh0dXJlIG1heCAgMjU2IGJvbmVzICogNCBwaXhlbHMgPSAoMzIgKiAzMilcclxuXHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgYm9uZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxyXG5cclxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLmJvbmVzLmxlbmd0aCAqIDQgKTsgLy8gNCBwaXhlbHMgbmVlZGVkIGZvciAxIG1hdHJpeFxyXG5cdFx0c2l6ZSA9IE1hdGguY2VpbCggc2l6ZSAvIDQgKSAqIDQ7XHJcblx0XHRzaXplID0gTWF0aC5tYXgoIHNpemUsIDQgKTtcclxuXHJcblx0XHRjb25zdCBib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcclxuXHRcdGJvbmVNYXRyaWNlcy5zZXQoIHRoaXMuYm9uZU1hdHJpY2VzICk7IC8vIGNvcHkgY3VycmVudCB2YWx1ZXNcclxuXHJcblx0XHRjb25zdCBib25lVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcclxuXHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IGJvbmVNYXRyaWNlcztcclxuXHRcdHRoaXMuYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRCb25lQnlOYW1lKCBuYW1lICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYm9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcclxuXHJcblx0XHRcdGlmICggYm9uZS5uYW1lID09PSBuYW1lICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuYm9uZVRleHR1cmUgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvbmVUZXh0dXJlLmRpc3Bvc2UoKTtcclxuXHJcblx0XHRcdHRoaXMuYm9uZVRleHR1cmUgPSBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmcm9tSlNPTigganNvbiwgYm9uZXMgKSB7XHJcblxyXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uYm9uZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHV1aWQgPSBqc29uLmJvbmVzWyBpIF07XHJcblx0XHRcdGxldCBib25lID0gYm9uZXNbIHV1aWQgXTtcclxuXHJcblx0XHRcdGlmICggYm9uZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogTm8gYm9uZSBmb3VuZCB3aXRoIFVVSUQ6JywgdXVpZCApO1xyXG5cdFx0XHRcdGJvbmUgPSBuZXcgQm9uZSgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5ib25lcy5wdXNoKCBib25lICk7XHJcblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCBqc29uLmJvbmVJbnZlcnNlc1sgaSBdICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5pbml0KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSB7XHJcblx0XHRcdG1ldGFkYXRhOiB7XHJcblx0XHRcdFx0dmVyc2lvbjogNC42LFxyXG5cdFx0XHRcdHR5cGU6ICdTa2VsZXRvbicsXHJcblx0XHRcdFx0Z2VuZXJhdG9yOiAnU2tlbGV0b24udG9KU09OJ1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRib25lczogW10sXHJcblx0XHRcdGJvbmVJbnZlcnNlczogW11cclxuXHRcdH07XHJcblxyXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xyXG5cclxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcclxuXHRcdGNvbnN0IGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGJvbmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcclxuXHRcdFx0ZGF0YS5ib25lcy5wdXNoKCBib25lLnV1aWQgKTtcclxuXHJcblx0XHRcdGNvbnN0IGJvbmVJbnZlcnNlID0gYm9uZUludmVyc2VzWyBpIF07XHJcblx0XHRcdGRhdGEuYm9uZUludmVyc2VzLnB1c2goIGJvbmVJbnZlcnNlLnRvQXJyYXkoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgU2tlbGV0b24gfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5cclxuY2xhc3MgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHRcdHRoaXMuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfTtcclxuIiwiaW1wb3J0IHsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi9NZXNoLmpzJztcclxuaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xyXG5pbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XHJcbmltcG9ydCB7IERhdGFUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvRGF0YVRleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBGbG9hdFR5cGUsIFJlZEZvcm1hdCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBfaW5zdGFuY2VMb2NhbE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX2luc3RhbmNlV29ybGRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcblxyXG5jb25zdCBfaW5zdGFuY2VJbnRlcnNlY3RzID0gW107XHJcblxyXG5jb25zdCBfYm94MyA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcclxuY29uc3QgX2lkZW50aXR5ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xyXG5jb25zdCBfbWVzaCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2goKTtcclxuY29uc3QgX3NwaGVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xyXG5cclxuY2xhc3MgSW5zdGFuY2VkTWVzaCBleHRlbmRzIE1lc2gge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsLCBjb3VudCApIHtcclxuXHJcblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XHJcblxyXG5cdFx0dGhpcy5pc0luc3RhbmNlZE1lc2ggPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXggPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBjb3VudCAqIDE2ICksIDE2ICk7XHJcblx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBudWxsO1xyXG5cdFx0dGhpcy5tb3JwaFRleHR1cmUgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy5zZXRNYXRyaXhBdCggaSwgX2lkZW50aXR5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBjb3VudCA9IHRoaXMuY291bnQ7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XHJcblxyXG5cdFx0XHRfYm94My5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApLmFwcGx5TWF0cml4NCggX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3gudW5pb24oIF9ib3gzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBjb3VudCA9IHRoaXMuY291bnQ7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLm1ha2VFbXB0eSgpO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaSwgX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcclxuXHJcblx0XHRcdF9zcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKS5hcHBseU1hdHJpeDQoIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnVuaW9uKCBfc3BoZXJlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5pbnN0YW5jZU1hdHJpeC5jb3B5KCBzb3VyY2UuaW5zdGFuY2VNYXRyaXggKTtcclxuXHJcblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRleHR1cmUgIT09IG51bGwgKSB0aGlzLm1vcnBoVGV4dHVyZSA9IHNvdXJjZS5tb3JwaFRleHR1cmUuY2xvbmUoKTtcclxuXHRcdGlmICggc291cmNlLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSB0aGlzLmluc3RhbmNlQ29sb3IgPSBzb3VyY2UuaW5zdGFuY2VDb2xvci5jbG9uZSgpO1xyXG5cclxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XHJcblxyXG5cdFx0aWYgKCBzb3VyY2UuYm91bmRpbmdCb3ggIT09IG51bGwgKSB0aGlzLmJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRDb2xvckF0KCBpbmRleCwgY29sb3IgKSB7XHJcblxyXG5cdFx0Y29sb3IuZnJvbUFycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldE1hdHJpeEF0KCBpbmRleCwgbWF0cml4ICkge1xyXG5cclxuXHRcdG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRNb3JwaEF0KCBpbmRleCwgb2JqZWN0ICkge1xyXG5cclxuXHRcdGNvbnN0IG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xyXG5cclxuXHRcdGNvbnN0IGFycmF5ID0gdGhpcy5tb3JwaFRleHR1cmUuc291cmNlLmRhdGEuZGF0YTtcclxuXHJcblx0XHRjb25zdCBsZW4gPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aCArIDE7IC8vIEFsbCBpbmZsdWVuY2VzICsgdGhlIGJhc2VJbmZsdWVuY2VTdW1cclxuXHJcblx0XHRjb25zdCBkYXRhSW5kZXggPSBpbmRleCAqIGxlbiArIDE7IC8vIFNraXAgdGhlIGJhc2VJbmZsdWVuY2VTdW0gYXQgdGhlIGJlZ2lubmluZ1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0b2JqZWN0SW5mbHVlbmNlc1sgaSBdID0gYXJyYXlbIGRhdGFJbmRleCArIGkgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xyXG5cclxuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcclxuXHRcdGNvbnN0IHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7XHJcblxyXG5cdFx0X21lc2guZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0X21lc2gubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xyXG5cclxuXHRcdGlmICggX21lc2gubWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcclxuXHJcblx0XHQvLyB0ZXN0IHdpdGggYm91bmRpbmcgc3BoZXJlIGZpcnN0XHJcblxyXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHRfc3BoZXJlLmNvcHkoIHRoaXMuYm91bmRpbmdTcGhlcmUgKTtcclxuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIG5vdyB0ZXN0IGVhY2ggaW5zdGFuY2VcclxuXHJcblx0XHRmb3IgKCBsZXQgaW5zdGFuY2VJZCA9IDA7IGluc3RhbmNlSWQgPCByYXljYXN0VGltZXM7IGluc3RhbmNlSWQgKysgKSB7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHdvcmxkIG1hdHJpeCBmb3IgZWFjaCBpbnN0YW5jZVxyXG5cclxuXHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaW5zdGFuY2VJZCwgX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcclxuXHJcblx0XHRcdF9pbnN0YW5jZVdvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xyXG5cclxuXHRcdFx0Ly8gdGhlIG1lc2ggcmVwcmVzZW50cyB0aGlzIHNpbmdsZSBpbnN0YW5jZVxyXG5cclxuXHRcdFx0X21lc2gubWF0cml4V29ybGQgPSBfaW5zdGFuY2VXb3JsZE1hdHJpeDtcclxuXHJcblx0XHRcdF9tZXNoLnJheWNhc3QoIHJheWNhc3RlciwgX2luc3RhbmNlSW50ZXJzZWN0cyApO1xyXG5cclxuXHRcdFx0Ly8gcHJvY2VzcyB0aGUgcmVzdWx0IG9mIHJheWNhc3RcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IF9pbnN0YW5jZUludGVyc2VjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gX2luc3RhbmNlSW50ZXJzZWN0c1sgaSBdO1xyXG5cdFx0XHRcdGludGVyc2VjdC5pbnN0YW5jZUlkID0gaW5zdGFuY2VJZDtcclxuXHRcdFx0XHRpbnRlcnNlY3Qub2JqZWN0ID0gdGhpcztcclxuXHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGggPSAwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRzZXRDb2xvckF0KCBpbmRleCwgY29sb3IgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmluc3RhbmNlQ29sb3IgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmNvdW50ICogMyApLmZpbGwoIDEgKSwgMyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb2xvci50b0FycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldE1hdHJpeEF0KCBpbmRleCwgbWF0cml4ICkge1xyXG5cclxuXHRcdG1hdHJpeC50b0FycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmFycmF5LCBpbmRleCAqIDE2ICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TW9ycGhBdCggaW5kZXgsIG9iamVjdCApIHtcclxuXHJcblx0XHRjb25zdCBvYmplY3RJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcclxuXHJcblx0XHRjb25zdCBsZW4gPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aCArIDE7IC8vIG1vcnBoQmFzZUluZmx1ZW5jZSArIGFsbCBpbmZsdWVuY2VzXHJcblxyXG5cdFx0aWYgKCB0aGlzLm1vcnBoVGV4dHVyZSA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMubW9ycGhUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCBuZXcgRmxvYXQzMkFycmF5KCBsZW4gKiB0aGlzLmNvdW50ICksIGxlbiwgdGhpcy5jb3VudCwgUmVkRm9ybWF0LCBGbG9hdFR5cGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLm1vcnBoVGV4dHVyZS5zb3VyY2UuZGF0YS5kYXRhO1xyXG5cclxuXHRcdGxldCBtb3JwaEluZmx1ZW5jZXNTdW0gPSAwO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gdGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA/IDEgOiAxIC0gbW9ycGhJbmZsdWVuY2VzU3VtO1xyXG5cclxuXHRcdGNvbnN0IGRhdGFJbmRleCA9IGxlbiAqIGluZGV4O1xyXG5cclxuXHRcdGFycmF5WyBkYXRhSW5kZXggXSA9IG1vcnBoQmFzZUluZmx1ZW5jZTtcclxuXHJcblx0XHRhcnJheS5zZXQoIG9iamVjdEluZmx1ZW5jZXMsIGRhdGFJbmRleCArIDEgKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcclxuXHJcblx0XHRpZiAoIHRoaXMubW9ycGhUZXh0dXJlICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUuZGlzcG9zZSgpO1xyXG5cdFx0XHR0aGlzLm1vcnBoVGV4dHVyZSA9IG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBJbnN0YW5jZWRNZXNoIH07XHJcbiIsImltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbmNvbnN0IF92ZWN0b3IxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdmVjdG9yMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX25vcm1hbE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTtcclxuXHJcbmNsYXNzIFBsYW5lIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIGNvbnN0YW50ID0gMCApIHtcclxuXHJcblx0XHR0aGlzLmlzUGxhbmUgPSB0cnVlO1xyXG5cclxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcclxuXHJcblx0XHR0aGlzLm5vcm1hbCA9IG5vcm1hbDtcclxuXHRcdHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIG5vcm1hbCwgY29uc3RhbnQgKSB7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XHJcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29tcG9uZW50cyggeCwgeSwgeiwgdyApIHtcclxuXHJcblx0XHR0aGlzLm5vcm1hbC5zZXQoIHgsIHksIHogKTtcclxuXHRcdHRoaXMuY29uc3RhbnQgPSB3O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIHBvaW50ICkge1xyXG5cclxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xyXG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcG9pbnQuZG90KCB0aGlzLm5vcm1hbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21Db3BsYW5hclBvaW50cyggYSwgYiwgYyApIHtcclxuXHJcblx0XHRjb25zdCBub3JtYWwgPSBfdmVjdG9yMS5zdWJWZWN0b3JzKCBjLCBiICkuY3Jvc3MoIF92ZWN0b3IyLnN1YlZlY3RvcnMoIGEsIGIgKSApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdC8vIFE6IHNob3VsZCBhbiBlcnJvciBiZSB0aHJvd24gaWYgbm9ybWFsIGlzIHplcm8gKGUuZy4gZGVnZW5lcmF0ZSBwbGFuZSk/XHJcblxyXG5cdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggcGxhbmUgKSB7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWwuY29weSggcGxhbmUubm9ybWFsICk7XHJcblx0XHR0aGlzLmNvbnN0YW50ID0gcGxhbmUuY29uc3RhbnQ7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bm9ybWFsaXplKCkge1xyXG5cclxuXHRcdC8vIE5vdGU6IHdpbGwgbGVhZCB0byBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBwbGFuZSBpcyBpbnZhbGlkLlxyXG5cclxuXHRcdGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcclxuXHRcdHRoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKCBpbnZlcnNlTm9ybWFsTGVuZ3RoICk7XHJcblx0XHR0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bmVnYXRlKCkge1xyXG5cclxuXHRcdHRoaXMuY29uc3RhbnQgKj0gLSAxO1xyXG5cdFx0dGhpcy5ub3JtYWwubmVnYXRlKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWwuZG90KCBwb2ludCApICsgdGhpcy5jb25zdGFudDtcclxuXHJcblx0fVxyXG5cclxuXHRkaXN0YW5jZVRvU3BoZXJlKCBzcGhlcmUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgLSBzcGhlcmUucmFkaXVzO1xyXG5cclxuXHR9XHJcblxyXG5cdHByb2plY3RQb2ludCggcG9pbnQsIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLm5vcm1hbCwgLSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdExpbmUoIGxpbmUsIHRhcmdldCApIHtcclxuXHJcblx0XHRjb25zdCBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKCBfdmVjdG9yMSApO1xyXG5cclxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcclxuXHJcblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxyXG5cdFx0XHRpZiAoIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICkgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVW5zdXJlIGlmIHRoaXMgaXMgdGhlIGNvcnJlY3QgbWV0aG9kIHRvIGhhbmRsZSB0aGlzIGNhc2UuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0ID0gLSAoIGxpbmUuc3RhcnQuZG90KCB0aGlzLm5vcm1hbCApICsgdGhpcy5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XHJcblxyXG5cdFx0aWYgKCB0IDwgMCB8fCB0ID4gMSApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGxpbmUuc3RhcnQgKS5hZGRTY2FsZWRWZWN0b3IoIGRpcmVjdGlvbiwgdCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNMaW5lKCBsaW5lICkge1xyXG5cclxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxyXG5cclxuXHRcdGNvbnN0IHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7XHJcblx0XHRjb25zdCBlbmRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuZW5kICk7XHJcblxyXG5cdFx0cmV0dXJuICggc3RhcnRTaWduIDwgMCAmJiBlbmRTaWduID4gMCApIHx8ICggZW5kU2lnbiA8IDAgJiYgc3RhcnRTaWduID4gMCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcclxuXHJcblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcclxuXHJcblx0XHRyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcGxhbmFyUG9pbnQoIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGFwcGx5TWF0cml4NCggbWF0cml4LCBvcHRpb25hbE5vcm1hbE1hdHJpeCApIHtcclxuXHJcblx0XHRjb25zdCBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XHJcblxyXG5cdFx0Y29uc3QgcmVmZXJlbmNlUG9pbnQgPSB0aGlzLmNvcGxhbmFyUG9pbnQoIF92ZWN0b3IxICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcclxuXHJcblx0XHRjb25zdCBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHJlZmVyZW5jZVBvaW50LmRvdCggbm9ybWFsICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5jb25zdGFudCAtPSBvZmZzZXQuZG90KCB0aGlzLm5vcm1hbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGVxdWFscyggcGxhbmUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHBsYW5lLm5vcm1hbC5lcXVhbHMoIHRoaXMubm9ybWFsICkgJiYgKCBwbGFuZS5jb25zdGFudCA9PT0gdGhpcy5jb25zdGFudCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUGxhbmUgfTtcclxuIiwiaW1wb3J0IHsgV2ViR0xDb29yZGluYXRlU3lzdGVtLCBXZWJHUFVDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4vU3BoZXJlLmpzJztcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tICcuL1BsYW5lLmpzJztcclxuXHJcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcclxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIEZydXN0dW0ge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcDAgPSBuZXcgUGxhbmUoKSwgcDEgPSBuZXcgUGxhbmUoKSwgcDIgPSBuZXcgUGxhbmUoKSwgcDMgPSBuZXcgUGxhbmUoKSwgcDQgPSBuZXcgUGxhbmUoKSwgcDUgPSBuZXcgUGxhbmUoKSApIHtcclxuXHJcblx0XHR0aGlzLnBsYW5lcyA9IFsgcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSBdO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSApIHtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHJcblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xyXG5cdFx0cGxhbmVzWyAxIF0uY29weSggcDEgKTtcclxuXHRcdHBsYW5lc1sgMiBdLmNvcHkoIHAyICk7XHJcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xyXG5cdFx0cGxhbmVzWyA0IF0uY29weSggcDQgKTtcclxuXHRcdHBsYW5lc1sgNSBdLmNvcHkoIHA1ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggZnJ1c3R1bSApIHtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xyXG5cclxuXHRcdFx0cGxhbmVzWyBpIF0uY29weSggZnJ1c3R1bS5wbGFuZXNbIGkgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggbSwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcclxuXHRcdGNvbnN0IG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XHJcblx0XHRjb25zdCBtZTQgPSBtZVsgNCBdLCBtZTUgPSBtZVsgNSBdLCBtZTYgPSBtZVsgNiBdLCBtZTcgPSBtZVsgNyBdO1xyXG5cdFx0Y29uc3QgbWU4ID0gbWVbIDggXSwgbWU5ID0gbWVbIDkgXSwgbWUxMCA9IG1lWyAxMCBdLCBtZTExID0gbWVbIDExIF07XHJcblx0XHRjb25zdCBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XHJcblxyXG5cdFx0cGxhbmVzWyAwIF0uc2V0Q29tcG9uZW50cyggbWUzIC0gbWUwLCBtZTcgLSBtZTQsIG1lMTEgLSBtZTgsIG1lMTUgLSBtZTEyICkubm9ybWFsaXplKCk7XHJcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcclxuXHRcdHBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0cGxhbmVzWyAzIF0uc2V0Q29tcG9uZW50cyggbWUzIC0gbWUxLCBtZTcgLSBtZTUsIG1lMTEgLSBtZTksIG1lMTUgLSBtZTEzICkubm9ybWFsaXplKCk7XHJcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XHJcblxyXG5cdFx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTAsIG1lMTUgKyBtZTE0ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcclxuXHJcblx0XHRcdHBsYW5lc1sgNSBdLnNldENvbXBvbmVudHMoIG1lMiwgbWU2LCBtZTEwLCBtZTE0ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoKTogSW52YWxpZCBjb29yZGluYXRlIHN5c3RlbTogJyArIGNvb3JkaW5hdGVTeXN0ZW0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkge1xyXG5cclxuXHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIG9iamVjdC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHRcdF9zcGhlcmUuY29weSggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdFx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNTcHJpdGUoIHNwcml0ZSApIHtcclxuXHJcblx0XHRfc3BoZXJlLmNlbnRlci5zZXQoIDAsIDAsIDAgKTtcclxuXHRcdF9zcGhlcmUucmFkaXVzID0gMC43MDcxMDY3ODExODY1NDc2O1xyXG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XHJcblxyXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XHJcblx0XHRjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xyXG5cdFx0Y29uc3QgbmVnUmFkaXVzID0gLSBzcGhlcmUucmFkaXVzO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggY2VudGVyICk7XHJcblxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbmVnUmFkaXVzICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcGxhbmUgPSBwbGFuZXNbIGkgXTtcclxuXHJcblx0XHRcdC8vIGNvcm5lciBhdCBtYXggZGlzdGFuY2VcclxuXHJcblx0XHRcdF92ZWN0b3IueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcclxuXHRcdFx0X3ZlY3Rvci55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xyXG5cdFx0XHRfdmVjdG9yLnogPSBwbGFuZS5ub3JtYWwueiA+IDAgPyBib3gubWF4LnogOiBib3gubWluLno7XHJcblxyXG5cdFx0XHRpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggX3ZlY3RvciApIDwgMCApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xyXG5cclxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEZydXN0dW0gfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcclxuaW1wb3J0IHsgRmxvYXRUeXBlLCBSZWRJbnRlZ2VyRm9ybWF0LCBVbnNpZ25lZEludFR5cGUsIFJHQkFGb3JtYXQgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vTWVzaC5qcyc7XHJcbmltcG9ydCB7IENvbG9yTWFuYWdlbWVudCB9IGZyb20gJy4uL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcclxuaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XHJcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4uL21hdGgvU3BoZXJlLmpzJztcclxuaW1wb3J0IHsgRnJ1c3R1bSB9IGZyb20gJy4uL21hdGgvRnJ1c3R1bS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5cclxuZnVuY3Rpb24gYXNjSWRTb3J0KCBhLCBiICkge1xyXG5cclxuXHRyZXR1cm4gYSAtIGI7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0T3BhcXVlKCBhLCBiICkge1xyXG5cclxuXHRyZXR1cm4gYS56IC0gYi56O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc29ydFRyYW5zcGFyZW50KCBhLCBiICkge1xyXG5cclxuXHRyZXR1cm4gYi56IC0gYS56O1xyXG5cclxufVxyXG5cclxuY2xhc3MgTXVsdGlEcmF3UmVuZGVyTGlzdCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHRoaXMuaW5kZXggPSAwO1xyXG5cdFx0dGhpcy5wb29sID0gW107XHJcblx0XHR0aGlzLmxpc3QgPSBbXTtcclxuXHJcblx0fVxyXG5cclxuXHRwdXNoKCBzdGFydCwgY291bnQsIHosIGluZGV4ICkge1xyXG5cclxuXHRcdGNvbnN0IHBvb2wgPSB0aGlzLnBvb2w7XHJcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5saXN0O1xyXG5cdFx0aWYgKCB0aGlzLmluZGV4ID49IHBvb2wubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0cG9vbC5wdXNoKCB7XHJcblxyXG5cdFx0XHRcdHN0YXJ0OiAtIDEsXHJcblx0XHRcdFx0Y291bnQ6IC0gMSxcclxuXHRcdFx0XHR6OiAtIDEsXHJcblx0XHRcdFx0aW5kZXg6IC0gMSxcclxuXHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgaXRlbSA9IHBvb2xbIHRoaXMuaW5kZXggXTtcclxuXHRcdGxpc3QucHVzaCggaXRlbSApO1xyXG5cdFx0dGhpcy5pbmRleCArKztcclxuXHJcblx0XHRpdGVtLnN0YXJ0ID0gc3RhcnQ7XHJcblx0XHRpdGVtLmNvdW50ID0gY291bnQ7XHJcblx0XHRpdGVtLnogPSB6O1xyXG5cdFx0aXRlbS5pbmRleCA9IGluZGV4O1xyXG5cclxuXHR9XHJcblxyXG5cdHJlc2V0KCkge1xyXG5cclxuXHRcdHRoaXMubGlzdC5sZW5ndGggPSAwO1xyXG5cdFx0dGhpcy5pbmRleCA9IDA7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IF9tYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF93aGl0ZUNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDEsIDEsIDEgKTtcclxuY29uc3QgX2ZydXN0dW0gPSAvKkBfX1BVUkVfXyovIG5ldyBGcnVzdHVtKCk7XHJcbmNvbnN0IF9ib3ggPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XHJcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcclxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX2ZvcndhcmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF90ZW1wID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfcmVuZGVyTGlzdCA9IC8qQF9fUFVSRV9fKi8gbmV3IE11bHRpRHJhd1JlbmRlckxpc3QoKTtcclxuY29uc3QgX21lc2ggPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoKCk7XHJcbmNvbnN0IF9iYXRjaEludGVyc2VjdHMgPSBbXTtcclxuXHJcbi8vIGNvcGllcyBkYXRhIGZyb20gYXR0cmlidXRlIFwic3JjXCIgaW50byBcInRhcmdldFwiIHN0YXJ0aW5nIGF0IFwidGFyZ2V0T2Zmc2V0XCJcclxuZnVuY3Rpb24gY29weUF0dHJpYnV0ZURhdGEoIHNyYywgdGFyZ2V0LCB0YXJnZXRPZmZzZXQgPSAwICkge1xyXG5cclxuXHRjb25zdCBpdGVtU2l6ZSA9IHRhcmdldC5pdGVtU2l6ZTtcclxuXHRpZiAoIHNyYy5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIHx8IHNyYy5hcnJheS5jb25zdHJ1Y3RvciAhPT0gdGFyZ2V0LmFycmF5LmNvbnN0cnVjdG9yICkge1xyXG5cclxuXHRcdC8vIHVzZSB0aGUgY29tcG9uZW50IGdldHRlcnMgYW5kIHNldHRlcnMgaWYgdGhlIGFycmF5IGRhdGEgY2Fubm90XHJcblx0XHQvLyBiZSBjb3BpZWQgZGlyZWN0bHlcclxuXHRcdGNvbnN0IHZlcnRleENvdW50ID0gc3JjLmNvdW50O1xyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgYyA9IDA7IGMgPCBpdGVtU2l6ZTsgYyArKyApIHtcclxuXHJcblx0XHRcdFx0dGFyZ2V0LnNldENvbXBvbmVudCggaSArIHRhcmdldE9mZnNldCwgYywgc3JjLmdldENvbXBvbmVudCggaSwgYyApICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIGZhc3RlciBjb3B5IGFwcHJvYWNoIHVzaW5nIHR5cGVkIGFycmF5IHNldCBmdW5jdGlvblxyXG5cdFx0dGFyZ2V0LmFycmF5LnNldCggc3JjLmFycmF5LCB0YXJnZXRPZmZzZXQgKiBpdGVtU2l6ZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRhcmdldC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG59XHJcblxyXG4vLyBzYWZlbHkgY29waWVzIGFycmF5IGNvbnRlbnRzIHRvIGEgcG90ZW50aWFsbHkgc21hbGxlciBhcnJheVxyXG5mdW5jdGlvbiBjb3B5QXJyYXlDb250ZW50cyggc3JjLCB0YXJnZXQgKSB7XHJcblxyXG5cdGlmICggc3JjLmNvbnN0cnVjdG9yICE9PSB0YXJnZXQuY29uc3RydWN0b3IgKSB7XHJcblxyXG5cdFx0Ly8gaWYgYXJyYXlzIGFyZSBvZiBhIGRpZmZlcmVudCB0eXBlIChlZyBkdWUgdG8gaW5kZXggc2l6ZSBpbmNyZWFzaW5nKSB0aGVuIGRhdGEgbXVzdCBiZSBwZXItZWxlbWVudCBjb3BpZWRcclxuXHRcdGNvbnN0IGxlbiA9IE1hdGgubWluKCBzcmMubGVuZ3RoLCB0YXJnZXQubGVuZ3RoICk7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW47IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0YXJnZXRbIGkgXSA9IHNyY1sgaSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBpZiB0aGUgYXJyYXlzIHVzZSB0aGUgc2FtZSBkYXRhIGxheW91dCB3ZSBjYW4gdXNlIGEgZmFzdCBibG9jayBjb3B5XHJcblx0XHRjb25zdCBsZW4gPSBNYXRoLm1pbiggc3JjLmxlbmd0aCwgdGFyZ2V0Lmxlbmd0aCApO1xyXG5cdFx0dGFyZ2V0LnNldCggbmV3IHNyYy5jb25zdHJ1Y3Rvciggc3JjLmJ1ZmZlciwgMCwgbGVuICkgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY2xhc3MgQmF0Y2hlZE1lc2ggZXh0ZW5kcyBNZXNoIHtcclxuXHJcblx0Z2V0IG1heEluc3RhbmNlQ291bnQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX21heEluc3RhbmNlQ291bnQ7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGluc3RhbmNlQ291bnQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2luc3RhbmNlSW5mby5sZW5ndGggLSB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5sZW5ndGg7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHVudXNlZFZlcnRleENvdW50KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9tYXhWZXJ0ZXhDb3VudCAtIHRoaXMuX25leHRWZXJ0ZXhTdGFydDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgdW51c2VkSW5kZXhDb3VudCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fbWF4SW5kZXhDb3VudCAtIHRoaXMuX25leHRJbmRleFN0YXJ0O1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBtYXhJbnN0YW5jZUNvdW50LCBtYXhWZXJ0ZXhDb3VudCwgbWF4SW5kZXhDb3VudCA9IG1heFZlcnRleENvdW50ICogMiwgbWF0ZXJpYWwgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdHRoaXMuaXNCYXRjaGVkTWVzaCA9IHRydWU7XHJcblx0XHR0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cdFx0dGhpcy5jdXN0b21Tb3J0ID0gbnVsbDtcclxuXHJcblx0XHQvLyBzdG9yZXMgdmlzaWJsZSwgYWN0aXZlLCBhbmQgZ2VvbWV0cnkgaWQgcGVyIGluc3RhbmNlIGFuZCByZXNlcnZlZCBidWZmZXIgcmFuZ2VzIGZvciBnZW9tZXRyaWVzXHJcblx0XHR0aGlzLl9pbnN0YW5jZUluZm8gPSBbXTtcclxuXHRcdHRoaXMuX2dlb21ldHJ5SW5mbyA9IFtdO1xyXG5cclxuXHRcdC8vIGluc3RhbmNlLCBnZW9tZXRyeSBpZHMgdGhhdCBoYXZlIGJlZW4gc2V0IGFzIGluYWN0aXZlLCBhbmQgYXJlIGF2YWlsYWJsZSB0byBiZSBvdmVyd3JpdHRlblxyXG5cdFx0dGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHMgPSBbXTtcclxuXHRcdHRoaXMuX2F2YWlsYWJsZUdlb21ldHJ5SWRzID0gW107XHJcblxyXG5cdFx0Ly8gdXNlZCB0byB0cmFjayB3aGVyZSB0aGUgbmV4dCBwb2ludCBpcyB0aGF0IGdlb21ldHJ5IHNob3VsZCBiZSBpbnNlcnRlZFxyXG5cdFx0dGhpcy5fbmV4dEluZGV4U3RhcnQgPSAwO1xyXG5cdFx0dGhpcy5fbmV4dFZlcnRleFN0YXJ0ID0gMDtcclxuXHRcdHRoaXMuX2dlb21ldHJ5Q291bnQgPSAwO1xyXG5cclxuXHRcdC8vIGZsYWdzXHJcblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XHJcblx0XHR0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gY2FjaGVkIHVzZXIgb3B0aW9uc1xyXG5cdFx0dGhpcy5fbWF4SW5zdGFuY2VDb3VudCA9IG1heEluc3RhbmNlQ291bnQ7XHJcblx0XHR0aGlzLl9tYXhWZXJ0ZXhDb3VudCA9IG1heFZlcnRleENvdW50O1xyXG5cdFx0dGhpcy5fbWF4SW5kZXhDb3VudCA9IG1heEluZGV4Q291bnQ7XHJcblxyXG5cdFx0Ly8gYnVmZmVycyBmb3IgbXVsdGkgZHJhd1xyXG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gbmV3IEludDMyQXJyYXkoIG1heEluc3RhbmNlQ291bnQgKTtcclxuXHRcdHRoaXMuX211bHRpRHJhd1N0YXJ0cyA9IG5ldyBJbnQzMkFycmF5KCBtYXhJbnN0YW5jZUNvdW50ICk7XHJcblx0XHR0aGlzLl9tdWx0aURyYXdDb3VudCA9IDA7XHJcblx0XHR0aGlzLl9tdWx0aURyYXdJbnN0YW5jZXMgPSBudWxsO1xyXG5cclxuXHRcdC8vIExvY2FsIG1hdHJpeCBwZXIgZ2VvbWV0cnkgYnkgdXNpbmcgZGF0YSB0ZXh0dXJlXHJcblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUgPSBudWxsO1xyXG5cdFx0dGhpcy5faW5kaXJlY3RUZXh0dXJlID0gbnVsbDtcclxuXHRcdHRoaXMuX2NvbG9yc1RleHR1cmUgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuX2luaXRNYXRyaWNlc1RleHR1cmUoKTtcclxuXHRcdHRoaXMuX2luaXRJbmRpcmVjdFRleHR1cmUoKTtcclxuXHJcblx0fVxyXG5cclxuXHRfaW5pdE1hdHJpY2VzVGV4dHVyZSgpIHtcclxuXHJcblx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXHJcblx0XHQvLyAgICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgKD0+IGNvbHVtbjEsIGNvbHVtbjIsIGNvbHVtbjMsIGNvbHVtbjQpXHJcblx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IG1hdHJpY2VzICogNCBwaXhlbHMgPSAgKDggKiA4KVxyXG5cdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBtYXRyaWNlcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXHJcblx0XHQvLyAgICAgICAzMngzMiBwaXhlbCB0ZXh0dXJlIG1heCAgMjU2IG1hdHJpY2VzICogNCBwaXhlbHMgPSAoMzIgKiAzMilcclxuXHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgbWF0cmljZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxyXG5cclxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLl9tYXhJbnN0YW5jZUNvdW50ICogNCApOyAvLyA0IHBpeGVscyBuZWVkZWQgZm9yIDEgbWF0cml4XHJcblx0XHRzaXplID0gTWF0aC5jZWlsKCBzaXplIC8gNCApICogNDtcclxuXHRcdHNpemUgPSBNYXRoLm1heCggc2l6ZSwgNCApO1xyXG5cclxuXHRcdGNvbnN0IG1hdHJpY2VzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcclxuXHRcdGNvbnN0IG1hdHJpY2VzVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggbWF0cmljZXNBcnJheSwgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7XHJcblxyXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gbWF0cmljZXNUZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG5cdF9pbml0SW5kaXJlY3RUZXh0dXJlKCkge1xyXG5cclxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLl9tYXhJbnN0YW5jZUNvdW50ICk7XHJcblx0XHRzaXplID0gTWF0aC5jZWlsKCBzaXplICk7XHJcblxyXG5cdFx0Y29uc3QgaW5kaXJlY3RBcnJheSA9IG5ldyBVaW50MzJBcnJheSggc2l6ZSAqIHNpemUgKTtcclxuXHRcdGNvbnN0IGluZGlyZWN0VGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggaW5kaXJlY3RBcnJheSwgc2l6ZSwgc2l6ZSwgUmVkSW50ZWdlckZvcm1hdCwgVW5zaWduZWRJbnRUeXBlICk7XHJcblxyXG5cdFx0dGhpcy5faW5kaXJlY3RUZXh0dXJlID0gaW5kaXJlY3RUZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG5cdF9pbml0Q29sb3JzVGV4dHVyZSgpIHtcclxuXHJcblx0XHRsZXQgc2l6ZSA9IE1hdGguc3FydCggdGhpcy5fbWF4SW5zdGFuY2VDb3VudCApO1xyXG5cdFx0c2l6ZSA9IE1hdGguY2VpbCggc2l6ZSApO1xyXG5cclxuXHRcdC8vIDQgZmxvYXRzIHBlciBSR0JBIHBpeGVsIGluaXRpYWxpemVkIHRvIHdoaXRlXHJcblx0XHRjb25zdCBjb2xvcnNBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApLmZpbGwoIDEgKTtcclxuXHRcdGNvbnN0IGNvbG9yc1RleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIGNvbG9yc0FycmF5LCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcclxuXHRcdGNvbG9yc1RleHR1cmUuY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZTtcclxuXHJcblx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlID0gY29sb3JzVGV4dHVyZTtcclxuXHJcblx0fVxyXG5cclxuXHRfaW5pdGlhbGl6ZUdlb21ldHJ5KCByZWZlcmVuY2UgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0Y29uc3QgbWF4VmVydGV4Q291bnQgPSB0aGlzLl9tYXhWZXJ0ZXhDb3VudDtcclxuXHRcdGNvbnN0IG1heEluZGV4Q291bnQgPSB0aGlzLl9tYXhJbmRleENvdW50O1xyXG5cdFx0aWYgKCB0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gcmVmZXJlbmNlLmF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHNyY0F0dHJpYnV0ZSA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcclxuXHRcdFx0XHRjb25zdCB7IGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCB9ID0gc3JjQXR0cmlidXRlO1xyXG5cclxuXHRcdFx0XHRjb25zdCBkc3RBcnJheSA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggbWF4VmVydGV4Q291bnQgKiBpdGVtU2l6ZSApO1xyXG5cdFx0XHRcdGNvbnN0IGRzdEF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGRzdEFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xyXG5cclxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUsIGRzdEF0dHJpYnV0ZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCByZWZlcmVuY2UuZ2V0SW5kZXgoKSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVzZXJ2ZSBsYXN0IHUxNiBpbmRleCBmb3IgcHJpbWl0aXZlIHJlc3RhcnQuXHJcblx0XHRcdFx0Y29uc3QgaW5kZXhBcnJheSA9IG1heFZlcnRleENvdW50ID4gNjU1MzVcclxuXHRcdFx0XHRcdD8gbmV3IFVpbnQzMkFycmF5KCBtYXhJbmRleENvdW50IClcclxuXHRcdFx0XHRcdDogbmV3IFVpbnQxNkFycmF5KCBtYXhJbmRleENvdW50ICk7XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRleEFycmF5LCAxICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhlIGdlb21ldHJ5IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgZXhpc3RpbmcgY29tYmluZWQgZ2VvbWV0cnkgYXR0cmlidXRlc1xyXG5cdF92YWxpZGF0ZUdlb21ldHJ5KCBnZW9tZXRyeSApIHtcclxuXHJcblx0XHQvLyBjaGVjayB0byBlbnN1cmUgdGhlIGdlb21ldHJpZXMgYXJlIHVzaW5nIGNvbnNpc3RlbnQgYXR0cmlidXRlcyBhbmQgaW5kaWNlc1xyXG5cdFx0Y29uc3QgYmF0Y2hHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRpZiAoIEJvb2xlYW4oIGdlb21ldHJ5LmdldEluZGV4KCkgKSAhPT0gQm9vbGVhbiggYmF0Y2hHZW9tZXRyeS5nZXRJbmRleCgpICkgKSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5CYXRjaGVkTWVzaDogQWxsIGdlb21ldHJpZXMgbXVzdCBjb25zaXN0ZW50bHkgaGF2ZSBcImluZGV4XCIuJyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcyApIHtcclxuXHJcblx0XHRcdGlmICggISBnZW9tZXRyeS5oYXNBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgVEhSRUUuQmF0Y2hlZE1lc2g6IEFkZGVkIGdlb21ldHJ5IG1pc3NpbmcgXCIkeyBhdHRyaWJ1dGVOYW1lIH1cIi4gQWxsIGdlb21ldHJpZXMgbXVzdCBoYXZlIGNvbnNpc3RlbnQgYXR0cmlidXRlcy5gICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBzcmNBdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcclxuXHRcdFx0Y29uc3QgZHN0QXR0cmlidXRlID0gYmF0Y2hHZW9tZXRyeS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcclxuXHRcdFx0aWYgKCBzcmNBdHRyaWJ1dGUuaXRlbVNpemUgIT09IGRzdEF0dHJpYnV0ZS5pdGVtU2l6ZSB8fCBzcmNBdHRyaWJ1dGUubm9ybWFsaXplZCAhPT0gZHN0QXR0cmlidXRlLm5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkJhdGNoZWRNZXNoOiBBbGwgYXR0cmlidXRlcyBtdXN0IGhhdmUgYSBjb25zaXN0ZW50IGl0ZW1TaXplIGFuZCBub3JtYWxpemVkIHZhbHVlLicgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICkge1xyXG5cclxuXHRcdGNvbnN0IGluc3RhbmNlSW5mbyA9IHRoaXMuX2luc3RhbmNlSW5mbztcclxuXHRcdGlmICggaW5zdGFuY2VJZCA8IDAgfHwgaW5zdGFuY2VJZCA+PSBpbnN0YW5jZUluZm8ubGVuZ3RoIHx8IGluc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBUSFJFRS5CYXRjaGVkTWVzaDogSW52YWxpZCBpbnN0YW5jZUlkICR7aW5zdGFuY2VJZH0uIEluc3RhbmNlIGlzIGVpdGhlciBvdXQgb2YgcmFuZ2Ugb3IgaGFzIGJlZW4gZGVsZXRlZC5gICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHZhbGlkYXRlR2VvbWV0cnlJZCggZ2VvbWV0cnlJZCApIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeUluZm9MaXN0ID0gdGhpcy5fZ2VvbWV0cnlJbmZvO1xyXG5cdFx0aWYgKCBnZW9tZXRyeUlkIDwgMCB8fCBnZW9tZXRyeUlkID49IGdlb21ldHJ5SW5mb0xpc3QubGVuZ3RoIHx8IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgVEhSRUUuQmF0Y2hlZE1lc2g6IEludmFsaWQgZ2VvbWV0cnlJZCAke2dlb21ldHJ5SWR9LiBHZW9tZXRyeSBpcyBlaXRoZXIgb3V0IG9mIHJhbmdlIG9yIGhhcyBiZWVuIGRlbGV0ZWQuYCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHJcblx0c2V0Q3VzdG9tU29ydCggZnVuYyApIHtcclxuXHJcblx0XHR0aGlzLmN1c3RvbVNvcnQgPSBmdW5jO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29tcHV0ZUJvdW5kaW5nQm94KCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBib3VuZGluZ0JveCA9IHRoaXMuYm91bmRpbmdCb3g7XHJcblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XHJcblxyXG5cdFx0Ym91bmRpbmdCb3gubWFrZUVtcHR5KCk7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbnN0YW5jZUluZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGlmICggaW5zdGFuY2VJbmZvWyBpIF0uYWN0aXZlID09PSBmYWxzZSApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XHJcblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9tYXRyaXggKTtcclxuXHRcdFx0dGhpcy5nZXRCb3VuZGluZ0JveEF0KCBnZW9tZXRyeUlkLCBfYm94ICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XHJcblx0XHRcdGJvdW5kaW5nQm94LnVuaW9uKCBfYm94ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7XHJcblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XHJcblxyXG5cdFx0Ym91bmRpbmdTcGhlcmUubWFrZUVtcHR5KCk7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbnN0YW5jZUluZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGlmICggaW5zdGFuY2VJbmZvWyBpIF0uYWN0aXZlID09PSBmYWxzZSApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XHJcblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9tYXRyaXggKTtcclxuXHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfc3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XHJcblx0XHRcdGJvdW5kaW5nU3BoZXJlLnVuaW9uKCBfc3BoZXJlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGFkZEluc3RhbmNlKCBnZW9tZXRyeUlkICkge1xyXG5cclxuXHRcdGNvbnN0IGF0Q2FwYWNpdHkgPSB0aGlzLl9pbnN0YW5jZUluZm8ubGVuZ3RoID49IHRoaXMubWF4SW5zdGFuY2VDb3VudDtcclxuXHJcblx0XHQvLyBlbnN1cmUgd2UncmUgbm90IG92ZXIgZ2VvbWV0cnlcclxuXHRcdGlmICggYXRDYXBhY2l0eSAmJiB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5sZW5ndGggPT09IDAgKSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5CYXRjaGVkTWVzaDogTWF4aW11bSBpdGVtIGNvdW50IHJlYWNoZWQuJyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB7XHJcblx0XHRcdHZpc2libGU6IHRydWUsXHJcblx0XHRcdGFjdGl2ZTogdHJ1ZSxcclxuXHRcdFx0Z2VvbWV0cnlJbmRleDogZ2VvbWV0cnlJZCxcclxuXHRcdH07XHJcblxyXG5cdFx0bGV0IGRyYXdJZCA9IG51bGw7XHJcblxyXG5cdFx0Ly8gUHJpb3JpdGl6ZSB1c2luZyBwcmV2aW91c2x5IGZyZWVkIGluc3RhbmNlIGlkc1xyXG5cdFx0aWYgKCB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0dGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHMuc29ydCggYXNjSWRTb3J0ICk7XHJcblxyXG5cdFx0XHRkcmF3SWQgPSB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5zaGlmdCgpO1xyXG5cdFx0XHR0aGlzLl9pbnN0YW5jZUluZm9bIGRyYXdJZCBdID0gaW5zdGFuY2VJbmZvO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRkcmF3SWQgPSB0aGlzLl9pbnN0YW5jZUluZm8ubGVuZ3RoO1xyXG5cdFx0XHR0aGlzLl9pbnN0YW5jZUluZm8ucHVzaCggaW5zdGFuY2VJbmZvICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IG1hdHJpY2VzVGV4dHVyZSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZTtcclxuXHRcdF9tYXRyaXguaWRlbnRpdHkoKS50b0FycmF5KCBtYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YSwgZHJhd0lkICogMTYgKTtcclxuXHRcdG1hdHJpY2VzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0Y29uc3QgY29sb3JzVGV4dHVyZSA9IHRoaXMuX2NvbG9yc1RleHR1cmU7XHJcblx0XHRpZiAoIGNvbG9yc1RleHR1cmUgKSB7XHJcblxyXG5cdFx0XHRfd2hpdGVDb2xvci50b0FycmF5KCBjb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEsIGRyYXdJZCAqIDQgKTtcclxuXHRcdFx0Y29sb3JzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdHJldHVybiBkcmF3SWQ7XHJcblxyXG5cdH1cclxuXHJcblx0YWRkR2VvbWV0cnkoIGdlb21ldHJ5LCByZXNlcnZlZFZlcnRleENvdW50ID0gLSAxLCByZXNlcnZlZEluZGV4Q291bnQgPSAtIDEgKSB7XHJcblxyXG5cdFx0dGhpcy5faW5pdGlhbGl6ZUdlb21ldHJ5KCBnZW9tZXRyeSApO1xyXG5cclxuXHRcdHRoaXMuX3ZhbGlkYXRlR2VvbWV0cnkoIGdlb21ldHJ5ICk7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvID0ge1xyXG5cdFx0XHQvLyBnZW9tZXRyeSBpbmZvcm1hdGlvblxyXG5cdFx0XHR2ZXJ0ZXhTdGFydDogLSAxLFxyXG5cdFx0XHR2ZXJ0ZXhDb3VudDogLSAxLFxyXG5cdFx0XHRyZXNlcnZlZFZlcnRleENvdW50OiAtIDEsXHJcblxyXG5cdFx0XHRpbmRleFN0YXJ0OiAtIDEsXHJcblx0XHRcdGluZGV4Q291bnQ6IC0gMSxcclxuXHRcdFx0cmVzZXJ2ZWRJbmRleENvdW50OiAtIDEsXHJcblxyXG5cdFx0XHQvLyBkcmF3IHJhbmdlIGluZm9ybWF0aW9uXHJcblx0XHRcdHN0YXJ0OiAtIDEsXHJcblx0XHRcdGNvdW50OiAtIDEsXHJcblxyXG5cdFx0XHQvLyBzdGF0ZVxyXG5cdFx0XHRib3VuZGluZ0JveDogbnVsbCxcclxuXHRcdFx0Ym91bmRpbmdTcGhlcmU6IG51bGwsXHJcblx0XHRcdGFjdGl2ZTogdHJ1ZSxcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvTGlzdCA9IHRoaXMuX2dlb21ldHJ5SW5mbztcclxuXHRcdGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydCA9IHRoaXMuX25leHRWZXJ0ZXhTdGFydDtcclxuXHRcdGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50ID0gcmVzZXJ2ZWRWZXJ0ZXhDb3VudCA9PT0gLSAxID8gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkuY291bnQgOiByZXNlcnZlZFZlcnRleENvdW50O1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcclxuXHRcdGNvbnN0IGhhc0luZGV4ID0gaW5kZXggIT09IG51bGw7XHJcblx0XHRpZiAoIGhhc0luZGV4ICkge1xyXG5cclxuXHRcdFx0Z2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgPSB0aGlzLl9uZXh0SW5kZXhTdGFydDtcclxuXHRcdFx0Z2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudCA9IHJlc2VydmVkSW5kZXhDb3VudCA9PT0gLSAxID8gaW5kZXguY291bnQgOiByZXNlcnZlZEluZGV4Q291bnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChcclxuXHRcdFx0Z2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgIT09IC0gMSAmJlxyXG5cdFx0XHRnZW9tZXRyeUluZm8uaW5kZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZEluZGV4Q291bnQgPiB0aGlzLl9tYXhJbmRleENvdW50IHx8XHJcblx0XHRcdGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50ID4gdGhpcy5fbWF4VmVydGV4Q291bnRcclxuXHRcdCkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuQmF0Y2hlZE1lc2g6IFJlc2VydmVkIHNwYWNlIHJlcXVlc3QgZXhjZWVkcyB0aGUgbWF4aW11bSBidWZmZXIgc2l6ZS4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHVwZGF0ZSBpZFxyXG5cdFx0bGV0IGdlb21ldHJ5SWQ7XHJcblx0XHRpZiAoIHRoaXMuX2F2YWlsYWJsZUdlb21ldHJ5SWRzLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl9hdmFpbGFibGVHZW9tZXRyeUlkcy5zb3J0KCBhc2NJZFNvcnQgKTtcclxuXHJcblx0XHRcdGdlb21ldHJ5SWQgPSB0aGlzLl9hdmFpbGFibGVHZW9tZXRyeUlkcy5zaGlmdCgpO1xyXG5cdFx0XHRnZW9tZXRyeUluZm9MaXN0WyBnZW9tZXRyeUlkIF0gPSBnZW9tZXRyeUluZm87XHJcblxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRnZW9tZXRyeUlkID0gdGhpcy5fZ2VvbWV0cnlDb3VudDtcclxuXHRcdFx0dGhpcy5fZ2VvbWV0cnlDb3VudCArKztcclxuXHRcdFx0Z2VvbWV0cnlJbmZvTGlzdC5wdXNoKCBnZW9tZXRyeUluZm8gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdXBkYXRlIHRoZSBnZW9tZXRyeVxyXG5cdFx0dGhpcy5zZXRHZW9tZXRyeUF0KCBnZW9tZXRyeUlkLCBnZW9tZXRyeSApO1xyXG5cclxuXHRcdC8vIGluY3JlbWVudCB0aGUgbmV4dCBnZW9tZXRyeSBwb3NpdGlvblxyXG5cdFx0dGhpcy5fbmV4dEluZGV4U3RhcnQgPSBnZW9tZXRyeUluZm8uaW5kZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZEluZGV4Q291bnQ7XHJcblx0XHR0aGlzLl9uZXh0VmVydGV4U3RhcnQgPSBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQgKyBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRWZXJ0ZXhDb3VudDtcclxuXHJcblx0XHRyZXR1cm4gZ2VvbWV0cnlJZDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRHZW9tZXRyeUF0KCBnZW9tZXRyeUlkLCBnZW9tZXRyeSApIHtcclxuXHJcblx0XHRpZiAoIGdlb21ldHJ5SWQgPj0gdGhpcy5fZ2VvbWV0cnlDb3VudCApIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkJhdGNoZWRNZXNoOiBNYXhpbXVtIGdlb21ldHJ5IGNvdW50IHJlYWNoZWQuJyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl92YWxpZGF0ZUdlb21ldHJ5KCBnZW9tZXRyeSApO1xyXG5cclxuXHRcdGNvbnN0IGJhdGNoR2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0Y29uc3QgaGFzSW5kZXggPSBiYXRjaEdlb21ldHJ5LmdldEluZGV4KCkgIT09IG51bGw7XHJcblx0XHRjb25zdCBkc3RJbmRleCA9IGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKTtcclxuXHRcdGNvbnN0IHNyY0luZGV4ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcclxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IHRoaXMuX2dlb21ldHJ5SW5mb1sgZ2VvbWV0cnlJZCBdO1xyXG5cdFx0aWYgKFxyXG5cdFx0XHRoYXNJbmRleCAmJlxyXG5cdFx0XHRzcmNJbmRleC5jb3VudCA+IGdlb21ldHJ5SW5mby5yZXNlcnZlZEluZGV4Q291bnQgfHxcclxuXHRcdFx0Z2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCA+IGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50XHJcblx0XHQpIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkJhdGNoZWRNZXNoOiBSZXNlcnZlZCBzcGFjZSBub3QgbGFyZ2UgZW5vdWdoIGZvciBwcm92aWRlZCBnZW9tZXRyeS4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvcHkgZ2VvbWV0cnkgYnVmZmVyIGRhdGEgb3ZlclxyXG5cdFx0Y29uc3QgdmVydGV4U3RhcnQgPSBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQ7XHJcblx0XHRjb25zdCByZXNlcnZlZFZlcnRleENvdW50ID0gZ2VvbWV0cnlJbmZvLnJlc2VydmVkVmVydGV4Q291bnQ7XHJcblx0XHRnZW9tZXRyeUluZm8udmVydGV4Q291bnQgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5jb3VudDtcclxuXHJcblx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcyApIHtcclxuXHJcblx0XHRcdC8vIGNvcHkgYXR0cmlidXRlIGRhdGFcclxuXHRcdFx0Y29uc3Qgc3JjQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XHJcblx0XHRcdGNvbnN0IGRzdEF0dHJpYnV0ZSA9IGJhdGNoR2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XHJcblx0XHRcdGNvcHlBdHRyaWJ1dGVEYXRhKCBzcmNBdHRyaWJ1dGUsIGRzdEF0dHJpYnV0ZSwgdmVydGV4U3RhcnQgKTtcclxuXHJcblx0XHRcdC8vIGZpbGwgdGhlIHJlc3QgaW4gd2l0aCB6ZXJvZXNcclxuXHRcdFx0Y29uc3QgaXRlbVNpemUgPSBzcmNBdHRyaWJ1dGUuaXRlbVNpemU7XHJcblx0XHRcdGZvciAoIGxldCBpID0gc3JjQXR0cmlidXRlLmNvdW50LCBsID0gcmVzZXJ2ZWRWZXJ0ZXhDb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gdmVydGV4U3RhcnQgKyBpO1xyXG5cdFx0XHRcdGZvciAoIGxldCBjID0gMDsgYyA8IGl0ZW1TaXplOyBjICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGRzdEF0dHJpYnV0ZS5zZXRDb21wb25lbnQoIGluZGV4LCBjLCAwICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRzdEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHRcdGRzdEF0dHJpYnV0ZS5hZGRVcGRhdGVSYW5nZSggdmVydGV4U3RhcnQgKiBpdGVtU2l6ZSwgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCAqIGl0ZW1TaXplICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvcHkgaW5kZXhcclxuXHRcdGlmICggaGFzSW5kZXggKSB7XHJcblxyXG5cdFx0XHRjb25zdCBpbmRleFN0YXJ0ID0gZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQ7XHJcblx0XHRcdGNvbnN0IHJlc2VydmVkSW5kZXhDb3VudCA9IGdlb21ldHJ5SW5mby5yZXNlcnZlZEluZGV4Q291bnQ7XHJcblx0XHRcdGdlb21ldHJ5SW5mby5pbmRleENvdW50ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKS5jb3VudDtcclxuXHJcblx0XHRcdC8vIGNvcHkgaW5kZXggZGF0YSBvdmVyXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNyY0luZGV4LmNvdW50OyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRkc3RJbmRleC5zZXRYKCBpbmRleFN0YXJ0ICsgaSwgdmVydGV4U3RhcnQgKyBzcmNJbmRleC5nZXRYKCBpICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGZpbGwgdGhlIHJlc3QgaW4gd2l0aCB6ZXJvZXNcclxuXHRcdFx0Zm9yICggbGV0IGkgPSBzcmNJbmRleC5jb3VudCwgbCA9IHJlc2VydmVkSW5kZXhDb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGRzdEluZGV4LnNldFgoIGluZGV4U3RhcnQgKyBpLCB2ZXJ0ZXhTdGFydCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZHN0SW5kZXgubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHRkc3RJbmRleC5hZGRVcGRhdGVSYW5nZSggaW5kZXhTdGFydCwgZ2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB1cGRhdGUgdGhlIGRyYXcgcmFuZ2VcclxuXHRcdGdlb21ldHJ5SW5mby5zdGFydCA9IGhhc0luZGV4ID8gZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgOiBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQ7XHJcblx0XHRnZW9tZXRyeUluZm8uY291bnQgPSBoYXNJbmRleCA/IGdlb21ldHJ5SW5mby5pbmRleENvdW50IDogZ2VvbWV0cnlJbmZvLnZlcnRleENvdW50O1xyXG5cclxuXHRcdC8vIHN0b3JlIHRoZSBib3VuZGluZyBib3hlc1xyXG5cdFx0Z2VvbWV0cnlJbmZvLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRnZW9tZXRyeUluZm8uYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeUluZm8uYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdHJldHVybiBnZW9tZXRyeUlkO1xyXG5cclxuXHR9XHJcblxyXG5cdGRlbGV0ZUdlb21ldHJ5KCBnZW9tZXRyeUlkICkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mb0xpc3QgPSB0aGlzLl9nZW9tZXRyeUluZm87XHJcblx0XHRpZiAoIGdlb21ldHJ5SWQgPj0gZ2VvbWV0cnlJbmZvTGlzdC5sZW5ndGggfHwgZ2VvbWV0cnlJbmZvTGlzdFsgZ2VvbWV0cnlJZCBdLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZGVsZXRlIGFueSBpbnN0YW5jZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZ2VvbWV0cnlcclxuXHRcdGNvbnN0IGluc3RhbmNlSW5mbyA9IHRoaXMuX2luc3RhbmNlSW5mbztcclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0aWYgKCBpbnN0YW5jZUluZm9bIGkgXS5hY3RpdmUgJiYgaW5zdGFuY2VJbmZvWyBpIF0uZ2VvbWV0cnlJbmRleCA9PT0gZ2VvbWV0cnlJZCApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5kZWxldGVJbnN0YW5jZSggaSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeUluZm9MaXN0WyBnZW9tZXRyeUlkIF0uYWN0aXZlID0gZmFsc2U7XHJcblx0XHR0aGlzLl9hdmFpbGFibGVHZW9tZXRyeUlkcy5wdXNoKCBnZW9tZXRyeUlkICk7XHJcblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGVsZXRlSW5zdGFuY2UoIGluc3RhbmNlSWQgKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHJcblx0XHR0aGlzLl9pbnN0YW5jZUluZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPSBmYWxzZTtcclxuXHRcdHRoaXMuX2F2YWlsYWJsZUluc3RhbmNlSWRzLnB1c2goIGluc3RhbmNlSWQgKTtcclxuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRvcHRpbWl6ZSgpIHtcclxuXHJcblx0XHQvLyB0cmFjayB0aGUgbmV4dCBpbmRpY2VzIHRvIGNvcHkgZGF0YSB0b1xyXG5cdFx0bGV0IG5leHRWZXJ0ZXhTdGFydCA9IDA7XHJcblx0XHRsZXQgbmV4dEluZGV4U3RhcnQgPSAwO1xyXG5cclxuXHRcdC8vIEl0ZXJhdGUgb3ZlciBhbGwgZ2VvbWV0cnkgcmFuZ2VzIGluIG9yZGVyIHNvcnRlZCBmcm9tIGVhcmxpZXN0IGluIHRoZSBnZW9tZXRyeSBidWZmZXIgdG8gbGF0ZXN0XHJcblx0XHQvLyBpbiB0aGUgZ2VvbWV0cnkgYnVmZmVyLiBCZWNhdXNlIGRyYXcgcmFuZ2Ugb2JqZWN0cyBjYW4gYmUgcmV1c2VkIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSBvZiB0aGVpciBvcmRlci5cclxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mb0xpc3QgPSB0aGlzLl9nZW9tZXRyeUluZm87XHJcblx0XHRjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnlJbmZvTGlzdFxyXG5cdFx0XHQubWFwKCAoIGUsIGkgKSA9PiBpIClcclxuXHRcdFx0LnNvcnQoICggYSwgYiApID0+IHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGdlb21ldHJ5SW5mb0xpc3RbIGEgXS52ZXJ0ZXhTdGFydCAtIGdlb21ldHJ5SW5mb0xpc3RbIGIgXS52ZXJ0ZXhTdGFydDtcclxuXHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBnZW9tZXRyeUluZm9MaXN0Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHQvLyBpZiBhIGdlb21ldHJ5IHJhbmdlIGlzIGluYWN0aXZlIHRoZW4gZG9uJ3QgY29weSBhbnl0aGluZ1xyXG5cdFx0XHRjb25zdCBpbmRleCA9IGluZGljZXNbIGkgXTtcclxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJbmZvID0gZ2VvbWV0cnlJbmZvTGlzdFsgaW5kZXggXTtcclxuXHRcdFx0aWYgKCBnZW9tZXRyeUluZm8uYWN0aXZlID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpZiBhIGdlb21ldHJ5IGNvbnRhaW5zIGFuIGluZGV4IGJ1ZmZlciB0aGVuIHNoaWZ0IGl0LCBhcyB3ZWxsXHJcblx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgIT09IG5leHRJbmRleFN0YXJ0ICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHsgaW5kZXhTdGFydCwgdmVydGV4U3RhcnQsIHJlc2VydmVkSW5kZXhDb3VudCB9ID0gZ2VvbWV0cnlJbmZvO1xyXG5cdFx0XHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcclxuXHRcdFx0XHRcdGNvbnN0IGFycmF5ID0gaW5kZXguYXJyYXk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2hpZnQgdGhlIGluZGV4IHBvaW50ZXJzIGJhc2VkIG9uIGhvdyB0aGUgdmVydGV4IGRhdGEgd2lsbCBzaGlmdFxyXG5cdFx0XHRcdFx0Ly8gYWRqdXN0aW5nIHRoZSBpbmRleCBtdXN0IGhhcHBlbiBmaXJzdCBzbyB0aGUgb3JpZ2luYWwgdmVydGV4IHN0YXJ0IHZhbHVlIGlzIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0Y29uc3QgZWxlbWVudERlbHRhID0gbmV4dFZlcnRleFN0YXJ0IC0gdmVydGV4U3RhcnQ7XHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IGluZGV4U3RhcnQ7IGogPCBpbmRleFN0YXJ0ICsgcmVzZXJ2ZWRJbmRleENvdW50OyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0YXJyYXlbIGogXSA9IGFycmF5WyBqIF0gKyBlbGVtZW50RGVsdGE7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGluZGV4LmFycmF5LmNvcHlXaXRoaW4oIG5leHRJbmRleFN0YXJ0LCBpbmRleFN0YXJ0LCBpbmRleFN0YXJ0ICsgcmVzZXJ2ZWRJbmRleENvdW50ICk7XHJcblx0XHRcdFx0XHRpbmRleC5hZGRVcGRhdGVSYW5nZSggbmV4dEluZGV4U3RhcnQsIHJlc2VydmVkSW5kZXhDb3VudCApO1xyXG5cclxuXHRcdFx0XHRcdGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0ID0gbmV4dEluZGV4U3RhcnQ7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bmV4dEluZGV4U3RhcnQgKz0gZ2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGlmIGEgZ2VvbWV0cnkgbmVlZHMgdG8gYmUgbW92ZWQgdGhlbiBjb3B5IGF0dHJpYnV0ZSBkYXRhIHRvIG92ZXJ3cml0ZSB1bnVzZWQgc3BhY2VcclxuXHRcdFx0aWYgKCBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQgIT09IG5leHRWZXJ0ZXhTdGFydCApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgeyB2ZXJ0ZXhTdGFydCwgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCB9ID0gZ2VvbWV0cnlJbmZvO1xyXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xyXG5cdFx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xyXG5cdFx0XHRcdFx0Y29uc3QgeyBhcnJheSwgaXRlbVNpemUgfSA9IGF0dHJpYnV0ZTtcclxuXHRcdFx0XHRcdGFycmF5LmNvcHlXaXRoaW4oIG5leHRWZXJ0ZXhTdGFydCAqIGl0ZW1TaXplLCB2ZXJ0ZXhTdGFydCAqIGl0ZW1TaXplLCAoIHZlcnRleFN0YXJ0ICsgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCApICogaXRlbVNpemUgKTtcclxuXHRcdFx0XHRcdGF0dHJpYnV0ZS5hZGRVcGRhdGVSYW5nZSggbmV4dFZlcnRleFN0YXJ0ICogaXRlbVNpemUsIHJlc2VydmVkVmVydGV4Q291bnQgKiBpdGVtU2l6ZSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydCA9IG5leHRWZXJ0ZXhTdGFydDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG5leHRWZXJ0ZXhTdGFydCArPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRWZXJ0ZXhDb3VudDtcclxuXHRcdFx0Z2VvbWV0cnlJbmZvLnN0YXJ0ID0gZ2VvbWV0cnkuaW5kZXggPyBnZW9tZXRyeUluZm8uaW5kZXhTdGFydCA6IGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydDtcclxuXHJcblx0XHRcdC8vIHN0ZXAgdGhlIG5leHQgZ2VvbWV0cnkgcG9pbnRzIHRvIHRoZSBzaGlmdGVkIHBvc2l0aW9uXHJcblx0XHRcdHRoaXMuX25leHRJbmRleFN0YXJ0ID0gZ2VvbWV0cnkuaW5kZXggPyBnZW9tZXRyeUluZm8uaW5kZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZEluZGV4Q291bnQgOiAwO1xyXG5cdFx0XHR0aGlzLl9uZXh0VmVydGV4U3RhcnQgPSBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQgKyBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRWZXJ0ZXhDb3VudDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZ2V0IGJvdW5kaW5nIGJveCBhbmQgY29tcHV0ZSBpdCBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcblx0Z2V0Qm91bmRpbmdCb3hBdCggZ2VvbWV0cnlJZCwgdGFyZ2V0ICkge1xyXG5cclxuXHRcdGlmICggZ2VvbWV0cnlJZCA+PSB0aGlzLl9nZW9tZXRyeUNvdW50ICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbXB1dGUgYm91bmRpbmcgYm94XHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBnZW9tZXRyeUluZm8gPSB0aGlzLl9nZW9tZXRyeUluZm9bIGdlb21ldHJ5SWQgXTtcclxuXHRcdGlmICggZ2VvbWV0cnlJbmZvLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYm94ID0gbmV3IEJveDMoKTtcclxuXHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcclxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IGdlb21ldHJ5SW5mby5zdGFydCwgbCA9IGdlb21ldHJ5SW5mby5zdGFydCArIGdlb21ldHJ5SW5mby5jb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGxldCBpdiA9IGk7XHJcblx0XHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHJcblx0XHRcdFx0XHRpdiA9IGluZGV4LmdldFgoIGl2ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ym94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGl2ICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ0JveCA9IGJveDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGFyZ2V0LmNvcHkoIGdlb21ldHJ5SW5mby5ib3VuZGluZ0JveCApO1xyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBnZXQgYm91bmRpbmcgc3BoZXJlIGFuZCBjb21wdXRlIGl0IGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuXHRnZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0aWYgKCBnZW9tZXRyeUlkID49IHRoaXMuX2dlb21ldHJ5Q291bnQgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSBib3VuZGluZyBzcGhlcmVcclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IHRoaXMuX2dlb21ldHJ5SW5mb1sgZ2VvbWV0cnlJZCBdO1xyXG5cdFx0aWYgKCBnZW9tZXRyeUluZm8uYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XHJcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdCb3hBdCggZ2VvbWV0cnlJZCwgX2JveCApO1xyXG5cdFx0XHRfYm94LmdldENlbnRlciggc3BoZXJlLmNlbnRlciApO1xyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcclxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHRcdFx0bGV0IG1heFJhZGl1c1NxID0gMDtcclxuXHRcdFx0Zm9yICggbGV0IGkgPSBnZW9tZXRyeUluZm8uc3RhcnQsIGwgPSBnZW9tZXRyeUluZm8uc3RhcnQgKyBnZW9tZXRyeUluZm8uY291bnQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRsZXQgaXYgPSBpO1xyXG5cdFx0XHRcdGlmICggaW5kZXggKSB7XHJcblxyXG5cdFx0XHRcdFx0aXYgPSBpbmRleC5nZXRYKCBpdiApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGl2ICk7XHJcblx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IgKSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3BoZXJlLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTtcclxuXHRcdFx0Z2VvbWV0cnlJbmZvLmJvdW5kaW5nU3BoZXJlID0gc3BoZXJlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0YXJnZXQuY29weSggZ2VvbWV0cnlJbmZvLmJvdW5kaW5nU3BoZXJlICk7XHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBtYXRyaXggKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHJcblx0XHRjb25zdCBtYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmU7XHJcblx0XHRjb25zdCBtYXRyaWNlc0FycmF5ID0gdGhpcy5fbWF0cmljZXNUZXh0dXJlLmltYWdlLmRhdGE7XHJcblx0XHRtYXRyaXgudG9BcnJheSggbWF0cmljZXNBcnJheSwgaW5zdGFuY2VJZCAqIDE2ICk7XHJcblx0XHRtYXRyaWNlc1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBtYXRyaXggKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHRcdHJldHVybiBtYXRyaXguZnJvbUFycmF5KCB0aGlzLl9tYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YSwgaW5zdGFuY2VJZCAqIDE2ICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q29sb3JBdCggaW5zdGFuY2VJZCwgY29sb3IgKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl9pbml0Q29sb3JzVGV4dHVyZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb2xvci50b0FycmF5KCB0aGlzLl9jb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEsIGluc3RhbmNlSWQgKiA0ICk7XHJcblx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRDb2xvckF0KCBpbnN0YW5jZUlkLCBjb2xvciApIHtcclxuXHJcblx0XHR0aGlzLnZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApO1xyXG5cdFx0cmV0dXJuIGNvbG9yLmZyb21BcnJheSggdGhpcy5fY29sb3JzVGV4dHVyZS5pbWFnZS5kYXRhLCBpbnN0YW5jZUlkICogNCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFZpc2libGVBdCggaW5zdGFuY2VJZCwgdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2luc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLnZpc2libGUgPT09IHZhbHVlICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2luc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLnZpc2libGUgPSB2YWx1ZTtcclxuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRWaXNpYmxlQXQoIGluc3RhbmNlSWQgKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5faW5zdGFuY2VJbmZvWyBpbnN0YW5jZUlkIF0udmlzaWJsZTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRHZW9tZXRyeUlkQXQoIGluc3RhbmNlSWQsIGdlb21ldHJ5SWQgKSB7XHJcblxyXG5cdFx0dGhpcy52YWxpZGF0ZUluc3RhbmNlSWQoIGluc3RhbmNlSWQgKTtcclxuXHRcdHRoaXMudmFsaWRhdGVHZW9tZXRyeUlkKCBnZW9tZXRyeUlkICk7XHJcblxyXG5cdFx0dGhpcy5faW5zdGFuY2VJbmZvWyBpbnN0YW5jZUlkIF0uZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5SWQ7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0R2VvbWV0cnlJZEF0KCBpbnN0YW5jZUlkICkge1xyXG5cclxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2luc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLmdlb21ldHJ5SW5kZXg7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0R2VvbWV0cnlSYW5nZUF0KCBnZW9tZXRyeUlkLCB0YXJnZXQgPSB7fSApIHtcclxuXHJcblx0XHR0aGlzLnZhbGlkYXRlR2VvbWV0cnlJZCggZ2VvbWV0cnlJZCApO1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IHRoaXMuX2dlb21ldHJ5SW5mb1sgZ2VvbWV0cnlJZCBdO1xyXG5cdFx0dGFyZ2V0LnZlcnRleFN0YXJ0ID0gZ2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0O1xyXG5cdFx0dGFyZ2V0LnZlcnRleENvdW50ID0gZ2VvbWV0cnlJbmZvLnZlcnRleENvdW50O1xyXG5cdFx0dGFyZ2V0LnJlc2VydmVkVmVydGV4Q291bnQgPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRWZXJ0ZXhDb3VudDtcclxuXHJcblx0XHR0YXJnZXQuaW5kZXhTdGFydCA9IGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0O1xyXG5cdFx0dGFyZ2V0LmluZGV4Q291bnQgPSBnZW9tZXRyeUluZm8uaW5kZXhDb3VudDtcclxuXHRcdHRhcmdldC5yZXNlcnZlZEluZGV4Q291bnQgPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50O1xyXG5cclxuXHRcdHRhcmdldC5zdGFydCA9IGdlb21ldHJ5SW5mby5zdGFydDtcclxuXHRcdHRhcmdldC5jb3VudCA9IGdlb21ldHJ5SW5mby5jb3VudDtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEluc3RhbmNlQ291bnQoIG1heEluc3RhbmNlQ291bnQgKSB7XHJcblxyXG5cdFx0Ly8gc2hyaW5rIHRoZSBhdmFpbGFibGUgaW5zdGFuY2VzIGFzIG11Y2ggYXMgcG9zc2libGVcclxuXHRcdGNvbnN0IGF2YWlsYWJsZUluc3RhbmNlSWRzID0gdGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHM7XHJcblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XHJcblx0XHRhdmFpbGFibGVJbnN0YW5jZUlkcy5zb3J0KCBhc2NJZFNvcnQgKTtcclxuXHRcdHdoaWxlICggYXZhaWxhYmxlSW5zdGFuY2VJZHNbIGF2YWlsYWJsZUluc3RhbmNlSWRzLmxlbmd0aCAtIDEgXSA9PT0gaW5zdGFuY2VJbmZvLmxlbmd0aCApIHtcclxuXHJcblx0XHRcdGluc3RhbmNlSW5mby5wb3AoKTtcclxuXHRcdFx0YXZhaWxhYmxlSW5zdGFuY2VJZHMucG9wKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHRocm93IGFuIGVycm9yIGlmIGl0IGNhbid0IGJlIHNocnVuayB0byB0aGUgZGVzaXJlZCBzaXplXHJcblx0XHRpZiAoIG1heEluc3RhbmNlQ291bnQgPCBpbnN0YW5jZUluZm8ubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgQmF0Y2hlZE1lc2g6IEluc3RhbmNlIGlkcyBvdXRzaWRlIHRoZSByYW5nZSAkeyBtYXhJbnN0YW5jZUNvdW50IH0gYXJlIGJlaW5nIHVzZWQuIENhbm5vdCBzaHJpbmsgaW5zdGFuY2UgY291bnQuYCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb3B5IHRoZSBtdWx0aSBkcmF3IGNvdW50c1xyXG5cdFx0Y29uc3QgbXVsdGlEcmF3Q291bnRzID0gbmV3IEludDMyQXJyYXkoIG1heEluc3RhbmNlQ291bnQgKTtcclxuXHRcdGNvbnN0IG11bHRpRHJhd1N0YXJ0cyA9IG5ldyBJbnQzMkFycmF5KCBtYXhJbnN0YW5jZUNvdW50ICk7XHJcblx0XHRjb3B5QXJyYXlDb250ZW50cyggdGhpcy5fbXVsdGlEcmF3Q291bnRzLCBtdWx0aURyYXdDb3VudHMgKTtcclxuXHRcdGNvcHlBcnJheUNvbnRlbnRzKCB0aGlzLl9tdWx0aURyYXdTdGFydHMsIG11bHRpRHJhd1N0YXJ0cyApO1xyXG5cclxuXHRcdHRoaXMuX211bHRpRHJhd0NvdW50cyA9IG11bHRpRHJhd0NvdW50cztcclxuXHRcdHRoaXMuX211bHRpRHJhd1N0YXJ0cyA9IG11bHRpRHJhd1N0YXJ0cztcclxuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBtYXhJbnN0YW5jZUNvdW50O1xyXG5cclxuXHRcdC8vIHVwZGF0ZSB0ZXh0dXJlIGRhdGEgZm9yIGluc3RhbmNlIHNhbXBsaW5nXHJcblx0XHRjb25zdCBpbmRpcmVjdFRleHR1cmUgPSB0aGlzLl9pbmRpcmVjdFRleHR1cmU7XHJcblx0XHRjb25zdCBtYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmU7XHJcblx0XHRjb25zdCBjb2xvcnNUZXh0dXJlID0gdGhpcy5fY29sb3JzVGV4dHVyZTtcclxuXHJcblx0XHRpbmRpcmVjdFRleHR1cmUuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5faW5pdEluZGlyZWN0VGV4dHVyZSgpO1xyXG5cdFx0Y29weUFycmF5Q29udGVudHMoIGluZGlyZWN0VGV4dHVyZS5pbWFnZS5kYXRhLCB0aGlzLl9pbmRpcmVjdFRleHR1cmUuaW1hZ2UuZGF0YSApO1xyXG5cclxuXHRcdG1hdHJpY2VzVGV4dHVyZS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLl9pbml0TWF0cmljZXNUZXh0dXJlKCk7XHJcblx0XHRjb3B5QXJyYXlDb250ZW50cyggbWF0cmljZXNUZXh0dXJlLmltYWdlLmRhdGEsIHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhICk7XHJcblxyXG5cdFx0aWYgKCBjb2xvcnNUZXh0dXJlICkge1xyXG5cclxuXHRcdFx0Y29sb3JzVGV4dHVyZS5kaXNwb3NlKCk7XHJcblx0XHRcdHRoaXMuX2luaXRDb2xvcnNUZXh0dXJlKCk7XHJcblx0XHRcdGNvcHlBcnJheUNvbnRlbnRzKCBjb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEsIHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRzZXRHZW9tZXRyeVNpemUoIG1heFZlcnRleENvdW50LCBtYXhJbmRleENvdW50ICkge1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHdlIGNhbiBzaHJpbmsgdG8gdGhlIHJlcXVlc3RlZCB2ZXJ0ZXggYXR0cmlidXRlIHNpemVcclxuXHRcdGNvbnN0IHZhbGlkUmFuZ2VzID0gWyAuLi50aGlzLl9nZW9tZXRyeUluZm8gXS5maWx0ZXIoIGluZm8gPT4gaW5mby5hY3RpdmUgKTtcclxuXHRcdGNvbnN0IHJlcXVpcmVkVmVydGV4TGVuZ3RoID0gTWF0aC5tYXgoIC4uLnZhbGlkUmFuZ2VzLm1hcCggcmFuZ2UgPT4gcmFuZ2UudmVydGV4U3RhcnQgKyByYW5nZS5yZXNlcnZlZFZlcnRleENvdW50ICkgKTtcclxuXHRcdGlmICggcmVxdWlyZWRWZXJ0ZXhMZW5ndGggPiBtYXhWZXJ0ZXhDb3VudCApIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggYEJhdGNoZWRNZXNoOiBHZW9tZXRyeSB2ZXJ0ZXggdmFsdWVzIGFyZSBiZWluZyB1c2VkIG91dHNpZGUgdGhlIHJhbmdlICR7IG1heEluZGV4Q291bnQgfS4gQ2Fubm90IHNocmluayBmdXJ0aGVyLmAgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UgY2FuIHNocmluayB0byB0aGUgcmVxdWVzdGVkIGluZGV4IGF0dHJpYnV0ZSBzaXplXHJcblx0XHRpZiAoIHRoaXMuZ2VvbWV0cnkuaW5kZXggKSB7XHJcblxyXG5cdFx0XHRjb25zdCByZXF1aXJlZEluZGV4TGVuZ3RoID0gTWF0aC5tYXgoIC4uLnZhbGlkUmFuZ2VzLm1hcCggcmFuZ2UgPT4gcmFuZ2UuaW5kZXhTdGFydCArIHJhbmdlLnJlc2VydmVkSW5kZXhDb3VudCApICk7XHJcblx0XHRcdGlmICggcmVxdWlyZWRJbmRleExlbmd0aCA+IG1heEluZGV4Q291bnQgKSB7XHJcblxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggYEJhdGNoZWRNZXNoOiBHZW9tZXRyeSBpbmRleCB2YWx1ZXMgYXJlIGJlaW5nIHVzZWQgb3V0c2lkZSB0aGUgcmFuZ2UgJHsgbWF4SW5kZXhDb3VudCB9LiBDYW5ub3Qgc2hyaW5rIGZ1cnRoZXIuYCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdC8vIGRpc3Bvc2Ugb2YgdGhlIHByZXZpb3VzIGdlb21ldHJ5XHJcblx0XHRjb25zdCBvbGRHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRvbGRHZW9tZXRyeS5kaXNwb3NlKCk7XHJcblxyXG5cdFx0Ly8gcmVjcmVhdGUgdGhlIGdlb21ldHJ5IG5lZWRlZCBiYXNlZCBvbiB0aGUgcHJldmlvdXMgdmFyaWFudFxyXG5cdFx0dGhpcy5fbWF4VmVydGV4Q291bnQgPSBtYXhWZXJ0ZXhDb3VudDtcclxuXHRcdHRoaXMuX21heEluZGV4Q291bnQgPSBtYXhJbmRleENvdW50O1xyXG5cclxuXHRcdGlmICggdGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZCApIHtcclxuXHJcblx0XHRcdHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0XHR0aGlzLl9pbml0aWFsaXplR2VvbWV0cnkoIG9sZEdlb21ldHJ5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvcHkgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyBnZW9tZXRyeVxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0aWYgKCBvbGRHZW9tZXRyeS5pbmRleCApIHtcclxuXHJcblx0XHRcdGNvcHlBcnJheUNvbnRlbnRzKCBvbGRHZW9tZXRyeS5pbmRleC5hcnJheSwgZ2VvbWV0cnkuaW5kZXguYXJyYXkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIG9sZEdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRjb3B5QXJyYXlDb250ZW50cyggb2xkR2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0uYXJyYXksIGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdLmFycmF5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcclxuXHJcblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XHJcblx0XHRjb25zdCBnZW9tZXRyeUluZm9MaXN0ID0gdGhpcy5fZ2VvbWV0cnlJbmZvO1xyXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xyXG5cdFx0Y29uc3QgYmF0Y2hHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblxyXG5cdFx0Ly8gaXRlcmF0ZSBvdmVyIGVhY2ggZ2VvbWV0cnlcclxuXHRcdF9tZXNoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcclxuXHRcdF9tZXNoLmdlb21ldHJ5LmluZGV4ID0gYmF0Y2hHZW9tZXRyeS5pbmRleDtcclxuXHRcdF9tZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMgPSBiYXRjaEdlb21ldHJ5LmF0dHJpYnV0ZXM7XHJcblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0X21lc2guZ2VvbWV0cnkuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0X21lc2guZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0aWYgKCAhIGluc3RhbmNlSW5mb1sgaSBdLnZpc2libGUgfHwgISBpbnN0YW5jZUluZm9bIGkgXS5hY3RpdmUgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XHJcblx0XHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXTtcclxuXHRcdFx0X21lc2guZ2VvbWV0cnkuc2V0RHJhd1JhbmdlKCBnZW9tZXRyeUluZm8uc3RhcnQsIGdlb21ldHJ5SW5mby5jb3VudCApO1xyXG5cclxuXHRcdFx0Ly8gZ2V0IHRoZSBpbnRlcnNlY3RzXHJcblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9tZXNoLm1hdHJpeFdvcmxkICkucHJlbXVsdGlwbHkoIG1hdHJpeFdvcmxkICk7XHJcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdCb3hBdCggZ2VvbWV0cnlJZCwgX21lc2guZ2VvbWV0cnkuYm91bmRpbmdCb3ggKTtcclxuXHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xyXG5cdFx0XHRfbWVzaC5yYXljYXN0KCByYXljYXN0ZXIsIF9iYXRjaEludGVyc2VjdHMgKTtcclxuXHJcblx0XHRcdC8vIGFkZCBiYXRjaCBpZCB0byB0aGUgaW50ZXJzZWN0c1xyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDAsIGwgPSBfYmF0Y2hJbnRlcnNlY3RzLmxlbmd0aDsgaiA8IGw7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IF9iYXRjaEludGVyc2VjdHNbIGogXTtcclxuXHRcdFx0XHRpbnRlcnNlY3Qub2JqZWN0ID0gdGhpcztcclxuXHRcdFx0XHRpbnRlcnNlY3QuYmF0Y2hJZCA9IGk7XHJcblx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdF9iYXRjaEludGVyc2VjdHMubGVuZ3RoID0gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X21lc2gubWF0ZXJpYWwgPSBudWxsO1xyXG5cdFx0X21lc2guZ2VvbWV0cnkuaW5kZXggPSBudWxsO1xyXG5cdFx0X21lc2guZ2VvbWV0cnkuYXR0cmlidXRlcyA9IHt9O1xyXG5cdFx0X21lc2guZ2VvbWV0cnkuc2V0RHJhd1JhbmdlKCAwLCBJbmZpbml0eSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5LmNsb25lKCk7XHJcblx0XHR0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSBzb3VyY2UucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZDtcclxuXHRcdHRoaXMuc29ydE9iamVjdHMgPSBzb3VyY2Uuc29ydE9iamVjdHM7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94ICE9PSBudWxsID8gc291cmNlLmJvdW5kaW5nQm94LmNsb25lKCkgOiBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCA/IHNvdXJjZS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpIDogbnVsbDtcclxuXHJcblx0XHR0aGlzLl9nZW9tZXRyeUluZm8gPSBzb3VyY2UuX2dlb21ldHJ5SW5mby5tYXAoIGluZm8gPT4gKCB7XHJcblx0XHRcdC4uLmluZm8sXHJcblxyXG5cdFx0XHRib3VuZGluZ0JveDogaW5mby5ib3VuZGluZ0JveCAhPT0gbnVsbCA/IGluZm8uYm91bmRpbmdCb3guY2xvbmUoKSA6IG51bGwsXHJcblx0XHRcdGJvdW5kaW5nU3BoZXJlOiBpbmZvLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsID8gaW5mby5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpIDogbnVsbCxcclxuXHRcdH0gKSApO1xyXG5cdFx0dGhpcy5faW5zdGFuY2VJbmZvID0gc291cmNlLl9pbnN0YW5jZUluZm8ubWFwKCBpbmZvID0+ICggeyAuLi5pbmZvIH0gKSApO1xyXG5cclxuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBzb3VyY2UuX21heEluc3RhbmNlQ291bnQ7XHJcblx0XHR0aGlzLl9tYXhWZXJ0ZXhDb3VudCA9IHNvdXJjZS5fbWF4VmVydGV4Q291bnQ7XHJcblx0XHR0aGlzLl9tYXhJbmRleENvdW50ID0gc291cmNlLl9tYXhJbmRleENvdW50O1xyXG5cclxuXHRcdHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSBzb3VyY2UuX2dlb21ldHJ5SW5pdGlhbGl6ZWQ7XHJcblx0XHR0aGlzLl9nZW9tZXRyeUNvdW50ID0gc291cmNlLl9nZW9tZXRyeUNvdW50O1xyXG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gc291cmNlLl9tdWx0aURyYXdDb3VudHMuc2xpY2UoKTtcclxuXHRcdHRoaXMuX211bHRpRHJhd1N0YXJ0cyA9IHNvdXJjZS5fbXVsdGlEcmF3U3RhcnRzLnNsaWNlKCk7XHJcblxyXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gc291cmNlLl9tYXRyaWNlc1RleHR1cmUuY2xvbmUoKTtcclxuXHRcdHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhID0gdGhpcy5fbWF0cmljZXNUZXh0dXJlLmltYWdlLmRhdGEuc2xpY2UoKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlID0gc291cmNlLl9jb2xvcnNUZXh0dXJlLmNsb25lKCk7XHJcblx0XHRcdHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YSA9IHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YS5zbGljZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdC8vIEFzc3VtaW5nIHRoZSBnZW9tZXRyeSBpcyBub3Qgc2hhcmVkIHdpdGggb3RoZXIgbWVzaGVzXHJcblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHJcblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLl9pbmRpcmVjdFRleHR1cmUuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5faW5kaXJlY3RUZXh0dXJlID0gbnVsbDtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlLmRpc3Bvc2UoKTtcclxuXHRcdFx0dGhpcy5fY29sb3JzVGV4dHVyZSA9IG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG9uQmVmb3JlUmVuZGVyKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLyosIF9ncm91cCovICkge1xyXG5cclxuXHRcdC8vIGlmIHZpc2liaWxpdHkgaGFzIG5vdCBjaGFuZ2VkIGFuZCBmcnVzdHVtIGN1bGxpbmcgYW5kIG9iamVjdCBzb3J0aW5nIGlzIG5vdCByZXF1aXJlZFxyXG5cdFx0Ly8gdGhlbiBza2lwIGl0ZXJhdGluZyBvdmVyIGFsbCBpdGVtc1xyXG5cdFx0aWYgKCAhIHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkICYmICEgdGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkICYmICEgdGhpcy5zb3J0T2JqZWN0cyApIHtcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdGhlIGluZGV4ZWQgdmVyc2lvbiBvZiB0aGUgbXVsdGkgZHJhdyBmdW5jdGlvbiByZXF1aXJlcyBzcGVjaWZ5aW5nIHRoZSBzdGFydFxyXG5cdFx0Ly8gb2Zmc2V0IGluIGJ5dGVzLlxyXG5cdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xyXG5cdFx0Y29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gaW5kZXggPT09IG51bGwgPyAxIDogaW5kZXguYXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XHJcblxyXG5cdFx0Y29uc3QgaW5zdGFuY2VJbmZvID0gdGhpcy5faW5zdGFuY2VJbmZvO1xyXG5cdFx0Y29uc3QgbXVsdGlEcmF3U3RhcnRzID0gdGhpcy5fbXVsdGlEcmF3U3RhcnRzO1xyXG5cdFx0Y29uc3QgbXVsdGlEcmF3Q291bnRzID0gdGhpcy5fbXVsdGlEcmF3Q291bnRzO1xyXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvTGlzdCA9IHRoaXMuX2dlb21ldHJ5SW5mbztcclxuXHRcdGNvbnN0IHBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7XHJcblx0XHRjb25zdCBpbmRpcmVjdFRleHR1cmUgPSB0aGlzLl9pbmRpcmVjdFRleHR1cmU7XHJcblx0XHRjb25zdCBpbmRpcmVjdEFycmF5ID0gaW5kaXJlY3RUZXh0dXJlLmltYWdlLmRhdGE7XHJcblxyXG5cdFx0Ly8gcHJlcGFyZSB0aGUgZnJ1c3R1bSBpbiB0aGUgbG9jYWwgZnJhbWVcclxuXHRcdGlmICggcGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCApIHtcclxuXHJcblx0XHRcdF9tYXRyaXhcclxuXHRcdFx0XHQubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKVxyXG5cdFx0XHRcdC5tdWx0aXBseSggdGhpcy5tYXRyaXhXb3JsZCApO1xyXG5cdFx0XHRfZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeChcclxuXHRcdFx0XHRfbWF0cml4LFxyXG5cdFx0XHRcdHJlbmRlcmVyLmNvb3JkaW5hdGVTeXN0ZW1cclxuXHRcdFx0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG11bHRpRHJhd0NvdW50ID0gMDtcclxuXHRcdGlmICggdGhpcy5zb3J0T2JqZWN0cyApIHtcclxuXHJcblx0XHRcdC8vIGdldCB0aGUgY2FtZXJhIHBvc2l0aW9uIGluIHRoZSBsb2NhbCBmcmFtZVxyXG5cdFx0XHRfbWF0cml4LmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcclxuXHRcdFx0X3ZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApLmFwcGx5TWF0cml4NCggX21hdHJpeCApO1xyXG5cdFx0XHRfZm9yd2FyZC5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICkudHJhbnNmb3JtRGlyZWN0aW9uKCBfbWF0cml4ICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbnN0YW5jZUluZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnN0YW5jZUluZm9bIGkgXS52aXNpYmxlICYmIGluc3RhbmNlSW5mb1sgaSBdLmFjdGl2ZSApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeUlkID0gaW5zdGFuY2VJbmZvWyBpIF0uZ2VvbWV0cnlJbmRleDtcclxuXHJcblx0XHRcdFx0XHQvLyBnZXQgdGhlIGJvdW5kcyBpbiB3b3JsZCBzcGFjZVxyXG5cdFx0XHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaSwgX21hdHJpeCApO1xyXG5cdFx0XHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfc3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJhdGNoZWQgZ2VvbWV0cnkgaXMgd2l0aGluIHRoZSBmcnVzdHVtXHJcblx0XHRcdFx0XHRsZXQgY3VsbGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRpZiAoIHBlck9iamVjdEZydXN0dW1DdWxsZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjdWxsZWQgPSAhIF9mcnVzdHVtLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhIGN1bGxlZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGdldCB0aGUgZGlzdGFuY2UgZnJvbSBjYW1lcmEgdXNlZCBmb3Igc29ydGluZ1xyXG5cdFx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeUluZm8gPSBnZW9tZXRyeUluZm9MaXN0WyBnZW9tZXRyeUlkIF07XHJcblx0XHRcdFx0XHRcdGNvbnN0IHogPSBfdGVtcC5zdWJWZWN0b3JzKCBfc3BoZXJlLmNlbnRlciwgX3ZlY3RvciApLmRvdCggX2ZvcndhcmQgKTtcclxuXHRcdFx0XHRcdFx0X3JlbmRlckxpc3QucHVzaCggZ2VvbWV0cnlJbmZvLnN0YXJ0LCBnZW9tZXRyeUluZm8uY291bnQsIHosIGkgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNvcnQgdGhlIGRyYXcgcmFuZ2VzIGFuZCBwcmVwIGZvciByZW5kZXJpbmdcclxuXHRcdFx0Y29uc3QgbGlzdCA9IF9yZW5kZXJMaXN0Lmxpc3Q7XHJcblx0XHRcdGNvbnN0IGN1c3RvbVNvcnQgPSB0aGlzLmN1c3RvbVNvcnQ7XHJcblx0XHRcdGlmICggY3VzdG9tU29ydCA9PT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0bGlzdC5zb3J0KCBtYXRlcmlhbC50cmFuc3BhcmVudCA/IHNvcnRUcmFuc3BhcmVudCA6IHNvcnRPcGFxdWUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGN1c3RvbVNvcnQuY2FsbCggdGhpcywgbGlzdCwgY2FtZXJhICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSBsaXN0WyBpIF07XHJcblx0XHRcdFx0bXVsdGlEcmF3U3RhcnRzWyBtdWx0aURyYXdDb3VudCBdID0gaXRlbS5zdGFydCAqIGJ5dGVzUGVyRWxlbWVudDtcclxuXHRcdFx0XHRtdWx0aURyYXdDb3VudHNbIG11bHRpRHJhd0NvdW50IF0gPSBpdGVtLmNvdW50O1xyXG5cdFx0XHRcdGluZGlyZWN0QXJyYXlbIG11bHRpRHJhd0NvdW50IF0gPSBpdGVtLmluZGV4O1xyXG5cdFx0XHRcdG11bHRpRHJhd0NvdW50ICsrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X3JlbmRlckxpc3QucmVzZXQoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gaW5zdGFuY2VJbmZvLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggaW5zdGFuY2VJbmZvWyBpIF0udmlzaWJsZSAmJiBpbnN0YW5jZUluZm9bIGkgXS5hY3RpdmUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJhdGNoZWQgZ2VvbWV0cnkgaXMgd2l0aGluIHRoZSBmcnVzdHVtXHJcblx0XHRcdFx0XHRsZXQgY3VsbGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRpZiAoIHBlck9iamVjdEZydXN0dW1DdWxsZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBnZXQgdGhlIGJvdW5kcyBpbiB3b3JsZCBzcGFjZVxyXG5cdFx0XHRcdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4ICk7XHJcblx0XHRcdFx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX3NwaGVyZSApLmFwcGx5TWF0cml4NCggX21hdHJpeCApO1xyXG5cdFx0XHRcdFx0XHRjdWxsZWQgPSAhIF9mcnVzdHVtLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhIGN1bGxlZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXTtcclxuXHRcdFx0XHRcdFx0bXVsdGlEcmF3U3RhcnRzWyBtdWx0aURyYXdDb3VudCBdID0gZ2VvbWV0cnlJbmZvLnN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50O1xyXG5cdFx0XHRcdFx0XHRtdWx0aURyYXdDb3VudHNbIG11bHRpRHJhd0NvdW50IF0gPSBnZW9tZXRyeUluZm8uY291bnQ7XHJcblx0XHRcdFx0XHRcdGluZGlyZWN0QXJyYXlbIG11bHRpRHJhd0NvdW50IF0gPSBpO1xyXG5cdFx0XHRcdFx0XHRtdWx0aURyYXdDb3VudCArKztcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW5kaXJlY3RUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdHRoaXMuX211bHRpRHJhd0NvdW50ID0gbXVsdGlEcmF3Q291bnQ7XHJcblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuXHR9XHJcblxyXG5cdG9uQmVmb3JlU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwvKiAsIGdyb3VwICovICkge1xyXG5cclxuXHRcdHRoaXMub25CZWZvcmVSZW5kZXIoIHJlbmRlcmVyLCBudWxsLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEJhdGNoZWRNZXNoIH07XHJcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBMaW5lQmFzaWNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzTGluZUJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdMaW5lQmFzaWNNYXRlcmlhbCc7XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5saW5ld2lkdGggPSAxO1xyXG5cdFx0dGhpcy5saW5lY2FwID0gJ3JvdW5kJztcclxuXHRcdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdFx0dGhpcy5saW5ld2lkdGggPSBzb3VyY2UubGluZXdpZHRoO1xyXG5cdFx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XHJcblx0XHR0aGlzLmxpbmVqb2luID0gc291cmNlLmxpbmVqb2luO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xyXG5pbXBvcnQgeyBSYXkgfSBmcm9tICcuLi9tYXRoL1JheS5qcyc7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xyXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5cclxuY29uc3QgX3ZTdGFydCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3ZFbmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBfaW52ZXJzZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX3JheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFJheSgpO1xyXG5jb25zdCBfc3BoZXJlID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XHJcblxyXG5jb25zdCBfaW50ZXJzZWN0UG9pbnRPblJheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX2ludGVyc2VjdFBvaW50T25TZWdtZW50ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgTGluZSBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCkgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzTGluZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0xpbmUnO1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIHNvdXJjZS5tYXRlcmlhbCApID8gc291cmNlLm1hdGVyaWFsLnNsaWNlKCkgOiBzb3VyY2UubWF0ZXJpYWw7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHJcblx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcclxuXHJcblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHRjb25zdCBsaW5lRGlzdGFuY2VzID0gWyAwIF07XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdF92U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XHJcblx0XHRcdFx0X3ZFbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcclxuXHJcblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcclxuXHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gKz0gX3ZTdGFydC5kaXN0YW5jZVRvKCBfdkVuZCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHRjb25zdCB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLkxpbmUudGhyZXNob2xkO1xyXG5cdFx0Y29uc3QgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xyXG5cclxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxyXG5cclxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XHJcblx0XHRfc3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcclxuXHRcdF9zcGhlcmUucmFkaXVzICs9IHRocmVzaG9sZDtcclxuXHJcblx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XHJcblx0XHRfcmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4ICk7XHJcblxyXG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XHJcblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZFNxID0gbG9jYWxUaHJlc2hvbGQgKiBsb2NhbFRocmVzaG9sZDtcclxuXHJcblx0XHRjb25zdCBzdGVwID0gdGhpcy5pc0xpbmVTZWdtZW50cyA/IDIgOiAxO1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XHJcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XHJcblx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCByYXljYXN0ZXIsIF9yYXksIGxvY2FsVGhyZXNob2xkU3EsIGEsIGIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmlzTGluZUxvb3AgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBlbmQgLSAxICk7XHJcblx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIHN0YXJ0ICk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCByYXljYXN0ZXIsIF9yYXksIGxvY2FsVGhyZXNob2xkU3EsIGEsIGIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcclxuXHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gY2hlY2tJbnRlcnNlY3Rpb24oIHRoaXMsIHJheWNhc3RlciwgX3JheSwgbG9jYWxUaHJlc2hvbGRTcSwgaSwgaSArIDEgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmlzTGluZUxvb3AgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCByYXljYXN0ZXIsIF9yYXksIGxvY2FsVGhyZXNob2xkU3EsIGVuZCAtIDEsIHN0YXJ0ICk7XHJcblxyXG5cdFx0XHRcdGlmICggaW50ZXJzZWN0ICkge1xyXG5cclxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTW9ycGhUYXJnZXRzKCkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHJcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XHJcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xyXG5cclxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xyXG5cclxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xyXG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcclxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBuYW1lIF0gPSBtO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCByYXljYXN0ZXIsIHJheSwgdGhyZXNob2xkU3EsIGEsIGIgKSB7XHJcblxyXG5cdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gb2JqZWN0Lmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdF92U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGEgKTtcclxuXHRfdkVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYiApO1xyXG5cclxuXHRjb25zdCBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggX3ZTdGFydCwgX3ZFbmQsIF9pbnRlcnNlY3RQb2ludE9uUmF5LCBfaW50ZXJzZWN0UG9pbnRPblNlZ21lbnQgKTtcclxuXHJcblx0aWYgKCBkaXN0U3EgPiB0aHJlc2hvbGRTcSApIHJldHVybjtcclxuXHJcblx0X2ludGVyc2VjdFBvaW50T25SYXkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTsgLy8gTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxyXG5cclxuXHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3RQb2ludE9uUmF5ICk7XHJcblxyXG5cdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XHJcblxyXG5cdHJldHVybiB7XHJcblxyXG5cdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxyXG5cdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XHJcblx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcclxuXHRcdHBvaW50OiBfaW50ZXJzZWN0UG9pbnRPblNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApLFxyXG5cdFx0aW5kZXg6IGEsXHJcblx0XHRmYWNlOiBudWxsLFxyXG5cdFx0ZmFjZUluZGV4OiBudWxsLFxyXG5cdFx0YmFyeWNvb3JkOiBudWxsLFxyXG5cdFx0b2JqZWN0OiBvYmplY3RcclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IExpbmUgfTtcclxuIiwiaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vTGluZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5cclxuY29uc3QgX3N0YXJ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfZW5kID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgTGluZVNlZ21lbnRzIGV4dGVuZHMgTGluZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdHRoaXMuaXNMaW5lU2VnbWVudHMgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdMaW5lU2VnbWVudHMnO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHJcblx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcclxuXHJcblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHRjb25zdCBsaW5lRGlzdGFuY2VzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKz0gMiApIHtcclxuXHJcblx0XHRcdFx0X3N0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XHJcblx0XHRcdFx0X2VuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDEgKTtcclxuXHJcblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gKCBpID09PSAwICkgPyAwIDogbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcclxuXHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpICsgMSBdID0gbGluZURpc3RhbmNlc1sgaSBdICsgX3N0YXJ0LmRpc3RhbmNlVG8oIF9lbmQgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZVNlZ21lbnRzLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBMaW5lU2VnbWVudHMgfTtcclxuIiwiaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vTGluZS5qcyc7XHJcblxyXG5jbGFzcyBMaW5lTG9vcCBleHRlbmRzIExpbmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHJcblx0XHR0aGlzLmlzTGluZUxvb3AgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdMaW5lTG9vcCc7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IExpbmVMb29wIH07XHJcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBQb2ludHNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzUG9pbnRzTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdQb2ludHNNYXRlcmlhbCc7XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5zaXplID0gMTtcclxuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0XHR0aGlzLnNpemUgPSBzb3VyY2Uuc2l6ZTtcclxuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gc291cmNlLnNpemVBdHRlbnVhdGlvbjtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFBvaW50c01hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4uL21hdGgvU3BoZXJlLmpzJztcclxuaW1wb3J0IHsgUmF5IH0gZnJvbSAnLi4vbWF0aC9SYXkuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFBvaW50c01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL1BvaW50c01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuXHJcbmNvbnN0IF9pbnZlcnNlTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xyXG5jb25zdCBfcmF5ID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7XHJcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcclxuY29uc3QgX3Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgUG9pbnRzIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgUG9pbnRzTWF0ZXJpYWwoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNQb2ludHMgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdQb2ludHMnO1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIHNvdXJjZS5tYXRlcmlhbCApID8gc291cmNlLm1hdGVyaWFsLnNsaWNlKCkgOiBzb3VyY2UubWF0ZXJpYWw7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHRjb25zdCB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLlBvaW50cy50aHJlc2hvbGQ7XHJcblx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XHJcblxyXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XHJcblxyXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHRcdF9zcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcclxuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xyXG5cdFx0X3NwaGVyZS5yYWRpdXMgKz0gdGhyZXNob2xkO1xyXG5cclxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0X2ludmVyc2VNYXRyaXguY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcclxuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXggKTtcclxuXHJcblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTtcclxuXHRcdGNvbnN0IGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XHJcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgYSA9IGluZGV4LmdldFgoIGkgKTtcclxuXHJcblx0XHRcdFx0X3Bvc2l0aW9uLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7XHJcblxyXG5cdFx0XHRcdHRlc3RQb2ludCggX3Bvc2l0aW9uLCBhLCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0aGlzICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xyXG5cdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb25BdHRyaWJ1dGUuY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGwgPSBlbmQ7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRfcG9zaXRpb24uZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcclxuXHJcblx0XHRcdFx0dGVzdFBvaW50KCBfcG9zaXRpb24sIGksIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRoaXMgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTW9ycGhUYXJnZXRzKCkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHJcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XHJcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xyXG5cclxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xyXG5cclxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xyXG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcclxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBuYW1lIF0gPSBtO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiB0ZXN0UG9pbnQoIHBvaW50LCBpbmRleCwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgb2JqZWN0ICkge1xyXG5cclxuXHRjb25zdCByYXlQb2ludERpc3RhbmNlU3EgPSBfcmF5LmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApO1xyXG5cclxuXHRpZiAoIHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EgKSB7XHJcblxyXG5cdFx0Y29uc3QgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdF9yYXkuY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGludGVyc2VjdFBvaW50ICk7XHJcblx0XHRpbnRlcnNlY3RQb2ludC5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XHJcblxyXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3RQb2ludCApO1xyXG5cclxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XHJcblxyXG5cdFx0aW50ZXJzZWN0cy5wdXNoKCB7XHJcblxyXG5cdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXHJcblx0XHRcdGRpc3RhbmNlVG9SYXk6IE1hdGguc3FydCggcmF5UG9pbnREaXN0YW5jZVNxICksXHJcblx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludCxcclxuXHRcdFx0aW5kZXg6IGluZGV4LFxyXG5cdFx0XHRmYWNlOiBudWxsLFxyXG5cdFx0XHRmYWNlSW5kZXg6IG51bGwsXHJcblx0XHRcdGJhcnljb29yZDogbnVsbCxcclxuXHRcdFx0b2JqZWN0OiBvYmplY3RcclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFBvaW50cyB9O1xyXG4iLCJpbXBvcnQgeyBMaW5lYXJGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcclxuXHJcbmNsYXNzIFZpZGVvVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcclxuXHJcblx0XHRzdXBlciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xyXG5cclxuXHRcdHRoaXMuaXNWaWRlb1RleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XHJcblx0XHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xyXG5cclxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XHJcblxyXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVZpZGVvKCkge1xyXG5cclxuXHRcdFx0c2NvcGUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHR2aWRlby5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKCB1cGRhdGVWaWRlbyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICdyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrJyBpbiB2aWRlbyApIHtcclxuXHJcblx0XHRcdHZpZGVvLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2soIHVwZGF0ZVZpZGVvICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5pbWFnZSApLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0Y29uc3QgdmlkZW8gPSB0aGlzLmltYWdlO1xyXG5cdFx0Y29uc3QgaGFzVmlkZW9GcmFtZUNhbGxiYWNrID0gJ3JlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2snIGluIHZpZGVvO1xyXG5cclxuXHRcdGlmICggaGFzVmlkZW9GcmFtZUNhbGxiYWNrID09PSBmYWxzZSAmJiB2aWRlby5yZWFkeVN0YXRlID49IHZpZGVvLkhBVkVfQ1VSUkVOVF9EQVRBICkge1xyXG5cclxuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBWaWRlb1RleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgVmlkZW9UZXh0dXJlIH0gZnJvbSAnLi9WaWRlb1RleHR1cmUuanMnO1xyXG5cclxuY2xhc3MgVmlkZW9GcmFtZVRleHR1cmUgZXh0ZW5kcyBWaWRlb1RleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xyXG5cclxuXHRcdHN1cGVyKCB7fSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XHJcblxyXG5cdFx0dGhpcy5pc1ZpZGVvRnJhbWVUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0Ly8gb3ZlcndyaXRlcyBgVmlkZW9UZXh0dXJlLnVwZGF0ZSgpYCB3aXRoIGFuIGVtcHR5IG1ldGhvZCBzaW5jZVxyXG5cdFx0Ly8gdGhpcyB0eXBlIG9mIHRleHR1cmUgaXMgdXBkYXRlZCB2aWEgYHNldEZyYW1lKClgLlxyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsgLy8gcmVzdG9yaW5nIFRleHR1cmUuY2xvbmUoKVxyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyYW1lKCBmcmFtZSApIHtcclxuXHJcblx0XHR0aGlzLmltYWdlID0gZnJhbWU7XHJcblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgVmlkZW9GcmFtZVRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgRnJhbWVidWZmZXJUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0ICkge1xyXG5cclxuXHRcdHN1cGVyKCB7IHdpZHRoLCBoZWlnaHQgfSApO1xyXG5cclxuXHRcdHRoaXMuaXNGcmFtZWJ1ZmZlclRleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuXHJcblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBGcmFtZWJ1ZmZlclRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcblxyXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICkge1xyXG5cclxuXHRcdHN1cGVyKCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKTtcclxuXHJcblx0XHR0aGlzLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxuXHRcdHRoaXMubWlwbWFwcyA9IG1pcG1hcHM7XHJcblxyXG5cdFx0Ly8gbm8gZmxpcHBpbmcgZm9yIGN1YmUgdGV4dHVyZXNcclxuXHRcdC8vIChhbHNvIGZsaXBwaW5nIGRvZXNuJ3Qgd29yayBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcyApXHJcblxyXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIGNhbid0IGdlbmVyYXRlIG1pcG1hcHMgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXNcclxuXHRcdC8vIG1pcHMgbXVzdCBiZSBlbWJlZGRlZCBpbiBERFMgZmlsZXNcclxuXHJcblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21wcmVzc2VkVGV4dHVyZSB9O1xyXG4iLCJpbXBvcnQgeyBDbGFtcFRvRWRnZVdyYXBwaW5nIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgQ29tcHJlc3NlZFRleHR1cmUgfSBmcm9tICcuL0NvbXByZXNzZWRUZXh0dXJlLmpzJztcclxuXHJcbmNsYXNzIENvbXByZXNzZWRBcnJheVRleHR1cmUgZXh0ZW5kcyBDb21wcmVzc2VkVGV4dHVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZm9ybWF0LCB0eXBlICkge1xyXG5cclxuXHRcdHN1cGVyKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKTtcclxuXHJcblx0XHR0aGlzLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSA9IHRydWU7XHJcblx0XHR0aGlzLmltYWdlLmRlcHRoID0gZGVwdGg7XHJcblx0XHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHJcblx0XHR0aGlzLmxheWVyVXBkYXRlcyA9IG5ldyBTZXQoKTtcclxuXHJcblx0fVxyXG5cclxuXHRhZGRMYXllclVwZGF0ZSggbGF5ZXJJbmRleCApIHtcclxuXHJcblx0XHR0aGlzLmxheWVyVXBkYXRlcy5hZGQoIGxheWVySW5kZXggKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGVhckxheWVyVXBkYXRlcygpIHtcclxuXHJcblx0XHR0aGlzLmxheWVyVXBkYXRlcy5jbGVhcigpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21wcmVzc2VkQXJyYXlUZXh0dXJlIH07XHJcbiIsImltcG9ydCB7IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IENvbXByZXNzZWRUZXh0dXJlIH0gZnJvbSAnLi9Db21wcmVzc2VkVGV4dHVyZS5qcyc7XHJcblxyXG5jbGFzcyBDb21wcmVzc2VkQ3ViZVRleHR1cmUgZXh0ZW5kcyBDb21wcmVzc2VkVGV4dHVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBpbWFnZXMsIGZvcm1hdCwgdHlwZSApIHtcclxuXHJcblx0XHRzdXBlciggdW5kZWZpbmVkLCBpbWFnZXNbIDAgXS53aWR0aCwgaW1hZ2VzWyAwIF0uaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIEN1YmVSZWZsZWN0aW9uTWFwcGluZyApO1xyXG5cclxuXHRcdHRoaXMuaXNDb21wcmVzc2VkQ3ViZVRleHR1cmUgPSB0cnVlO1xyXG5cdFx0dGhpcy5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmltYWdlID0gaW1hZ2VzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21wcmVzc2VkQ3ViZVRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcblxyXG5jbGFzcyBDYW52YXNUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcclxuXHJcblx0XHRzdXBlciggY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcclxuXHJcblx0XHR0aGlzLmlzQ2FudmFzVGV4dHVyZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENhbnZhc1RleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IE5lYXJlc3RGaWx0ZXIsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0IH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuXHJcbmNsYXNzIERlcHRoVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZm9ybWF0ID0gRGVwdGhGb3JtYXQgKSB7XHJcblxyXG5cdFx0aWYgKCBmb3JtYXQgIT09IERlcHRoRm9ybWF0ICYmIGZvcm1hdCAhPT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnRUeXBlO1xyXG5cdFx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xyXG5cclxuXHRcdHN1cGVyKCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcclxuXHJcblx0XHR0aGlzLmlzRGVwdGhUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcblxyXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XHJcblx0XHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcclxuXHJcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XHJcblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuY29tcGFyZUZ1bmN0aW9uID0gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuY29tcGFyZUZ1bmN0aW9uID0gc291cmNlLmNvbXBhcmVGdW5jdGlvbjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oIG1ldGEgKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xyXG5cclxuXHRcdGlmICggdGhpcy5jb21wYXJlRnVuY3Rpb24gIT09IG51bGwgKSBkYXRhLmNvbXBhcmVGdW5jdGlvbiA9IHRoaXMuY29tcGFyZUZ1bmN0aW9uO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBEZXB0aFRleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XHJcblxyXG4vKipcclxuICogRXh0ZW5zaWJsZSBjdXJ2ZSBvYmplY3QuXHJcbiAqXHJcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XHJcbiAqIC5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0IClcclxuICogLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0IClcclxuICogLmdldFBvaW50cygpLCAuZ2V0U3BhY2VkUG9pbnRzKClcclxuICogLmdldExlbmd0aCgpXHJcbiAqIC51cGRhdGVBcmNMZW5ndGhzKClcclxuICpcclxuICogVGhpcyBmb2xsb3dpbmcgY3VydmVzIGluaGVyaXQgZnJvbSBUSFJFRS5DdXJ2ZTpcclxuICpcclxuICogLS0gMkQgY3VydmVzIC0tXHJcbiAqIFRIUkVFLkFyY0N1cnZlXHJcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmVcclxuICogVEhSRUUuRWxsaXBzZUN1cnZlXHJcbiAqIFRIUkVFLkxpbmVDdXJ2ZVxyXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZVxyXG4gKiBUSFJFRS5TcGxpbmVDdXJ2ZVxyXG4gKlxyXG4gKiAtLSAzRCBjdXJ2ZXMgLS1cclxuICogVEhSRUUuQ2F0bXVsbFJvbUN1cnZlM1xyXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlM1xyXG4gKiBUSFJFRS5MaW5lQ3VydmUzXHJcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlM1xyXG4gKlxyXG4gKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLlxyXG4gKlxyXG4gKiovXHJcblxyXG5jbGFzcyBDdXJ2ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZSc7XHJcblxyXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gVmlydHVhbCBiYXNlIGNsYXNzIG1ldGhvZCB0byBvdmVyd3JpdGUgYW5kIGltcGxlbWVudCBpbiBzdWJjbGFzc2VzXHJcblx0Ly9cdC0gdCBbMCAuLiAxXVxyXG5cclxuXHRnZXRQb2ludCggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5nZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZC4nICk7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBHZXQgcG9pbnQgYXQgcmVsYXRpdmUgcG9zaXRpb24gaW4gY3VydmUgYWNjb3JkaW5nIHRvIGFyYyBsZW5ndGhcclxuXHQvLyAtIHUgWzAgLi4gMV1cclxuXHJcblx0Z2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XHJcblxyXG5cdFx0Y29uc3QgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcclxuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnQoIHQgKVxyXG5cclxuXHRnZXRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcclxuXHJcblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBkIC8gZGl2aXNpb25zICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50cztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50QXQoIHUgKVxyXG5cclxuXHRnZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcclxuXHJcblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50QXQoIGQgLyBkaXZpc2lvbnMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIEdldCB0b3RhbCBjdXJ2ZSBhcmMgbGVuZ3RoXHJcblxyXG5cdGdldExlbmd0aCgpIHtcclxuXHJcblx0XHRjb25zdCBsZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XHJcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gR2V0IGxpc3Qgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHNcclxuXHJcblx0Z2V0TGVuZ3RocyggZGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxyXG5cdFx0XHQoIHRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aCA9PT0gZGl2aXNpb25zICsgMSApICYmXHJcblx0XHRcdCEgdGhpcy5uZWVkc1VwZGF0ZSApIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RocztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdGNvbnN0IGNhY2hlID0gW107XHJcblx0XHRsZXQgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcclxuXHRcdGxldCBzdW0gPSAwO1xyXG5cclxuXHRcdGNhY2hlLnB1c2goIDAgKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgcCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwICsrICkge1xyXG5cclxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcclxuXHRcdFx0c3VtICs9IGN1cnJlbnQuZGlzdGFuY2VUbyggbGFzdCApO1xyXG5cdFx0XHRjYWNoZS5wdXNoKCBzdW0gKTtcclxuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gY2FjaGU7XHJcblxyXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVBcmNMZW5ndGhzKCkge1xyXG5cclxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0dGhpcy5nZXRMZW5ndGhzKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gR2l2ZW4gdSAoIDAgLi4gMSApLCBnZXQgYSB0IHRvIGZpbmQgcC4gVGhpcyBnaXZlcyB5b3UgcG9pbnRzIHdoaWNoIGFyZSBlcXVpZGlzdGFudFxyXG5cclxuXHRnZXRVdG9UbWFwcGluZyggdSwgZGlzdGFuY2UgKSB7XHJcblxyXG5cdFx0Y29uc3QgYXJjTGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xyXG5cclxuXHRcdGxldCBpID0gMDtcclxuXHRcdGNvbnN0IGlsID0gYXJjTGVuZ3Rocy5sZW5ndGg7XHJcblxyXG5cdFx0bGV0IHRhcmdldEFyY0xlbmd0aDsgLy8gVGhlIHRhcmdldGVkIHUgZGlzdGFuY2UgdmFsdWUgdG8gZ2V0XHJcblxyXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcclxuXHJcblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXHJcblxyXG5cdFx0bGV0IGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XHJcblxyXG5cdFx0d2hpbGUgKCBsb3cgPD0gaGlnaCApIHtcclxuXHJcblx0XHRcdGkgPSBNYXRoLmZsb29yKCBsb3cgKyAoIGhpZ2ggLSBsb3cgKSAvIDIgKTsgLy8gbGVzcyBsaWtlbHkgdG8gb3ZlcmZsb3csIHRob3VnaCBwcm9iYWJseSBub3QgaXNzdWUgaGVyZSwgSlMgZG9lc24ndCByZWFsbHkgaGF2ZSBpbnRlZ2VycywgYWxsIG51bWJlcnMgYXJlIGZsb2F0c1xyXG5cclxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcclxuXHJcblx0XHRcdGlmICggY29tcGFyaXNvbiA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdGxvdyA9IGkgKyAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XHJcblxyXG5cdFx0XHRcdGhpZ2ggPSBpIC0gMTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGhpZ2ggPSBpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHQvLyBET05FXHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGkgPSBoaWdoO1xyXG5cclxuXHRcdGlmICggYXJjTGVuZ3Roc1sgaSBdID09PSB0YXJnZXRBcmNMZW5ndGggKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gaSAvICggaWwgLSAxICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHdlIGNvdWxkIGdldCBmaW5lciBncmFpbiBhdCBsZW5ndGhzLCBvciB1c2Ugc2ltcGxlIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcG9pbnRzXHJcblxyXG5cdFx0Y29uc3QgbGVuZ3RoQmVmb3JlID0gYXJjTGVuZ3Roc1sgaSBdO1xyXG5cdFx0Y29uc3QgbGVuZ3RoQWZ0ZXIgPSBhcmNMZW5ndGhzWyBpICsgMSBdO1xyXG5cclxuXHRcdGNvbnN0IHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcclxuXHJcblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xyXG5cclxuXHRcdGNvbnN0IHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xyXG5cclxuXHRcdC8vIGFkZCB0aGF0IGZyYWN0aW9uYWwgYW1vdW50IHRvIHRcclxuXHJcblx0XHRjb25zdCB0ID0gKCBpICsgc2VnbWVudEZyYWN0aW9uICkgLyAoIGlsIC0gMSApO1xyXG5cclxuXHRcdHJldHVybiB0O1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcclxuXHQvLyBJbiBjYXNlIGFueSBzdWIgY3VydmUgZG9lcyBub3QgaW1wbGVtZW50IGl0cyB0YW5nZW50IGRlcml2YXRpb24sXHJcblx0Ly8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnRcclxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXHJcblxyXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IGRlbHRhID0gMC4wMDAxO1xyXG5cdFx0bGV0IHQxID0gdCAtIGRlbHRhO1xyXG5cdFx0bGV0IHQyID0gdCArIGRlbHRhO1xyXG5cclxuXHRcdC8vIENhcHBpbmcgaW4gY2FzZSBvZiBkYW5nZXJcclxuXHJcblx0XHRpZiAoIHQxIDwgMCApIHQxID0gMDtcclxuXHRcdGlmICggdDIgPiAxICkgdDIgPSAxO1xyXG5cclxuXHRcdGNvbnN0IHB0MSA9IHRoaXMuZ2V0UG9pbnQoIHQxICk7XHJcblx0XHRjb25zdCBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xyXG5cclxuXHRcdGNvbnN0IHRhbmdlbnQgPSBvcHRpb25hbFRhcmdldCB8fCAoICggcHQxLmlzVmVjdG9yMiApID8gbmV3IFZlY3RvcjIoKSA6IG5ldyBWZWN0b3IzKCkgKTtcclxuXHJcblx0XHR0YW5nZW50LmNvcHkoIHB0MiApLnN1YiggcHQxICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRhbmdlbnQ7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcclxuXHJcblx0XHRjb25zdCB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb21wdXRlRnJlbmV0RnJhbWVzKCBzZWdtZW50cywgY2xvc2VkICkge1xyXG5cclxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmNzLmluZGlhbmEuZWR1L3B1Yi90ZWNocmVwb3J0cy9UUjQyNS5wZGZcclxuXHJcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdGNvbnN0IHRhbmdlbnRzID0gW107XHJcblx0XHRjb25zdCBub3JtYWxzID0gW107XHJcblx0XHRjb25zdCBiaW5vcm1hbHMgPSBbXTtcclxuXHJcblx0XHRjb25zdCB2ZWMgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgbWF0ID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCB1ID0gaSAvIHNlZ21lbnRzO1xyXG5cclxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1LCBuZXcgVmVjdG9yMygpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHNlbGVjdCBhbiBpbml0aWFsIG5vcm1hbCB2ZWN0b3IgcGVycGVuZGljdWxhciB0byB0aGUgZmlyc3QgdGFuZ2VudCB2ZWN0b3IsXHJcblx0XHQvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnRcclxuXHJcblx0XHRub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Ymlub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0bGV0IG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XHJcblx0XHRjb25zdCB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcclxuXHRcdGNvbnN0IHR5ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueSApO1xyXG5cdFx0Y29uc3QgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7XHJcblxyXG5cdFx0aWYgKCB0eCA8PSBtaW4gKSB7XHJcblxyXG5cdFx0XHRtaW4gPSB0eDtcclxuXHRcdFx0bm9ybWFsLnNldCggMSwgMCwgMCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5IDw9IG1pbiApIHtcclxuXHJcblx0XHRcdG1pbiA9IHR5O1xyXG5cdFx0XHRub3JtYWwuc2V0KCAwLCAxLCAwICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHogPD0gbWluICkge1xyXG5cclxuXHRcdFx0bm9ybWFsLnNldCggMCwgMCwgMSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWwgKS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTtcclxuXHRcdGJpbm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsc1sgMCBdICk7XHJcblxyXG5cclxuXHRcdC8vIGNvbXB1dGUgdGhlIHNsb3dseS12YXJ5aW5nIG5vcm1hbCBhbmQgYmlub3JtYWwgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcclxuXHJcblx0XHRcdG5vcm1hbHNbIGkgXSA9IG5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTtcclxuXHJcblx0XHRcdGJpbm9ybWFsc1sgaSBdID0gYmlub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XHJcblxyXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xyXG5cclxuXHRcdFx0aWYgKCB2ZWMubGVuZ3RoKCkgPiBOdW1iZXIuRVBTSUxPTiApIHtcclxuXHJcblx0XHRcdFx0dmVjLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRjb25zdCB0aGV0YSA9IE1hdGguYWNvcyggY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzXHJcblxyXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB2ZWMsIHRoZXRhICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWVcclxuXHJcblx0XHRpZiAoIGNsb3NlZCA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdGxldCB0aGV0YSA9IE1hdGguYWNvcyggY2xhbXAoIG5vcm1hbHNbIDAgXS5kb3QoIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSwgLSAxLCAxICkgKTtcclxuXHRcdFx0dGhldGEgLz0gc2VnbWVudHM7XHJcblxyXG5cdFx0XHRpZiAoIHRhbmdlbnRzWyAwIF0uZG90KCB2ZWMuY3Jvc3NWZWN0b3JzKCBub3JtYWxzWyAwIF0sIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSApID4gMCApIHtcclxuXHJcblx0XHRcdFx0dGhldGEgPSAtIHRoZXRhO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHQvLyB0d2lzdCBhIGxpdHRsZS4uLlxyXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB0YW5nZW50c1sgaSBdLCB0aGV0YSAqIGkgKSApO1xyXG5cdFx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRhbmdlbnRzOiB0YW5nZW50cyxcclxuXHRcdFx0bm9ybWFsczogbm9ybWFscyxcclxuXHRcdFx0Ymlub3JtYWxzOiBiaW5vcm1hbHNcclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHNvdXJjZS5hcmNMZW5ndGhEaXZpc2lvbnM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSB7XHJcblx0XHRcdG1ldGFkYXRhOiB7XHJcblx0XHRcdFx0dmVyc2lvbjogNC42LFxyXG5cdFx0XHRcdHR5cGU6ICdDdXJ2ZScsXHJcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQ3VydmUudG9KU09OJ1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XHJcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0ZnJvbUpTT04oIGpzb24gKSB7XHJcblxyXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9ucztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEN1cnZlIH07XHJcbiIsImltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5cclxuY2xhc3MgRWxsaXBzZUN1cnZlIGV4dGVuZHMgQ3VydmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYVggPSAwLCBhWSA9IDAsIHhSYWRpdXMgPSAxLCB5UmFkaXVzID0gMSwgYVN0YXJ0QW5nbGUgPSAwLCBhRW5kQW5nbGUgPSBNYXRoLlBJICogMiwgYUNsb2Nrd2lzZSA9IGZhbHNlLCBhUm90YXRpb24gPSAwICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc0VsbGlwc2VDdXJ2ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XHJcblxyXG5cdFx0dGhpcy5hWCA9IGFYO1xyXG5cdFx0dGhpcy5hWSA9IGFZO1xyXG5cclxuXHRcdHRoaXMueFJhZGl1cyA9IHhSYWRpdXM7XHJcblx0XHR0aGlzLnlSYWRpdXMgPSB5UmFkaXVzO1xyXG5cclxuXHRcdHRoaXMuYVN0YXJ0QW5nbGUgPSBhU3RhcnRBbmdsZTtcclxuXHRcdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlO1xyXG5cclxuXHRcdHRoaXMuYUNsb2Nrd2lzZSA9IGFDbG9ja3dpc2U7XHJcblxyXG5cdFx0dGhpcy5hUm90YXRpb24gPSBhUm90YXRpb247XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcclxuXHJcblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xyXG5cclxuXHRcdGNvbnN0IHR3b1BpID0gTWF0aC5QSSAqIDI7XHJcblx0XHRsZXQgZGVsdGFBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlIC0gdGhpcy5hU3RhcnRBbmdsZTtcclxuXHRcdGNvbnN0IHNhbWVQb2ludHMgPSBNYXRoLmFicyggZGVsdGFBbmdsZSApIDwgTnVtYmVyLkVQU0lMT047XHJcblxyXG5cdFx0Ly8gZW5zdXJlcyB0aGF0IGRlbHRhQW5nbGUgaXMgMCAuLiAyIFBJXHJcblx0XHR3aGlsZSAoIGRlbHRhQW5nbGUgPCAwICkgZGVsdGFBbmdsZSArPSB0d29QaTtcclxuXHRcdHdoaWxlICggZGVsdGFBbmdsZSA+IHR3b1BpICkgZGVsdGFBbmdsZSAtPSB0d29QaTtcclxuXHJcblx0XHRpZiAoIGRlbHRhQW5nbGUgPCBOdW1iZXIuRVBTSUxPTiApIHtcclxuXHJcblx0XHRcdGlmICggc2FtZVBvaW50cyApIHtcclxuXHJcblx0XHRcdFx0ZGVsdGFBbmdsZSA9IDA7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRkZWx0YUFuZ2xlID0gdHdvUGk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5hQ2xvY2t3aXNlID09PSB0cnVlICYmICEgc2FtZVBvaW50cyApIHtcclxuXHJcblx0XHRcdGlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7XHJcblxyXG5cdFx0XHRcdGRlbHRhQW5nbGUgPSAtIHR3b1BpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0ZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGUgLSB0d29QaTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XHJcblx0XHRsZXQgeCA9IHRoaXMuYVggKyB0aGlzLnhSYWRpdXMgKiBNYXRoLmNvcyggYW5nbGUgKTtcclxuXHRcdGxldCB5ID0gdGhpcy5hWSArIHRoaXMueVJhZGl1cyAqIE1hdGguc2luKCBhbmdsZSApO1xyXG5cclxuXHRcdGlmICggdGhpcy5hUm90YXRpb24gIT09IDAgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggdGhpcy5hUm90YXRpb24gKTtcclxuXHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHRoaXMuYVJvdGF0aW9uICk7XHJcblxyXG5cdFx0XHRjb25zdCB0eCA9IHggLSB0aGlzLmFYO1xyXG5cdFx0XHRjb25zdCB0eSA9IHkgLSB0aGlzLmFZO1xyXG5cclxuXHRcdFx0Ly8gUm90YXRlIHRoZSBwb2ludCBhYm91dCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxyXG5cdFx0XHR4ID0gdHggKiBjb3MgLSB0eSAqIHNpbiArIHRoaXMuYVg7XHJcblx0XHRcdHkgPSB0eCAqIHNpbiArIHR5ICogY29zICsgdGhpcy5hWTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50LnNldCggeCwgeSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmFYID0gc291cmNlLmFYO1xyXG5cdFx0dGhpcy5hWSA9IHNvdXJjZS5hWTtcclxuXHJcblx0XHR0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1cztcclxuXHRcdHRoaXMueVJhZGl1cyA9IHNvdXJjZS55UmFkaXVzO1xyXG5cclxuXHRcdHRoaXMuYVN0YXJ0QW5nbGUgPSBzb3VyY2UuYVN0YXJ0QW5nbGU7XHJcblx0XHR0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7XHJcblxyXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0gc291cmNlLmFDbG9ja3dpc2U7XHJcblxyXG5cdFx0dGhpcy5hUm90YXRpb24gPSBzb3VyY2UuYVJvdGF0aW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS5hWCA9IHRoaXMuYVg7XHJcblx0XHRkYXRhLmFZID0gdGhpcy5hWTtcclxuXHJcblx0XHRkYXRhLnhSYWRpdXMgPSB0aGlzLnhSYWRpdXM7XHJcblx0XHRkYXRhLnlSYWRpdXMgPSB0aGlzLnlSYWRpdXM7XHJcblxyXG5cdFx0ZGF0YS5hU3RhcnRBbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGU7XHJcblx0XHRkYXRhLmFFbmRBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlO1xyXG5cclxuXHRcdGRhdGEuYUNsb2Nrd2lzZSA9IHRoaXMuYUNsb2Nrd2lzZTtcclxuXHJcblx0XHRkYXRhLmFSb3RhdGlvbiA9IHRoaXMuYVJvdGF0aW9uO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy5hWCA9IGpzb24uYVg7XHJcblx0XHR0aGlzLmFZID0ganNvbi5hWTtcclxuXHJcblx0XHR0aGlzLnhSYWRpdXMgPSBqc29uLnhSYWRpdXM7XHJcblx0XHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XHJcblxyXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IGpzb24uYVN0YXJ0QW5nbGU7XHJcblx0XHR0aGlzLmFFbmRBbmdsZSA9IGpzb24uYUVuZEFuZ2xlO1xyXG5cclxuXHRcdHRoaXMuYUNsb2Nrd2lzZSA9IGpzb24uYUNsb2Nrd2lzZTtcclxuXHJcblx0XHR0aGlzLmFSb3RhdGlvbiA9IGpzb24uYVJvdGF0aW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBFbGxpcHNlQ3VydmUgfTtcclxuIiwiaW1wb3J0IHsgRWxsaXBzZUN1cnZlIH0gZnJvbSAnLi9FbGxpcHNlQ3VydmUuanMnO1xyXG5cclxuY2xhc3MgQXJjQ3VydmUgZXh0ZW5kcyBFbGxpcHNlQ3VydmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xyXG5cclxuXHRcdHN1cGVyKCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcclxuXHJcblx0XHR0aGlzLmlzQXJjQ3VydmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdBcmNDdXJ2ZSc7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFyY0N1cnZlIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIENlbnRyaXBldGFsIENhdG11bGxSb20gQ3VydmUgLSB3aGljaCBpcyB1c2VmdWwgZm9yIGF2b2lkaW5nXHJcbiAqIGN1c3BzIGFuZCBzZWxmLWludGVyc2VjdGlvbnMgaW4gbm9uLXVuaWZvcm0gY2F0bXVsbCByb20gY3VydmVzLlxyXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxyXG4gKlxyXG4gKiBjdXJ2ZS50eXBlIGFjY2VwdHMgY2VudHJpcGV0YWwoZGVmYXVsdCksIGNob3JkYWwgYW5kIGNhdG11bGxyb21cclxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxyXG4gKi9cclxuXHJcblxyXG4vKlxyXG5CYXNlZCBvbiBhbiBvcHRpbWl6ZWQgYysrIHNvbHV0aW9uIGluXHJcbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXHJcbiAtIGh0dHA6Ly9pZGVvbmUuY29tL05vRWJWTVxyXG5cclxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxyXG5idXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcclxud2hpY2ggY2FuIGJlIHBsYWNlZCBpbiBDdXJ2ZVV0aWxzLlxyXG4qL1xyXG5cclxuZnVuY3Rpb24gQ3ViaWNQb2x5KCkge1xyXG5cclxuXHRsZXQgYzAgPSAwLCBjMSA9IDAsIGMyID0gMCwgYzMgPSAwO1xyXG5cclxuXHQvKlxyXG5cdCAqIENvbXB1dGUgY29lZmZpY2llbnRzIGZvciBhIGN1YmljIHBvbHlub21pYWxcclxuXHQgKiAgIHAocykgPSBjMCArIGMxKnMgKyBjMipzXjIgKyBjMypzXjNcclxuXHQgKiBzdWNoIHRoYXRcclxuXHQgKiAgIHAoMCkgPSB4MCwgcCgxKSA9IHgxXHJcblx0ICogIGFuZFxyXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cclxuXHQgKi9cclxuXHRmdW5jdGlvbiBpbml0KCB4MCwgeDEsIHQwLCB0MSApIHtcclxuXHJcblx0XHRjMCA9IHgwO1xyXG5cdFx0YzEgPSB0MDtcclxuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcclxuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cclxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCB0ZW5zaW9uICkge1xyXG5cclxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0aW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyICkge1xyXG5cclxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxyXG5cdFx0XHRsZXQgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxO1xyXG5cdFx0XHRsZXQgdDIgPSAoIHgyIC0geDEgKSAvIGR0MSAtICggeDMgLSB4MSApIC8gKCBkdDEgKyBkdDIgKSArICggeDMgLSB4MiApIC8gZHQyO1xyXG5cclxuXHRcdFx0Ly8gcmVzY2FsZSB0YW5nZW50cyBmb3IgcGFyYW1ldHJpemF0aW9uIGluIFswLDFdXHJcblx0XHRcdHQxICo9IGR0MTtcclxuXHRcdFx0dDIgKj0gZHQxO1xyXG5cclxuXHRcdFx0aW5pdCggeDEsIHgyLCB0MSwgdDIgKTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcclxuXHJcblx0XHRcdGNvbnN0IHQyID0gdCAqIHQ7XHJcblx0XHRcdGNvbnN0IHQzID0gdDIgKiB0O1xyXG5cdFx0XHRyZXR1cm4gYzAgKyBjMSAqIHQgKyBjMiAqIHQyICsgYzMgKiB0MztcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuY29uc3QgdG1wID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBweCA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xyXG5jb25zdCBweSA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xyXG5jb25zdCBweiA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xyXG5cclxuY2xhc3MgQ2F0bXVsbFJvbUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdLCBjbG9zZWQgPSBmYWxzZSwgY3VydmVUeXBlID0gJ2NlbnRyaXBldGFsJywgdGVuc2lvbiA9IDAuNSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7XHJcblxyXG5cdFx0dGhpcy5wb2ludHMgPSBwb2ludHM7XHJcblx0XHR0aGlzLmNsb3NlZCA9IGNsb3NlZDtcclxuXHRcdHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlO1xyXG5cdFx0dGhpcy50ZW5zaW9uID0gdGVuc2lvbjtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xyXG5cclxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XHJcblx0XHRjb25zdCBsID0gcG9pbnRzLmxlbmd0aDtcclxuXHJcblx0XHRjb25zdCBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XHJcblx0XHRsZXQgaW50UG9pbnQgPSBNYXRoLmZsb29yKCBwICk7XHJcblx0XHRsZXQgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xyXG5cclxuXHRcdGlmICggdGhpcy5jbG9zZWQgKSB7XHJcblxyXG5cdFx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggd2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSApIHtcclxuXHJcblx0XHRcdGludFBvaW50ID0gbCAtIDI7XHJcblx0XHRcdHdlaWdodCA9IDE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBwMCwgcDM7IC8vIDQgcG9pbnRzIChwMSAmIHAyIGRlZmluZWQgYmVsb3cpXHJcblxyXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCA+IDAgKSB7XHJcblxyXG5cdFx0XHRwMCA9IHBvaW50c1sgKCBpbnRQb2ludCAtIDEgKSAlIGwgXTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gZXh0cmFwb2xhdGUgZmlyc3QgcG9pbnRcclxuXHRcdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcclxuXHRcdFx0cDAgPSB0bXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTtcclxuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyAoIGludFBvaW50ICsgMSApICUgbCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgKyAyIDwgbCApIHtcclxuXHJcblx0XHRcdHAzID0gcG9pbnRzWyAoIGludFBvaW50ICsgMiApICUgbCBdO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBsYXN0IHBvaW50XHJcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XHJcblx0XHRcdHAzID0gdG1wO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2VudHJpcGV0YWwnIHx8IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgKSB7XHJcblxyXG5cdFx0XHQvLyBpbml0IENlbnRyaXBldGFsIC8gQ2hvcmRhbCBDYXRtdWxsLVJvbVxyXG5cdFx0XHRjb25zdCBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcclxuXHRcdFx0bGV0IGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7XHJcblx0XHRcdGxldCBkdDEgPSBNYXRoLnBvdyggcDEuZGlzdGFuY2VUb1NxdWFyZWQoIHAyICksIHBvdyApO1xyXG5cdFx0XHRsZXQgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTtcclxuXHJcblx0XHRcdC8vIHNhZmV0eSBjaGVjayBmb3IgcmVwZWF0ZWQgcG9pbnRzXHJcblx0XHRcdGlmICggZHQxIDwgMWUtNCApIGR0MSA9IDEuMDtcclxuXHRcdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xyXG5cdFx0XHRpZiAoIGR0MiA8IDFlLTQgKSBkdDIgPSBkdDE7XHJcblxyXG5cdFx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcclxuXHRcdFx0cHkuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCBkdDAsIGR0MSwgZHQyICk7XHJcblx0XHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2F0bXVsbHJvbScgKSB7XHJcblxyXG5cdFx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XHJcblx0XHRcdHB5LmluaXRDYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCB0aGlzLnRlbnNpb24gKTtcclxuXHRcdFx0cHouaW5pdENhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIHRoaXMudGVuc2lvbiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwb2ludC5zZXQoXHJcblx0XHRcdHB4LmNhbGMoIHdlaWdodCApLFxyXG5cdFx0XHRweS5jYWxjKCB3ZWlnaHQgKSxcclxuXHRcdFx0cHouY2FsYyggd2VpZ2h0IClcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50O1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBvaW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNvdXJjZS5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xyXG5cclxuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XHJcblx0XHR0aGlzLmN1cnZlVHlwZSA9IHNvdXJjZS5jdXJ2ZVR5cGU7XHJcblx0XHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEucG9pbnRzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcclxuXHRcdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XHJcblx0XHRkYXRhLmN1cnZlVHlwZSA9IHRoaXMuY3VydmVUeXBlO1xyXG5cdFx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy5wb2ludHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xyXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggcG9pbnQgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkO1xyXG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBqc29uLmN1cnZlVHlwZTtcclxuXHRcdHRoaXMudGVuc2lvbiA9IGpzb24udGVuc2lvbjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ2F0bXVsbFJvbUN1cnZlMyB9O1xyXG4iLCIvKipcclxuICogQmV6aWVyIEN1cnZlcyBmb3JtdWxhcyBvYnRhaW5lZCBmcm9tXHJcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0IlQzMlQTl6aWVyX2N1cnZlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQ2F0bXVsbFJvbSggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XHJcblxyXG5cdGNvbnN0IHYwID0gKCBwMiAtIHAwICkgKiAwLjU7XHJcblx0Y29uc3QgdjEgPSAoIHAzIC0gcDEgKSAqIDAuNTtcclxuXHRjb25zdCB0MiA9IHQgKiB0O1xyXG5cdGNvbnN0IHQzID0gdCAqIHQyO1xyXG5cdHJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxO1xyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkge1xyXG5cclxuXHRjb25zdCBrID0gMSAtIHQ7XHJcblx0cmV0dXJuIGsgKiBrICogcDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAxKCB0LCBwICkge1xyXG5cclxuXHRyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDIoIHQsIHAgKSB7XHJcblxyXG5cdHJldHVybiB0ICogdCAqIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXIoIHQsIHAwLCBwMSwgcDIgKSB7XHJcblxyXG5cdHJldHVybiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcDAgKSArIFF1YWRyYXRpY0JlemllclAxKCB0LCBwMSApICtcclxuXHRcdFF1YWRyYXRpY0JlemllclAyKCB0LCBwMiApO1xyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDAoIHQsIHAgKSB7XHJcblxyXG5cdGNvbnN0IGsgPSAxIC0gdDtcclxuXHRyZXR1cm4gayAqIGsgKiBrICogcDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDEoIHQsIHAgKSB7XHJcblxyXG5cdGNvbnN0IGsgPSAxIC0gdDtcclxuXHRyZXR1cm4gMyAqIGsgKiBrICogdCAqIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkge1xyXG5cclxuXHRyZXR1cm4gMyAqICggMSAtIHQgKSAqIHQgKiB0ICogcDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDMoIHQsIHAgKSB7XHJcblxyXG5cdHJldHVybiB0ICogdCAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gQ3ViaWNCZXppZXIoIHQsIHAwLCBwMSwgcDIsIHAzICkge1xyXG5cclxuXHRyZXR1cm4gQ3ViaWNCZXppZXJQMCggdCwgcDAgKSArIEN1YmljQmV6aWVyUDEoIHQsIHAxICkgKyBDdWJpY0JlemllclAyKCB0LCBwMiApICtcclxuXHRcdEN1YmljQmV6aWVyUDMoIHQsIHAzICk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDYXRtdWxsUm9tLCBRdWFkcmF0aWNCZXppZXIsIEN1YmljQmV6aWVyIH07XHJcbiIsImltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XHJcbmltcG9ydCB7IEN1YmljQmV6aWVyIH0gZnJvbSAnLi4vY29yZS9JbnRlcnBvbGF0aW9ucy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5cclxuY2xhc3MgQ3ViaWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjIoKSwgdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCksIHYzID0gbmV3IFZlY3RvcjIoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNDdWJpY0JlemllckN1cnZlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZSc7XHJcblxyXG5cdFx0dGhpcy52MCA9IHYwO1xyXG5cdFx0dGhpcy52MSA9IHYxO1xyXG5cdFx0dGhpcy52MiA9IHYyO1xyXG5cdFx0dGhpcy52MyA9IHYzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcclxuXHJcblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XHJcblxyXG5cdFx0cG9pbnQuc2V0KFxyXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxyXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiBwb2ludDtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcclxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XHJcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xyXG5cdFx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcclxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcclxuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcclxuXHRcdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tSlNPTigganNvbiApIHtcclxuXHJcblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xyXG5cclxuXHRcdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XHJcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xyXG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcclxuXHRcdHRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEN1YmljQmV6aWVyQ3VydmUgfTtcclxuIiwiaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9jb3JlL0N1cnZlLmpzJztcclxuaW1wb3J0IHsgQ3ViaWNCZXppZXIgfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcblxyXG5jbGFzcyBDdWJpY0JlemllckN1cnZlMyBleHRlbmRzIEN1cnZlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjMoKSwgdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCksIHYzID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNDdWJpY0JlemllckN1cnZlMyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUzJztcclxuXHJcblx0XHR0aGlzLnYwID0gdjA7XHJcblx0XHR0aGlzLnYxID0gdjE7XHJcblx0XHR0aGlzLnYyID0gdjI7XHJcblx0XHR0aGlzLnYzID0gdjM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xyXG5cclxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcclxuXHJcblx0XHRwb2ludC5zZXQoXHJcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXHJcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55ICksXHJcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56LCB2My56IClcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50O1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xyXG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcclxuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XHJcblx0XHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MyA9IHRoaXMudjMudG9BcnJheSgpO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcclxuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XHJcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xyXG5cdFx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ3ViaWNCZXppZXJDdXJ2ZTMgfTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XHJcblxyXG5jbGFzcyBMaW5lQ3VydmUgZXh0ZW5kcyBDdXJ2ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB2MSA9IG5ldyBWZWN0b3IyKCksIHYyID0gbmV3IFZlY3RvcjIoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNMaW5lQ3VydmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdMaW5lQ3VydmUnO1xyXG5cclxuXHRcdHRoaXMudjEgPSB2MTtcclxuXHRcdHRoaXMudjIgPSB2MjtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xyXG5cclxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XHJcblxyXG5cdFx0aWYgKCB0ID09PSAxICkge1xyXG5cclxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XHJcblx0XHRcdHBvaW50Lm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnYxICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBwb2ludDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcclxuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG9wdGlvbmFsVGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMudjIsIHRoaXMudjEgKS5ub3JtYWxpemUoKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRUYW5nZW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XHJcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcclxuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IExpbmVDdXJ2ZSB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9jb3JlL0N1cnZlLmpzJztcclxuXHJcbmNsYXNzIExpbmVDdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB2MSA9IG5ldyBWZWN0b3IzKCksIHYyID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNMaW5lQ3VydmUzID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlMyc7XHJcblxyXG5cdFx0dGhpcy52MSA9IHYxO1xyXG5cdFx0dGhpcy52MiA9IHYyO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcclxuXHJcblx0XHRpZiAoIHQgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTtcclxuXHRcdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50O1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxyXG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHRyZXR1cm4gb3B0aW9uYWxUYXJnZXQuc3ViVmVjdG9ycyggdGhpcy52MiwgdGhpcy52MSApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcclxuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcclxuXHJcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XHJcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0ZnJvbUpTT04oIGpzb24gKSB7XHJcblxyXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcclxuXHJcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xyXG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTGluZUN1cnZlMyB9O1xyXG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xyXG5pbXBvcnQgeyBRdWFkcmF0aWNCZXppZXIgfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcblxyXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjIoKSwgdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCkgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XHJcblxyXG5cdFx0dGhpcy52MCA9IHYwO1xyXG5cdFx0dGhpcy52MSA9IHYxO1xyXG5cdFx0dGhpcy52MiA9IHYyO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcclxuXHJcblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xyXG5cclxuXHRcdHBvaW50LnNldChcclxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXHJcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiBwb2ludDtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcclxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XHJcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcclxuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XHJcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBRdWFkcmF0aWNCZXppZXJDdXJ2ZSB9O1xyXG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xyXG5pbXBvcnQgeyBRdWFkcmF0aWNCZXppZXIgfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcblxyXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IzKCksIHYxID0gbmV3IFZlY3RvcjMoKSwgdjIgPSBuZXcgVmVjdG9yMygpICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc1F1YWRyYXRpY0JlemllckN1cnZlMyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlMyc7XHJcblxyXG5cdFx0dGhpcy52MCA9IHYwO1xyXG5cdFx0dGhpcy52MSA9IHYxO1xyXG5cdFx0dGhpcy52MiA9IHYyO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcclxuXHJcblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xyXG5cclxuXHRcdHBvaW50LnNldChcclxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXHJcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApLFxyXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnogKVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnQ7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XHJcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xyXG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcclxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcclxuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tSlNPTigganNvbiApIHtcclxuXHJcblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xyXG5cclxuXHRcdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XHJcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xyXG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUXVhZHJhdGljQmV6aWVyQ3VydmUzIH07XHJcbiIsImltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XHJcbmltcG9ydCB7IENhdG11bGxSb20gfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcblxyXG5jbGFzcyBTcGxpbmVDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnU3BsaW5lQ3VydmUnO1xyXG5cclxuXHRcdHRoaXMucG9pbnRzID0gcG9pbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcclxuXHJcblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcclxuXHRcdGNvbnN0IHAgPSAoIHBvaW50cy5sZW5ndGggLSAxICkgKiB0O1xyXG5cclxuXHRcdGNvbnN0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xyXG5cdFx0Y29uc3Qgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xyXG5cclxuXHRcdGNvbnN0IHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XHJcblx0XHRjb25zdCBwMSA9IHBvaW50c1sgaW50UG9pbnQgXTtcclxuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDEgXTtcclxuXHRcdGNvbnN0IHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcclxuXHJcblx0XHRwb2ludC5zZXQoXHJcblx0XHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLFxyXG5cdFx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLnksIHAxLnksIHAyLnksIHAzLnkgKVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnQ7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucG9pbnRzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XHJcblxyXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS5wb2ludHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xyXG5cdFx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0ZnJvbUpTT04oIGpzb24gKSB7XHJcblxyXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcclxuXHJcblx0XHR0aGlzLnBvaW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XHJcblx0XHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBwb2ludCApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTcGxpbmVDdXJ2ZSB9O1xyXG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4vQ3VydmUuanMnO1xyXG5pbXBvcnQgKiBhcyBDdXJ2ZXMgZnJvbSAnLi4vY3VydmVzL0N1cnZlcy5qcyc7XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICpcdEN1cnZlZCBQYXRoIC0gYSBjdXJ2ZSBwYXRoIGlzIHNpbXBseSBhIGFycmF5IG9mIGNvbm5lY3RlZFxyXG4gKiAgY3VydmVzLCBidXQgcmV0YWlucyB0aGUgYXBpIG9mIGEgY3VydmVcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuY2xhc3MgQ3VydmVQYXRoIGV4dGVuZHMgQ3VydmUge1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnO1xyXG5cclxuXHRcdHRoaXMuY3VydmVzID0gW107XHJcblx0XHR0aGlzLmF1dG9DbG9zZSA9IGZhbHNlOyAvLyBBdXRvbWF0aWNhbGx5IGNsb3NlcyB0aGUgcGF0aFxyXG5cclxuXHR9XHJcblxyXG5cdGFkZCggY3VydmUgKSB7XHJcblxyXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9zZVBhdGgoKSB7XHJcblxyXG5cdFx0Ly8gQWRkIGEgbGluZSBjdXJ2ZSBpZiBzdGFydCBhbmQgZW5kIG9mIGxpbmVzIGFyZSBub3QgY29ubmVjdGVkXHJcblx0XHRjb25zdCBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbIDAgXS5nZXRQb2ludCggMCApO1xyXG5cdFx0Y29uc3QgZW5kUG9pbnQgPSB0aGlzLmN1cnZlc1sgdGhpcy5jdXJ2ZXMubGVuZ3RoIC0gMSBdLmdldFBvaW50KCAxICk7XHJcblxyXG5cdFx0aWYgKCAhIHN0YXJ0UG9pbnQuZXF1YWxzKCBlbmRQb2ludCApICkge1xyXG5cclxuXHRcdFx0Y29uc3QgbGluZVR5cGUgPSAoIHN0YXJ0UG9pbnQuaXNWZWN0b3IyID09PSB0cnVlICkgPyAnTGluZUN1cnZlJyA6ICdMaW5lQ3VydmUzJztcclxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IEN1cnZlc1sgbGluZVR5cGUgXSggZW5kUG9pbnQsIHN0YXJ0UG9pbnQgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBUbyBnZXQgYWNjdXJhdGUgcG9pbnQgd2l0aCByZWZlcmVuY2UgdG9cclxuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXHJcblx0Ly8gZm9sbG93aW5nIGhhcyB0byBiZSBkb25lOlxyXG5cclxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXHJcblx0Ly8gMi4gTG9jYXRlIGFuZCBpZGVudGlmeSB0eXBlIG9mIGN1cnZlXHJcblx0Ly8gMy4gR2V0IHQgZm9yIHRoZSBjdXJ2ZVxyXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxyXG5cclxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XHJcblxyXG5cdFx0Y29uc3QgZCA9IHQgKiB0aGlzLmdldExlbmd0aCgpO1xyXG5cdFx0Y29uc3QgY3VydmVMZW5ndGhzID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcclxuXHRcdGxldCBpID0gMDtcclxuXHJcblx0XHQvLyBUbyB0aGluayBhYm91dCBib3VuZGFyaWVzIHBvaW50cy5cclxuXHJcblx0XHR3aGlsZSAoIGkgPCBjdXJ2ZUxlbmd0aHMubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0aWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBkaWZmID0gY3VydmVMZW5ndGhzWyBpIF0gLSBkO1xyXG5cdFx0XHRcdGNvbnN0IGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xyXG5cdFx0XHRcdGNvbnN0IHUgPSBzZWdtZW50TGVuZ3RoID09PSAwID8gMCA6IDEgLSBkaWZmIC8gc2VnbWVudExlbmd0aDtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGN1cnZlLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpICsrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcclxuXHJcblx0fVxyXG5cclxuXHQvLyBXZSBjYW5ub3QgdXNlIHRoZSBkZWZhdWx0IFRIUkVFLkN1cnZlIGdldFBvaW50KCkgd2l0aCBnZXRMZW5ndGgoKSBiZWNhdXNlIGluXHJcblx0Ly8gVEhSRUUuQ3VydmUsIGdldExlbmd0aCgpIGRlcGVuZHMgb24gZ2V0UG9pbnQoKSBidXQgaW4gVEhSRUUuQ3VydmVQYXRoXHJcblx0Ly8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aFxyXG5cclxuXHRnZXRMZW5ndGgoKSB7XHJcblxyXG5cdFx0Y29uc3QgbGVucyA9IHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XHJcblx0XHRyZXR1cm4gbGVuc1sgbGVucy5sZW5ndGggLSAxIF07XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gY2FjaGVMZW5ndGhzIG11c3QgYmUgcmVjYWxjdWxhdGVkLlxyXG5cdHVwZGF0ZUFyY0xlbmd0aHMoKSB7XHJcblxyXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IG51bGw7XHJcblx0XHR0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxyXG5cdC8vIFdlIGNhbm5vdCBvdmVyd3JpdGUgZ2V0TGVuZ3RocygpIGJlY2F1c2UgVXRvVCBtYXBwaW5nIHVzZXMgaXQuXHJcblxyXG5cdGdldEN1cnZlTGVuZ3RocygpIHtcclxuXHJcblx0XHQvLyBXZSB1c2UgY2FjaGUgdmFsdWVzIGlmIGN1cnZlcyBhbmQgY2FjaGUgYXJyYXkgYXJlIHNhbWUgbGVuZ3RoXHJcblxyXG5cdFx0aWYgKCB0aGlzLmNhY2hlTGVuZ3RocyAmJiB0aGlzLmNhY2hlTGVuZ3Rocy5sZW5ndGggPT09IHRoaXMuY3VydmVzLmxlbmd0aCApIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0IGxlbmd0aCBvZiBzdWItY3VydmVcclxuXHRcdC8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheVxyXG5cclxuXHRcdGNvbnN0IGxlbmd0aHMgPSBbXTtcclxuXHRcdGxldCBzdW1zID0gMDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0c3VtcyArPSB0aGlzLmN1cnZlc1sgaSBdLmdldExlbmd0aCgpO1xyXG5cdFx0XHRsZW5ndGhzLnB1c2goIHN1bXMgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBsZW5ndGhzO1xyXG5cclxuXHRcdHJldHVybiBsZW5ndGhzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zID0gNDAgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHtcclxuXHJcblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBpIC8gZGl2aXNpb25zICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSApIHtcclxuXHJcblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50cyggZGl2aXNpb25zID0gMTIgKSB7XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XHJcblx0XHRsZXQgbGFzdDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGN1cnZlcyA9IHRoaXMuY3VydmVzOyBpIDwgY3VydmVzLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGN1cnZlID0gY3VydmVzWyBpIF07XHJcblx0XHRcdGNvbnN0IHJlc29sdXRpb24gPSBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSA/IGRpdmlzaW9ucyAqIDJcclxuXHRcdFx0XHQ6ICggY3VydmUuaXNMaW5lQ3VydmUgfHwgY3VydmUuaXNMaW5lQ3VydmUzICkgPyAxXHJcblx0XHRcdFx0XHQ6IGN1cnZlLmlzU3BsaW5lQ3VydmUgPyBkaXZpc2lvbnMgKiBjdXJ2ZS5wb2ludHMubGVuZ3RoXHJcblx0XHRcdFx0XHRcdDogZGl2aXNpb25zO1xyXG5cclxuXHRcdFx0Y29uc3QgcHRzID0gY3VydmUuZ2V0UG9pbnRzKCByZXNvbHV0aW9uICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBwb2ludCA9IHB0c1sgaiBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGxhc3QgJiYgbGFzdC5lcXVhbHMoIHBvaW50ICkgKSBjb250aW51ZTsgLy8gZW5zdXJlcyBubyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIGR1cGxpY2F0ZXNcclxuXHJcblx0XHRcdFx0cG9pbnRzLnB1c2goIHBvaW50ICk7XHJcblx0XHRcdFx0bGFzdCA9IHBvaW50O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICYmIHBvaW50cy5sZW5ndGggPiAxICYmICEgcG9pbnRzWyBwb2ludHMubGVuZ3RoIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcclxuXHJcblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGN1cnZlID0gc291cmNlLmN1cnZlc1sgaSBdO1xyXG5cclxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUuY2xvbmUoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmF1dG9DbG9zZSA9IHNvdXJjZS5hdXRvQ2xvc2U7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcclxuXHJcblx0XHRkYXRhLmF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlO1xyXG5cdFx0ZGF0YS5jdXJ2ZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xyXG5cdFx0XHRkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tSlNPTigganNvbiApIHtcclxuXHJcblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xyXG5cclxuXHRcdHRoaXMuYXV0b0Nsb3NlID0ganNvbi5hdXRvQ2xvc2U7XHJcblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IGpzb24uY3VydmVzWyBpIF07XHJcblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGN1cnZlLnR5cGUgXSgpLmZyb21KU09OKCBjdXJ2ZSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgQ3VydmVQYXRoIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBDdXJ2ZVBhdGggfSBmcm9tICcuL0N1cnZlUGF0aC5qcyc7XHJcbmltcG9ydCB7IEVsbGlwc2VDdXJ2ZSB9IGZyb20gJy4uL2N1cnZlcy9FbGxpcHNlQ3VydmUuanMnO1xyXG5pbXBvcnQgeyBTcGxpbmVDdXJ2ZSB9IGZyb20gJy4uL2N1cnZlcy9TcGxpbmVDdXJ2ZS5qcyc7XHJcbmltcG9ydCB7IEN1YmljQmV6aWVyQ3VydmUgfSBmcm9tICcuLi9jdXJ2ZXMvQ3ViaWNCZXppZXJDdXJ2ZS5qcyc7XHJcbmltcG9ydCB7IFF1YWRyYXRpY0JlemllckN1cnZlIH0gZnJvbSAnLi4vY3VydmVzL1F1YWRyYXRpY0JlemllckN1cnZlLmpzJztcclxuaW1wb3J0IHsgTGluZUN1cnZlIH0gZnJvbSAnLi4vY3VydmVzL0xpbmVDdXJ2ZS5qcyc7XHJcblxyXG5jbGFzcyBQYXRoIGV4dGVuZHMgQ3VydmVQYXRoIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBvaW50cyApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdQYXRoJztcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQb2ludCA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdFx0aWYgKCBwb2ludHMgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XHJcblxyXG5cdFx0dGhpcy5tb3ZlVG8oIHBvaW50c1sgMCBdLngsIHBvaW50c1sgMCBdLnkgKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMubGluZVRvKCBwb2ludHNbIGkgXS54LCBwb2ludHNbIGkgXS55ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1vdmVUbyggeCwgeSApIHtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRsaW5lVG8oIHgsIHkgKSB7XHJcblxyXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgTGluZUN1cnZlKCB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLCBuZXcgVmVjdG9yMiggeCwgeSApICk7XHJcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcclxuXHJcblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBRdWFkcmF0aWNCZXppZXJDdXJ2ZShcclxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcclxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSxcclxuXHRcdFx0bmV3IFZlY3RvcjIoIGFYLCBhWSApXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRiZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xyXG5cclxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IEN1YmljQmV6aWVyQ3VydmUoXHJcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXHJcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1AxeCwgYUNQMXkgKSxcclxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUDJ4LCBhQ1AyeSApLFxyXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIGFYLCBhWSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNwbGluZVRocnUoIHB0cyAvKkFycmF5IG9mIFZlY3RvciovICkge1xyXG5cclxuXHRcdGNvbnN0IG5wdHMgPSBbIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCkgXS5jb25jYXQoIHB0cyApO1xyXG5cclxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7XHJcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHB0c1sgcHRzLmxlbmd0aCAtIDEgXSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xyXG5cclxuXHRcdGNvbnN0IHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcclxuXHRcdGNvbnN0IHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcclxuXHJcblx0XHR0aGlzLmFic2FyYyggYVggKyB4MCwgYVkgKyB5MCwgYVJhZGl1cyxcclxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGFic2FyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xyXG5cclxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZWxsaXBzZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XHJcblxyXG5cdFx0Y29uc3QgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xyXG5cdFx0Y29uc3QgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xyXG5cclxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVggKyB4MCwgYVkgKyB5MCwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YWJzZWxsaXBzZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XHJcblxyXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xyXG5cclxuXHRcdGlmICggdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdC8vIGlmIGEgcHJldmlvdXMgY3VydmUgaXMgcHJlc2VudCwgYXR0ZW1wdCB0byBqb2luXHJcblx0XHRcdGNvbnN0IGZpcnN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMCApO1xyXG5cclxuXHRcdFx0aWYgKCAhIGZpcnN0UG9pbnQuZXF1YWxzKCB0aGlzLmN1cnJlbnRQb2ludCApICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLmxpbmVUbyggZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcclxuXHJcblx0XHRjb25zdCBsYXN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMSApO1xyXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHNvdXJjZS5jdXJyZW50UG9pbnQgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEuY3VycmVudFBvaW50ID0gdGhpcy5jdXJyZW50UG9pbnQudG9BcnJheSgpO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG5cdGZyb21KU09OKCBqc29uICkge1xyXG5cclxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgUGF0aCB9O1xyXG4iLCJpbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xyXG5cclxuY2xhc3MgTGF0aGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFsgbmV3IFZlY3RvcjIoIDAsIC0gMC41ICksIG5ldyBWZWN0b3IyKCAwLjUsIDAgKSwgbmV3IFZlY3RvcjIoIDAsIDAuNSApIF0sIHNlZ21lbnRzID0gMTIsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRwb2ludHM6IHBvaW50cyxcclxuXHRcdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxyXG5cdFx0XHRwaGlTdGFydDogcGhpU3RhcnQsXHJcblx0XHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXHJcblx0XHR9O1xyXG5cclxuXHRcdHNlZ21lbnRzID0gTWF0aC5mbG9vciggc2VnbWVudHMgKTtcclxuXHJcblx0XHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXHJcblxyXG5cdFx0cGhpTGVuZ3RoID0gY2xhbXAoIHBoaUxlbmd0aCwgMCwgTWF0aC5QSSAqIDIgKTtcclxuXHJcblx0XHQvLyBidWZmZXJzXHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cdFx0Y29uc3QgaW5pdE5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHJcblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdFx0Y29uc3QgaW52ZXJzZVNlZ21lbnRzID0gMS4wIC8gc2VnbWVudHM7XHJcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xyXG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IGN1ck5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCBwcmV2Tm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGxldCBkeCA9IDA7XHJcblx0XHRsZXQgZHkgPSAwO1xyXG5cclxuXHRcdC8vIHByZS1jb21wdXRlIG5vcm1hbHMgZm9yIGluaXRpYWwgXCJtZXJpZGlhblwiXHJcblxyXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcclxuXHJcblx0XHRcdHN3aXRjaCAoIGogKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgMDpcdFx0XHRcdC8vIHNwZWNpYWwgaGFuZGxpbmcgZm9yIDFzdCB2ZXJ0ZXggb24gcGF0aFxyXG5cclxuXHRcdFx0XHRcdGR4ID0gcG9pbnRzWyBqICsgMSBdLnggLSBwb2ludHNbIGogXS54O1xyXG5cdFx0XHRcdFx0ZHkgPSBwb2ludHNbIGogKyAxIF0ueSAtIHBvaW50c1sgaiBdLnk7XHJcblxyXG5cdFx0XHRcdFx0bm9ybWFsLnggPSBkeSAqIDEuMDtcclxuXHRcdFx0XHRcdG5vcm1hbC55ID0gLSBkeDtcclxuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XHJcblxyXG5cdFx0XHRcdFx0cHJldk5vcm1hbC5jb3B5KCBub3JtYWwgKTtcclxuXHJcblx0XHRcdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdFx0aW5pdE5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICggcG9pbnRzLmxlbmd0aCAtIDEgKTpcdC8vIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGxhc3QgVmVydGV4IG9uIHBhdGhcclxuXHJcblx0XHRcdFx0XHRpbml0Tm9ybWFscy5wdXNoKCBwcmV2Tm9ybWFsLngsIHByZXZOb3JtYWwueSwgcHJldk5vcm1hbC56ICk7XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGRlZmF1bHQ6XHRcdFx0Ly8gZGVmYXVsdCBoYW5kbGluZyBmb3IgYWxsIHZlcnRpY2VzIGluIGJldHdlZW5cclxuXHJcblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcclxuXHRcdFx0XHRcdGR5ID0gcG9pbnRzWyBqICsgMSBdLnkgLSBwb2ludHNbIGogXS55O1xyXG5cclxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XHJcblx0XHRcdFx0XHRub3JtYWwueSA9IC0gZHg7XHJcblx0XHRcdFx0XHRub3JtYWwueiA9IGR5ICogMC4wO1xyXG5cclxuXHRcdFx0XHRcdGN1ck5vcm1hbC5jb3B5KCBub3JtYWwgKTtcclxuXHJcblx0XHRcdFx0XHRub3JtYWwueCArPSBwcmV2Tm9ybWFsLng7XHJcblx0XHRcdFx0XHRub3JtYWwueSArPSBwcmV2Tm9ybWFsLnk7XHJcblx0XHRcdFx0XHRub3JtYWwueiArPSBwcmV2Tm9ybWFsLno7XHJcblxyXG5cdFx0XHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRcdGluaXROb3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcclxuXHJcblx0XHRcdFx0XHRwcmV2Tm9ybWFsLmNvcHkoIGN1ck5vcm1hbCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgdXZzIGFuZCBub3JtYWxzXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xyXG5cclxuXHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHBoaSApO1xyXG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggcGhpICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gKCBwb2ludHMubGVuZ3RoIC0gMSApOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHRcdFx0dmVydGV4LnggPSBwb2ludHNbIGogXS54ICogc2luO1xyXG5cdFx0XHRcdHZlcnRleC55ID0gcG9pbnRzWyBqIF0ueTtcclxuXHRcdFx0XHR2ZXJ0ZXgueiA9IHBvaW50c1sgaiBdLnggKiBjb3M7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdFx0dXYueCA9IGkgLyBzZWdtZW50cztcclxuXHRcdFx0XHR1di55ID0gaiAvICggcG9pbnRzLmxlbmd0aCAtIDEgKTtcclxuXHJcblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcclxuXHJcblx0XHRcdFx0Ly8gbm9ybWFsXHJcblxyXG5cdFx0XHRcdGNvbnN0IHggPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBzaW47XHJcblx0XHRcdFx0Y29uc3QgeSA9IGluaXROb3JtYWxzWyAzICogaiArIDEgXTtcclxuXHRcdFx0XHRjb25zdCB6ID0gaW5pdE5vcm1hbHNbIDMgKiBqICsgMCBdICogY29zO1xyXG5cclxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHgsIHksIHogKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgKCBwb2ludHMubGVuZ3RoIC0gMSApOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBiYXNlID0gaiArIGkgKiBwb2ludHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRjb25zdCBhID0gYmFzZTtcclxuXHRcdFx0XHRjb25zdCBiID0gYmFzZSArIHBvaW50cy5sZW5ndGg7XHJcblx0XHRcdFx0Y29uc3QgYyA9IGJhc2UgKyBwb2ludHMubGVuZ3RoICsgMTtcclxuXHRcdFx0XHRjb25zdCBkID0gYmFzZSArIDE7XHJcblxyXG5cdFx0XHRcdC8vIGZhY2VzXHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYywgZCwgYiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IExhdGhlR2VvbWV0cnkoIGRhdGEucG9pbnRzLCBkYXRhLnNlZ21lbnRzLCBkYXRhLnBoaVN0YXJ0LCBkYXRhLnBoaUxlbmd0aCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgTGF0aGVHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vZXh0cmFzL2NvcmUvUGF0aC5qcyc7XHJcbmltcG9ydCB7IExhdGhlR2VvbWV0cnkgfSBmcm9tICcuL0xhdGhlR2VvbWV0cnkuanMnO1xyXG5cclxuY2xhc3MgQ2Fwc3VsZUdlb21ldHJ5IGV4dGVuZHMgTGF0aGVHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBsZW5ndGggPSAxLCBjYXBTZWdtZW50cyA9IDQsIHJhZGlhbFNlZ21lbnRzID0gOCApIHtcclxuXHJcblx0XHRjb25zdCBwYXRoID0gbmV3IFBhdGgoKTtcclxuXHRcdHBhdGguYWJzYXJjKCAwLCAtIGxlbmd0aCAvIDIsIHJhZGl1cywgTWF0aC5QSSAqIDEuNSwgMCApO1xyXG5cdFx0cGF0aC5hYnNhcmMoIDAsIGxlbmd0aCAvIDIsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDAuNSApO1xyXG5cclxuXHRcdHN1cGVyKCBwYXRoLmdldFBvaW50cyggY2FwU2VnbWVudHMgKSwgcmFkaWFsU2VnbWVudHMgKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ2Fwc3VsZUdlb21ldHJ5JztcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0XHRsZW5ndGg6IGxlbmd0aCxcclxuXHRcdFx0Y2FwU2VnbWVudHM6IGNhcFNlZ21lbnRzLFxyXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IENhcHN1bGVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEubGVuZ3RoLCBkYXRhLmNhcFNlZ21lbnRzLCBkYXRhLnJhZGlhbFNlZ21lbnRzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENhcHN1bGVHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcblxyXG5jbGFzcyBDaXJjbGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHNlZ21lbnRzID0gMzIsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0NpcmNsZUdlb21ldHJ5JztcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXHJcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdFx0fTtcclxuXHJcblx0XHRzZWdtZW50cyA9IE1hdGgubWF4KCAzLCBzZWdtZW50cyApO1xyXG5cclxuXHRcdC8vIGJ1ZmZlcnNcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gW107XHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xyXG5cdFx0Y29uc3QgdXZzID0gW107XHJcblxyXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdFx0Ly8gY2VudGVyIHBvaW50XHJcblxyXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xyXG5cdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XHJcblx0XHR1dnMucHVzaCggMC41LCAwLjUgKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgcyA9IDAsIGkgPSAzOyBzIDw9IHNlZ21lbnRzOyBzICsrLCBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XHJcblx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XHJcblxyXG5cdFx0XHQvLyB1dnNcclxuXHJcblx0XHRcdHV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyO1xyXG5cdFx0XHR1di55ID0gKCB2ZXJ0aWNlc1sgaSArIDEgXSAvIHJhZGl1cyArIDEgKSAvIDI7XHJcblxyXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBpbmRpY2VzXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgMCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IENpcmNsZUdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5zZWdtZW50cywgZGF0YS50aGV0YVN0YXJ0LCBkYXRhLnRoZXRhTGVuZ3RoICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBDaXJjbGVHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcblxyXG5jbGFzcyBDeWxpbmRlckdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcmFkaXVzVG9wID0gMSwgcmFkaXVzQm90dG9tID0gMSwgaGVpZ2h0ID0gMSwgcmFkaWFsU2VnbWVudHMgPSAzMiwgaGVpZ2h0U2VnbWVudHMgPSAxLCBvcGVuRW5kZWQgPSBmYWxzZSwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcclxuXHRcdFx0cmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sXHJcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxyXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXHJcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xyXG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xyXG5cclxuXHRcdC8vIGJ1ZmZlcnNcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gW107XHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xyXG5cdFx0Y29uc3QgdXZzID0gW107XHJcblxyXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHRcdGxldCBpbmRleCA9IDA7XHJcblx0XHRjb25zdCBpbmRleEFycmF5ID0gW107XHJcblx0XHRjb25zdCBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcclxuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcclxuXHJcblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeVxyXG5cclxuXHRcdGdlbmVyYXRlVG9yc28oKTtcclxuXHJcblx0XHRpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHJhZGl1c1RvcCA+IDAgKSBnZW5lcmF0ZUNhcCggdHJ1ZSApO1xyXG5cdFx0XHRpZiAoIHJhZGl1c0JvdHRvbSA+IDAgKSBnZW5lcmF0ZUNhcCggZmFsc2UgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlVG9yc28oKSB7XHJcblxyXG5cdFx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcclxuXHRcdFx0Y29uc3Qgc2xvcGUgPSAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApIC8gaGVpZ2h0O1xyXG5cclxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IHkgPSAwOyB5IDw9IGhlaWdodFNlZ21lbnRzOyB5ICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBpbmRleFJvdyA9IFtdO1xyXG5cclxuXHRcdFx0XHRjb25zdCB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xyXG5cclxuXHRcdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgY3VycmVudCByb3dcclxuXHJcblx0XHRcdFx0Y29uc3QgcmFkaXVzID0gdiAqICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgKyByYWRpdXNUb3A7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xyXG5cdFx0XHRcdFx0Y29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcclxuXHJcblx0XHRcdFx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xyXG5cdFx0XHRcdFx0dmVydGV4LnkgPSAtIHYgKiBoZWlnaHQgKyBoYWxmSGVpZ2h0O1xyXG5cdFx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcclxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdFx0XHQvLyBub3JtYWxcclxuXHJcblx0XHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XHJcblx0XHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcclxuXHJcblx0XHRcdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0XHRcdHV2cy5wdXNoKCB1LCAxIC0gdiApO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNhdmUgaW5kZXggb2YgdmVydGV4IGluIHJlc3BlY3RpdmUgcm93XHJcblxyXG5cdFx0XHRcdFx0aW5kZXhSb3cucHVzaCggaW5kZXggKysgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBub3cgc2F2ZSB2ZXJ0aWNlcyBvZiB0aGUgcm93IGluIG91ciBpbmRleCBhcnJheVxyXG5cclxuXHRcdFx0XHRpbmRleEFycmF5LnB1c2goIGluZGV4Um93ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IHkgPSAwOyB5IDwgaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleEFycmF5WyB5IF1bIHggXTtcclxuXHRcdFx0XHRcdGNvbnN0IGIgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4IF07XHJcblx0XHRcdFx0XHRjb25zdCBjID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCArIDEgXTtcclxuXHRcdFx0XHRcdGNvbnN0IGQgPSBpbmRleEFycmF5WyB5IF1bIHggKyAxIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gZmFjZXNcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJhZGl1c1RvcCA+IDAgfHwgeSAhPT0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdFx0XHRncm91cENvdW50ICs9IDM7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggcmFkaXVzQm90dG9tID4gMCB8fCB5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcclxuXHRcdFx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcclxuXHJcblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCAwICk7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcclxuXHJcblx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVDYXAoIHRvcCApIHtcclxuXHJcblx0XHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjZW50ZXIgdmVydGV4XHJcblx0XHRcdGNvbnN0IGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcclxuXHJcblx0XHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcclxuXHJcblx0XHRcdGNvbnN0IHJhZGl1cyA9ICggdG9wID09PSB0cnVlICkgPyByYWRpdXNUb3AgOiByYWRpdXNCb3R0b207XHJcblx0XHRcdGNvbnN0IHNpZ24gPSAoIHRvcCA9PT0gdHJ1ZSApID8gMSA6IC0gMTtcclxuXHJcblx0XHRcdC8vIGZpcnN0IHdlIGdlbmVyYXRlIHRoZSBjZW50ZXIgdmVydGV4IGRhdGEgb2YgdGhlIGNhcC5cclxuXHRcdFx0Ly8gYmVjYXVzZSB0aGUgZ2VvbWV0cnkgbmVlZHMgb25lIHNldCBvZiB1dnMgcGVyIGZhY2UsXHJcblx0XHRcdC8vIHdlIG11c3QgZ2VuZXJhdGUgYSBjZW50ZXIgdmVydGV4IHBlciBmYWNlL3NlZ21lbnRcclxuXHJcblx0XHRcdGZvciAoIGxldCB4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcclxuXHJcblx0XHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XHJcblxyXG5cdFx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcclxuXHJcblx0XHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdFx0dXZzLnB1c2goIDAuNSwgMC41ICk7XHJcblxyXG5cdFx0XHRcdC8vIGluY3JlYXNlIGluZGV4XHJcblxyXG5cdFx0XHRcdGluZGV4ICsrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2VudGVyIHZlcnRleFxyXG5cdFx0XHRjb25zdCBjZW50ZXJJbmRleEVuZCA9IGluZGV4O1xyXG5cclxuXHRcdFx0Ly8gbm93IHdlIGdlbmVyYXRlIHRoZSBzdXJyb3VuZGluZyB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XHJcblx0XHRcdFx0Y29uc3QgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xyXG5cclxuXHRcdFx0XHRjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKCB0aGV0YSApO1xyXG5cdFx0XHRcdGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XHJcblxyXG5cdFx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xyXG5cdFx0XHRcdHZlcnRleC55ID0gaGFsZkhlaWdodCAqIHNpZ247XHJcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XHJcblxyXG5cdFx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcclxuXHJcblx0XHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdFx0dXYueCA9ICggY29zVGhldGEgKiAwLjUgKSArIDAuNTtcclxuXHRcdFx0XHR1di55ID0gKCBzaW5UaGV0YSAqIDAuNSAqIHNpZ24gKSArIDAuNTtcclxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xyXG5cclxuXHRcdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxyXG5cclxuXHRcdFx0XHRpbmRleCArKztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGdlbmVyYXRlIGluZGljZXNcclxuXHJcblx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBjID0gY2VudGVySW5kZXhTdGFydCArIHg7XHJcblx0XHRcdFx0Y29uc3QgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcclxuXHJcblx0XHRcdFx0aWYgKCB0b3AgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZmFjZSB0b3BcclxuXHJcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZmFjZSBib3R0b21cclxuXHJcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcclxuXHJcblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApO1xyXG5cclxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXHJcblxyXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBDeWxpbmRlckdlb21ldHJ5KCBkYXRhLnJhZGl1c1RvcCwgZGF0YS5yYWRpdXNCb3R0b20sIGRhdGEuaGVpZ2h0LCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzLCBkYXRhLm9wZW5FbmRlZCwgZGF0YS50aGV0YVN0YXJ0LCBkYXRhLnRoZXRhTGVuZ3RoICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBDeWxpbmRlckdlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEN5bGluZGVyR2VvbWV0cnkgfSBmcm9tICcuL0N5bGluZGVyR2VvbWV0cnkuanMnO1xyXG5cclxuY2xhc3MgQ29uZUdlb21ldHJ5IGV4dGVuZHMgQ3lsaW5kZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDMyLCBoZWlnaHRTZWdtZW50cyA9IDEsIG9wZW5FbmRlZCA9IGZhbHNlLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcclxuXHJcblx0XHRzdXBlciggMCwgcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdDb25lR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxyXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXHJcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBDb25lR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmhlaWdodCwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5vcGVuRW5kZWQsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb25lR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5cclxuY2xhc3MgUG9seWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggdmVydGljZXMgPSBbXSwgaW5kaWNlcyA9IFtdLCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25HZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHR2ZXJ0aWNlczogdmVydGljZXMsXHJcblx0XHRcdGluZGljZXM6IGluZGljZXMsXHJcblx0XHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXHJcblxyXG5cdFx0Y29uc3QgdmVydGV4QnVmZmVyID0gW107XHJcblx0XHRjb25zdCB1dkJ1ZmZlciA9IFtdO1xyXG5cclxuXHRcdC8vIHRoZSBzdWJkaXZpc2lvbiBjcmVhdGVzIHRoZSB2ZXJ0ZXggYnVmZmVyIGRhdGFcclxuXHJcblx0XHRzdWJkaXZpZGUoIGRldGFpbCApO1xyXG5cclxuXHRcdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xyXG5cclxuXHRcdGFwcGx5UmFkaXVzKCByYWRpdXMgKTtcclxuXHJcblx0XHQvLyBmaW5hbGx5LCBjcmVhdGUgdGhlIHV2IGRhdGFcclxuXHJcblx0XHRnZW5lcmF0ZVVWcygpO1xyXG5cclxuXHRcdC8vIGJ1aWxkIG5vbi1pbmRleGVkIGdlb21ldHJ5XHJcblxyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLnNsaWNlKCksIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XHJcblxyXG5cdFx0aWYgKCBkZXRhaWwgPT09IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHNcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xyXG5cclxuXHRcdGZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYSA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRcdGNvbnN0IGIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCBjID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdC8vIGl0ZXJhdGUgb3ZlciBhbGwgZmFjZXMgYW5kIGFwcGx5IGEgc3ViZGl2aXNpb24gd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsIHZhbHVlXHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXHJcblxyXG5cdFx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTtcclxuXHRcdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KCBpbmRpY2VzWyBpICsgMSBdLCBiICk7XHJcblx0XHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDIgXSwgYyApO1xyXG5cclxuXHRcdFx0XHQvLyBwZXJmb3JtIHN1YmRpdmlzaW9uXHJcblxyXG5cdFx0XHRcdHN1YmRpdmlkZUZhY2UoIGEsIGIsIGMsIGRldGFpbCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjb2xzID0gZGV0YWlsICsgMTtcclxuXHJcblx0XHRcdC8vIHdlIHVzZSB0aGlzIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgYXMgYSBkYXRhIHN0cnVjdHVyZSBmb3IgY3JlYXRpbmcgdGhlIHN1YmRpdmlzaW9uXHJcblxyXG5cdFx0XHRjb25zdCB2ID0gW107XHJcblxyXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdHZbIGkgXSA9IFtdO1xyXG5cclxuXHRcdFx0XHRjb25zdCBhaiA9IGEuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xyXG5cdFx0XHRcdGNvbnN0IGJqID0gYi5jbG9uZSgpLmxlcnAoIGMsIGkgLyBjb2xzICk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHJvd3MgPSBjb2xzIC0gaTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJvd3M7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBqID09PSAwICYmIGkgPT09IGNvbHMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqLmNsb25lKCkubGVycCggYmosIGogLyByb3dzICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgMiAqICggY29scyAtIGkgKSAtIDE7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xyXG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcclxuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrIF0gKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7XHJcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcclxuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFwcGx5UmFkaXVzKCByYWRpdXMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xyXG5cdFx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xyXG5cdFx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdO1xyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIHJhZGl1cyApO1xyXG5cclxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0gPSB2ZXJ0ZXgueDtcclxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0gPSB2ZXJ0ZXgueTtcclxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gPSB2ZXJ0ZXguejtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XHJcblxyXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcclxuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcclxuXHRcdFx0XHR2ZXJ0ZXgueiA9IHZlcnRleEJ1ZmZlclsgaSArIDIgXTtcclxuXHJcblx0XHRcdFx0Y29uc3QgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XHJcblx0XHRcdFx0Y29uc3QgdiA9IGluY2xpbmF0aW9uKCB2ZXJ0ZXggKSAvIE1hdGguUEkgKyAwLjU7XHJcblx0XHRcdFx0dXZCdWZmZXIucHVzaCggdSwgMSAtIHYgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvcnJlY3RVVnMoKTtcclxuXHJcblx0XHRcdGNvcnJlY3RTZWFtKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RTZWFtKCkge1xyXG5cclxuXHRcdFx0Ly8gaGFuZGxlIGNhc2Ugd2hlbiBmYWNlIHN0cmFkZGxlcyB0aGUgc2VhbSwgc2VlICMzMjY5XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB1dkJ1ZmZlci5sZW5ndGg7IGkgKz0gNiApIHtcclxuXHJcblx0XHRcdFx0Ly8gdXYgZGF0YSBvZiBhIHNpbmdsZSBmYWNlXHJcblxyXG5cdFx0XHRcdGNvbnN0IHgwID0gdXZCdWZmZXJbIGkgKyAwIF07XHJcblx0XHRcdFx0Y29uc3QgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcclxuXHRcdFx0XHRjb25zdCB4MiA9IHV2QnVmZmVyWyBpICsgNCBdO1xyXG5cclxuXHRcdFx0XHRjb25zdCBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xyXG5cdFx0XHRcdGNvbnN0IG1pbiA9IE1hdGgubWluKCB4MCwgeDEsIHgyICk7XHJcblxyXG5cdFx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcclxuXHJcblx0XHRcdFx0aWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggeDAgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDAgXSArPSAxO1xyXG5cdFx0XHRcdFx0aWYgKCB4MSA8IDAuMiApIHV2QnVmZmVyWyBpICsgMiBdICs9IDE7XHJcblx0XHRcdFx0XHRpZiAoIHgyIDwgMC4yICkgdXZCdWZmZXJbIGkgKyA0IF0gKz0gMTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwdXNoVmVydGV4KCB2ZXJ0ZXggKSB7XHJcblxyXG5cdFx0XHR2ZXJ0ZXhCdWZmZXIucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRWZXJ0ZXhCeUluZGV4KCBpbmRleCwgdmVydGV4ICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc3RyaWRlID0gaW5kZXggKiAzO1xyXG5cclxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xyXG5cdFx0XHR2ZXJ0ZXgueSA9IHZlcnRpY2VzWyBzdHJpZGUgKyAxIF07XHJcblx0XHRcdHZlcnRleC56ID0gdmVydGljZXNbIHN0cmlkZSArIDIgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcclxuXHJcblx0XHRcdGNvbnN0IGEgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCBiID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdFx0Y29uc3QgYyA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0XHRjb25zdCBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0XHRjb25zdCB1dkEgPSBuZXcgVmVjdG9yMigpO1xyXG5cdFx0XHRjb25zdCB1dkIgPSBuZXcgVmVjdG9yMigpO1xyXG5cdFx0XHRjb25zdCB1dkMgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xyXG5cclxuXHRcdFx0XHRhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApO1xyXG5cdFx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XHJcblx0XHRcdFx0Yy5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDYgXSwgdmVydGV4QnVmZmVyWyBpICsgNyBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA4IF0gKTtcclxuXHJcblx0XHRcdFx0dXZBLnNldCggdXZCdWZmZXJbIGogKyAwIF0sIHV2QnVmZmVyWyBqICsgMSBdICk7XHJcblx0XHRcdFx0dXZCLnNldCggdXZCdWZmZXJbIGogKyAyIF0sIHV2QnVmZmVyWyBqICsgMyBdICk7XHJcblx0XHRcdFx0dXZDLnNldCggdXZCdWZmZXJbIGogKyA0IF0sIHV2QnVmZmVyWyBqICsgNSBdICk7XHJcblxyXG5cdFx0XHRcdGNlbnRyb2lkLmNvcHkoIGEgKS5hZGQoIGIgKS5hZGQoIGMgKS5kaXZpZGVTY2FsYXIoIDMgKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcclxuXHJcblx0XHRcdFx0Y29ycmVjdFVWKCB1dkEsIGogKyAwLCBhLCBhemkgKTtcclxuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xyXG5cdFx0XHRcdGNvcnJlY3RVViggdXZDLCBqICsgNCwgYywgYXppICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RVViggdXYsIHN0cmlkZSwgdmVjdG9yLCBhemltdXRoICkge1xyXG5cclxuXHRcdFx0aWYgKCAoIGF6aW11dGggPCAwICkgJiYgKCB1di54ID09PSAxICkgKSB7XHJcblxyXG5cdFx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IHV2LnggLSAxO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCAoIHZlY3Rvci54ID09PSAwICkgJiYgKCB2ZWN0b3IueiA9PT0gMCApICkge1xyXG5cclxuXHRcdFx0XHR1dkJ1ZmZlclsgc3RyaWRlIF0gPSBhemltdXRoIC8gMiAvIE1hdGguUEkgKyAwLjU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzLCBjb3VudGVyLWNsb2Nrd2lzZSB3aGVuIGxvb2tpbmcgZnJvbSBhYm92ZS5cclxuXHJcblx0XHRmdW5jdGlvbiBhemltdXRoKCB2ZWN0b3IgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gTWF0aC5hdGFuMiggdmVjdG9yLnosIC0gdmVjdG9yLnggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vIEFuZ2xlIGFib3ZlIHRoZSBYWiBwbGFuZS5cclxuXHJcblx0XHRmdW5jdGlvbiBpbmNsaW5hdGlvbiggdmVjdG9yICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQb2x5aGVkcm9uR2VvbWV0cnkoIGRhdGEudmVydGljZXMsIGRhdGEuaW5kaWNlcywgZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlscyApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBQb2x5aGVkcm9uR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgUG9seWhlZHJvbkdlb21ldHJ5IH0gZnJvbSAnLi9Qb2x5aGVkcm9uR2VvbWV0cnkuanMnO1xyXG5cclxuY2xhc3MgRG9kZWNhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcclxuXHJcblx0XHRjb25zdCB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XHJcblx0XHRjb25zdCByID0gMSAvIHQ7XHJcblxyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXHJcblxyXG5cdFx0XHQvLyAowrExLCDCsTEsIMKxMSlcclxuXHRcdFx0LSAxLCAtIDEsIC0gMSxcdC0gMSwgLSAxLCAxLFxyXG5cdFx0XHQtIDEsIDEsIC0gMSwgLSAxLCAxLCAxLFxyXG5cdFx0XHQxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLFxyXG5cdFx0XHQxLCAxLCAtIDEsIDEsIDEsIDEsXHJcblxyXG5cdFx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxyXG5cdFx0XHQwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxyXG5cdFx0XHQwLCByLCAtIHQsIDAsIHIsIHQsXHJcblxyXG5cdFx0XHQvLyAowrExL8+GLCDCsc+GLCAwKVxyXG5cdFx0XHQtIHIsIC0gdCwgMCwgLSByLCB0LCAwLFxyXG5cdFx0XHRyLCAtIHQsIDAsIHIsIHQsIDAsXHJcblxyXG5cdFx0XHQvLyAowrHPhiwgMCwgwrExL8+GKVxyXG5cdFx0XHQtIHQsIDAsIC0gciwgdCwgMCwgLSByLFxyXG5cdFx0XHQtIHQsIDAsIHIsIHQsIDAsIHJcclxuXHRcdF07XHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcclxuXHRcdFx0MywgMTEsIDcsIFx0MywgNywgMTUsIFx0MywgMTUsIDEzLFxyXG5cdFx0XHQ3LCAxOSwgMTcsIFx0NywgMTcsIDYsIFx0NywgNiwgMTUsXHJcblx0XHRcdDE3LCA0LCA4LCBcdDE3LCA4LCAxMCwgXHQxNywgMTAsIDYsXHJcblx0XHRcdDgsIDAsIDE2LCBcdDgsIDE2LCAyLCBcdDgsIDIsIDEwLFxyXG5cdFx0XHQwLCAxMiwgMSwgXHQwLCAxLCAxOCwgXHQwLCAxOCwgMTYsXHJcblx0XHRcdDYsIDEwLCAyLCBcdDYsIDIsIDEzLCBcdDYsIDEzLCAxNSxcclxuXHRcdFx0MiwgMTYsIDE4LCBcdDIsIDE4LCAzLCBcdDIsIDMsIDEzLFxyXG5cdFx0XHQxOCwgMSwgOSwgXHQxOCwgOSwgMTEsIFx0MTgsIDExLCAzLFxyXG5cdFx0XHQ0LCAxNCwgMTIsIFx0NCwgMTIsIDAsIFx0NCwgMCwgOCxcclxuXHRcdFx0MTEsIDksIDUsIFx0MTEsIDUsIDE5LCBcdDExLCAxOSwgNyxcclxuXHRcdFx0MTksIDUsIDE0LCBcdDE5LCAxNCwgNCwgXHQxOSwgNCwgMTcsXHJcblx0XHRcdDEsIDEyLCAxNCwgXHQxLCAxNCwgNSwgXHQxLCA1LCA5XHJcblx0XHRdO1xyXG5cclxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdGRldGFpbDogZGV0YWlsXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IERvZGVjYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IERvZGVjYWhlZHJvbkdlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IERFRzJSQUQgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi4vbWF0aC9UcmlhbmdsZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY29uc3QgX3YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9ub3JtYWwgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF90cmlhbmdsZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFRyaWFuZ2xlKCk7XHJcblxyXG5jbGFzcyBFZGdlc0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsLCB0aHJlc2hvbGRBbmdsZSA9IDEgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnRWRnZXNHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnksXHJcblx0XHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoIGdlb21ldHJ5ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Y29uc3QgcHJlY2lzaW9uUG9pbnRzID0gNDtcclxuXHRcdFx0Y29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTtcclxuXHRcdFx0Y29uc3QgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIERFRzJSQUQgKiB0aHJlc2hvbGRBbmdsZSApO1xyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXhBdHRyID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcclxuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XHJcblx0XHRcdGNvbnN0IGluZGV4Q291bnQgPSBpbmRleEF0dHIgPyBpbmRleEF0dHIuY291bnQgOiBwb3NpdGlvbkF0dHIuY291bnQ7XHJcblxyXG5cdFx0XHRjb25zdCBpbmRleEFyciA9IFsgMCwgMCwgMCBdO1xyXG5cdFx0XHRjb25zdCB2ZXJ0S2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xyXG5cdFx0XHRjb25zdCBoYXNoZXMgPSBuZXcgQXJyYXkoIDMgKTtcclxuXHJcblx0XHRcdGNvbnN0IGVkZ2VEYXRhID0ge307XHJcblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGluZGV4Q291bnQ7IGkgKz0gMyApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBpbmRleEF0dHIgKSB7XHJcblxyXG5cdFx0XHRcdFx0aW5kZXhBcnJbIDAgXSA9IGluZGV4QXR0ci5nZXRYKCBpICk7XHJcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAxICk7XHJcblx0XHRcdFx0XHRpbmRleEFyclsgMiBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAyICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0aW5kZXhBcnJbIDAgXSA9IGk7XHJcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaSArIDE7XHJcblx0XHRcdFx0XHRpbmRleEFyclsgMiBdID0gaSArIDI7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y29uc3QgeyBhLCBiLCBjIH0gPSBfdHJpYW5nbGU7XHJcblx0XHRcdFx0YS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAwIF0gKTtcclxuXHRcdFx0XHRiLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXhBcnJbIDEgXSApO1xyXG5cdFx0XHRcdGMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyLCBpbmRleEFyclsgMiBdICk7XHJcblx0XHRcdFx0X3RyaWFuZ2xlLmdldE5vcm1hbCggX25vcm1hbCApO1xyXG5cclxuXHRcdFx0XHQvLyBjcmVhdGUgaGFzaGVzIGZvciB0aGUgZWRnZSBmcm9tIHRoZSB2ZXJ0aWNlc1xyXG5cdFx0XHRcdGhhc2hlc1sgMCBdID0gYCR7IE1hdGgucm91bmQoIGEueCAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYS55ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBhLnogKiBwcmVjaXNpb24gKSB9YDtcclxuXHRcdFx0XHRoYXNoZXNbIDEgXSA9IGAkeyBNYXRoLnJvdW5kKCBiLnggKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGIueSAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYi56ICogcHJlY2lzaW9uICkgfWA7XHJcblx0XHRcdFx0aGFzaGVzWyAyIF0gPSBgJHsgTWF0aC5yb3VuZCggYy54ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBjLnkgKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGMueiAqIHByZWNpc2lvbiApIH1gO1xyXG5cclxuXHRcdFx0XHQvLyBza2lwIGRlZ2VuZXJhdGUgdHJpYW5nbGVzXHJcblx0XHRcdFx0aWYgKCBoYXNoZXNbIDAgXSA9PT0gaGFzaGVzWyAxIF0gfHwgaGFzaGVzWyAxIF0gPT09IGhhc2hlc1sgMiBdIHx8IGhhc2hlc1sgMiBdID09PSBoYXNoZXNbIDAgXSApIHtcclxuXHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBpdGVyYXRlIG92ZXIgZXZlcnkgZWRnZVxyXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZ2V0IHRoZSBmaXJzdCBhbmQgbmV4dCB2ZXJ0ZXggbWFraW5nIHVwIHRoZSBlZGdlXHJcblx0XHRcdFx0XHRjb25zdCBqTmV4dCA9ICggaiArIDEgKSAlIDM7XHJcblx0XHRcdFx0XHRjb25zdCB2ZWNIYXNoMCA9IGhhc2hlc1sgaiBdO1xyXG5cdFx0XHRcdFx0Y29uc3QgdmVjSGFzaDEgPSBoYXNoZXNbIGpOZXh0IF07XHJcblx0XHRcdFx0XHRjb25zdCB2MCA9IF90cmlhbmdsZVsgdmVydEtleXNbIGogXSBdO1xyXG5cdFx0XHRcdFx0Y29uc3QgdjEgPSBfdHJpYW5nbGVbIHZlcnRLZXlzWyBqTmV4dCBdIF07XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgaGFzaCA9IGAkeyB2ZWNIYXNoMCB9XyR7IHZlY0hhc2gxIH1gO1xyXG5cdFx0XHRcdFx0Y29uc3QgcmV2ZXJzZUhhc2ggPSBgJHsgdmVjSGFzaDEgfV8keyB2ZWNIYXNoMCB9YDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJldmVyc2VIYXNoIGluIGVkZ2VEYXRhICYmIGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gaWYgd2UgZm91bmQgYSBzaWJsaW5nIGVkZ2UgYWRkIGl0IGludG8gdGhlIHZlcnRleCBhcnJheSBpZlxyXG5cdFx0XHRcdFx0XHQvLyBpdCBtZWV0cyB0aGUgYW5nbGUgdGhyZXNob2xkIGFuZCBkZWxldGUgdGhlIGVkZ2UgZnJvbSB0aGUgbWFwLlxyXG5cdFx0XHRcdFx0XHRpZiAoIF9ub3JtYWwuZG90KCBlZGdlRGF0YVsgcmV2ZXJzZUhhc2ggXS5ub3JtYWwgKSA8PSB0aHJlc2hvbGREb3QgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHYwLngsIHYwLnksIHYwLnogKTtcclxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2MS54LCB2MS55LCB2MS56ICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRlZGdlRGF0YVsgcmV2ZXJzZUhhc2ggXSA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISAoIGhhc2ggaW4gZWRnZURhdGEgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGVkZ2UgaGVyZSB0aGVuIHNraXAgYWRkaW5nIGEgbmV3IG9uZVxyXG5cdFx0XHRcdFx0XHRlZGdlRGF0YVsgaGFzaCBdID0ge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpbmRleDA6IGluZGV4QXJyWyBqIF0sXHJcblx0XHRcdFx0XHRcdFx0aW5kZXgxOiBpbmRleEFyclsgak5leHQgXSxcclxuXHRcdFx0XHRcdFx0XHRub3JtYWw6IF9ub3JtYWwuY2xvbmUoKSxcclxuXHJcblx0XHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlbWFpbmluZywgdW5tYXRjaGVkIGVkZ2VzIGFuZCBhZGQgdGhlbSB0byB0aGUgdmVydGV4IGFycmF5XHJcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBlZGdlRGF0YSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBlZGdlRGF0YVsga2V5IF0gKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgeyBpbmRleDAsIGluZGV4MSB9ID0gZWRnZURhdGFbIGtleSBdO1xyXG5cdFx0XHRcdFx0X3YwLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXgwICk7XHJcblx0XHRcdFx0XHRfdjEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyLCBpbmRleDEgKTtcclxuXHJcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBfdjAueCwgX3YwLnksIF92MC56ICk7XHJcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBfdjEueCwgX3YxLnksIF92MS56ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEVkZ2VzR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4vUGF0aC5qcyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uLy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuXHJcbmNsYXNzIFNoYXBlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XHJcblxyXG5cdFx0c3VwZXIoIHBvaW50cyApO1xyXG5cclxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZSc7XHJcblxyXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKSB7XHJcblxyXG5cdFx0Y29uc3QgaG9sZXNQdHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBob2xlc1B0cztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBnZXQgcG9pbnRzIG9mIHNoYXBlIGFuZCBob2xlcyAoa2V5cG9pbnRzIGJhc2VkIG9uIHNlZ21lbnRzIHBhcmFtZXRlcilcclxuXHJcblx0ZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICkge1xyXG5cclxuXHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHRzaGFwZTogdGhpcy5nZXRQb2ludHMoIGRpdmlzaW9ucyApLFxyXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcclxuXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmhvbGVzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBob2xlID0gc291cmNlLmhvbGVzWyBpIF07XHJcblxyXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIGhvbGUuY2xvbmUoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcclxuXHRcdGRhdGEuaG9sZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xyXG5cdFx0XHRkYXRhLmhvbGVzLnB1c2goIGhvbGUudG9KU09OKCkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0ZnJvbUpTT04oIGpzb24gKSB7XHJcblxyXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XHJcblx0XHR0aGlzLmhvbGVzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcclxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBuZXcgUGF0aCgpLmZyb21KU09OKCBob2xlICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBTaGFwZSB9O1xyXG4iLCIvKipcclxuICogUG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0ICh2Mi4yLjQpXHJcbiAqL1xyXG5cclxuY29uc3QgRWFyY3V0ID0ge1xyXG5cclxuXHR0cmlhbmd1bGF0ZTogZnVuY3Rpb24gKCBkYXRhLCBob2xlSW5kaWNlcywgZGltID0gMiApIHtcclxuXHJcblx0XHRjb25zdCBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcclxuXHRcdGNvbnN0IG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1sgMCBdICogZGltIDogZGF0YS5sZW5ndGg7XHJcblx0XHRsZXQgb3V0ZXJOb2RlID0gbGlua2VkTGlzdCggZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSApO1xyXG5cdFx0Y29uc3QgdHJpYW5nbGVzID0gW107XHJcblxyXG5cdFx0aWYgKCAhIG91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYgKSByZXR1cm4gdHJpYW5nbGVzO1xyXG5cclxuXHRcdGxldCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplO1xyXG5cclxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XHJcblxyXG5cdFx0Ly8gaWYgdGhlIHNoYXBlIGlzIG5vdCB0b28gc2ltcGxlLCB3ZSdsbCB1c2Ugei1vcmRlciBjdXJ2ZSBoYXNoIGxhdGVyOyBjYWxjdWxhdGUgcG9seWdvbiBiYm94XHJcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XHJcblxyXG5cdFx0XHRtaW5YID0gbWF4WCA9IGRhdGFbIDAgXTtcclxuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IGRpbTsgaSA8IG91dGVyTGVuOyBpICs9IGRpbSApIHtcclxuXHJcblx0XHRcdFx0eCA9IGRhdGFbIGkgXTtcclxuXHRcdFx0XHR5ID0gZGF0YVsgaSArIDEgXTtcclxuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XHJcblx0XHRcdFx0aWYgKCB5IDwgbWluWSApIG1pblkgPSB5O1xyXG5cdFx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcclxuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxyXG5cdFx0XHRpbnZTaXplID0gTWF0aC5tYXgoIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSApO1xyXG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDMyNzY3IC8gaW52U2l6ZSA6IDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCApO1xyXG5cclxuXHRcdHJldHVybiB0cmlhbmdsZXM7XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcclxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XHJcblxyXG5cdGxldCBpLCBsYXN0O1xyXG5cclxuXHRpZiAoIGNsb2Nrd2lzZSA9PT0gKCBzaWduZWRBcmVhKCBkYXRhLCBzdGFydCwgZW5kLCBkaW0gKSA+IDAgKSApIHtcclxuXHJcblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGZvciAoIGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggbGFzdCAmJiBlcXVhbHMoIGxhc3QsIGxhc3QubmV4dCApICkge1xyXG5cclxuXHRcdHJlbW92ZU5vZGUoIGxhc3QgKTtcclxuXHRcdGxhc3QgPSBsYXN0Lm5leHQ7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGxhc3Q7XHJcblxyXG59XHJcblxyXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xyXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoIHN0YXJ0LCBlbmQgKSB7XHJcblxyXG5cdGlmICggISBzdGFydCApIHJldHVybiBzdGFydDtcclxuXHRpZiAoICEgZW5kICkgZW5kID0gc3RhcnQ7XHJcblxyXG5cdGxldCBwID0gc3RhcnQsXHJcblx0XHRhZ2FpbjtcclxuXHRkbyB7XHJcblxyXG5cdFx0YWdhaW4gPSBmYWxzZTtcclxuXHJcblx0XHRpZiAoICEgcC5zdGVpbmVyICYmICggZXF1YWxzKCBwLCBwLm5leHQgKSB8fCBhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID09PSAwICkgKSB7XHJcblxyXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XHJcblx0XHRcdHAgPSBlbmQgPSBwLnByZXY7XHJcblx0XHRcdGlmICggcCA9PT0gcC5uZXh0ICkgYnJlYWs7XHJcblx0XHRcdGFnYWluID0gdHJ1ZTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cCA9IHAubmV4dDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0gd2hpbGUgKCBhZ2FpbiB8fCBwICE9PSBlbmQgKTtcclxuXHJcblx0cmV0dXJuIGVuZDtcclxuXHJcbn1cclxuXHJcbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxyXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XHJcblxyXG5cdGlmICggISBlYXIgKSByZXR1cm47XHJcblxyXG5cdC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcclxuXHRpZiAoICEgcGFzcyAmJiBpbnZTaXplICkgaW5kZXhDdXJ2ZSggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XHJcblxyXG5cdGxldCBzdG9wID0gZWFyLFxyXG5cdFx0cHJldiwgbmV4dDtcclxuXHJcblx0Ly8gaXRlcmF0ZSB0aHJvdWdoIGVhcnMsIHNsaWNpbmcgdGhlbSBvbmUgYnkgb25lXHJcblx0d2hpbGUgKCBlYXIucHJldiAhPT0gZWFyLm5leHQgKSB7XHJcblxyXG5cdFx0cHJldiA9IGVhci5wcmV2O1xyXG5cdFx0bmV4dCA9IGVhci5uZXh0O1xyXG5cclxuXHRcdGlmICggaW52U2l6ZSA/IGlzRWFySGFzaGVkKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKSA6IGlzRWFyKCBlYXIgKSApIHtcclxuXHJcblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwcmV2LmkgLyBkaW0gfCAwICk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBlYXIuaSAvIGRpbSB8IDAgKTtcclxuXHRcdFx0dHJpYW5nbGVzLnB1c2goIG5leHQuaSAvIGRpbSB8IDAgKTtcclxuXHJcblx0XHRcdHJlbW92ZU5vZGUoIGVhciApO1xyXG5cclxuXHRcdFx0Ly8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGV4IGxlYWRzIHRvIGxlc3Mgc2xpdmVyIHRyaWFuZ2xlc1xyXG5cdFx0XHRlYXIgPSBuZXh0Lm5leHQ7XHJcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XHJcblxyXG5cdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZWFyID0gbmV4dDtcclxuXHJcblx0XHQvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xyXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XHJcblxyXG5cdFx0XHQvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxyXG5cdFx0XHRpZiAoICEgcGFzcyApIHtcclxuXHJcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBmaWx0ZXJQb2ludHMoIGVhciApLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSApO1xyXG5cclxuXHRcdFx0XHQvLyBpZiB0aGlzIGRpZG4ndCB3b3JrLCB0cnkgY3VyaW5nIGFsbCBzbWFsbCBzZWxmLWludGVyc2VjdGlvbnMgbG9jYWxseVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0ZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggZmlsdGVyUG9pbnRzKCBlYXIgKSwgdHJpYW5nbGVzLCBkaW0gKTtcclxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIgKTtcclxuXHJcblx0XHRcdFx0Ly8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDIgKSB7XHJcblxyXG5cdFx0XHRcdHNwbGl0RWFyY3V0KCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xyXG5mdW5jdGlvbiBpc0VhciggZWFyICkge1xyXG5cclxuXHRjb25zdCBhID0gZWFyLnByZXYsXHJcblx0XHRiID0gZWFyLFxyXG5cdFx0YyA9IGVhci5uZXh0O1xyXG5cclxuXHRpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxyXG5cclxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxyXG5cdGNvbnN0IGF4ID0gYS54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYS55LCBieSA9IGIueSwgY3kgPSBjLnk7XHJcblxyXG5cdC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXHJcblx0Y29uc3QgeDAgPSBheCA8IGJ4ID8gKCBheCA8IGN4ID8gYXggOiBjeCApIDogKCBieCA8IGN4ID8gYnggOiBjeCApLFxyXG5cdFx0eTAgPSBheSA8IGJ5ID8gKCBheSA8IGN5ID8gYXkgOiBjeSApIDogKCBieSA8IGN5ID8gYnkgOiBjeSApLFxyXG5cdFx0eDEgPSBheCA+IGJ4ID8gKCBheCA+IGN4ID8gYXggOiBjeCApIDogKCBieCA+IGN4ID8gYnggOiBjeCApLFxyXG5cdFx0eTEgPSBheSA+IGJ5ID8gKCBheSA+IGN5ID8gYXkgOiBjeSApIDogKCBieSA+IGN5ID8gYnkgOiBjeSApO1xyXG5cclxuXHRsZXQgcCA9IGMubmV4dDtcclxuXHR3aGlsZSAoIHAgIT09IGEgKSB7XHJcblxyXG5cdFx0aWYgKCBwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiZcclxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSApICYmXHJcblx0XHRcdGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcclxuXHRcdHAgPSBwLm5leHQ7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRydWU7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xyXG5cclxuXHRjb25zdCBhID0gZWFyLnByZXYsXHJcblx0XHRiID0gZWFyLFxyXG5cdFx0YyA9IGVhci5uZXh0O1xyXG5cclxuXHRpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxyXG5cclxuXHRjb25zdCBheCA9IGEueCwgYnggPSBiLngsIGN4ID0gYy54LCBheSA9IGEueSwgYnkgPSBiLnksIGN5ID0gYy55O1xyXG5cclxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxyXG5cdGNvbnN0IHgwID0gYXggPCBieCA/ICggYXggPCBjeCA/IGF4IDogY3ggKSA6ICggYnggPCBjeCA/IGJ4IDogY3ggKSxcclxuXHRcdHkwID0gYXkgPCBieSA/ICggYXkgPCBjeSA/IGF5IDogY3kgKSA6ICggYnkgPCBjeSA/IGJ5IDogY3kgKSxcclxuXHRcdHgxID0gYXggPiBieCA/ICggYXggPiBjeCA/IGF4IDogY3ggKSA6ICggYnggPiBjeCA/IGJ4IDogY3ggKSxcclxuXHRcdHkxID0gYXkgPiBieSA/ICggYXkgPiBjeSA/IGF5IDogY3kgKSA6ICggYnkgPiBjeSA/IGJ5IDogY3kgKTtcclxuXHJcblx0Ly8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcclxuXHRjb25zdCBtaW5aID0gek9yZGVyKCB4MCwgeTAsIG1pblgsIG1pblksIGludlNpemUgKSxcclxuXHRcdG1heFogPSB6T3JkZXIoIHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xyXG5cclxuXHRsZXQgcCA9IGVhci5wcmV2WixcclxuXHRcdG4gPSBlYXIubmV4dFo7XHJcblxyXG5cdC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGJvdGggZGlyZWN0aW9uc1xyXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xyXG5cclxuXHRcdGlmICggcC54ID49IHgwICYmIHAueCA8PSB4MSAmJiBwLnkgPj0geTAgJiYgcC55IDw9IHkxICYmIHAgIT09IGEgJiYgcCAhPT0gYyAmJlxyXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHAueCwgcC55ICkgJiYgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0cCA9IHAucHJldlo7XHJcblxyXG5cdFx0aWYgKCBuLnggPj0geDAgJiYgbi54IDw9IHgxICYmIG4ueSA+PSB5MCAmJiBuLnkgPD0geTEgJiYgbiAhPT0gYSAmJiBuICE9PSBjICYmXHJcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgbi54LCBuLnkgKSAmJiBhcmVhKCBuLnByZXYsIG4sIG4ubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XHJcblx0XHRuID0gbi5uZXh0WjtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxyXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiApIHtcclxuXHJcblx0XHRpZiAoIHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcclxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSApICYmIGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcclxuXHRcdHAgPSBwLnByZXZaO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXHJcblx0d2hpbGUgKCBuICYmIG4ueiA8PSBtYXhaICkge1xyXG5cclxuXHRcdGlmICggbi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxyXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55ICkgJiYgYXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0biA9IG4ubmV4dFo7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRydWU7XHJcblxyXG59XHJcblxyXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xyXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBzdGFydCwgdHJpYW5nbGVzLCBkaW0gKSB7XHJcblxyXG5cdGxldCBwID0gc3RhcnQ7XHJcblx0ZG8ge1xyXG5cclxuXHRcdGNvbnN0IGEgPSBwLnByZXYsXHJcblx0XHRcdGIgPSBwLm5leHQubmV4dDtcclxuXHJcblx0XHRpZiAoICEgZXF1YWxzKCBhLCBiICkgJiYgaW50ZXJzZWN0cyggYSwgcCwgcC5uZXh0LCBiICkgJiYgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSApIHtcclxuXHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBhLmkgLyBkaW0gfCAwICk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwLmkgLyBkaW0gfCAwICk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBiLmkgLyBkaW0gfCAwICk7XHJcblxyXG5cdFx0XHQvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXHJcblx0XHRcdHJlbW92ZU5vZGUoIHAgKTtcclxuXHRcdFx0cmVtb3ZlTm9kZSggcC5uZXh0ICk7XHJcblxyXG5cdFx0XHRwID0gc3RhcnQgPSBiO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcclxuXHJcblx0cmV0dXJuIGZpbHRlclBvaW50cyggcCApO1xyXG5cclxufVxyXG5cclxuLy8gdHJ5IHNwbGl0dGluZyBwb2x5Z29uIGludG8gdHdvIGFuZCB0cmlhbmd1bGF0ZSB0aGVtIGluZGVwZW5kZW50bHlcclxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoIHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcclxuXHJcblx0Ly8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cclxuXHRsZXQgYSA9IHN0YXJ0O1xyXG5cdGRvIHtcclxuXHJcblx0XHRsZXQgYiA9IGEubmV4dC5uZXh0O1xyXG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbCggYSwgYiApICkge1xyXG5cclxuXHRcdFx0XHQvLyBzcGxpdCB0aGUgcG9seWdvbiBpbiB0d28gYnkgdGhlIGRpYWdvbmFsXHJcblx0XHRcdFx0bGV0IGMgPSBzcGxpdFBvbHlnb24oIGEsIGIgKTtcclxuXHJcblx0XHRcdFx0Ly8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcclxuXHRcdFx0XHRhID0gZmlsdGVyUG9pbnRzKCBhLCBhLm5leHQgKTtcclxuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcclxuXHJcblx0XHRcdFx0Ly8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcclxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwICk7XHJcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCApO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGIgPSBiLm5leHQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGEgPSBhLm5leHQ7XHJcblxyXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xyXG5cclxufVxyXG5cclxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xyXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICkge1xyXG5cclxuXHRjb25zdCBxdWV1ZSA9IFtdO1xyXG5cdGxldCBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XHJcblxyXG5cdGZvciAoIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XHJcblxyXG5cdFx0c3RhcnQgPSBob2xlSW5kaWNlc1sgaSBdICogZGltO1xyXG5cdFx0ZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1sgaSArIDEgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xyXG5cdFx0bGlzdCA9IGxpbmtlZExpc3QoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UgKTtcclxuXHRcdGlmICggbGlzdCA9PT0gbGlzdC5uZXh0ICkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcclxuXHRcdHF1ZXVlLnB1c2goIGdldExlZnRtb3N0KCBsaXN0ICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRxdWV1ZS5zb3J0KCBjb21wYXJlWCApO1xyXG5cclxuXHQvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxyXG5cdGZvciAoIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGUoIHF1ZXVlWyBpIF0sIG91dGVyTm9kZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBvdXRlck5vZGU7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wYXJlWCggYSwgYiApIHtcclxuXHJcblx0cmV0dXJuIGEueCAtIGIueDtcclxuXHJcbn1cclxuXHJcbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBsaW5rIGl0XHJcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoIGhvbGUsIG91dGVyTm9kZSApIHtcclxuXHJcblx0Y29uc3QgYnJpZGdlID0gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApO1xyXG5cdGlmICggISBicmlkZ2UgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG91dGVyTm9kZTtcclxuXHJcblx0fVxyXG5cclxuXHRjb25zdCBicmlkZ2VSZXZlcnNlID0gc3BsaXRQb2x5Z29uKCBicmlkZ2UsIGhvbGUgKTtcclxuXHJcblx0Ly8gZmlsdGVyIGNvbGxpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXHJcblx0ZmlsdGVyUG9pbnRzKCBicmlkZ2VSZXZlcnNlLCBicmlkZ2VSZXZlcnNlLm5leHQgKTtcclxuXHRyZXR1cm4gZmlsdGVyUG9pbnRzKCBicmlkZ2UsIGJyaWRnZS5uZXh0ICk7XHJcblxyXG59XHJcblxyXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXHJcbmZ1bmN0aW9uIGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKSB7XHJcblxyXG5cdGxldCBwID0gb3V0ZXJOb2RlLFxyXG5cdFx0cXggPSAtIEluZmluaXR5LFxyXG5cdFx0bTtcclxuXHJcblx0Y29uc3QgaHggPSBob2xlLngsIGh5ID0gaG9sZS55O1xyXG5cclxuXHQvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XHJcblx0Ly8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAoIGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55ICkge1xyXG5cclxuXHRcdFx0Y29uc3QgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTtcclxuXHRcdFx0aWYgKCB4IDw9IGh4ICYmIHggPiBxeCApIHtcclxuXHJcblx0XHRcdFx0cXggPSB4O1xyXG5cdFx0XHRcdG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XHJcblx0XHRcdFx0aWYgKCB4ID09PSBoeCApIHJldHVybiBtOyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsZWZ0bW9zdCBlbmRwb2ludFxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlICggcCAhPT0gb3V0ZXJOb2RlICk7XHJcblxyXG5cdGlmICggISBtICkgcmV0dXJuIG51bGw7XHJcblxyXG5cdC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIG9mIGhvbGUgcG9pbnQsIHNlZ21lbnQgaW50ZXJzZWN0aW9uIGFuZCBlbmRwb2ludDtcclxuXHQvLyBpZiB0aGVyZSBhcmUgbm8gcG9pbnRzIGZvdW5kLCB3ZSBoYXZlIGEgdmFsaWQgY29ubmVjdGlvbjtcclxuXHQvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxyXG5cclxuXHRjb25zdCBzdG9wID0gbSxcclxuXHRcdG14ID0gbS54LFxyXG5cdFx0bXkgPSBtLnk7XHJcblx0bGV0IHRhbk1pbiA9IEluZmluaXR5LCB0YW47XHJcblxyXG5cdHAgPSBtO1xyXG5cclxuXHRkbyB7XHJcblxyXG5cdFx0aWYgKCBoeCA+PSBwLnggJiYgcC54ID49IG14ICYmIGh4ICE9PSBwLnggJiZcclxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55ICkgKSB7XHJcblxyXG5cdFx0XHR0YW4gPSBNYXRoLmFicyggaHkgLSBwLnkgKSAvICggaHggLSBwLnggKTsgLy8gdGFuZ2VudGlhbFxyXG5cclxuXHRcdFx0aWYgKCBsb2NhbGx5SW5zaWRlKCBwLCBob2xlICkgJiYgKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiAoIHAueCA+IG0ueCB8fCAoIHAueCA9PT0gbS54ICYmIHNlY3RvckNvbnRhaW5zU2VjdG9yKCBtLCBwICkgKSApICkgKSApIHtcclxuXHJcblx0XHRcdFx0bSA9IHA7XHJcblx0XHRcdFx0dGFuTWluID0gdGFuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlICggcCAhPT0gc3RvcCApO1xyXG5cclxuXHRyZXR1cm4gbTtcclxuXHJcbn1cclxuXHJcbi8vIHdoZXRoZXIgc2VjdG9yIGluIHZlcnRleCBtIGNvbnRhaW5zIHNlY3RvciBpbiB2ZXJ0ZXggcCBpbiB0aGUgc2FtZSBjb29yZGluYXRlc1xyXG5mdW5jdGlvbiBzZWN0b3JDb250YWluc1NlY3RvciggbSwgcCApIHtcclxuXHJcblx0cmV0dXJuIGFyZWEoIG0ucHJldiwgbSwgcC5wcmV2ICkgPCAwICYmIGFyZWEoIHAubmV4dCwgbSwgbS5uZXh0ICkgPCAwO1xyXG5cclxufVxyXG5cclxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxyXG5mdW5jdGlvbiBpbmRleEN1cnZlKCBzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcclxuXHJcblx0bGV0IHAgPSBzdGFydDtcclxuXHRkbyB7XHJcblxyXG5cdFx0aWYgKCBwLnogPT09IDAgKSBwLnogPSB6T3JkZXIoIHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XHJcblx0XHRwLnByZXZaID0gcC5wcmV2O1xyXG5cdFx0cC5uZXh0WiA9IHAubmV4dDtcclxuXHRcdHAgPSBwLm5leHQ7XHJcblxyXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xyXG5cclxuXHRwLnByZXZaLm5leHRaID0gbnVsbDtcclxuXHRwLnByZXZaID0gbnVsbDtcclxuXHJcblx0c29ydExpbmtlZCggcCApO1xyXG5cclxufVxyXG5cclxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cclxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcclxuZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHtcclxuXHJcblx0bGV0IGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLFxyXG5cdFx0aW5TaXplID0gMTtcclxuXHJcblx0ZG8ge1xyXG5cclxuXHRcdHAgPSBsaXN0O1xyXG5cdFx0bGlzdCA9IG51bGw7XHJcblx0XHR0YWlsID0gbnVsbDtcclxuXHRcdG51bU1lcmdlcyA9IDA7XHJcblxyXG5cdFx0d2hpbGUgKCBwICkge1xyXG5cclxuXHRcdFx0bnVtTWVyZ2VzICsrO1xyXG5cdFx0XHRxID0gcDtcclxuXHRcdFx0cFNpemUgPSAwO1xyXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGluU2l6ZTsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0cFNpemUgKys7XHJcblx0XHRcdFx0cSA9IHEubmV4dFo7XHJcblx0XHRcdFx0aWYgKCAhIHEgKSBicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHFTaXplID0gaW5TaXplO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBwU2l6ZSA+IDAgfHwgKCBxU2l6ZSA+IDAgJiYgcSApICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIHBTaXplICE9PSAwICYmICggcVNpemUgPT09IDAgfHwgISBxIHx8IHAueiA8PSBxLnogKSApIHtcclxuXHJcblx0XHRcdFx0XHRlID0gcDtcclxuXHRcdFx0XHRcdHAgPSBwLm5leHRaO1xyXG5cdFx0XHRcdFx0cFNpemUgLS07XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0ZSA9IHE7XHJcblx0XHRcdFx0XHRxID0gcS5uZXh0WjtcclxuXHRcdFx0XHRcdHFTaXplIC0tO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggdGFpbCApIHRhaWwubmV4dFogPSBlO1xyXG5cdFx0XHRcdGVsc2UgbGlzdCA9IGU7XHJcblxyXG5cdFx0XHRcdGUucHJldlogPSB0YWlsO1xyXG5cdFx0XHRcdHRhaWwgPSBlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cCA9IHE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRhaWwubmV4dFogPSBudWxsO1xyXG5cdFx0aW5TaXplICo9IDI7XHJcblxyXG5cdH0gd2hpbGUgKCBudW1NZXJnZXMgPiAxICk7XHJcblxyXG5cdHJldHVybiBsaXN0O1xyXG5cclxufVxyXG5cclxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgaW52ZXJzZSBvZiB0aGUgbG9uZ2VyIHNpZGUgb2YgZGF0YSBiYm94XHJcbmZ1bmN0aW9uIHpPcmRlciggeCwgeSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcclxuXHJcblx0Ly8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxyXG5cdHggPSAoIHggLSBtaW5YICkgKiBpbnZTaXplIHwgMDtcclxuXHR5ID0gKCB5IC0gbWluWSApICogaW52U2l6ZSB8IDA7XHJcblxyXG5cdHggPSAoIHggfCAoIHggPDwgOCApICkgJiAweDAwRkYwMEZGO1xyXG5cdHggPSAoIHggfCAoIHggPDwgNCApICkgJiAweDBGMEYwRjBGO1xyXG5cdHggPSAoIHggfCAoIHggPDwgMiApICkgJiAweDMzMzMzMzMzO1xyXG5cdHggPSAoIHggfCAoIHggPDwgMSApICkgJiAweDU1NTU1NTU1O1xyXG5cclxuXHR5ID0gKCB5IHwgKCB5IDw8IDggKSApICYgMHgwMEZGMDBGRjtcclxuXHR5ID0gKCB5IHwgKCB5IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcclxuXHR5ID0gKCB5IHwgKCB5IDw8IDIgKSApICYgMHgzMzMzMzMzMztcclxuXHR5ID0gKCB5IHwgKCB5IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcclxuXHJcblx0cmV0dXJuIHggfCAoIHkgPDwgMSApO1xyXG5cclxufVxyXG5cclxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xyXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdCggc3RhcnQgKSB7XHJcblxyXG5cdGxldCBwID0gc3RhcnQsXHJcblx0XHRsZWZ0bW9zdCA9IHN0YXJ0O1xyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAoIHAueCA8IGxlZnRtb3N0LnggfHwgKCBwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSApICkgbGVmdG1vc3QgPSBwO1xyXG5cdFx0cCA9IHAubmV4dDtcclxuXHJcblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XHJcblxyXG5cdHJldHVybiBsZWZ0bW9zdDtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcclxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkgKSB7XHJcblxyXG5cdHJldHVybiAoIGN4IC0gcHggKSAqICggYXkgLSBweSApID49ICggYXggLSBweCApICogKCBjeSAtIHB5ICkgJiZcclxuICAgICAgICAgICAoIGF4IC0gcHggKSAqICggYnkgLSBweSApID49ICggYnggLSBweCApICogKCBheSAtIHB5ICkgJiZcclxuICAgICAgICAgICAoIGJ4IC0gcHggKSAqICggY3kgLSBweSApID49ICggY3ggLSBweCApICogKCBieSAtIHB5ICk7XHJcblxyXG59XHJcblxyXG4vLyBjaGVjayBpZiBhIGRpYWdvbmFsIGJldHdlZW4gdHdvIHBvbHlnb24gbm9kZXMgaXMgdmFsaWQgKGxpZXMgaW4gcG9seWdvbiBpbnRlcmlvcilcclxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKCBhLCBiICkge1xyXG5cclxuXHRyZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICEgaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSAmJiAvLyBkb2Vzbid0IGludGVyc2VjdCBvdGhlciBlZGdlc1xyXG4gICAgICAgICAgICggbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSAmJiBtaWRkbGVJbnNpZGUoIGEsIGIgKSAmJiAvLyBsb2NhbGx5IHZpc2libGVcclxuICAgICAgICAgICAgKCBhcmVhKCBhLnByZXYsIGEsIGIucHJldiApIHx8IGFyZWEoIGEsIGIucHJldiwgYiApICkgfHwgLy8gZG9lcyBub3QgY3JlYXRlIG9wcG9zaXRlLWZhY2luZyBzZWN0b3JzXHJcbiAgICAgICAgICAgIGVxdWFscyggYSwgYiApICYmIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPiAwICYmIGFyZWEoIGIucHJldiwgYiwgYi5uZXh0ICkgPiAwICk7IC8vIHNwZWNpYWwgemVyby1sZW5ndGggY2FzZVxyXG5cclxufVxyXG5cclxuLy8gc2lnbmVkIGFyZWEgb2YgYSB0cmlhbmdsZVxyXG5mdW5jdGlvbiBhcmVhKCBwLCBxLCByICkge1xyXG5cclxuXHRyZXR1cm4gKCBxLnkgLSBwLnkgKSAqICggci54IC0gcS54ICkgLSAoIHEueCAtIHAueCApICogKCByLnkgLSBxLnkgKTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXHJcbmZ1bmN0aW9uIGVxdWFscyggcDEsIHAyICkge1xyXG5cclxuXHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xyXG5cclxufVxyXG5cclxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxyXG5mdW5jdGlvbiBpbnRlcnNlY3RzKCBwMSwgcTEsIHAyLCBxMiApIHtcclxuXHJcblx0Y29uc3QgbzEgPSBzaWduKCBhcmVhKCBwMSwgcTEsIHAyICkgKTtcclxuXHRjb25zdCBvMiA9IHNpZ24oIGFyZWEoIHAxLCBxMSwgcTIgKSApO1xyXG5cdGNvbnN0IG8zID0gc2lnbiggYXJlYSggcDIsIHEyLCBwMSApICk7XHJcblx0Y29uc3QgbzQgPSBzaWduKCBhcmVhKCBwMiwgcTIsIHExICkgKTtcclxuXHJcblx0aWYgKCBvMSAhPT0gbzIgJiYgbzMgIT09IG80ICkgcmV0dXJuIHRydWU7IC8vIGdlbmVyYWwgY2FzZVxyXG5cclxuXHRpZiAoIG8xID09PSAwICYmIG9uU2VnbWVudCggcDEsIHAyLCBxMSApICkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcDIgYXJlIGNvbGxpbmVhciBhbmQgcDIgbGllcyBvbiBwMXExXHJcblx0aWYgKCBvMiA9PT0gMCAmJiBvblNlZ21lbnQoIHAxLCBxMiwgcTEgKSApIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHEyIGFyZSBjb2xsaW5lYXIgYW5kIHEyIGxpZXMgb24gcDFxMVxyXG5cdGlmICggbzMgPT09IDAgJiYgb25TZWdtZW50KCBwMiwgcDEsIHEyICkgKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBwMSBhcmUgY29sbGluZWFyIGFuZCBwMSBsaWVzIG9uIHAycTJcclxuXHRpZiAoIG80ID09PSAwICYmIG9uU2VnbWVudCggcDIsIHExLCBxMiApICkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcTEgYXJlIGNvbGxpbmVhciBhbmQgcTEgbGllcyBvbiBwMnEyXHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbi8vIGZvciBjb2xsaW5lYXIgcG9pbnRzIHAsIHEsIHIsIGNoZWNrIGlmIHBvaW50IHEgbGllcyBvbiBzZWdtZW50IHByXHJcbmZ1bmN0aW9uIG9uU2VnbWVudCggcCwgcSwgciApIHtcclxuXHJcblx0cmV0dXJuIHEueCA8PSBNYXRoLm1heCggcC54LCByLnggKSAmJiBxLnggPj0gTWF0aC5taW4oIHAueCwgci54ICkgJiYgcS55IDw9IE1hdGgubWF4KCBwLnksIHIueSApICYmIHEueSA+PSBNYXRoLm1pbiggcC55LCByLnkgKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNpZ24oIG51bSApIHtcclxuXHJcblx0cmV0dXJuIG51bSA+IDAgPyAxIDogbnVtIDwgMCA/IC0gMSA6IDA7XHJcblxyXG59XHJcblxyXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xyXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcclxuXHJcblx0bGV0IHAgPSBhO1xyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAoIHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxyXG5cdFx0XHRpbnRlcnNlY3RzKCBwLCBwLm5leHQsIGEsIGIgKSApIHJldHVybiB0cnVlO1xyXG5cdFx0cCA9IHAubmV4dDtcclxuXHJcblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcclxuXHJcblx0cmV0dXJuIGZhbHNlO1xyXG5cclxufVxyXG5cclxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGxvY2FsbHkgaW5zaWRlIHRoZSBwb2x5Z29uXHJcbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSB7XHJcblxyXG5cdHJldHVybiBhcmVhKCBhLnByZXYsIGEsIGEubmV4dCApIDwgMCA/XHJcblx0XHRhcmVhKCBhLCBiLCBhLm5leHQgKSA+PSAwICYmIGFyZWEoIGEsIGEucHJldiwgYiApID49IDAgOlxyXG5cdFx0YXJlYSggYSwgYiwgYS5wcmV2ICkgPCAwIHx8IGFyZWEoIGEsIGEubmV4dCwgYiApIDwgMDtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHRoZSBtaWRkbGUgcG9pbnQgb2YgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGluc2lkZSB0aGUgcG9seWdvblxyXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7XHJcblxyXG5cdGxldCBwID0gYSxcclxuXHRcdGluc2lkZSA9IGZhbHNlO1xyXG5cdGNvbnN0IHB4ID0gKCBhLnggKyBiLnggKSAvIDIsXHJcblx0XHRweSA9ICggYS55ICsgYi55ICkgLyAyO1xyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAoICggKCBwLnkgPiBweSApICE9PSAoIHAubmV4dC55ID4gcHkgKSApICYmIHAubmV4dC55ICE9PSBwLnkgJiZcclxuXHRcdFx0KCBweCA8ICggcC5uZXh0LnggLSBwLnggKSAqICggcHkgLSBwLnkgKSAvICggcC5uZXh0LnkgLSBwLnkgKSArIHAueCApIClcclxuXHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xyXG5cclxuXHRyZXR1cm4gaW5zaWRlO1xyXG5cclxufVxyXG5cclxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xyXG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcclxuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKCBhLCBiICkge1xyXG5cclxuXHRjb25zdCBhMiA9IG5ldyBOb2RlKCBhLmksIGEueCwgYS55ICksXHJcblx0XHRiMiA9IG5ldyBOb2RlKCBiLmksIGIueCwgYi55ICksXHJcblx0XHRhbiA9IGEubmV4dCxcclxuXHRcdGJwID0gYi5wcmV2O1xyXG5cclxuXHRhLm5leHQgPSBiO1xyXG5cdGIucHJldiA9IGE7XHJcblxyXG5cdGEyLm5leHQgPSBhbjtcclxuXHRhbi5wcmV2ID0gYTI7XHJcblxyXG5cdGIyLm5leHQgPSBhMjtcclxuXHRhMi5wcmV2ID0gYjI7XHJcblxyXG5cdGJwLm5leHQgPSBiMjtcclxuXHRiMi5wcmV2ID0gYnA7XHJcblxyXG5cdHJldHVybiBiMjtcclxuXHJcbn1cclxuXHJcbi8vIGNyZWF0ZSBhIG5vZGUgYW5kIG9wdGlvbmFsbHkgbGluayBpdCB3aXRoIHByZXZpb3VzIG9uZSAoaW4gYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QpXHJcbmZ1bmN0aW9uIGluc2VydE5vZGUoIGksIHgsIHksIGxhc3QgKSB7XHJcblxyXG5cdGNvbnN0IHAgPSBuZXcgTm9kZSggaSwgeCwgeSApO1xyXG5cclxuXHRpZiAoICEgbGFzdCApIHtcclxuXHJcblx0XHRwLnByZXYgPSBwO1xyXG5cdFx0cC5uZXh0ID0gcDtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRwLm5leHQgPSBsYXN0Lm5leHQ7XHJcblx0XHRwLnByZXYgPSBsYXN0O1xyXG5cdFx0bGFzdC5uZXh0LnByZXYgPSBwO1xyXG5cdFx0bGFzdC5uZXh0ID0gcDtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZU5vZGUoIHAgKSB7XHJcblxyXG5cdHAubmV4dC5wcmV2ID0gcC5wcmV2O1xyXG5cdHAucHJldi5uZXh0ID0gcC5uZXh0O1xyXG5cclxuXHRpZiAoIHAucHJldlogKSBwLnByZXZaLm5leHRaID0gcC5uZXh0WjtcclxuXHRpZiAoIHAubmV4dFogKSBwLm5leHRaLnByZXZaID0gcC5wcmV2WjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5vZGUoIGksIHgsIHkgKSB7XHJcblxyXG5cdC8vIHZlcnRleCBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxyXG5cdHRoaXMuaSA9IGk7XHJcblxyXG5cdC8vIHZlcnRleCBjb29yZGluYXRlc1xyXG5cdHRoaXMueCA9IHg7XHJcblx0dGhpcy55ID0geTtcclxuXHJcblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgdmVydGV4IG5vZGVzIGluIGEgcG9seWdvbiByaW5nXHJcblx0dGhpcy5wcmV2ID0gbnVsbDtcclxuXHR0aGlzLm5leHQgPSBudWxsO1xyXG5cclxuXHQvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXHJcblx0dGhpcy56ID0gMDtcclxuXHJcblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxyXG5cdHRoaXMucHJldlogPSBudWxsO1xyXG5cdHRoaXMubmV4dFogPSBudWxsO1xyXG5cclxuXHQvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxyXG5cdHRoaXMuc3RlaW5lciA9IGZhbHNlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkge1xyXG5cclxuXHRsZXQgc3VtID0gMDtcclxuXHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHtcclxuXHJcblx0XHRzdW0gKz0gKCBkYXRhWyBqIF0gLSBkYXRhWyBpIF0gKSAqICggZGF0YVsgaSArIDEgXSArIGRhdGFbIGogKyAxIF0gKTtcclxuXHRcdGogPSBpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBzdW07XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBFYXJjdXQgfTtcclxuIiwiaW1wb3J0IHsgRWFyY3V0IH0gZnJvbSAnLi9FYXJjdXQuanMnO1xyXG5cclxuY2xhc3MgU2hhcGVVdGlscyB7XHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBhcmVhIG9mIHRoZSBjb250b3VyIHBvbHlnb25cclxuXHJcblx0c3RhdGljIGFyZWEoIGNvbnRvdXIgKSB7XHJcblxyXG5cdFx0Y29uc3QgbiA9IGNvbnRvdXIubGVuZ3RoO1xyXG5cdFx0bGV0IGEgPSAwLjA7XHJcblxyXG5cdFx0Zm9yICggbGV0IHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcclxuXHJcblx0XHRcdGEgKz0gY29udG91clsgcCBdLnggKiBjb250b3VyWyBxIF0ueSAtIGNvbnRvdXJbIHEgXS54ICogY29udG91clsgcCBdLnk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhICogMC41O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBpc0Nsb2NrV2lzZSggcHRzICkge1xyXG5cclxuXHRcdHJldHVybiBTaGFwZVV0aWxzLmFyZWEoIHB0cyApIDwgMDtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdHJpYW5ndWxhdGVTaGFwZSggY29udG91ciwgaG9sZXMgKSB7XHJcblxyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTsgLy8gZmxhdCBhcnJheSBvZiB2ZXJ0aWNlcyBsaWtlIFsgeDAseTAsIHgxLHkxLCB4Mix5MiwgLi4uIF1cclxuXHRcdGNvbnN0IGhvbGVJbmRpY2VzID0gW107IC8vIGFycmF5IG9mIGhvbGUgaW5kaWNlc1xyXG5cdFx0Y29uc3QgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cclxuXHJcblx0XHRyZW1vdmVEdXBFbmRQdHMoIGNvbnRvdXIgKTtcclxuXHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRsZXQgaG9sZUluZGV4ID0gY29udG91ci5sZW5ndGg7XHJcblxyXG5cdFx0aG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgaG9sZXMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0aG9sZUluZGljZXMucHVzaCggaG9sZUluZGV4ICk7XHJcblx0XHRcdGhvbGVJbmRleCArPSBob2xlc1sgaSBdLmxlbmd0aDtcclxuXHRcdFx0YWRkQ29udG91ciggdmVydGljZXMsIGhvbGVzWyBpIF0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRjb25zdCB0cmlhbmdsZXMgPSBFYXJjdXQudHJpYW5ndWxhdGUoIHZlcnRpY2VzLCBob2xlSW5kaWNlcyApO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0ZmFjZXMucHVzaCggdHJpYW5nbGVzLnNsaWNlKCBpLCBpICsgMyApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWNlcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XHJcblxyXG5cdGNvbnN0IGwgPSBwb2ludHMubGVuZ3RoO1xyXG5cclxuXHRpZiAoIGwgPiAyICYmIHBvaW50c1sgbCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7XHJcblxyXG5cdFx0cG9pbnRzLnBvcCgpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApIHtcclxuXHJcblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udG91ci5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnggKTtcclxuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFNoYXBlVXRpbHMgfTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqXHJcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXHJcbiAqICBzdGVwczogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgZm9yIHotc2lkZSBleHRydXNpb25zIC8gdXNlZCBmb3Igc3ViZGl2aWRpbmcgc2VnbWVudHMgb2YgZXh0cnVkZSBzcGxpbmUgdG9vXHJcbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gRGVwdGggdG8gZXh0cnVkZSB0aGUgc2hhcGVcclxuICpcclxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXHJcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0aGUgb3JpZ2luYWwgc2hhcGUgYmV2ZWwgZ29lc1xyXG4gKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbFxyXG4gKiAgYmV2ZWxPZmZzZXQ6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIGRvZXMgYmV2ZWwgc3RhcnRcclxuICogIGJldmVsU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgYmV2ZWwgbGF5ZXJzXHJcbiAqXHJcbiAqICBleHRydWRlUGF0aDogPFRIUkVFLkN1cnZlPiAvLyBjdXJ2ZSB0byBleHRydWRlIHNoYXBlIGFsb25nXHJcbiAqXHJcbiAqICBVVkdlbmVyYXRvcjogPE9iamVjdD4gLy8gb2JqZWN0IHRoYXQgcHJvdmlkZXMgVVYgZ2VuZXJhdG9yIGZ1bmN0aW9uc1xyXG4gKlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0ICogYXMgQ3VydmVzIGZyb20gJy4uL2V4dHJhcy9jdXJ2ZXMvQ3VydmVzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uL2V4dHJhcy9jb3JlL1NoYXBlLmpzJztcclxuaW1wb3J0IHsgU2hhcGVVdGlscyB9IGZyb20gJy4uL2V4dHJhcy9TaGFwZVV0aWxzLmpzJztcclxuXHJcbmNsYXNzIEV4dHJ1ZGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHNoYXBlcyA9IG5ldyBTaGFwZSggWyBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0gMC41LCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0gMC41LCAtIDAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAtIDAuNSApIF0gKSwgb3B0aW9ucyA9IHt9ICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcclxuXHRcdFx0b3B0aW9uczogb3B0aW9uc1xyXG5cdFx0fTtcclxuXHJcblx0XHRzaGFwZXMgPSBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA/IHNoYXBlcyA6IFsgc2hhcGVzIF07XHJcblxyXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdGNvbnN0IHZlcnRpY2VzQXJyYXkgPSBbXTtcclxuXHRcdGNvbnN0IHV2QXJyYXkgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XHJcblx0XHRcdGFkZFNoYXBlKCBzaGFwZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXNBcnJheSwgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xyXG5cclxuXHRcdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuXHJcblx0XHQvLyBmdW5jdGlvbnNcclxuXHJcblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBwbGFjZWhvbGRlciA9IFtdO1xyXG5cclxuXHRcdFx0Ly8gb3B0aW9uc1xyXG5cclxuXHRcdFx0Y29uc3QgY3VydmVTZWdtZW50cyA9IG9wdGlvbnMuY3VydmVTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzIDogMTI7XHJcblx0XHRcdGNvbnN0IHN0ZXBzID0gb3B0aW9ucy5zdGVwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVwcyA6IDE7XHJcblx0XHRcdGNvbnN0IGRlcHRoID0gb3B0aW9ucy5kZXB0aCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aCA6IDE7XHJcblxyXG5cdFx0XHRsZXQgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcclxuXHRcdFx0bGV0IGJldmVsVGhpY2tuZXNzID0gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyA6IDAuMjtcclxuXHRcdFx0bGV0IGJldmVsU2l6ZSA9IG9wdGlvbnMuYmV2ZWxTaXplICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2l6ZSA6IGJldmVsVGhpY2tuZXNzIC0gMC4xO1xyXG5cdFx0XHRsZXQgYmV2ZWxPZmZzZXQgPSBvcHRpb25zLmJldmVsT2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsT2Zmc2V0IDogMDtcclxuXHRcdFx0bGV0IGJldmVsU2VnbWVudHMgPSBvcHRpb25zLmJldmVsU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyA6IDM7XHJcblxyXG5cdFx0XHRjb25zdCBleHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGg7XHJcblxyXG5cdFx0XHRjb25zdCB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xyXG5cclxuXHRcdFx0Ly9cclxuXHJcblx0XHRcdGxldCBleHRydWRlUHRzLCBleHRydWRlQnlQYXRoID0gZmFsc2U7XHJcblx0XHRcdGxldCBzcGxpbmVUdWJlLCBiaW5vcm1hbCwgbm9ybWFsLCBwb3NpdGlvbjI7XHJcblxyXG5cdFx0XHRpZiAoIGV4dHJ1ZGVQYXRoICkge1xyXG5cclxuXHRcdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xyXG5cclxuXHRcdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcclxuXHRcdFx0XHRiZXZlbEVuYWJsZWQgPSBmYWxzZTsgLy8gYmV2ZWxzIG5vdCBzdXBwb3J0ZWQgZm9yIHBhdGggZXh0cnVzaW9uXHJcblxyXG5cdFx0XHRcdC8vIFNFVFVQIFROQiB2YXJpYWJsZXNcclxuXHJcblx0XHRcdFx0Ly8gVE9ETzEgLSBoYXZlIGEgLmlzQ2xvc2VkIGluIHNwbGluZT9cclxuXHJcblx0XHRcdFx0c3BsaW5lVHViZSA9IGV4dHJ1ZGVQYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHN0ZXBzLCBmYWxzZSApO1xyXG5cclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhzcGxpbmVUdWJlLCAnc3BsaW5lVHViZScsIHNwbGluZVR1YmUubm9ybWFscy5sZW5ndGgsICdzdGVwcycsIHN0ZXBzLCAnZXh0cnVkZVB0cycsIGV4dHJ1ZGVQdHMubGVuZ3RoKTtcclxuXHJcblx0XHRcdFx0Ymlub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRcdG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNhZmVndWFyZHMgaWYgYmV2ZWxzIGFyZSBub3QgZW5hYmxlZFxyXG5cclxuXHRcdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcclxuXHJcblx0XHRcdFx0YmV2ZWxTZWdtZW50cyA9IDA7XHJcblx0XHRcdFx0YmV2ZWxUaGlja25lc3MgPSAwO1xyXG5cdFx0XHRcdGJldmVsU2l6ZSA9IDA7XHJcblx0XHRcdFx0YmV2ZWxPZmZzZXQgPSAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXHJcblxyXG5cdFx0XHRjb25zdCBzaGFwZVBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcclxuXHJcblx0XHRcdGxldCB2ZXJ0aWNlcyA9IHNoYXBlUG9pbnRzLnNoYXBlO1xyXG5cdFx0XHRjb25zdCBob2xlcyA9IHNoYXBlUG9pbnRzLmhvbGVzO1xyXG5cclxuXHRcdFx0Y29uc3QgcmV2ZXJzZSA9ICEgU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggdmVydGljZXMgKTtcclxuXHJcblx0XHRcdGlmICggcmV2ZXJzZSApIHtcclxuXHJcblx0XHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5yZXZlcnNlKCk7XHJcblxyXG5cdFx0XHRcdC8vIE1heWJlIHdlIHNob3VsZCBhbHNvIGNoZWNrIGlmIGhvbGVzIGFyZSBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBqdXN0IHRvIGJlIHNhZmUgLi4uXHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBhaG9sZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XHJcblxyXG5cdFx0XHQvKiBWZXJ0aWNlcyAqL1xyXG5cclxuXHRcdFx0Y29uc3QgY29udG91ciA9IHZlcnRpY2VzOyAvLyB2ZXJ0aWNlcyBoYXMgYWxsIHBvaW50cyBidXQgY29udG91ciBoYXMgb25seSBwb2ludHMgb2YgY2lyY3VtZmVyZW5jZVxyXG5cclxuXHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KCBhaG9sZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNjYWxlUHQyKCBwdCwgdmVjLCBzaXplICkge1xyXG5cclxuXHRcdFx0XHRpZiAoICEgdmVjICkgY29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogdmVjIGRvZXMgbm90IGV4aXN0JyApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gcHQuY2xvbmUoKS5hZGRTY2FsZWRWZWN0b3IoIHZlYywgc2l6ZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgdmxlbiA9IHZlcnRpY2VzLmxlbmd0aCwgZmxlbiA9IGZhY2VzLmxlbmd0aDtcclxuXHJcblxyXG5cdFx0XHQvLyBGaW5kIGRpcmVjdGlvbnMgZm9yIHBvaW50IG1vdmVtZW50XHJcblxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZ2V0QmV2ZWxWZWMoIGluUHQsIGluUHJldiwgaW5OZXh0ICkge1xyXG5cclxuXHRcdFx0XHQvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyXHJcblx0XHRcdFx0Ly8gICBzaGlmdGVkIGJ5IDEgdW5pdCAobGVuZ3RoIG9mIG5vcm1hbGl6ZWQgdmVjdG9yKSB0byB0aGUgbGVmdFxyXG5cdFx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxyXG5cdFx0XHRcdC8vXHJcblx0XHRcdFx0Ly8gaW5QdCcgaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIGxpbmVzIHBhcmFsbGVsIHRvIHRoZSB0d29cclxuXHRcdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxyXG5cclxuXHRcdFx0XHRsZXQgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdFxyXG5cclxuXHRcdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXHJcblx0XHRcdFx0Ly8gaHR0cDovL2dlb21hbGdvcml0aG1zLmNvbS9hMDUtX2ludGVyc2VjdC0xLmh0bWxcclxuXHJcblx0XHRcdFx0Y29uc3Qgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcclxuXHRcdFx0XHRcdHZfcHJldl95ID0gaW5QdC55IC0gaW5QcmV2Lnk7XHJcblx0XHRcdFx0Y29uc3Qgdl9uZXh0X3ggPSBpbk5leHQueCAtIGluUHQueCxcclxuXHRcdFx0XHRcdHZfbmV4dF95ID0gaW5OZXh0LnkgLSBpblB0Lnk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHZfcHJldl9sZW5zcSA9ICggdl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kgKTtcclxuXHJcblx0XHRcdFx0Ly8gY2hlY2sgZm9yIGNvbGxpbmVhciBlZGdlc1xyXG5cdFx0XHRcdGNvbnN0IGNvbGxpbmVhcjAgPSAoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XHJcblxyXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIGNvbGxpbmVhcjAgKSA+IE51bWJlci5FUFNJTE9OICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIG5vdCBjb2xsaW5lYXJcclxuXHJcblx0XHRcdFx0XHQvLyBsZW5ndGggb2YgdmVjdG9ycyBmb3Igbm9ybWFsaXppbmdcclxuXHJcblx0XHRcdFx0XHRjb25zdCB2X3ByZXZfbGVuID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2hpZnQgYWRqYWNlbnQgcG9pbnRzIGJ5IHVuaXQgdmVjdG9ycyB0byB0aGUgbGVmdFxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHB0UHJldlNoaWZ0X3ggPSAoIGluUHJldi54IC0gdl9wcmV2X3kgLyB2X3ByZXZfbGVuICk7XHJcblx0XHRcdFx0XHRjb25zdCBwdFByZXZTaGlmdF95ID0gKCBpblByZXYueSArIHZfcHJldl94IC8gdl9wcmV2X2xlbiApO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHB0TmV4dFNoaWZ0X3ggPSAoIGluTmV4dC54IC0gdl9uZXh0X3kgLyB2X25leHRfbGVuICk7XHJcblx0XHRcdFx0XHRjb25zdCBwdE5leHRTaGlmdF95ID0gKCBpbk5leHQueSArIHZfbmV4dF94IC8gdl9uZXh0X2xlbiApO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNjYWxpbmcgZmFjdG9yIGZvciB2X3ByZXYgdG8gaW50ZXJzZWN0aW9uIHBvaW50XHJcblxyXG5cdFx0XHRcdFx0Y29uc3Qgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cclxuXHRcdFx0XHRcdFx0XHQoIHB0TmV4dFNoaWZ0X3kgLSBwdFByZXZTaGlmdF95ICkgKiB2X25leHRfeCApIC9cclxuXHRcdFx0XHRcdFx0KCB2X3ByZXZfeCAqIHZfbmV4dF95IC0gdl9wcmV2X3kgKiB2X25leHRfeCApO1xyXG5cclxuXHRcdFx0XHRcdC8vIHZlY3RvciBmcm9tIGluUHQgdG8gaW50ZXJzZWN0aW9uIHBvaW50XHJcblxyXG5cdFx0XHRcdFx0dl90cmFuc194ID0gKCBwdFByZXZTaGlmdF94ICsgdl9wcmV2X3ggKiBzZiAtIGluUHQueCApO1xyXG5cdFx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XHJcblx0XHRcdFx0XHQvLyAgYnV0IHByZXZlbnQgY3Jhenkgc3Bpa2VzXHJcblx0XHRcdFx0XHRjb25zdCB2X3RyYW5zX2xlbnNxID0gKCB2X3RyYW5zX3ggKiB2X3RyYW5zX3ggKyB2X3RyYW5zX3kgKiB2X3RyYW5zX3kgKTtcclxuXHRcdFx0XHRcdGlmICggdl90cmFuc19sZW5zcSA8PSAyICkge1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3gsIHZfdHJhbnNfeSApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfdHJhbnNfbGVuc3EgLyAyICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgY29sbGluZWFyIGVkZ2VzXHJcblxyXG5cdFx0XHRcdFx0bGV0IGRpcmVjdGlvbl9lcSA9IGZhbHNlOyAvLyBhc3N1bWVzOiBvcHBvc2l0ZVxyXG5cclxuXHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCB2X3ByZXZfeCA8IC0gTnVtYmVyLkVQU0lMT04gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggTWF0aC5zaWduKCB2X3ByZXZfeSApID09PSBNYXRoLnNpZ24oIHZfbmV4dF95ICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGRpcmVjdGlvbl9lcSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc2VxdWVuY2VcIik7XHJcblx0XHRcdFx0XHRcdHZfdHJhbnNfeCA9IC0gdl9wcmV2X3k7XHJcblx0XHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl94O1xyXG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNwaWtlXCIpO1xyXG5cdFx0XHRcdFx0XHR2X3RyYW5zX3ggPSB2X3ByZXZfeDtcclxuXHRcdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XHJcblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxIC8gMiApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCAvIHNocmlua19ieSwgdl90cmFuc195IC8gc2hyaW5rX2J5ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0Y29uc3QgY29udG91ck1vdmVtZW50cyA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xyXG5cdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdpLGosaycsIGksIGogLCBrKVxyXG5cclxuXHRcdFx0XHRjb250b3VyTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggY29udG91clsgaSBdLCBjb250b3VyWyBqIF0sIGNvbnRvdXJbIGsgXSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgaG9sZXNNb3ZlbWVudHMgPSBbXTtcclxuXHRcdFx0bGV0IG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgYWhvbGUgPSBob2xlc1sgaCBdO1xyXG5cclxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcclxuXHRcdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcclxuXHJcblx0XHRcdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXHJcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggYWhvbGVbIGkgXSwgYWhvbGVbIGogXSwgYWhvbGVbIGsgXSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGhvbGVzTW92ZW1lbnRzLnB1c2goIG9uZUhvbGVNb3ZlbWVudHMgKTtcclxuXHRcdFx0XHR2ZXJ0aWNlc01vdmVtZW50cyA9IHZlcnRpY2VzTW92ZW1lbnRzLmNvbmNhdCggb25lSG9sZU1vdmVtZW50cyApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdC8vIExvb3AgYmV2ZWxTZWdtZW50cywgMSBmb3IgdGhlIGZyb250LCAxIGZvciB0aGUgYmFja1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGIgPSAwOyBiIDwgYmV2ZWxTZWdtZW50czsgYiArKyApIHtcclxuXHJcblx0XHRcdFx0Ly9mb3IgKCBiID0gYmV2ZWxTZWdtZW50czsgYiA+IDA7IGIgLS0gKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcclxuXHRcdFx0XHRjb25zdCB6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XHJcblx0XHRcdFx0Y29uc3QgYnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICkgKyBiZXZlbE9mZnNldDtcclxuXHJcblx0XHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcclxuXHJcblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gZXhwYW5kIGhvbGVzXHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XHJcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcclxuXHJcblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAtIHogKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICsgYmV2ZWxPZmZzZXQ7XHJcblxyXG5cdFx0XHQvLyBCYWNrIGZhY2luZyB2ZXJ0aWNlc1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgdmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XHJcblxyXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIDAgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIDAgXS55LCBleHRydWRlUHRzWyAwIF0ueCApO1xyXG5cclxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcclxuXHRcdFx0XHRcdGJpbm9ybWFsLmNvcHkoIHNwbGluZVR1YmUuYmlub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC55ICk7XHJcblxyXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIDAgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xyXG5cclxuXHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi5cclxuXHRcdFx0Ly8gSW5jbHVkaW5nIGZyb250IGZhY2luZyB2ZXJ0aWNlc1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IHMgPSAxOyBzIDw9IHN0ZXBzOyBzICsrICkge1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB2bGVuOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0MiggdmVydGljZXNbIGkgXSwgdmVydGljZXNNb3ZlbWVudHNbIGkgXSwgYnMgKSA6IHZlcnRpY2VzWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggLyBzdGVwcyAqIHMgKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xyXG5cclxuXHRcdFx0XHRcdFx0bm9ybWFsLmNvcHkoIHNwbGluZVR1YmUubm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueCApO1xyXG5cdFx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xyXG5cclxuXHRcdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIHMgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xyXG5cclxuXHRcdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdC8vIEFkZCBiZXZlbCBzZWdtZW50cyBwbGFuZXNcclxuXHJcblx0XHRcdC8vZm9yICggYiA9IDE7IGIgPD0gYmV2ZWxTZWdtZW50czsgYiArKyApIHtcclxuXHRcdFx0Zm9yICggbGV0IGIgPSBiZXZlbFNlZ21lbnRzIC0gMTsgYiA+PSAwOyBiIC0tICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB0ID0gYiAvIGJldmVsU2VnbWVudHM7XHJcblx0XHRcdFx0Y29uc3QgeiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xyXG5cdFx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApICsgYmV2ZWxPZmZzZXQ7XHJcblxyXG5cdFx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XHJcblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gZXhwYW5kIGhvbGVzXHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XHJcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnggKyB6ICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvKiBGYWNlcyAqL1xyXG5cclxuXHRcdFx0Ly8gVG9wIGFuZCBib3R0b20gZmFjZXNcclxuXHJcblx0XHRcdGJ1aWxkTGlkRmFjZXMoKTtcclxuXHJcblx0XHRcdC8vIFNpZGVzIGZhY2VzXHJcblxyXG5cdFx0XHRidWlsZFNpZGVGYWNlcygpO1xyXG5cclxuXHJcblx0XHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGJ1aWxkTGlkRmFjZXMoKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xyXG5cclxuXHRcdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcclxuXHJcblx0XHRcdFx0XHRsZXQgbGF5ZXIgPSAwOyAvLyBzdGVwcyArIDFcclxuXHRcdFx0XHRcdGxldCBvZmZzZXQgPSB2bGVuICogbGF5ZXI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xyXG5cdFx0XHRcdFx0XHRmMyggZmFjZVsgMiBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDAgXSArIG9mZnNldCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRsYXllciA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XHJcblx0XHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVG9wIGZhY2VzXHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xyXG5cdFx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDIgXSArIG9mZnNldCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgZmFjZSA9IGZhY2VzWyBpIF07XHJcblx0XHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFRvcCBmYWNlc1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBmYWNlID0gZmFjZXNbIGkgXTtcclxuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMSBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAyIF0gKyB2bGVuICogc3RlcHMgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ3JlYXRlIGZhY2VzIGZvciB0aGUgei1zaWRlcyBvZiB0aGUgc2hhcGVcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGJ1aWxkU2lkZUZhY2VzKCkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcclxuXHRcdFx0XHRsZXQgbGF5ZXJvZmZzZXQgPSAwO1xyXG5cdFx0XHRcdHNpZGV3YWxscyggY29udG91ciwgbGF5ZXJvZmZzZXQgKTtcclxuXHRcdFx0XHRsYXllcm9mZnNldCArPSBjb250b3VyLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcclxuXHRcdFx0XHRcdHNpZGV3YWxscyggYWhvbGUsIGxheWVyb2Zmc2V0ICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8sIHRydWVcclxuXHRcdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMSApO1xyXG5cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNpZGV3YWxscyggY29udG91ciwgbGF5ZXJvZmZzZXQgKSB7XHJcblxyXG5cdFx0XHRcdGxldCBpID0gY29udG91ci5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGogPSBpO1xyXG5cdFx0XHRcdFx0bGV0IGsgPSBpIC0gMTtcclxuXHRcdFx0XHRcdGlmICggayA8IDAgKSBrID0gY29udG91ci5sZW5ndGggLSAxO1xyXG5cclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBzID0gMCwgc2wgPSAoIHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDIgKTsgcyA8IHNsOyBzICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3Qgc2xlbjEgPSB2bGVuICogcztcclxuXHRcdFx0XHRcdFx0Y29uc3Qgc2xlbjIgPSB2bGVuICogKCBzICsgMSApO1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgYSA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4xLFxyXG5cdFx0XHRcdFx0XHRcdGIgPSBsYXllcm9mZnNldCArIGsgKyBzbGVuMSxcclxuXHRcdFx0XHRcdFx0XHRjID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsXHJcblx0XHRcdFx0XHRcdFx0ZCA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4yO1xyXG5cclxuXHRcdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIHYoIHgsIHksIHogKSB7XHJcblxyXG5cdFx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHggKTtcclxuXHRcdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB5ICk7XHJcblx0XHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGYzKCBhLCBiLCBjICkge1xyXG5cclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgbmV4dEluZGV4ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xyXG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlVG9wVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XHJcblxyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDIgXSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZjQoIGEsIGIsIGMsIGQgKSB7XHJcblxyXG5cdFx0XHRcdGFkZFZlcnRleCggYSApO1xyXG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xyXG5cdFx0XHRcdGFkZFZlcnRleCggZCApO1xyXG5cclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcclxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGQgKTtcclxuXHJcblxyXG5cdFx0XHRcdGNvbnN0IG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcclxuXHRcdFx0XHRjb25zdCB1dnMgPSB1dmdlbi5nZW5lcmF0ZVNpZGVXYWxsVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSA2LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XHJcblxyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xyXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xyXG5cclxuXHRcdFx0XHRhZGRVViggdXZzWyAxIF0gKTtcclxuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcclxuXHRcdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGFkZFZlcnRleCggaW5kZXggKSB7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDAgXSApO1xyXG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDEgXSApO1xyXG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGFkZFVWKCB2ZWN0b3IyICkge1xyXG5cclxuXHRcdFx0XHR1dkFycmF5LnB1c2goIHZlY3RvcjIueCApO1xyXG5cdFx0XHRcdHV2QXJyYXkucHVzaCggdmVjdG9yMi55ICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XHJcblx0XHRjb25zdCBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XHJcblxyXG5cdFx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21KU09OKCBkYXRhLCBzaGFwZXMgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gZGF0YS5zaGFwZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xyXG5cclxuXHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZXh0cnVkZVBhdGggPSBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGg7XHJcblxyXG5cdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0ZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gbmV3IEN1cnZlc1sgZXh0cnVkZVBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGV4dHJ1ZGVQYXRoICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KCBnZW9tZXRyeVNoYXBlcywgZGF0YS5vcHRpb25zICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IFdvcmxkVVZHZW5lcmF0b3IgPSB7XHJcblxyXG5cdGdlbmVyYXRlVG9wVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDICkge1xyXG5cclxuXHRcdGNvbnN0IGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XHJcblx0XHRjb25zdCBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcclxuXHRcdGNvbnN0IGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XHJcblx0XHRjb25zdCBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcclxuXHRcdGNvbnN0IGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XHJcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcclxuXHJcblx0XHRyZXR1cm4gW1xyXG5cdFx0XHRuZXcgVmVjdG9yMiggYV94LCBhX3kgKSxcclxuXHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgYl95ICksXHJcblx0XHRcdG5ldyBWZWN0b3IyKCBjX3gsIGNfeSApXHJcblx0XHRdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZW5lcmF0ZVNpZGVXYWxsVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDLCBpbmRleEQgKSB7XHJcblxyXG5cdFx0Y29uc3QgYV94ID0gdmVydGljZXNbIGluZGV4QSAqIDMgXTtcclxuXHRcdGNvbnN0IGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xyXG5cdFx0Y29uc3QgYV96ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAyIF07XHJcblx0XHRjb25zdCBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xyXG5cdFx0Y29uc3QgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XHJcblx0XHRjb25zdCBiX3ogPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDIgXTtcclxuXHRcdGNvbnN0IGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XHJcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcclxuXHRcdGNvbnN0IGNfeiA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMiBdO1xyXG5cdFx0Y29uc3QgZF94ID0gdmVydGljZXNbIGluZGV4RCAqIDMgXTtcclxuXHRcdGNvbnN0IGRfeSA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMSBdO1xyXG5cdFx0Y29uc3QgZF96ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAyIF07XHJcblxyXG5cdFx0aWYgKCBNYXRoLmFicyggYV95IC0gYl95ICkgPCBNYXRoLmFicyggYV94IC0gYl94ICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMiggYl94LCAxIC0gYl96ICksXHJcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgMSAtIGNfeiApLFxyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxyXG5cdFx0XHRdO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMiggYl95LCAxIC0gYl96ICksXHJcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeSwgMSAtIGNfeiApLFxyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxyXG5cdFx0XHRdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICkge1xyXG5cclxuXHRkYXRhLnNoYXBlcyA9IFtdO1xyXG5cclxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTtcclxuXHJcblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkYXRhLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSwgb3B0aW9ucyApO1xyXG5cclxuXHRpZiAoIG9wdGlvbnMuZXh0cnVkZVBhdGggIT09IHVuZGVmaW5lZCApIGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGgudG9KU09OKCk7XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEV4dHJ1ZGVHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBQb2x5aGVkcm9uR2VvbWV0cnkgfSBmcm9tICcuL1BvbHloZWRyb25HZW9tZXRyeS5qcyc7XHJcblxyXG5jbGFzcyBJY29zYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XHJcblxyXG5cdFx0Y29uc3QgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xyXG5cclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xyXG5cdFx0XHQtIDEsIHQsIDAsIFx0MSwgdCwgMCwgXHQtIDEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXHJcblx0XHRcdDAsIC0gMSwgdCwgXHQwLCAxLCB0LFx0MCwgLSAxLCAtIHQsIFx0MCwgMSwgLSB0LFxyXG5cdFx0XHR0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcclxuXHRcdF07XHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcclxuXHRcdFx0MCwgMTEsIDUsIFx0MCwgNSwgMSwgXHQwLCAxLCA3LCBcdDAsIDcsIDEwLCBcdDAsIDEwLCAxMSxcclxuXHRcdFx0MSwgNSwgOSwgXHQ1LCAxMSwgNCxcdDExLCAxMCwgMixcdDEwLCA3LCA2LFx0NywgMSwgOCxcclxuXHRcdFx0MywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxyXG5cdFx0XHQ0LCA5LCA1LCBcdDIsIDQsIDExLFx0NiwgMiwgMTAsXHQ4LCA2LCA3LFx0OSwgOCwgMVxyXG5cdFx0XTtcclxuXHJcblx0XHRzdXBlciggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdGRldGFpbDogZGV0YWlsXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEljb3NhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgSWNvc2FoZWRyb25HZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBQb2x5aGVkcm9uR2VvbWV0cnkgfSBmcm9tICcuL1BvbHloZWRyb25HZW9tZXRyeS5qcyc7XHJcblxyXG5jbGFzcyBPY3RhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcclxuXHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcclxuXHRcdFx0MSwgMCwgMCwgXHQtIDEsIDAsIDAsXHQwLCAxLCAwLFxyXG5cdFx0XHQwLCAtIDEsIDAsIFx0MCwgMCwgMSxcdDAsIDAsIC0gMVxyXG5cdFx0XTtcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gW1xyXG5cdFx0XHQwLCAyLCA0LFx0MCwgNCwgMyxcdDAsIDMsIDUsXHJcblx0XHRcdDAsIDUsIDIsXHQxLCAyLCA1LFx0MSwgNSwgMyxcclxuXHRcdFx0MSwgMywgNCxcdDEsIDQsIDJcclxuXHRcdF07XHJcblxyXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdPY3RhaGVkcm9uR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdGRldGFpbDogZGV0YWlsXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IE9jdGFoZWRyb25HZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE9jdGFoZWRyb25HZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5cclxuY2xhc3MgUGxhbmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRcdHdpZHRoOiB3aWR0aCxcclxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXHJcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXHJcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50c1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCB3aWR0aF9oYWxmID0gd2lkdGggLyAyO1xyXG5cdFx0Y29uc3QgaGVpZ2h0X2hhbGYgPSBoZWlnaHQgLyAyO1xyXG5cclxuXHRcdGNvbnN0IGdyaWRYID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xyXG5cdFx0Y29uc3QgZ3JpZFkgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xyXG5cclxuXHRcdGNvbnN0IGdyaWRYMSA9IGdyaWRYICsgMTtcclxuXHRcdGNvbnN0IGdyaWRZMSA9IGdyaWRZICsgMTtcclxuXHJcblx0XHRjb25zdCBzZWdtZW50X3dpZHRoID0gd2lkdGggLyBncmlkWDtcclxuXHRcdGNvbnN0IHNlZ21lbnRfaGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gW107XHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xyXG5cdFx0Y29uc3QgdXZzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTE7IGl5ICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgeCA9IGl4ICogc2VnbWVudF93aWR0aCAtIHdpZHRoX2hhbGY7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIC0geSwgMCApO1xyXG5cclxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcclxuXHJcblx0XHRcdFx0dXZzLnB1c2goIGl4IC8gZ3JpZFggKTtcclxuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xyXG5cdFx0XHRcdGNvbnN0IGIgPSBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7XHJcblx0XHRcdFx0Y29uc3QgYyA9ICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApO1xyXG5cdFx0XHRcdGNvbnN0IGQgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQbGFuZUdlb21ldHJ5KCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCwgZGF0YS53aWR0aFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFBsYW5lR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY2xhc3MgUmluZ0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggaW5uZXJSYWRpdXMgPSAwLjUsIG91dGVyUmFkaXVzID0gMSwgdGhldGFTZWdtZW50cyA9IDMyLCBwaGlTZWdtZW50cyA9IDEsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1JpbmdHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXHJcblx0XHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcclxuXHRcdFx0dGhldGFTZWdtZW50czogdGhldGFTZWdtZW50cyxcclxuXHRcdFx0cGhpU2VnbWVudHM6IHBoaVNlZ21lbnRzLFxyXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxyXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcclxuXHRcdH07XHJcblxyXG5cdFx0dGhldGFTZWdtZW50cyA9IE1hdGgubWF4KCAzLCB0aGV0YVNlZ21lbnRzICk7XHJcblx0XHRwaGlTZWdtZW50cyA9IE1hdGgubWF4KCAxLCBwaGlTZWdtZW50cyApO1xyXG5cclxuXHRcdC8vIGJ1ZmZlcnNcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gW107XHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xyXG5cdFx0Y29uc3QgdXZzID0gW107XHJcblxyXG5cdFx0Ly8gc29tZSBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdFx0bGV0IHJhZGl1cyA9IGlubmVyUmFkaXVzO1xyXG5cdFx0Y29uc3QgcmFkaXVzU3RlcCA9ICggKCBvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzICkgLyBwaGlTZWdtZW50cyApO1xyXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHBoaVNlZ21lbnRzOyBqICsrICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHZhbHVlcyBhcmUgZ2VuZXJhdGUgZnJvbSB0aGUgaW5zaWRlIG9mIHRoZSByaW5nIHRvIHRoZSBvdXRzaWRlXHJcblxyXG5cdFx0XHRcdGNvbnN0IHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgaSAvIHRoZXRhU2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcclxuXHJcblx0XHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcclxuXHRcdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdFx0Ly8gbm9ybWFsXHJcblxyXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xyXG5cclxuXHRcdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0XHR1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcclxuXHRcdFx0XHR1di55ID0gKCB2ZXJ0ZXgueSAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcclxuXHJcblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGluY3JlYXNlIHRoZSByYWRpdXMgZm9yIG5leHQgcm93IG9mIHZlcnRpY2VzXHJcblxyXG5cdFx0XHRyYWRpdXMgKz0gcmFkaXVzU3RlcDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHBoaVNlZ21lbnRzOyBqICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdGhldGFTZWdtZW50TGV2ZWwgPSBqICogKCB0aGV0YVNlZ21lbnRzICsgMSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2VnbWVudCA9IGkgKyB0aGV0YVNlZ21lbnRMZXZlbDtcclxuXHJcblx0XHRcdFx0Y29uc3QgYSA9IHNlZ21lbnQ7XHJcblx0XHRcdFx0Y29uc3QgYiA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMTtcclxuXHRcdFx0XHRjb25zdCBjID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAyO1xyXG5cdFx0XHRcdGNvbnN0IGQgPSBzZWdtZW50ICsgMTtcclxuXHJcblx0XHRcdFx0Ly8gZmFjZXNcclxuXHJcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XHJcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgUmluZ0dlb21ldHJ5KCBkYXRhLmlubmVyUmFkaXVzLCBkYXRhLm91dGVyUmFkaXVzLCBkYXRhLnRoZXRhU2VnbWVudHMsIGRhdGEucGhpU2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgUmluZ0dlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vZXh0cmFzL2NvcmUvU2hhcGUuanMnO1xyXG5pbXBvcnQgeyBTaGFwZVV0aWxzIH0gZnJvbSAnLi4vZXh0cmFzL1NoYXBlVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuXHJcbmNsYXNzIFNoYXBlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBzaGFwZXMgPSBuZXcgU2hhcGUoIFsgbmV3IFZlY3RvcjIoIDAsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIC0gMC41ICksIG5ldyBWZWN0b3IyKCAwLjUsIC0gMC41ICkgXSApLCBjdXJ2ZVNlZ21lbnRzID0gMTIgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcclxuXHRcdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBidWZmZXJzXHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cclxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0XHRsZXQgZ3JvdXBTdGFydCA9IDA7XHJcblx0XHRsZXQgZ3JvdXBDb3VudCA9IDA7XHJcblxyXG5cdFx0Ly8gYWxsb3cgc2luZ2xlIGFuZCBhcnJheSB2YWx1ZXMgZm9yIFwic2hhcGVzXCIgcGFyYW1ldGVyXHJcblxyXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRhZGRTaGFwZSggc2hhcGVzICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNoYXBlcy5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGFkZFNoYXBlKCBzaGFwZXNbIGkgXSApO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCBpICk7IC8vIGVuYWJsZXMgTXVsdGlNYXRlcmlhbCBzdXBwb3J0XHJcblxyXG5cdFx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcclxuXHRcdFx0XHRncm91cENvdW50ID0gMDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cclxuXHJcblx0XHQvLyBoZWxwZXIgZnVuY3Rpb25zXHJcblxyXG5cdFx0ZnVuY3Rpb24gYWRkU2hhcGUoIHNoYXBlICkge1xyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXhPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xyXG5cdFx0XHRjb25zdCBwb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XHJcblxyXG5cdFx0XHRsZXQgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcclxuXHRcdFx0Y29uc3Qgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlcztcclxuXHJcblx0XHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xyXG5cclxuXHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5yZXZlcnNlKCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZUhvbGUgKSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHRzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApO1xyXG5cclxuXHRcdFx0Ly8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXlcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlSG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xyXG5cdFx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZVZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCAwICk7XHJcblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XHJcblx0XHRcdFx0dXZzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSApOyAvLyB3b3JsZCB1dnNcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGluZGljZXNcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRjb25zdCBhID0gZmFjZVsgMCBdICsgaW5kZXhPZmZzZXQ7XHJcblx0XHRcdFx0Y29uc3QgYiA9IGZhY2VbIDEgXSArIGluZGV4T2Zmc2V0O1xyXG5cdFx0XHRcdGNvbnN0IGMgPSBmYWNlWyAyIF0gKyBpbmRleE9mZnNldDtcclxuXHJcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7XHJcblx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcclxuXHJcblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xyXG5cclxuXHRcdHJldHVybiB0b0pTT04oIHNoYXBlcywgZGF0YSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSwgc2hhcGVzICkge1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5U2hhcGVzID0gW107XHJcblxyXG5cdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcclxuXHJcblx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggZ2VvbWV0cnlTaGFwZXMsIGRhdGEuY3VydmVTZWdtZW50cyApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgZGF0YSApIHtcclxuXHJcblx0ZGF0YS5zaGFwZXMgPSBbXTtcclxuXHJcblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XHJcblxyXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTaGFwZUdlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY2xhc3MgU3BoZXJlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB3aWR0aFNlZ21lbnRzID0gMzIsIGhlaWdodFNlZ21lbnRzID0gMTYsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXHJcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxyXG5cdFx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcclxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcclxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXHJcblx0XHR9O1xyXG5cclxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApICk7XHJcblx0XHRoZWlnaHRTZWdtZW50cyA9IE1hdGgubWF4KCAyLCBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApICk7XHJcblxyXG5cdFx0Y29uc3QgdGhldGFFbmQgPSBNYXRoLm1pbiggdGhldGFTdGFydCArIHRoZXRhTGVuZ3RoLCBNYXRoLlBJICk7XHJcblxyXG5cdFx0bGV0IGluZGV4ID0gMDtcclxuXHRcdGNvbnN0IGdyaWQgPSBbXTtcclxuXHJcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHQvLyBidWZmZXJzXHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cclxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcclxuXHJcblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8PSBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCB2ZXJ0aWNlc1JvdyA9IFtdO1xyXG5cclxuXHRcdFx0Y29uc3QgdiA9IGl5IC8gaGVpZ2h0U2VnbWVudHM7XHJcblxyXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2UgZm9yIHRoZSBwb2xlc1xyXG5cclxuXHRcdFx0bGV0IHVPZmZzZXQgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBpeSA9PT0gMCAmJiB0aGV0YVN0YXJ0ID09PSAwICkge1xyXG5cclxuXHRcdFx0XHR1T2Zmc2V0ID0gMC41IC8gd2lkdGhTZWdtZW50cztcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGl5ID09PSBoZWlnaHRTZWdtZW50cyAmJiB0aGV0YUVuZCA9PT0gTWF0aC5QSSApIHtcclxuXHJcblx0XHRcdFx0dU9mZnNldCA9IC0gMC41IC8gd2lkdGhTZWdtZW50cztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB1ID0gaXggLyB3aWR0aFNlZ21lbnRzO1xyXG5cclxuXHRcdFx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XHJcblx0XHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xyXG5cdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogTWF0aC5zaW4oIHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCApICogTWF0aC5zaW4oIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcclxuXHJcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xyXG5cclxuXHRcdFx0XHQvLyBub3JtYWxcclxuXHJcblx0XHRcdFx0bm9ybWFsLmNvcHkoIHZlcnRleCApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xyXG5cclxuXHRcdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0XHR1dnMucHVzaCggdSArIHVPZmZzZXQsIDEgLSB2ICk7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGluZGljZXNcclxuXHJcblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXggKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGEgPSBncmlkWyBpeSBdWyBpeCArIDEgXTtcclxuXHRcdFx0XHRjb25zdCBiID0gZ3JpZFsgaXkgXVsgaXggXTtcclxuXHRcdFx0XHRjb25zdCBjID0gZ3JpZFsgaXkgKyAxIF1bIGl4IF07XHJcblx0XHRcdFx0Y29uc3QgZCA9IGdyaWRbIGl5ICsgMSBdWyBpeCArIDEgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBpeSAhPT0gMCB8fCB0aGV0YVN0YXJ0ID4gMCApIGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdGlmICggaXkgIT09IGhlaWdodFNlZ21lbnRzIC0gMSB8fCB0aGV0YUVuZCA8IE1hdGguUEkgKSBpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBTcGhlcmVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5waGlTdGFydCwgZGF0YS5waGlMZW5ndGgsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTcGhlcmVHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBQb2x5aGVkcm9uR2VvbWV0cnkgfSBmcm9tICcuL1BvbHloZWRyb25HZW9tZXRyeS5qcyc7XHJcblxyXG5jbGFzcyBUZXRyYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XHJcblxyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXHJcblx0XHRcdDEsIDEsIDEsIFx0LSAxLCAtIDEsIDEsIFx0LSAxLCAxLCAtIDEsIFx0MSwgLSAxLCAtIDFcclxuXHRcdF07XHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcclxuXHRcdFx0MiwgMSwgMCwgXHQwLCAzLCAyLFx0MSwgMywgMCxcdDIsIDMsIDFcclxuXHRcdF07XHJcblxyXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBUZXRyYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgVGV0cmFoZWRyb25HZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuXHJcbmNsYXNzIFRvcnVzR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB0dWJlID0gMC40LCByYWRpYWxTZWdtZW50cyA9IDEyLCB0dWJ1bGFyU2VnbWVudHMgPSA0OCwgYXJjID0gTWF0aC5QSSAqIDIgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdFx0dHViZTogdHViZSxcclxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcclxuXHRcdFx0YXJjOiBhcmNcclxuXHRcdH07XHJcblxyXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xyXG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XHJcblxyXG5cdFx0Ly8gYnVmZmVyc1xyXG5cclxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XHJcblx0XHRjb25zdCBub3JtYWxzID0gW107XHJcblx0XHRjb25zdCB1dnMgPSBbXTtcclxuXHJcblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdFx0Y29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcclxuXHJcblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIGFyYztcclxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XHJcblxyXG5cdFx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgueCA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguY29zKCB1ICk7XHJcblx0XHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xyXG5cdFx0XHRcdHZlcnRleC56ID0gdHViZSAqIE1hdGguc2luKCB2ICk7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdFx0Ly8gbm9ybWFsXHJcblxyXG5cdFx0XHRcdGNlbnRlci54ID0gcmFkaXVzICogTWF0aC5jb3MoIHUgKTtcclxuXHRcdFx0XHRjZW50ZXIueSA9IHJhZGl1cyAqIE1hdGguc2luKCB1ICk7XHJcblx0XHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xyXG5cclxuXHRcdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xyXG5cdFx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xyXG5cclxuXHRcdGZvciAoIGxldCBqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdC8vIGluZGljZXNcclxuXHJcblx0XHRcdFx0Y29uc3QgYSA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGkgLSAxO1xyXG5cdFx0XHRcdGNvbnN0IGIgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGkgLSAxO1xyXG5cdFx0XHRcdGNvbnN0IGMgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XHJcblx0XHRcdFx0Y29uc3QgZCA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGk7XHJcblxyXG5cdFx0XHRcdC8vIGZhY2VzXHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFRvcnVzR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLnR1YmUsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEudHVidWxhclNlZ21lbnRzLCBkYXRhLmFyYyApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBUb3J1c0dlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY2xhc3MgVG9ydXNLbm90R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB0dWJlID0gMC40LCB0dWJ1bGFyU2VnbWVudHMgPSA2NCwgcmFkaWFsU2VnbWVudHMgPSA4LCBwID0gMiwgcSA9IDMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRcdHR1YmU6IHR1YmUsXHJcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxyXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdHA6IHAsXHJcblx0XHRcdHE6IHFcclxuXHRcdH07XHJcblxyXG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XHJcblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XHJcblxyXG5cdFx0Ly8gYnVmZmVyc1xyXG5cclxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XHJcblx0XHRjb25zdCBub3JtYWxzID0gW107XHJcblx0XHRjb25zdCB1dnMgPSBbXTtcclxuXHJcblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0Y29uc3QgUDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgUDIgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdGNvbnN0IEIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgVCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCBOID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKysgaSApIHtcclxuXHJcblx0XHRcdC8vIHRoZSByYWRpYW4gXCJ1XCIgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZSBvZiB0aGUgY3VycmVudCB0dWJ1bGFyIHNlZ21lbnRcclxuXHJcblx0XHRcdGNvbnN0IHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogcCAqIE1hdGguUEkgKiAyO1xyXG5cclxuXHRcdFx0Ly8gbm93IHdlIGNhbGN1bGF0ZSB0d28gcG9pbnRzLiBQMSBpcyBvdXIgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUsIFAyIGlzIGEgbGl0dGxlIGZhcnRoZXIgYWhlYWQuXHJcblx0XHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcclxuXHJcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xyXG5cdFx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUgKyAwLjAxLCBwLCBxLCByYWRpdXMsIFAyICk7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcclxuXHJcblx0XHRcdFQuc3ViVmVjdG9ycyggUDIsIFAxICk7XHJcblx0XHRcdE4uYWRkVmVjdG9ycyggUDIsIFAxICk7XHJcblx0XHRcdEIuY3Jvc3NWZWN0b3JzKCBULCBOICk7XHJcblx0XHRcdE4uY3Jvc3NWZWN0b3JzKCBCLCBUICk7XHJcblxyXG5cdFx0XHQvLyBub3JtYWxpemUgQiwgTi4gVCBjYW4gYmUgaWdub3JlZCwgd2UgZG9uJ3QgdXNlIGl0XHJcblxyXG5cdFx0XHRCLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHROLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xyXG5cclxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS5cclxuXHRcdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cclxuXHJcblx0XHRcdFx0Y29uc3QgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xyXG5cdFx0XHRcdGNvbnN0IGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcclxuXHRcdFx0XHRjb25zdCBjeSA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xyXG5cclxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXHJcblx0XHRcdFx0Ly8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9ycywgdGhlbiB3ZSBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlXHJcblxyXG5cdFx0XHRcdHZlcnRleC54ID0gUDEueCArICggY3ggKiBOLnggKyBjeSAqIEIueCApO1xyXG5cdFx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xyXG5cdFx0XHRcdHZlcnRleC56ID0gUDEueiArICggY3ggKiBOLnogKyBjeSAqIEIueiApO1xyXG5cclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XHJcblxyXG5cdFx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcclxuXHJcblx0XHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgUDEgKS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XHJcblxyXG5cdFx0XHRcdC8vIHV2XHJcblxyXG5cdFx0XHRcdHV2cy5wdXNoKCBpIC8gdHVidWxhclNlZ21lbnRzICk7XHJcblx0XHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXHJcblxyXG5cdFx0Zm9yICggbGV0IGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdFx0XHRjb25zdCBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcclxuXHRcdFx0XHRjb25zdCBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XHJcblx0XHRcdFx0Y29uc3QgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcclxuXHRcdFx0XHRjb25zdCBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XHJcblxyXG5cdFx0XHRcdC8vIGZhY2VzXHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XHJcblxyXG5cdFx0Ly8gdGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHtcclxuXHJcblx0XHRcdGNvbnN0IGN1ID0gTWF0aC5jb3MoIHUgKTtcclxuXHRcdFx0Y29uc3Qgc3UgPSBNYXRoLnNpbiggdSApO1xyXG5cdFx0XHRjb25zdCBxdU92ZXJQID0gcSAvIHAgKiB1O1xyXG5cdFx0XHRjb25zdCBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XHJcblxyXG5cdFx0XHRwb3NpdGlvbi54ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIDAuNSAqIGN1O1xyXG5cdFx0XHRwb3NpdGlvbi55ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIHN1ICogMC41O1xyXG5cdFx0XHRwb3NpdGlvbi56ID0gcmFkaXVzICogTWF0aC5zaW4oIHF1T3ZlclAgKSAqIDAuNTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFRvcnVzS25vdEdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS50dWJlLCBkYXRhLnR1YnVsYXJTZWdtZW50cywgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5wLCBkYXRhLnEgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgVG9ydXNLbm90R2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0ICogYXMgQ3VydmVzIGZyb20gJy4uL2V4dHJhcy9jdXJ2ZXMvQ3VydmVzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY2xhc3MgVHViZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGF0aCA9IG5ldyBDdXJ2ZXNbICdRdWFkcmF0aWNCZXppZXJDdXJ2ZTMnIF0oIG5ldyBWZWN0b3IzKCAtIDEsIC0gMSwgMCApLCBuZXcgVmVjdG9yMyggLSAxLCAxLCAwICksIG5ldyBWZWN0b3IzKCAxLCAxLCAwICkgKSwgdHVidWxhclNlZ21lbnRzID0gNjQsIHJhZGl1cyA9IDEsIHJhZGlhbFNlZ21lbnRzID0gOCwgY2xvc2VkID0gZmFsc2UgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JztcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRcdHBhdGg6IHBhdGgsXHJcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxyXG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0XHRjbG9zZWQ6IGNsb3NlZFxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBmcmFtZXMgPSBwYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHR1YnVsYXJTZWdtZW50cywgY2xvc2VkICk7XHJcblxyXG5cdFx0Ly8gZXhwb3NlIGludGVybmFsc1xyXG5cclxuXHRcdHRoaXMudGFuZ2VudHMgPSBmcmFtZXMudGFuZ2VudHM7XHJcblx0XHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcclxuXHRcdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcclxuXHJcblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XHJcblx0XHRsZXQgUCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0Ly8gYnVmZmVyXHJcblxyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cclxuXHRcdC8vIGNyZWF0ZSBidWZmZXIgZGF0YVxyXG5cclxuXHRcdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xyXG5cclxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcclxuXHJcblx0XHQvLyBmdW5jdGlvbnNcclxuXHJcblx0XHRmdW5jdGlvbiBnZW5lcmF0ZUJ1ZmZlckRhdGEoKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIG5vdCBjbG9zZWQsIGdlbmVyYXRlIHRoZSBsYXN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFsc1xyXG5cdFx0XHQvLyBhdCB0aGUgcmVndWxhciBwb3NpdGlvbiBvbiB0aGUgZ2l2ZW4gcGF0aFxyXG5cdFx0XHQvL1xyXG5cdFx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgY2xvc2VkLCBkdXBsaWNhdGUgdGhlIGZpcnN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFscyAodXZzIHdpbGwgZGlmZmVyKVxyXG5cclxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcclxuXHJcblx0XHRcdC8vIHV2cyBhcmUgZ2VuZXJhdGVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24uXHJcblx0XHRcdC8vIHRoaXMgbWFrZXMgaXQgZWFzeSBjb21wdXRlIGNvcnJlY3QgdmFsdWVzIGZvciBjbG9zZWQgZ2VvbWV0cmllc1xyXG5cclxuXHRcdFx0Z2VuZXJhdGVVVnMoKTtcclxuXHJcblx0XHRcdC8vIGZpbmFsbHkgY3JlYXRlIGZhY2VzXHJcblxyXG5cdFx0XHRnZW5lcmF0ZUluZGljZXMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVTZWdtZW50KCBpICkge1xyXG5cclxuXHRcdFx0Ly8gd2UgdXNlIGdldFBvaW50QXQgdG8gc2FtcGxlIGV2ZW5seSBkaXN0cmlidXRlZCBwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gcGF0aFxyXG5cclxuXHRcdFx0UCA9IHBhdGguZ2V0UG9pbnRBdCggaSAvIHR1YnVsYXJTZWdtZW50cywgUCApO1xyXG5cclxuXHRcdFx0Ly8gcmV0cmlldmUgY29ycmVzcG9uZGluZyBub3JtYWwgYW5kIGJpbm9ybWFsXHJcblxyXG5cdFx0XHRjb25zdCBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcclxuXHRcdFx0Y29uc3QgQiA9IGZyYW1lcy5iaW5vcm1hbHNbIGkgXTtcclxuXHJcblx0XHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHYgKTtcclxuXHRcdFx0XHRjb25zdCBjb3MgPSAtIE1hdGguY29zKCB2ICk7XHJcblxyXG5cdFx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0XHRub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7XHJcblx0XHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xyXG5cdFx0XHRcdG5vcm1hbC56ID0gKCBjb3MgKiBOLnogKyBzaW4gKiBCLnogKTtcclxuXHRcdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xyXG5cclxuXHRcdFx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcclxuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xyXG5cdFx0XHRcdHZlcnRleC56ID0gUC56ICsgcmFkaXVzICogbm9ybWFsLno7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVJbmRpY2VzKCkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xyXG5cdFx0XHRcdFx0Y29uc3QgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xyXG5cdFx0XHRcdFx0Y29uc3QgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcclxuXHRcdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcclxuXHJcblx0XHRcdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xyXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0dXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7XHJcblx0XHRcdFx0XHR1di55ID0gaiAvIHJhZGlhbFNlZ21lbnRzO1xyXG5cclxuXHRcdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTigpIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XHJcblxyXG5cdFx0ZGF0YS5wYXRoID0gdGhpcy5wYXJhbWV0ZXJzLnBhdGgudG9KU09OKCk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xyXG5cclxuXHRcdC8vIFRoaXMgb25seSB3b3JrcyBmb3IgYnVpbHQtaW4gY3VydmVzIChlLmcuIENhdG11bGxSb21DdXJ2ZTMpLlxyXG5cdFx0Ly8gVXNlciBkZWZpbmVkIGN1cnZlcyBvciBpbnN0YW5jZXMgb2YgQ3VydmVQYXRoIHdpbGwgbm90IGJlIGRlc2VyaWFsaXplZC5cclxuXHRcdHJldHVybiBuZXcgVHViZUdlb21ldHJ5KFxyXG5cdFx0XHRuZXcgQ3VydmVzWyBkYXRhLnBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGRhdGEucGF0aCApLFxyXG5cdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcclxuXHRcdFx0ZGF0YS5yYWRpdXMsXHJcblx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdGRhdGEuY2xvc2VkXHJcblx0XHQpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgVHViZUdlb21ldHJ5IH07XHJcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5cclxuY2xhc3MgV2lyZWZyYW1lR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG51bGwgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnV2lyZWZyYW1lR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICggZ2VvbWV0cnkgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBidWZmZXJcclxuXHJcblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XHJcblx0XHRcdGNvbnN0IGVkZ2VzID0gbmV3IFNldCgpO1xyXG5cclxuXHRcdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRjb25zdCBlbmQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0Ly8gaW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxyXG5cclxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblx0XHRcdFx0Y29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4O1xyXG5cdFx0XHRcdGxldCBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XHJcblxyXG5cdFx0XHRcdGlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRncm91cHMgPSBbIHsgc3RhcnQ6IDAsIGNvdW50OiBpbmRpY2VzLmNvdW50LCBtYXRlcmlhbEluZGV4OiAwIH0gXTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIGFsbCBlZGdlcyB3aXRob3V0IGR1cGxpY2F0ZXNcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgbyBdO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwU3RhcnQgPSBncm91cC5zdGFydDtcclxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwQ291bnQgPSBncm91cC5jb3VudDtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IGdyb3VwU3RhcnQsIGwgPSAoIGdyb3VwU3RhcnQgKyBncm91cENvdW50ICk7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAzOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjb25zdCBpbmRleDEgPSBpbmRpY2VzLmdldFgoIGkgKyBqICk7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gaW5kaWNlcy5nZXRYKCBpICsgKCBqICsgMSApICUgMyApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgxICk7XHJcblx0XHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBpc1VuaXF1ZUVkZ2UoIHN0YXJ0LCBlbmQsIGVkZ2VzICkgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggc3RhcnQueCwgc3RhcnQueSwgc3RhcnQueiApO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggZW5kLngsIGVuZC55LCBlbmQueiApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxyXG5cclxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyB0aHJlZSBlZGdlcyBwZXIgdHJpYW5nbGUsIGFuIGVkZ2UgaXMgcmVwcmVzZW50ZWQgYXMgKGluZGV4MSwgaW5kZXgyKVxyXG5cdFx0XHRcdFx0XHQvLyBlLmcuIHRoZSBmaXJzdCB0cmlhbmdsZSBoYXMgdGhlIGZvbGxvd2luZyBlZGdlczogKDAsMSksKDEsMiksKDIsMClcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MSA9IDMgKiBpICsgajtcclxuXHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gMyAqIGkgKyAoICggaiArIDEgKSAlIDMgKTtcclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcclxuXHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggaXNVbmlxdWVFZGdlKCBzdGFydCwgZW5kLCBlZGdlcyApID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBzdGFydC54LCBzdGFydC55LCBzdGFydC56ICk7XHJcblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggZW5kLngsIGVuZC55LCBlbmQueiApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSB7XHJcblxyXG5cdGNvbnN0IGhhc2gxID0gYCR7c3RhcnQueH0sJHtzdGFydC55fSwke3N0YXJ0Lnp9LSR7ZW5kLnh9LCR7ZW5kLnl9LCR7ZW5kLnp9YDtcclxuXHRjb25zdCBoYXNoMiA9IGAke2VuZC54fSwke2VuZC55fSwke2VuZC56fS0ke3N0YXJ0Lnh9LCR7c3RhcnQueX0sJHtzdGFydC56fWA7IC8vIGNvaW5jaWRlbnQgZWRnZVxyXG5cclxuXHRpZiAoIGVkZ2VzLmhhcyggaGFzaDEgKSA9PT0gdHJ1ZSB8fCBlZGdlcy5oYXMoIGhhc2gyICkgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGVkZ2VzLmFkZCggaGFzaDEgKTtcclxuXHRcdGVkZ2VzLmFkZCggaGFzaDIgKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgV2lyZWZyYW1lR2VvbWV0cnkgfTtcclxuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuXHJcbmNsYXNzIFNoYWRvd01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1NoYWRvd01hdGVyaWFsJztcclxuXHJcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xyXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTaGFkb3dNYXRlcmlhbCB9O1xyXG4iLCJpbXBvcnQgeyBTaGFkZXJNYXRlcmlhbCB9IGZyb20gJy4vU2hhZGVyTWF0ZXJpYWwuanMnO1xyXG5cclxuY2xhc3MgUmF3U2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdFx0dGhpcy5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnUmF3U2hhZGVyTWF0ZXJpYWwnO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBSYXdTaGFkZXJNYXRlcmlhbCB9O1xyXG4iLCJpbXBvcnQgeyBUYW5nZW50U3BhY2VOb3JtYWxNYXAgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcclxuXHJcbmNsYXNzIE1lc2hTdGFuZGFyZE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJztcclxuXHJcblx0XHR0aGlzLmRlZmluZXMgPSB7ICdTVEFOREFSRCc6ICcnIH07XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxyXG5cdFx0dGhpcy5yb3VnaG5lc3MgPSAxLjA7XHJcblx0XHR0aGlzLm1ldGFsbmVzcyA9IDAuMDtcclxuXHJcblx0XHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5saWdodE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHRcdHRoaXMuYW9NYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcclxuXHJcblx0XHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xyXG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcclxuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xyXG5cclxuXHRcdHRoaXMucm91Z2huZXNzTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xyXG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcclxuXHJcblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcclxuXHJcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xyXG5cdFx0dGhpcy5yb3VnaG5lc3MgPSBzb3VyY2Uucm91Z2huZXNzO1xyXG5cdFx0dGhpcy5tZXRhbG5lc3MgPSBzb3VyY2UubWV0YWxuZXNzO1xyXG5cclxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcclxuXHJcblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xyXG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcclxuXHJcblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xyXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcclxuXHJcblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xyXG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcclxuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XHJcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xyXG5cclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IHNvdXJjZS5yb3VnaG5lc3NNYXA7XHJcblxyXG5cdFx0dGhpcy5tZXRhbG5lc3NNYXAgPSBzb3VyY2UubWV0YWxuZXNzTWFwO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XHJcblxyXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xyXG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbi5jb3B5KCBzb3VyY2UuZW52TWFwUm90YXRpb24gKTtcclxuXHRcdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gc291cmNlLmVudk1hcEludGVuc2l0eTtcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XHJcblxyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2hTdGFuZGFyZE1hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBNZXNoU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gJy4vTWVzaFN0YW5kYXJkTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuXHJcbmNsYXNzIE1lc2hQaHlzaWNhbE1hdGVyaWFsIGV4dGVuZHMgTWVzaFN0YW5kYXJkTWF0ZXJpYWwge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5kZWZpbmVzID0ge1xyXG5cclxuXHRcdFx0J1NUQU5EQVJEJzogJycsXHJcblx0XHRcdCdQSFlTSUNBTCc6ICcnXHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuYW5pc290cm9weVJvdGF0aW9uID0gMDtcclxuXHRcdHRoaXMuYW5pc290cm9weU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5jbGVhcmNvYXRNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwLjA7XHJcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IG51bGw7XHJcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcclxuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmlvciA9IDEuNTtcclxuXHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdyZWZsZWN0aXZpdHknLCB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gKCBjbGFtcCggMi41ICogKCB0aGlzLmlvciAtIDEgKSAvICggdGhpcy5pb3IgKyAxICksIDAsIDEgKSApO1xyXG5cclxuXHRcdFx0fSxcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiAoIHJlZmxlY3Rpdml0eSApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5pb3IgPSAoIDEgKyAwLjQgKiByZWZsZWN0aXZpdHkgKSAvICggMSAtIDAuNCAqIHJlZmxlY3Rpdml0eSApO1xyXG5cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cclxuXHRcdHRoaXMuaXJpZGVzY2VuY2VNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUiA9IDEuMztcclxuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IFsgMTAwLCA0MDAgXTtcclxuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuc2hlZW5Db2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcclxuXHRcdHRoaXMuc2hlZW5Db2xvck1hcCA9IG51bGw7XHJcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzID0gMS4wO1xyXG5cdFx0dGhpcy5zaGVlblJvdWdobmVzc01hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy50cmFuc21pc3Npb25NYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMudGhpY2tuZXNzID0gMDtcclxuXHRcdHRoaXMudGhpY2tuZXNzTWFwID0gbnVsbDtcclxuXHRcdHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cdFx0dGhpcy5hdHRlbnVhdGlvbkNvbG9yID0gbmV3IENvbG9yKCAxLCAxLCAxICk7XHJcblxyXG5cdFx0dGhpcy5zcGVjdWxhckludGVuc2l0eSA9IDEuMDtcclxuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yID0gbmV3IENvbG9yKCAxLCAxLCAxICk7XHJcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3JNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuX2FuaXNvdHJvcHkgPSAwO1xyXG5cdFx0dGhpcy5fY2xlYXJjb2F0ID0gMDtcclxuXHRcdHRoaXMuX2Rpc3BlcnNpb24gPSAwO1xyXG5cdFx0dGhpcy5faXJpZGVzY2VuY2UgPSAwO1xyXG5cdFx0dGhpcy5fc2hlZW4gPSAwLjA7XHJcblx0XHR0aGlzLl90cmFuc21pc3Npb24gPSAwO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGFuaXNvdHJvcHkoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2FuaXNvdHJvcHk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IGFuaXNvdHJvcHkoIHZhbHVlICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5fYW5pc290cm9weSA+IDAgIT09IHZhbHVlID4gMCApIHtcclxuXHJcblx0XHRcdHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fYW5pc290cm9weSA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBjbGVhcmNvYXQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2NsZWFyY29hdDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgY2xlYXJjb2F0KCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2NsZWFyY29hdCA+IDAgIT09IHZhbHVlID4gMCApIHtcclxuXHJcblx0XHRcdHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY2xlYXJjb2F0ID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGlyaWRlc2NlbmNlKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9pcmlkZXNjZW5jZTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgaXJpZGVzY2VuY2UoIHZhbHVlICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5faXJpZGVzY2VuY2UgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2lyaWRlc2NlbmNlID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGRpc3BlcnNpb24oKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3BlcnNpb247XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IGRpc3BlcnNpb24oIHZhbHVlICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5fZGlzcGVyc2lvbiA+IDAgIT09IHZhbHVlID4gMCApIHtcclxuXHJcblx0XHRcdHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fZGlzcGVyc2lvbiA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBzaGVlbigpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZW47XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHNoZWVuKCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuX3NoZWVuID4gMCAhPT0gdmFsdWUgPiAwICkge1xyXG5cclxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9zaGVlbiA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCB0cmFuc21pc3Npb24oKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3RyYW5zbWlzc2lvbjtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgdHJhbnNtaXNzaW9uKCB2YWx1ZSApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuX3RyYW5zbWlzc2lvbiA+IDAgIT09IHZhbHVlID4gMCApIHtcclxuXHJcblx0XHRcdHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fdHJhbnNtaXNzaW9uID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcclxuXHJcblx0XHRcdCdTVEFOREFSRCc6ICcnLFxyXG5cdFx0XHQnUEhZU0lDQUwnOiAnJ1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gc291cmNlLmFuaXNvdHJvcHk7XHJcblx0XHR0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiA9IHNvdXJjZS5hbmlzb3Ryb3B5Um90YXRpb247XHJcblx0XHR0aGlzLmFuaXNvdHJvcHlNYXAgPSBzb3VyY2UuYW5pc290cm9weU1hcDtcclxuXHJcblx0XHR0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7XHJcblx0XHR0aGlzLmNsZWFyY29hdE1hcCA9IHNvdXJjZS5jbGVhcmNvYXRNYXA7XHJcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzcyA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3M7XHJcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XHJcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCA9IHNvdXJjZS5jbGVhcmNvYXROb3JtYWxNYXA7XHJcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xyXG5cclxuXHRcdHRoaXMuZGlzcGVyc2lvbiA9IHNvdXJjZS5kaXNwZXJzaW9uO1xyXG5cdFx0dGhpcy5pb3IgPSBzb3VyY2UuaW9yO1xyXG5cclxuXHRcdHRoaXMuaXJpZGVzY2VuY2UgPSBzb3VyY2UuaXJpZGVzY2VuY2U7XHJcblx0XHR0aGlzLmlyaWRlc2NlbmNlTWFwID0gc291cmNlLmlyaWRlc2NlbmNlTWFwO1xyXG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUiA9IHNvdXJjZS5pcmlkZXNjZW5jZUlPUjtcclxuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IFsgLi4uc291cmNlLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgXTtcclxuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPSBzb3VyY2UuaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XHJcblxyXG5cdFx0dGhpcy5zaGVlbiA9IHNvdXJjZS5zaGVlbjtcclxuXHRcdHRoaXMuc2hlZW5Db2xvci5jb3B5KCBzb3VyY2Uuc2hlZW5Db2xvciApO1xyXG5cdFx0dGhpcy5zaGVlbkNvbG9yTWFwID0gc291cmNlLnNoZWVuQ29sb3JNYXA7XHJcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzID0gc291cmNlLnNoZWVuUm91Z2huZXNzO1xyXG5cdFx0dGhpcy5zaGVlblJvdWdobmVzc01hcCA9IHNvdXJjZS5zaGVlblJvdWdobmVzc01hcDtcclxuXHJcblx0XHR0aGlzLnRyYW5zbWlzc2lvbiA9IHNvdXJjZS50cmFuc21pc3Npb247XHJcblx0XHR0aGlzLnRyYW5zbWlzc2lvbk1hcCA9IHNvdXJjZS50cmFuc21pc3Npb25NYXA7XHJcblxyXG5cdFx0dGhpcy50aGlja25lc3MgPSBzb3VyY2UudGhpY2tuZXNzO1xyXG5cdFx0dGhpcy50aGlja25lc3NNYXAgPSBzb3VyY2UudGhpY2tuZXNzTWFwO1xyXG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gc291cmNlLmF0dGVudWF0aW9uRGlzdGFuY2U7XHJcblx0XHR0aGlzLmF0dGVudWF0aW9uQ29sb3IuY29weSggc291cmNlLmF0dGVudWF0aW9uQ29sb3IgKTtcclxuXHJcblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5ID0gc291cmNlLnNwZWN1bGFySW50ZW5zaXR5O1xyXG5cdFx0dGhpcy5zcGVjdWxhckludGVuc2l0eU1hcCA9IHNvdXJjZS5zcGVjdWxhckludGVuc2l0eU1hcDtcclxuXHRcdHRoaXMuc3BlY3VsYXJDb2xvci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXJDb2xvciApO1xyXG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gc291cmNlLnNwZWN1bGFyQ29sb3JNYXA7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2hQaHlzaWNhbE1hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IE11bHRpcGx5T3BlcmF0aW9uLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcclxuY2xhc3MgTWVzaFBob25nTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01lc2hQaG9uZ01hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcclxuXHRcdHRoaXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoIDB4MTExMTExICk7XHJcblx0XHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xyXG5cclxuXHRcdHRoaXMubWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcclxuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XHJcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHRcdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XHJcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xyXG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcclxuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcclxuXHJcblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XHJcblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xyXG5cclxuXHRcdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xyXG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xyXG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xyXG5cclxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XHJcblxyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xyXG5cdFx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcclxuXHRcdHRoaXMuc2hpbmluZXNzID0gc291cmNlLnNoaW5pbmVzcztcclxuXHJcblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcclxuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcclxuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcclxuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XHJcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xyXG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xyXG5cclxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcclxuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcclxuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XHJcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcclxuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcclxuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XHJcblxyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2hQaG9uZ01hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IFRhbmdlbnRTcGFjZU5vcm1hbE1hcCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5cclxuY2xhc3MgTWVzaFRvb25NYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzTWVzaFRvb25NYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnVE9PTic6ICcnIH07XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ01lc2hUb29uTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5ncmFkaWVudE1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5saWdodE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHRcdHRoaXMuYW9NYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcclxuXHJcblx0XHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xyXG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcclxuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XHJcblxyXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cdFx0dGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDtcclxuXHJcblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xyXG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcclxuXHJcblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xyXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcclxuXHJcblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xyXG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcclxuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XHJcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xyXG5cclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2hUb29uTWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgVGFuZ2VudFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XHJcblxyXG5jbGFzcyBNZXNoTm9ybWFsTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01lc2hOb3JtYWxNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XHJcblxyXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcclxuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcclxuXHJcblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XHJcblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcclxuXHJcblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XHJcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xyXG5cclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblxyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTWVzaE5vcm1hbE1hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IE11bHRpcGx5T3BlcmF0aW9uLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcclxuXHJcbmNsYXNzIE1lc2hMYW1iZXJ0TWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTGFtYmVydE1hdGVyaWFsJztcclxuXHJcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXHJcblxyXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcclxuXHJcblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcclxuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcclxuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XHJcblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5idW1wU2NhbGUgPSAxO1xyXG5cclxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcclxuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcclxuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xyXG5cclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcclxuXHJcblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmVudk1hcFJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XHJcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcclxuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcclxuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xyXG5cclxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcclxuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcclxuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcclxuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XHJcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xyXG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xyXG5cclxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcclxuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcclxuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XHJcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcclxuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcclxuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcclxuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XHJcblxyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE1lc2hMYW1iZXJ0TWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQmFzaWNEZXB0aFBhY2tpbmcgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgTWVzaERlcHRoTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01lc2hEZXB0aE1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuZGVwdGhQYWNraW5nID0gQmFzaWNEZXB0aFBhY2tpbmc7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcclxuXHJcblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xyXG5cclxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZztcclxuXHJcblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xyXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBNZXNoRGVwdGhNYXRlcmlhbCB9O1xyXG4iLCJpbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xyXG5cclxuY2xhc3MgTWVzaERpc3RhbmNlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTWVzaERpc3RhbmNlTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMubWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBNZXNoRGlzdGFuY2VNYXRlcmlhbCB9O1xyXG4iLCJpbXBvcnQgeyBUYW5nZW50U3BhY2VOb3JtYWxNYXAgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuXHJcbmNsYXNzIE1lc2hNYXRjYXBNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTWF0Y2FwTWF0ZXJpYWwnO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcclxuXHJcblx0XHR0aGlzLm1hdGNhcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xyXG5cclxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcclxuXHJcblx0fVxyXG5cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XHJcblxyXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcclxuXHJcblx0XHR0aGlzLm1hdGNhcCA9IHNvdXJjZS5tYXRjYXA7XHJcblxyXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xyXG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xyXG5cclxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcclxuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xyXG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcclxuXHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xyXG5cclxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTWVzaE1hdGNhcE1hdGVyaWFsIH07XHJcbiIsImltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcblxyXG5jbGFzcyBMaW5lRGFzaGVkTWF0ZXJpYWwgZXh0ZW5kcyBMaW5lQmFzaWNNYXRlcmlhbCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc0xpbmVEYXNoZWRNYXRlcmlhbCA9IHRydWU7XHJcblx0XHR0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJztcclxuXHJcblx0XHR0aGlzLnNjYWxlID0gMTtcclxuXHRcdHRoaXMuZGFzaFNpemUgPSAzO1xyXG5cdFx0dGhpcy5nYXBTaXplID0gMTtcclxuXHJcblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLnNjYWxlID0gc291cmNlLnNjYWxlO1xyXG5cdFx0dGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTtcclxuXHRcdHRoaXMuZ2FwU2l6ZSA9IHNvdXJjZS5nYXBTaXplO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBMaW5lRGFzaGVkTWF0ZXJpYWwgfTtcclxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL21hdGgvUXVhdGVybmlvbi5qcyc7XHJcbmltcG9ydCB7IEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnZlcnRzIGFuIGFycmF5IHRvIGEgc3BlY2lmaWMgdHlwZVxyXG5mdW5jdGlvbiBjb252ZXJ0QXJyYXkoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xyXG5cclxuXHRpZiAoICEgYXJyYXkgfHwgLy8gbGV0ICd1bmRlZmluZWQnIGFuZCAnbnVsbCcgcGFzc1xyXG5cdFx0ISBmb3JjZUNsb25lICYmIGFycmF5LmNvbnN0cnVjdG9yID09PSB0eXBlICkgcmV0dXJuIGFycmF5O1xyXG5cclxuXHRpZiAoIHR5cGVvZiB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UID09PSAnbnVtYmVyJyApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJyYXkgKTsgLy8gY3JlYXRlIEFycmF5XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkoIG9iamVjdCApIHtcclxuXHJcblx0cmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyggb2JqZWN0ICkgJiZcclxuXHRcdCEgKCBvYmplY3QgaW5zdGFuY2VvZiBEYXRhVmlldyApO1xyXG5cclxufVxyXG5cclxuLy8gcmV0dXJucyBhbiBhcnJheSBieSB3aGljaCB0aW1lcyBhbmQgdmFsdWVzIGNhbiBiZSBzb3J0ZWRcclxuZnVuY3Rpb24gZ2V0S2V5ZnJhbWVPcmRlciggdGltZXMgKSB7XHJcblxyXG5cdGZ1bmN0aW9uIGNvbXBhcmVUaW1lKCBpLCBqICkge1xyXG5cclxuXHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcclxuXHJcblx0fVxyXG5cclxuXHRjb25zdCBuID0gdGltZXMubGVuZ3RoO1xyXG5cdGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheSggbiApO1xyXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHJlc3VsdFsgaSBdID0gaTtcclxuXHJcblx0cmVzdWx0LnNvcnQoIGNvbXBhcmVUaW1lICk7XHJcblxyXG5cdHJldHVybiByZXN1bHQ7XHJcblxyXG59XHJcblxyXG4vLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGFcclxuZnVuY3Rpb24gc29ydGVkQXJyYXkoIHZhbHVlcywgc3RyaWRlLCBvcmRlciApIHtcclxuXHJcblx0Y29uc3QgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XHJcblx0Y29uc3QgcmVzdWx0ID0gbmV3IHZhbHVlcy5jb25zdHJ1Y3RvciggblZhbHVlcyApO1xyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHtcclxuXHJcblx0XHRjb25zdCBzcmNPZmZzZXQgPSBvcmRlclsgaSBdICogc3RyaWRlO1xyXG5cclxuXHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xyXG5cclxuXHRcdFx0cmVzdWx0WyBkc3RPZmZzZXQgKysgXSA9IHZhbHVlc1sgc3JjT2Zmc2V0ICsgaiBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmVzdWx0O1xyXG5cclxufVxyXG5cclxuLy8gZnVuY3Rpb24gZm9yIHBhcnNpbmcgQU9TIGtleWZyYW1lIGZvcm1hdHNcclxuZnVuY3Rpb24gZmxhdHRlbkpTT04oIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcclxuXHJcblx0bGV0IGkgPSAxLCBrZXkgPSBqc29uS2V5c1sgMCBdO1xyXG5cclxuXHR3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICYmIGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxyXG5cclxuXHRsZXQgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XHJcblx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXHJcblxyXG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHJcblx0XHRkbyB7XHJcblxyXG5cdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcclxuXHJcblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcclxuXHRcdFx0XHR2YWx1ZXMucHVzaC5hcHBseSggdmFsdWVzLCB2YWx1ZSApOyAvLyBwdXNoIGFsbCBlbGVtZW50c1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcclxuXHJcblx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcclxuXHJcblx0fSBlbHNlIGlmICggdmFsdWUudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdC8vIC4uLmFzc3VtZSBUSFJFRS5NYXRoLWlzaFxyXG5cclxuXHRcdGRvIHtcclxuXHJcblx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xyXG5cdFx0XHRcdHZhbHVlLnRvQXJyYXkoIHZhbHVlcywgdmFsdWVzLmxlbmd0aCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcclxuXHJcblx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBvdGhlcndpc2UgcHVzaCBhcy1pc1xyXG5cclxuXHRcdGRvIHtcclxuXHJcblx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xyXG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcclxuXHJcblx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc3ViY2xpcCggc291cmNlQ2xpcCwgbmFtZSwgc3RhcnRGcmFtZSwgZW5kRnJhbWUsIGZwcyA9IDMwICkge1xyXG5cclxuXHRjb25zdCBjbGlwID0gc291cmNlQ2xpcC5jbG9uZSgpO1xyXG5cclxuXHRjbGlwLm5hbWUgPSBuYW1lO1xyXG5cclxuXHRjb25zdCB0cmFja3MgPSBbXTtcclxuXHJcblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xyXG5cclxuXHRcdGNvbnN0IHRyYWNrID0gY2xpcC50cmFja3NbIGkgXTtcclxuXHRcdGNvbnN0IHZhbHVlU2l6ZSA9IHRyYWNrLmdldFZhbHVlU2l6ZSgpO1xyXG5cclxuXHRcdGNvbnN0IHRpbWVzID0gW107XHJcblx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0cmFjay50aW1lcy5sZW5ndGg7ICsrIGogKSB7XHJcblxyXG5cdFx0XHRjb25zdCBmcmFtZSA9IHRyYWNrLnRpbWVzWyBqIF0gKiBmcHM7XHJcblxyXG5cdFx0XHRpZiAoIGZyYW1lIDwgc3RhcnRGcmFtZSB8fCBmcmFtZSA+PSBlbmRGcmFtZSApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0dGltZXMucHVzaCggdHJhY2sudGltZXNbIGogXSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGsgPSAwOyBrIDwgdmFsdWVTaXplOyArKyBrICkge1xyXG5cclxuXHRcdFx0XHR2YWx1ZXMucHVzaCggdHJhY2sudmFsdWVzWyBqICogdmFsdWVTaXplICsgayBdICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGltZXMubGVuZ3RoID09PSAwICkgY29udGludWU7XHJcblxyXG5cdFx0dHJhY2sudGltZXMgPSBjb252ZXJ0QXJyYXkoIHRpbWVzLCB0cmFjay50aW1lcy5jb25zdHJ1Y3RvciApO1xyXG5cdFx0dHJhY2sudmFsdWVzID0gY29udmVydEFycmF5KCB2YWx1ZXMsIHRyYWNrLnZhbHVlcy5jb25zdHJ1Y3RvciApO1xyXG5cclxuXHRcdHRyYWNrcy5wdXNoKCB0cmFjayApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsaXAudHJhY2tzID0gdHJhY2tzO1xyXG5cclxuXHQvLyBmaW5kIG1pbmltdW0gLnRpbWVzIHZhbHVlIGFjcm9zcyBhbGwgdHJhY2tzIGluIHRoZSB0cmltbWVkIGNsaXBcclxuXHJcblx0bGV0IG1pblN0YXJ0VGltZSA9IEluZmluaXR5O1xyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XHJcblxyXG5cdFx0aWYgKCBtaW5TdGFydFRpbWUgPiBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF0gKSB7XHJcblxyXG5cdFx0XHRtaW5TdGFydFRpbWUgPSBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIHNoaWZ0IGFsbCB0cmFja3Mgc3VjaCB0aGF0IGNsaXAgYmVnaW5zIGF0IHQ9MFxyXG5cclxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XHJcblxyXG5cdFx0Y2xpcC50cmFja3NbIGkgXS5zaGlmdCggLSAxICogbWluU3RhcnRUaW1lICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xpcC5yZXNldER1cmF0aW9uKCk7XHJcblxyXG5cdHJldHVybiBjbGlwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZUNsaXBBZGRpdGl2ZSggdGFyZ2V0Q2xpcCwgcmVmZXJlbmNlRnJhbWUgPSAwLCByZWZlcmVuY2VDbGlwID0gdGFyZ2V0Q2xpcCwgZnBzID0gMzAgKSB7XHJcblxyXG5cdGlmICggZnBzIDw9IDAgKSBmcHMgPSAzMDtcclxuXHJcblx0Y29uc3QgbnVtVHJhY2tzID0gcmVmZXJlbmNlQ2xpcC50cmFja3MubGVuZ3RoO1xyXG5cdGNvbnN0IHJlZmVyZW5jZVRpbWUgPSByZWZlcmVuY2VGcmFtZSAvIGZwcztcclxuXHJcblx0Ly8gTWFrZSBlYWNoIHRyYWNrJ3MgdmFsdWVzIHJlbGF0aXZlIHRvIHRoZSB2YWx1ZXMgYXQgdGhlIHJlZmVyZW5jZSBmcmFtZVxyXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IG51bVRyYWNrczsgKysgaSApIHtcclxuXHJcblx0XHRjb25zdCByZWZlcmVuY2VUcmFjayA9IHJlZmVyZW5jZUNsaXAudHJhY2tzWyBpIF07XHJcblx0XHRjb25zdCByZWZlcmVuY2VUcmFja1R5cGUgPSByZWZlcmVuY2VUcmFjay5WYWx1ZVR5cGVOYW1lO1xyXG5cclxuXHRcdC8vIFNraXAgdGhpcyB0cmFjayBpZiBpdCdzIG5vbi1udW1lcmljXHJcblx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ2Jvb2wnIHx8IHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3N0cmluZycgKSBjb250aW51ZTtcclxuXHJcblx0XHQvLyBGaW5kIHRoZSB0cmFjayBpbiB0aGUgdGFyZ2V0IGNsaXAgd2hvc2UgbmFtZSBhbmQgdHlwZSBtYXRjaGVzIHRoZSByZWZlcmVuY2UgdHJhY2tcclxuXHRcdGNvbnN0IHRhcmdldFRyYWNrID0gdGFyZ2V0Q2xpcC50cmFja3MuZmluZCggZnVuY3Rpb24gKCB0cmFjayApIHtcclxuXHJcblx0XHRcdHJldHVybiB0cmFjay5uYW1lID09PSByZWZlcmVuY2VUcmFjay5uYW1lXHJcblx0XHRcdFx0JiYgdHJhY2suVmFsdWVUeXBlTmFtZSA9PT0gcmVmZXJlbmNlVHJhY2tUeXBlO1xyXG5cclxuXHRcdH0gKTtcclxuXHJcblx0XHRpZiAoIHRhcmdldFRyYWNrID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcclxuXHJcblx0XHRsZXQgcmVmZXJlbmNlT2Zmc2V0ID0gMDtcclxuXHRcdGNvbnN0IHJlZmVyZW5jZVZhbHVlU2l6ZSA9IHJlZmVyZW5jZVRyYWNrLmdldFZhbHVlU2l6ZSgpO1xyXG5cclxuXHRcdGlmICggcmVmZXJlbmNlVHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XHJcblxyXG5cdFx0XHRyZWZlcmVuY2VPZmZzZXQgPSByZWZlcmVuY2VWYWx1ZVNpemUgLyAzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGFyZ2V0T2Zmc2V0ID0gMDtcclxuXHRcdGNvbnN0IHRhcmdldFZhbHVlU2l6ZSA9IHRhcmdldFRyYWNrLmdldFZhbHVlU2l6ZSgpO1xyXG5cclxuXHRcdGlmICggdGFyZ2V0VHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XHJcblxyXG5cdFx0XHR0YXJnZXRPZmZzZXQgPSB0YXJnZXRWYWx1ZVNpemUgLyAzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBsYXN0SW5kZXggPSByZWZlcmVuY2VUcmFjay50aW1lcy5sZW5ndGggLSAxO1xyXG5cdFx0bGV0IHJlZmVyZW5jZVZhbHVlO1xyXG5cclxuXHRcdC8vIEZpbmQgdGhlIHZhbHVlIHRvIHN1YnRyYWN0IG91dCBvZiB0aGUgdHJhY2tcclxuXHRcdGlmICggcmVmZXJlbmNlVGltZSA8PSByZWZlcmVuY2VUcmFjay50aW1lc1sgMCBdICkge1xyXG5cclxuXHRcdFx0Ly8gUmVmZXJlbmNlIGZyYW1lIGlzIGVhcmxpZXIgdGhhbiB0aGUgZmlyc3Qga2V5ZnJhbWUsIHNvIGp1c3QgdXNlIHRoZSBmaXJzdCBrZXlmcmFtZVxyXG5cdFx0XHRjb25zdCBzdGFydEluZGV4ID0gcmVmZXJlbmNlT2Zmc2V0O1xyXG5cdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcclxuXHRcdFx0cmVmZXJlbmNlVmFsdWUgPSByZWZlcmVuY2VUcmFjay52YWx1ZXMuc2xpY2UoIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggcmVmZXJlbmNlVGltZSA+PSByZWZlcmVuY2VUcmFjay50aW1lc1sgbGFzdEluZGV4IF0gKSB7XHJcblxyXG5cdFx0XHQvLyBSZWZlcmVuY2UgZnJhbWUgaXMgYWZ0ZXIgdGhlIGxhc3Qga2V5ZnJhbWUsIHNvIGp1c3QgdXNlIHRoZSBsYXN0IGtleWZyYW1lXHJcblx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSBsYXN0SW5kZXggKiByZWZlcmVuY2VWYWx1ZVNpemUgKyByZWZlcmVuY2VPZmZzZXQ7XHJcblx0XHRcdGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcclxuXHRcdFx0cmVmZXJlbmNlVmFsdWUgPSByZWZlcmVuY2VUcmFjay52YWx1ZXMuc2xpY2UoIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEludGVycG9sYXRlIHRvIHRoZSByZWZlcmVuY2UgdmFsdWVcclxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSByZWZlcmVuY2VUcmFjay5jcmVhdGVJbnRlcnBvbGFudCgpO1xyXG5cdFx0XHRjb25zdCBzdGFydEluZGV4ID0gcmVmZXJlbmNlT2Zmc2V0O1xyXG5cdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcclxuXHRcdFx0aW50ZXJwb2xhbnQuZXZhbHVhdGUoIHJlZmVyZW5jZVRpbWUgKTtcclxuXHRcdFx0cmVmZXJlbmNlVmFsdWUgPSBpbnRlcnBvbGFudC5yZXN1bHRCdWZmZXIuc2xpY2UoIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbmp1Z2F0ZSB0aGUgcXVhdGVybmlvblxyXG5cdFx0aWYgKCByZWZlcmVuY2VUcmFja1R5cGUgPT09ICdxdWF0ZXJuaW9uJyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHJlZmVyZW5jZVF1YXQgPSBuZXcgUXVhdGVybmlvbigpLmZyb21BcnJheSggcmVmZXJlbmNlVmFsdWUgKS5ub3JtYWxpemUoKS5jb25qdWdhdGUoKTtcclxuXHRcdFx0cmVmZXJlbmNlUXVhdC50b0FycmF5KCByZWZlcmVuY2VWYWx1ZSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdWJ0cmFjdCB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYWxsIG9mIHRoZSB0cmFjayB2YWx1ZXNcclxuXHJcblx0XHRjb25zdCBudW1UaW1lcyA9IHRhcmdldFRyYWNrLnRpbWVzLmxlbmd0aDtcclxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG51bVRpbWVzOyArKyBqICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdmFsdWVTdGFydCA9IGogKiB0YXJnZXRWYWx1ZVNpemUgKyB0YXJnZXRPZmZzZXQ7XHJcblxyXG5cdFx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3F1YXRlcm5pb24nICkge1xyXG5cclxuXHRcdFx0XHQvLyBNdWx0aXBseSB0aGUgY29uanVnYXRlIGZvciBxdWF0ZXJuaW9uIHRyYWNrIHR5cGVzXHJcblx0XHRcdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdChcclxuXHRcdFx0XHRcdHRhcmdldFRyYWNrLnZhbHVlcyxcclxuXHRcdFx0XHRcdHZhbHVlU3RhcnQsXHJcblx0XHRcdFx0XHRyZWZlcmVuY2VWYWx1ZSxcclxuXHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXMsXHJcblx0XHRcdFx0XHR2YWx1ZVN0YXJ0XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHZhbHVlRW5kID0gdGFyZ2V0VmFsdWVTaXplIC0gdGFyZ2V0T2Zmc2V0ICogMjtcclxuXHJcblx0XHRcdFx0Ly8gU3VidHJhY3QgZWFjaCB2YWx1ZSBmb3IgYWxsIG90aGVyIG51bWVyaWMgdHJhY2sgdHlwZXNcclxuXHRcdFx0XHRmb3IgKCBsZXQgayA9IDA7IGsgPCB2YWx1ZUVuZDsgKysgayApIHtcclxuXHJcblx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXNbIHZhbHVlU3RhcnQgKyBrIF0gLT0gcmVmZXJlbmNlVmFsdWVbIGsgXTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR0YXJnZXRDbGlwLmJsZW5kTW9kZSA9IEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlO1xyXG5cclxuXHRyZXR1cm4gdGFyZ2V0Q2xpcDtcclxuXHJcbn1cclxuXHJcbmNvbnN0IEFuaW1hdGlvblV0aWxzID0ge1xyXG5cdGNvbnZlcnRBcnJheTogY29udmVydEFycmF5LFxyXG5cdGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxyXG5cdGdldEtleWZyYW1lT3JkZXI6IGdldEtleWZyYW1lT3JkZXIsXHJcblx0c29ydGVkQXJyYXk6IHNvcnRlZEFycmF5LFxyXG5cdGZsYXR0ZW5KU09OOiBmbGF0dGVuSlNPTixcclxuXHRzdWJjbGlwOiBzdWJjbGlwLFxyXG5cdG1ha2VDbGlwQWRkaXRpdmU6IG1ha2VDbGlwQWRkaXRpdmVcclxufTtcclxuXHJcbmV4cG9ydCB7XHJcblx0Y29udmVydEFycmF5LFxyXG5cdGlzVHlwZWRBcnJheSxcclxuXHRnZXRLZXlmcmFtZU9yZGVyLFxyXG5cdHNvcnRlZEFycmF5LFxyXG5cdGZsYXR0ZW5KU09OLFxyXG5cdHN1YmNsaXAsXHJcblx0bWFrZUNsaXBBZGRpdGl2ZSxcclxuXHRBbmltYXRpb25VdGlsc1xyXG59O1xyXG4iLCIvKipcclxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuXHJcbiAqXHJcbiAqIFRoZSBwYXJhbWV0ZXIgZG9tYWluIGlzIG9uZSBkaW1lbnNpb25hbCwgdHlwaWNhbGx5IHRoZSB0aW1lIG9yIGEgcGF0aFxyXG4gKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuXHJcbiAqXHJcbiAqIFRoZSBzYW1wbGUgdmFsdWVzIGNhbiBoYXZlIGFueSBkaW1lbnNpb25hbGl0eSBhbmQgZGVyaXZlZCBjbGFzc2VzIG1heVxyXG4gKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS5cclxuICpcclxuICogVGhpcyBjbGFzcyBwcm92aWRlcyB0aGUgaW50ZXJ2YWwgc2VlayBpbiBhIFRlbXBsYXRlIE1ldGhvZCwgZGVmZXJyaW5nXHJcbiAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuXHJcbiAqXHJcbiAqIFRpbWUgY29tcGxleGl0eSBpcyBPKDEpIGZvciBsaW5lYXIgYWNjZXNzIGNyb3NzaW5nIGF0IG1vc3QgdHdvIHBvaW50c1xyXG4gKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuXHJcbiAqXHJcbiAqIFJlZmVyZW5jZXM6XHJcbiAqXHJcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXHJcbiAqXHJcbiAqL1xyXG5cclxuY2xhc3MgSW50ZXJwb2xhbnQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcclxuXHJcblx0XHR0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyA9IHBhcmFtZXRlclBvc2l0aW9ucztcclxuXHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcclxuXHJcblx0XHR0aGlzLnJlc3VsdEJ1ZmZlciA9IHJlc3VsdEJ1ZmZlciAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0cmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApO1xyXG5cdFx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XHJcblx0XHR0aGlzLnZhbHVlU2l6ZSA9IHNhbXBsZVNpemU7XHJcblxyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IG51bGw7XHJcblx0XHR0aGlzLkRlZmF1bHRTZXR0aW5nc18gPSB7fTtcclxuXHJcblx0fVxyXG5cclxuXHRldmFsdWF0ZSggdCApIHtcclxuXHJcblx0XHRjb25zdCBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zO1xyXG5cdFx0bGV0IGkxID0gdGhpcy5fY2FjaGVkSW5kZXgsXHJcblx0XHRcdHQxID0gcHBbIGkxIF0sXHJcblx0XHRcdHQwID0gcHBbIGkxIC0gMSBdO1xyXG5cclxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XHJcblxyXG5cdFx0XHRzZWVrOiB7XHJcblxyXG5cdFx0XHRcdGxldCByaWdodDtcclxuXHJcblx0XHRcdFx0bGluZWFyX3NjYW46IHtcclxuXHJcblx0XHRcdFx0XHQvLy0gU2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NvbXBhcmlzb24tdG8tdW5kZWZpbmVkLzNcclxuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcclxuXHRcdFx0XHRcdC8vLVxyXG5cdFx0XHRcdFx0Ly8tIFx0XHRcdFx0aWYgKCB0ID49IHQxIHx8IHQxID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGdpdmVVcEF0ID0gaTEgKyAyOyA7ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgZW5kXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aTEgPSBwcC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBpMSA9PT0gZ2l2ZVVwQXQgKSBicmVhazsgLy8gdGhpcyBsb29wXHJcblxyXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XHJcblx0XHRcdFx0XHRcdFx0dDEgPSBwcFsgKysgaTEgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcclxuXHRcdFx0XHRcdFx0cmlnaHQgPSBwcC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XHJcblx0XHRcdFx0XHQvLy1cdFx0XHRcdFx0aWYgKCB0IDwgdDAgfHwgdDAgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGlmICggISAoIHQgPj0gdDAgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGxvb3Bpbmc/XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCB0MWdsb2JhbCA9IHBwWyAxIF07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHQgPCB0MWdsb2JhbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0aTEgPSAyOyAvLyArIDEsIHVzaW5nIHRoZSBzY2FuIGZvciB0aGUgZGV0YWlsc1xyXG5cdFx0XHRcdFx0XHRcdHQwID0gdDFnbG9iYWw7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBsaW5lYXIgcmV2ZXJzZSBzY2FuXHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgZ2l2ZVVwQXQgPSBpMSAtIDI7IDsgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBiZWZvcmUgc3RhcnRcclxuXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCAwICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBpMSA9PT0gZ2l2ZVVwQXQgKSBicmVhazsgLy8gdGhpcyBsb29wXHJcblxyXG5cdFx0XHRcdFx0XHRcdHQxID0gdDA7XHJcblx0XHRcdFx0XHRcdFx0dDAgPSBwcFsgLS0gaTEgLSAxIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdCA+PSB0MCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWsgc2VlaztcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBiaW5hcnkgc2VhcmNoIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGluZGV4XHJcblx0XHRcdFx0XHRcdHJpZ2h0ID0gaTE7XHJcblx0XHRcdFx0XHRcdGkxID0gMDtcclxuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIHRoZSBpbnRlcnZhbCBpcyB2YWxpZFxyXG5cclxuXHRcdFx0XHRcdGJyZWFrIHZhbGlkYXRlX2ludGVydmFsO1xyXG5cclxuXHRcdFx0XHR9IC8vIGxpbmVhciBzY2FuXHJcblxyXG5cdFx0XHRcdC8vIGJpbmFyeSBzZWFyY2hcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBpMSA8IHJpZ2h0ICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IG1pZCA9ICggaTEgKyByaWdodCApID4+PiAxO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdCA8IHBwWyBtaWQgXSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpMSA9IG1pZCArIDE7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHQxID0gcHBbIGkxIF07XHJcblx0XHRcdFx0dDAgPSBwcFsgaTEgLSAxIF07XHJcblxyXG5cdFx0XHRcdC8vIGNoZWNrIGJvdW5kYXJ5IGNhc2VzLCBhZ2FpblxyXG5cclxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggMCApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcclxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCBpMSAtIDEgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSAvLyBzZWVrXHJcblxyXG5cdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xyXG5cclxuXHRcdFx0dGhpcy5pbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICk7XHJcblxyXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxyXG5cclxuXHRcdHJldHVybiB0aGlzLmludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFNldHRpbmdzXygpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187XHJcblxyXG5cdH1cclxuXHJcblx0Y29weVNhbXBsZVZhbHVlXyggaW5kZXggKSB7XHJcblxyXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXHJcblxyXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXHJcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiBzdHJpZGU7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRyZXN1bHRbIGkgXSA9IHZhbHVlc1sgb2Zmc2V0ICsgaSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIFRlbXBsYXRlIG1ldGhvZHMgZm9yIGRlcml2ZWQgY2xhc3NlczpcclxuXHJcblx0aW50ZXJwb2xhdGVfKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xyXG5cclxuXHRcdHRocm93IG5ldyBFcnJvciggJ2NhbGwgdG8gYWJzdHJhY3QgbWV0aG9kJyApO1xyXG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxyXG5cclxuXHR9XHJcblxyXG5cdGludGVydmFsQ2hhbmdlZF8oIC8qIGkxLCB0MCwgdDEgKi8gKSB7XHJcblxyXG5cdFx0Ly8gZW1wdHlcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgSW50ZXJwb2xhbnQgfTtcclxuIiwiaW1wb3J0IHsgWmVyb0N1cnZhdHVyZUVuZGluZywgV3JhcEFyb3VuZEVuZGluZywgWmVyb1Nsb3BlRW5kaW5nIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgSW50ZXJwb2xhbnQgfSBmcm9tICcuLi9JbnRlcnBvbGFudC5qcyc7XHJcblxyXG4vKipcclxuICogRmFzdCBhbmQgc2ltcGxlIGN1YmljIHNwbGluZSBpbnRlcnBvbGFudC5cclxuICpcclxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxyXG4gKiBhdCBlYWNoIHNhbXBsZSBwb3NpdGlvbiB0byB0aGUgbGluZWFyIHNsb3BlIGJldHdlZW4gbmVpZ2hib3JpbmcgcG9zaXRpb25zXHJcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxyXG4gKi9cclxuXHJcbmNsYXNzIEN1YmljSW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xyXG5cclxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XHJcblxyXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IC0gMDtcclxuXHRcdHRoaXMuX29mZnNldFByZXYgPSAtIDA7XHJcblx0XHR0aGlzLl93ZWlnaHROZXh0ID0gLSAwO1xyXG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IC0gMDtcclxuXHJcblx0XHR0aGlzLkRlZmF1bHRTZXR0aW5nc18gPSB7XHJcblxyXG5cdFx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcclxuXHRcdFx0ZW5kaW5nRW5kOiBaZXJvQ3VydmF0dXJlRW5kaW5nXHJcblxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICkge1xyXG5cclxuXHRcdGNvbnN0IHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnM7XHJcblx0XHRsZXQgaVByZXYgPSBpMSAtIDIsXHJcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxyXG5cclxuXHRcdFx0dFByZXYgPSBwcFsgaVByZXYgXSxcclxuXHRcdFx0dE5leHQgPSBwcFsgaU5leHQgXTtcclxuXHJcblx0XHRpZiAoIHRQcmV2ID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ1N0YXJ0ICkge1xyXG5cclxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcclxuXHJcblx0XHRcdFx0XHQvLyBmJyh0MCkgPSAwXHJcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xyXG5cdFx0XHRcdFx0dFByZXYgPSAyICogdDAgLSB0MTtcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxyXG5cclxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxyXG5cdFx0XHRcdFx0aVByZXYgPSBwcC5sZW5ndGggLSAyO1xyXG5cdFx0XHRcdFx0dFByZXYgPSB0MCArIHBwWyBpUHJldiBdIC0gcHBbIGlQcmV2ICsgMSBdO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXHJcblxyXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXHJcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xyXG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdFbmQgKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxyXG5cclxuXHRcdFx0XHRcdC8vIGYnKHROKSA9IDBcclxuXHRcdFx0XHRcdGlOZXh0ID0gaTE7XHJcblx0XHRcdFx0XHR0TmV4dCA9IDIgKiB0MSAtIHQwO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XHJcblxyXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXHJcblx0XHRcdFx0XHRpTmV4dCA9IDE7XHJcblx0XHRcdFx0XHR0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcclxuXHJcblx0XHRcdFx0XHQvLyBmJycodE4pID0gMCwgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXHJcblx0XHRcdFx0XHRpTmV4dCA9IGkxIC0gMTtcclxuXHRcdFx0XHRcdHROZXh0ID0gdDA7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGhhbGZEdCA9ICggdDEgLSB0MCApICogMC41LFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTtcclxuXHJcblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gaGFsZkR0IC8gKCB0MCAtIHRQcmV2ICk7XHJcblx0XHR0aGlzLl93ZWlnaHROZXh0ID0gaGFsZkR0IC8gKCB0TmV4dCAtIHQxICk7XHJcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7XHJcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gaU5leHQgKiBzdHJpZGU7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICkge1xyXG5cclxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxyXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcclxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXHJcblxyXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxyXG5cdFx0XHRvUCA9IHRoaXMuX29mZnNldFByZXYsIFx0b04gPSB0aGlzLl9vZmZzZXROZXh0LFxyXG5cdFx0XHR3UCA9IHRoaXMuX3dlaWdodFByZXYsXHR3TiA9IHRoaXMuX3dlaWdodE5leHQsXHJcblxyXG5cdFx0XHRwID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxyXG5cdFx0XHRwcCA9IHAgKiBwLFxyXG5cdFx0XHRwcHAgPSBwcCAqIHA7XHJcblxyXG5cdFx0Ly8gZXZhbHVhdGUgcG9seW5vbWlhbHNcclxuXHJcblx0XHRjb25zdCBzUCA9IC0gd1AgKiBwcHAgKyAyICogd1AgKiBwcCAtIHdQICogcDtcclxuXHRcdGNvbnN0IHMwID0gKCAxICsgd1AgKSAqIHBwcCArICggLSAxLjUgLSAyICogd1AgKSAqIHBwICsgKCAtIDAuNSArIHdQICkgKiBwICsgMTtcclxuXHRcdGNvbnN0IHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xyXG5cdFx0Y29uc3Qgc04gPSB3TiAqIHBwcCAtIHdOICogcHA7XHJcblxyXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRyZXN1bHRbIGkgXSA9XHJcblx0XHRcdFx0XHRzUCAqIHZhbHVlc1sgb1AgKyBpIF0gK1xyXG5cdFx0XHRcdFx0czAgKiB2YWx1ZXNbIG8wICsgaSBdICtcclxuXHRcdFx0XHRcdHMxICogdmFsdWVzWyBvMSArIGkgXSArXHJcblx0XHRcdFx0XHRzTiAqIHZhbHVlc1sgb04gKyBpIF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEN1YmljSW50ZXJwb2xhbnQgfTtcclxuIiwiaW1wb3J0IHsgSW50ZXJwb2xhbnQgfSBmcm9tICcuLi9JbnRlcnBvbGFudC5qcyc7XHJcblxyXG5jbGFzcyBMaW5lYXJJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XHJcblxyXG5cdFx0c3VwZXIoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XHJcblxyXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXHJcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHJcblx0XHRcdG9mZnNldDEgPSBpMSAqIHN0cmlkZSxcclxuXHRcdFx0b2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUsXHJcblxyXG5cdFx0XHR3ZWlnaHQxID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxyXG5cdFx0XHR3ZWlnaHQwID0gMSAtIHdlaWdodDE7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRyZXN1bHRbIGkgXSA9XHJcblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDAgKyBpIF0gKiB3ZWlnaHQwICtcclxuXHRcdFx0XHRcdHZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHdlaWdodDE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBMaW5lYXJJbnRlcnBvbGFudCB9O1xyXG4iLCJpbXBvcnQgeyBJbnRlcnBvbGFudCB9IGZyb20gJy4uL0ludGVycG9sYW50LmpzJztcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBJbnRlcnBvbGFudCB0aGF0IGV2YWx1YXRlcyB0byB0aGUgc2FtcGxlIHZhbHVlIGF0IHRoZSBwb3NpdGlvbiBwcmVjZWRpbmdcclxuICogdGhlIHBhcmFtZXRlci5cclxuICovXHJcblxyXG5jbGFzcyBEaXNjcmV0ZUludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcclxuXHJcblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVycG9sYXRlXyggaTEgLyosIHQwLCB0LCB0MSAqLyApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCBpMSAtIDEgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IERpc2NyZXRlSW50ZXJwb2xhbnQgfTtcclxuIiwiaW1wb3J0IHtcclxuXHRJbnRlcnBvbGF0ZUxpbmVhcixcclxuXHRJbnRlcnBvbGF0ZVNtb290aCxcclxuXHRJbnRlcnBvbGF0ZURpc2NyZXRlXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgQ3ViaWNJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0N1YmljSW50ZXJwb2xhbnQuanMnO1xyXG5pbXBvcnQgeyBMaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0xpbmVhckludGVycG9sYW50LmpzJztcclxuaW1wb3J0IHsgRGlzY3JldGVJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0Rpc2NyZXRlSW50ZXJwb2xhbnQuanMnO1xyXG5pbXBvcnQgKiBhcyBBbmltYXRpb25VdGlscyBmcm9tICcuL0FuaW1hdGlvblV0aWxzLmpzJztcclxuXHJcbmNsYXNzIEtleWZyYW1lVHJhY2sge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcclxuXHJcblx0XHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIG5hbWUgaXMgdW5kZWZpbmVkJyApO1xyXG5cdFx0aWYgKCB0aW1lcyA9PT0gdW5kZWZpbmVkIHx8IHRpbWVzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCAnICsgbmFtZSApO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblxyXG5cdFx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcclxuXHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB2YWx1ZXMsIHRoaXMuVmFsdWVCdWZmZXJUeXBlICk7XHJcblxyXG5cdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCBpbnRlcnBvbGF0aW9uIHx8IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBTZXJpYWxpemF0aW9uIChpbiBzdGF0aWMgY29udGV4dCwgYmVjYXVzZSBvZiBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uXHJcblx0Ly8gYW5kIGF1dG9tYXRpYyBpbnZvY2F0aW9uIG9mIC50b0pTT04pOlxyXG5cclxuXHRzdGF0aWMgdG9KU09OKCB0cmFjayApIHtcclxuXHJcblx0XHRjb25zdCB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcclxuXHJcblx0XHRsZXQganNvbjtcclxuXHJcblx0XHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyB0b0pTT04gbWV0aG9kXHJcblx0XHRpZiAoIHRyYWNrVHlwZS50b0pTT04gIT09IHRoaXMudG9KU09OICkge1xyXG5cclxuXHRcdFx0anNvbiA9IHRyYWNrVHlwZS50b0pTT04oIHRyYWNrICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pc1xyXG5cdFx0XHRqc29uID0ge1xyXG5cclxuXHRcdFx0XHQnbmFtZSc6IHRyYWNrLm5hbWUsXHJcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay50aW1lcywgQXJyYXkgKSxcclxuXHRcdFx0XHQndmFsdWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay52YWx1ZXMsIEFycmF5IClcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRjb25zdCBpbnRlcnBvbGF0aW9uID0gdHJhY2suZ2V0SW50ZXJwb2xhdGlvbigpO1xyXG5cclxuXHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0cmFjay5EZWZhdWx0SW50ZXJwb2xhdGlvbiApIHtcclxuXHJcblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XHJcblxyXG5cdFx0cmV0dXJuIGpzb247XHJcblxyXG5cdH1cclxuXHJcblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUoIHJlc3VsdCApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IERpc2NyZXRlSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIoIHJlc3VsdCApIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoKCByZXN1bHQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiApIHtcclxuXHJcblx0XHRsZXQgZmFjdG9yeU1ldGhvZDtcclxuXHJcblx0XHRzd2l0Y2ggKCBpbnRlcnBvbGF0aW9uICkge1xyXG5cclxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxyXG5cclxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxyXG5cclxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcclxuXHJcblx0XHRcdFx0ZmFjdG9yeU1ldGhvZCA9IHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmYWN0b3J5TWV0aG9kID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBtZXNzYWdlID0gJ3Vuc3VwcG9ydGVkIGludGVycG9sYXRpb24gZm9yICcgK1xyXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArICcga2V5ZnJhbWUgdHJhY2sgbmFtZWQgJyArIHRoaXMubmFtZTtcclxuXHJcblx0XHRcdGlmICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcclxuXHRcdFx0XHRpZiAoIGludGVycG9sYXRpb24gIT09IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtZXNzYWdlICk7IC8vIGZhdGFsLCBpbiB0aGlzIGNhc2VcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazonLCBtZXNzYWdlICk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRJbnRlcnBvbGF0aW9uKCkge1xyXG5cclxuXHRcdHN3aXRjaCAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgKSB7XHJcblxyXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6XHJcblxyXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xyXG5cclxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjpcclxuXHJcblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlTGluZWFyO1xyXG5cclxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcclxuXHJcblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlU21vb3RoO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRnZXRWYWx1ZVNpemUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIG1vdmUgYWxsIGtleWZyYW1lcyBlaXRoZXIgZm9yd2FyZHMgb3IgYmFja3dhcmRzIGluIHRpbWVcclxuXHRzaGlmdCggdGltZU9mZnNldCApIHtcclxuXHJcblx0XHRpZiAoIHRpbWVPZmZzZXQgIT09IDAuMCApIHtcclxuXHJcblx0XHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcztcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcclxuXHJcblx0XHRcdFx0dGltZXNbIGkgXSArPSB0aW1lT2Zmc2V0O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBzY2FsZSBhbGwga2V5ZnJhbWUgdGltZXMgYnkgYSBmYWN0b3IgKHVzZWZ1bCBmb3IgZnJhbWUgPC0+IHNlY29uZHMgY29udmVyc2lvbnMpXHJcblx0c2NhbGUoIHRpbWVTY2FsZSApIHtcclxuXHJcblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdGltZXMgPSB0aGlzLnRpbWVzO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gdGltZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0XHR0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcmVtb3ZlcyBrZXlmcmFtZXMgYmVmb3JlIGFuZCBhZnRlciBhbmltYXRpb24gd2l0aG91dCBjaGFuZ2luZyBhbnkgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW3N0YXJ0VGltZSwgZW5kVGltZV0uXHJcblx0Ly8gSU1QT1JUQU5UOiBXZSBkbyBub3Qgc2hpZnQgYXJvdW5kIGtleXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSB0cmFjayB0aW1lLCBiZWNhdXNlIGZvciBpbnRlcnBvbGF0ZWQga2V5cyB0aGlzIHdpbGwgY2hhbmdlIHRoZWlyIHZhbHVlc1xyXG5cdHRyaW0oIHN0YXJ0VGltZSwgZW5kVGltZSApIHtcclxuXHJcblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMsXHJcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xyXG5cclxuXHRcdGxldCBmcm9tID0gMCxcclxuXHRcdFx0dG8gPSBuS2V5cyAtIDE7XHJcblxyXG5cdFx0d2hpbGUgKCBmcm9tICE9PSBuS2V5cyAmJiB0aW1lc1sgZnJvbSBdIDwgc3RhcnRUaW1lICkge1xyXG5cclxuXHRcdFx0KysgZnJvbTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0d2hpbGUgKCB0byAhPT0gLSAxICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHtcclxuXHJcblx0XHRcdC0tIHRvO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQrKyB0bzsgLy8gaW5jbHVzaXZlIC0+IGV4Y2x1c2l2ZSBib3VuZFxyXG5cclxuXHRcdGlmICggZnJvbSAhPT0gMCB8fCB0byAhPT0gbktleXMgKSB7XHJcblxyXG5cdFx0XHQvLyBlbXB0eSB0cmFja3MgYXJlIGZvcmJpZGRlbiwgc28ga2VlcCBhdCBsZWFzdCBvbmUga2V5ZnJhbWVcclxuXHRcdFx0aWYgKCBmcm9tID49IHRvICkge1xyXG5cclxuXHRcdFx0XHR0byA9IE1hdGgubWF4KCB0bywgMSApO1xyXG5cdFx0XHRcdGZyb20gPSB0byAtIDE7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpO1xyXG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXMuc2xpY2UoIGZyb20sIHRvICk7XHJcblx0XHRcdHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2UoIGZyb20gKiBzdHJpZGUsIHRvICogc3RyaWRlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcclxuXHR2YWxpZGF0ZSgpIHtcclxuXHJcblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xyXG5cclxuXHRcdGNvbnN0IHZhbHVlU2l6ZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XHJcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IEludmFsaWQgdmFsdWUgc2l6ZSBpbiB0cmFjay4nLCB0aGlzICk7XHJcblx0XHRcdHZhbGlkID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcyxcclxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXHJcblxyXG5cdFx0XHRuS2V5cyA9IHRpbWVzLmxlbmd0aDtcclxuXHJcblx0XHRpZiAoIG5LZXlzID09PSAwICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMgKTtcclxuXHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHByZXZUaW1lID0gbnVsbDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5LZXlzOyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgY3VyclRpbWUgPSB0aW1lc1sgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2YgY3VyclRpbWUgPT09ICdudW1iZXInICYmIGlzTmFOKCBjdXJyVGltZSApICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcclxuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogT3V0IG9mIG9yZGVyIGtleXMuJywgdGhpcywgaSwgY3VyclRpbWUsIHByZXZUaW1lICk7XHJcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHByZXZUaW1lID0gY3VyclRpbWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIEFuaW1hdGlvblV0aWxzLmlzVHlwZWRBcnJheSggdmFsdWVzICkgKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGlzTmFOKCB2YWx1ZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFZhbHVlIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHZhbGlkO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIHJlbW92ZXMgZXF1aXZhbGVudCBzZXF1ZW50aWFsIGtleXMgYXMgY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXNcclxuXHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxyXG5cdG9wdGltaXplKCkge1xyXG5cclxuXHRcdC8vIHRpbWVzIG9yIHZhbHVlcyBtYXkgYmUgc2hhcmVkIHdpdGggb3RoZXIgdHJhY2tzLCBzbyBvdmVyd3JpdGluZyBpcyB1bnNhZmVcclxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcy5zbGljZSgpLFxyXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcy5zbGljZSgpLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpLFxyXG5cclxuXHRcdFx0c21vb3RoSW50ZXJwb2xhdGlvbiA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvbigpID09PSBJbnRlcnBvbGF0ZVNtb290aCxcclxuXHJcblx0XHRcdGxhc3RJbmRleCA9IHRpbWVzLmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0bGV0IHdyaXRlSW5kZXggPSAxO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8IGxhc3RJbmRleDsgKysgaSApIHtcclxuXHJcblx0XHRcdGxldCBrZWVwID0gZmFsc2U7XHJcblxyXG5cdFx0XHRjb25zdCB0aW1lID0gdGltZXNbIGkgXTtcclxuXHRcdFx0Y29uc3QgdGltZU5leHQgPSB0aW1lc1sgaSArIDEgXTtcclxuXHJcblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcclxuXHJcblx0XHRcdGlmICggdGltZSAhPT0gdGltZU5leHQgJiYgKCBpICE9PSAxIHx8IHRpbWUgIT09IHRpbWVzWyAwIF0gKSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9yc1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IGkgKiBzdHJpZGUsXHJcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXHJcblx0XHRcdFx0XHRcdG9mZnNldE4gPSBvZmZzZXQgKyBzdHJpZGU7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXRQICsgaiBdIHx8XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0TiArIGogXSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0a2VlcCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpbi1wbGFjZSBjb21wYWN0aW9uXHJcblxyXG5cdFx0XHRpZiAoIGtlZXAgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggaSAhPT0gd3JpdGVJbmRleCApIHtcclxuXHJcblx0XHRcdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRjb25zdCByZWFkT2Zmc2V0ID0gaSAqIHN0cmlkZSxcclxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Kysgd3JpdGVJbmRleDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZmx1c2ggbGFzdCBrZXlmcmFtZSAoY29tcGFjdGlvbiBsb29rcyBhaGVhZClcclxuXHJcblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XHJcblxyXG5cdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGxhc3RJbmRleCBdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IHJlYWRPZmZzZXQgPSBsYXN0SW5kZXggKiBzdHJpZGUsIHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZSwgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHtcclxuXHJcblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdCsrIHdyaXRlSW5kZXg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggd3JpdGVJbmRleCAhPT0gdGltZXMubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0dGhpcy50aW1lcyA9IHRpbWVzLnNsaWNlKCAwLCB3cml0ZUluZGV4ICk7XHJcblx0XHRcdHRoaXMudmFsdWVzID0gdmFsdWVzLnNsaWNlKCAwLCB3cml0ZUluZGV4ICogc3RyaWRlICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMudGltZXMgPSB0aW1lcztcclxuXHRcdFx0dGhpcy52YWx1ZXMgPSB2YWx1ZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcy5zbGljZSgpO1xyXG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2UoKTtcclxuXHJcblx0XHRjb25zdCBUeXBlZEtleWZyYW1lVHJhY2sgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG5cdFx0Y29uc3QgdHJhY2sgPSBuZXcgVHlwZWRLZXlmcmFtZVRyYWNrKCB0aGlzLm5hbWUsIHRpbWVzLCB2YWx1ZXMgKTtcclxuXHJcblx0XHQvLyBJbnRlcnBvbGFudCBhcmd1bWVudCB0byBjb25zdHJ1Y3RvciBpcyBub3Qgc2F2ZWQsIHNvIGNvcHkgdGhlIGZhY3RvcnkgbWV0aG9kIGRpcmVjdGx5LlxyXG5cdFx0dHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSB0aGlzLmNyZWF0ZUludGVycG9sYW50O1xyXG5cclxuXHRcdHJldHVybiB0cmFjaztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVGltZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XHJcbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlQnVmZmVyVHlwZSA9IEZsb2F0MzJBcnJheTtcclxuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuRGVmYXVsdEludGVycG9sYXRpb24gPSBJbnRlcnBvbGF0ZUxpbmVhcjtcclxuXHJcbmV4cG9ydCB7IEtleWZyYW1lVHJhY2sgfTtcclxuIiwiaW1wb3J0IHsgSW50ZXJwb2xhdGVEaXNjcmV0ZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBIFRyYWNrIG9mIEJvb2xlYW4ga2V5ZnJhbWUgdmFsdWVzLlxyXG4gKi9cclxuY2xhc3MgQm9vbGVhbktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHtcclxuXHJcblx0Ly8gTm8gaW50ZXJwb2xhdGlvbiBwYXJhbWV0ZXIgYmVjYXVzZSBvbmx5IEludGVycG9sYXRlRGlzY3JldGUgaXMgdmFsaWQuXHJcblx0Y29uc3RydWN0b3IoIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnYm9vbCc7XHJcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBBcnJheTtcclxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkRlZmF1bHRJbnRlcnBvbGF0aW9uID0gSW50ZXJwb2xhdGVEaXNjcmV0ZTtcclxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhciA9IHVuZGVmaW5lZDtcclxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcclxuXHJcbi8vIE5vdGU6IEFjdHVhbGx5IHRoaXMgdHJhY2sgY291bGQgaGF2ZSBhIG9wdGltaXplZCAvIGNvbXByZXNzZWRcclxuLy8gcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgdmFsdWUgYW5kIGEgY3VzdG9tIGludGVycG9sYW50IHRoYXRcclxuLy8gY29tcHV0ZXMgXCJmaXJzdFZhbHVlIF4gaXNPZGQoIGluZGV4IClcIi5cclxuXHJcbmV4cG9ydCB7IEJvb2xlYW5LZXlmcmFtZVRyYWNrIH07XHJcbiIsImltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cclxuICovXHJcbmNsYXNzIENvbG9yS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge31cclxuXHJcbkNvbG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdjb2xvcic7XHJcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcclxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXHJcblxyXG4vLyBOb3RlOiBWZXJ5IGJhc2ljIGltcGxlbWVudGF0aW9uIGFuZCBub3RoaW5nIHNwZWNpYWwgeWV0LlxyXG4vLyBIb3dldmVyLCB0aGlzIGlzIHRoZSBwbGFjZSBmb3IgY29sb3Igc3BhY2UgcGFyYW1ldGVyaXphdGlvbi5cclxuXHJcbmV4cG9ydCB7IENvbG9yS2V5ZnJhbWVUcmFjayB9O1xyXG4iLCJpbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQSBUcmFjayBvZiBudW1lcmljIGtleWZyYW1lIHZhbHVlcy5cclxuICovXHJcbmNsYXNzIE51bWJlcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XHJcblxyXG5OdW1iZXJLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ251bWJlcic7XHJcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcclxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXHJcblxyXG5leHBvcnQgeyBOdW1iZXJLZXlmcmFtZVRyYWNrIH07XHJcbiIsImltcG9ydCB7IEludGVycG9sYW50IH0gZnJvbSAnLi4vSW50ZXJwb2xhbnQuanMnO1xyXG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vUXVhdGVybmlvbi5qcyc7XHJcblxyXG4vKipcclxuICogU3BoZXJpY2FsIGxpbmVhciB1bml0IHF1YXRlcm5pb24gaW50ZXJwb2xhbnQuXHJcbiAqL1xyXG5cclxuY2xhc3MgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcclxuXHJcblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApIHtcclxuXHJcblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcclxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cclxuXHRcdFx0YWxwaGEgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICk7XHJcblxyXG5cdFx0bGV0IG9mZnNldCA9IGkxICogc3RyaWRlO1xyXG5cclxuXHRcdGZvciAoIGxldCBlbmQgPSBvZmZzZXQgKyBzdHJpZGU7IG9mZnNldCAhPT0gZW5kOyBvZmZzZXQgKz0gNCApIHtcclxuXHJcblx0XHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCByZXN1bHQsIDAsIHZhbHVlcywgb2Zmc2V0IC0gc3RyaWRlLCB2YWx1ZXMsIG9mZnNldCwgYWxwaGEgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCB9O1xyXG4iLCJpbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XHJcbmltcG9ydCB7IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4uLy4uL21hdGgvaW50ZXJwb2xhbnRzL1F1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudC5qcyc7XHJcblxyXG4vKipcclxuICogQSBUcmFjayBvZiBxdWF0ZXJuaW9uIGtleWZyYW1lIHZhbHVlcy5cclxuICovXHJcbmNsYXNzIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XHJcblxyXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhciggcmVzdWx0ICkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ3F1YXRlcm5pb24nO1xyXG4vLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXHJcbi8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZDtcclxuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcclxuXHJcbmV4cG9ydCB7IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIH07XHJcbiIsImltcG9ydCB7IEludGVycG9sYXRlRGlzY3JldGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQSBUcmFjayB0aGF0IGludGVycG9sYXRlcyBTdHJpbmdzXHJcbiAqL1xyXG5jbGFzcyBTdHJpbmdLZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XHJcblxyXG5cdC8vIE5vIGludGVycG9sYXRpb24gcGFyYW1ldGVyIGJlY2F1c2Ugb25seSBJbnRlcnBvbGF0ZURpc2NyZXRlIGlzIHZhbGlkLlxyXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0aW1lcywgdmFsdWVzICkge1xyXG5cclxuXHRcdHN1cGVyKCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnc3RyaW5nJztcclxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVCdWZmZXJUeXBlID0gQXJyYXk7XHJcblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLkRlZmF1bHRJbnRlcnBvbGF0aW9uID0gSW50ZXJwb2xhdGVEaXNjcmV0ZTtcclxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xyXG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGggPSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgeyBTdHJpbmdLZXlmcmFtZVRyYWNrIH07XHJcbiIsImltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBIFRyYWNrIG9mIHZlY3RvcmVkIGtleWZyYW1lIHZhbHVlcy5cclxuICovXHJcbmNsYXNzIFZlY3RvcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XHJcblxyXG5WZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ3ZlY3Rvcic7XHJcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcclxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXHJcblxyXG5leHBvcnQgeyBWZWN0b3JLZXlmcmFtZVRyYWNrIH07XHJcbiIsImltcG9ydCAqIGFzIEFuaW1hdGlvblV0aWxzIGZyb20gJy4vQW5pbWF0aW9uVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi9LZXlmcmFtZVRyYWNrLmpzJztcclxuaW1wb3J0IHsgQm9vbGVhbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9Cb29sZWFuS2V5ZnJhbWVUcmFjay5qcyc7XHJcbmltcG9ydCB7IENvbG9yS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vdHJhY2tzL0NvbG9yS2V5ZnJhbWVUcmFjay5qcyc7XHJcbmltcG9ydCB7IE51bWJlcktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9OdW1iZXJLZXlmcmFtZVRyYWNrLmpzJztcclxuaW1wb3J0IHsgUXVhdGVybmlvbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5qcyc7XHJcbmltcG9ydCB7IFN0cmluZ0tleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9TdHJpbmdLZXlmcmFtZVRyYWNrLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vdHJhY2tzL1ZlY3RvcktleWZyYW1lVHJhY2suanMnO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5jbGFzcyBBbmltYXRpb25DbGlwIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG5hbWUgPSAnJywgZHVyYXRpb24gPSAtIDEsIHRyYWNrcyA9IFtdLCBibGVuZE1vZGUgPSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUgKSB7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMudHJhY2tzID0gdHJhY2tzO1xyXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG5cdFx0dGhpcy5ibGVuZE1vZGUgPSBibGVuZE1vZGU7XHJcblxyXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdFx0Ly8gdGhpcyBtZWFucyBpdCBzaG91bGQgZmlndXJlIG91dCBpdHMgZHVyYXRpb24gYnkgc2Nhbm5pbmcgdGhlIHRyYWNrc1xyXG5cdFx0aWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHtcclxuXHJcblx0XHRcdHRoaXMucmVzZXREdXJhdGlvbigpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHJcblx0c3RhdGljIHBhcnNlKCBqc29uICkge1xyXG5cclxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdLFxyXG5cdFx0XHRqc29uVHJhY2tzID0ganNvbi50cmFja3MsXHJcblx0XHRcdGZyYW1lVGltZSA9IDEuMCAvICgganNvbi5mcHMgfHwgMS4wICk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0ganNvblRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHR0cmFja3MucHVzaCggcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uVHJhY2tzWyBpIF0gKS5zY2FsZSggZnJhbWVUaW1lICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgY2xpcCA9IG5ldyB0aGlzKCBqc29uLm5hbWUsIGpzb24uZHVyYXRpb24sIHRyYWNrcywganNvbi5ibGVuZE1vZGUgKTtcclxuXHRcdGNsaXAudXVpZCA9IGpzb24udXVpZDtcclxuXHJcblx0XHRyZXR1cm4gY2xpcDtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdG9KU09OKCBjbGlwICkge1xyXG5cclxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdLFxyXG5cdFx0XHRjbGlwVHJhY2tzID0gY2xpcC50cmFja3M7XHJcblxyXG5cdFx0Y29uc3QganNvbiA9IHtcclxuXHJcblx0XHRcdCduYW1lJzogY2xpcC5uYW1lLFxyXG5cdFx0XHQnZHVyYXRpb24nOiBjbGlwLmR1cmF0aW9uLFxyXG5cdFx0XHQndHJhY2tzJzogdHJhY2tzLFxyXG5cdFx0XHQndXVpZCc6IGNsaXAudXVpZCxcclxuXHRcdFx0J2JsZW5kTW9kZSc6IGNsaXAuYmxlbmRNb2RlXHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBjbGlwVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcclxuXHJcblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpzb247XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlKCBuYW1lLCBtb3JwaFRhcmdldFNlcXVlbmNlLCBmcHMsIG5vTG9vcCApIHtcclxuXHJcblx0XHRjb25zdCBudW1Nb3JwaFRhcmdldHMgPSBtb3JwaFRhcmdldFNlcXVlbmNlLmxlbmd0aDtcclxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgaSArKyApIHtcclxuXHJcblx0XHRcdGxldCB0aW1lcyA9IFtdO1xyXG5cdFx0XHRsZXQgdmFsdWVzID0gW107XHJcblxyXG5cdFx0XHR0aW1lcy5wdXNoKFxyXG5cdFx0XHRcdCggaSArIG51bU1vcnBoVGFyZ2V0cyAtIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyxcclxuXHRcdFx0XHRpLFxyXG5cdFx0XHRcdCggaSArIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyApO1xyXG5cclxuXHRcdFx0dmFsdWVzLnB1c2goIDAsIDEsIDAgKTtcclxuXHJcblx0XHRcdGNvbnN0IG9yZGVyID0gQW5pbWF0aW9uVXRpbHMuZ2V0S2V5ZnJhbWVPcmRlciggdGltZXMgKTtcclxuXHRcdFx0dGltZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSggdGltZXMsIDEsIG9yZGVyICk7XHJcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XHJcblxyXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBhIGtleSBhdCB0aGUgZmlyc3QgZnJhbWUsIGR1cGxpY2F0ZSBpdCBhcyB0aGVcclxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXHJcblx0XHRcdGlmICggISBub0xvb3AgJiYgdGltZXNbIDAgXSA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XHJcblx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlc1sgMCBdICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cmFja3MucHVzaChcclxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcclxuXHRcdFx0XHRcdCcubW9ycGhUYXJnZXRJbmZsdWVuY2VzWycgKyBtb3JwaFRhcmdldFNlcXVlbmNlWyBpIF0ubmFtZSArICddJyxcclxuXHRcdFx0XHRcdHRpbWVzLCB2YWx1ZXNcclxuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMoIG5hbWUsIC0gMSwgdHJhY2tzICk7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZpbmRCeU5hbWUoIG9iamVjdE9yQ2xpcEFycmF5LCBuYW1lICkge1xyXG5cclxuXHRcdGxldCBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTtcclxuXHJcblx0XHRpZiAoICEgQXJyYXkuaXNBcnJheSggb2JqZWN0T3JDbGlwQXJyYXkgKSApIHtcclxuXHJcblx0XHRcdGNvbnN0IG8gPSBvYmplY3RPckNsaXBBcnJheTtcclxuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwQXJyYXkubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gY2xpcEFycmF5WyBpIF07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyggbW9ycGhUYXJnZXRzLCBmcHMsIG5vTG9vcCApIHtcclxuXHJcblx0XHRjb25zdCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyA9IHt9O1xyXG5cclxuXHRcdC8vIHRlc3RlZCB3aXRoIGh0dHBzOi8vcmVnZXgxMDEuY29tLyBvbiB0cmljayBzZXF1ZW5jZXNcclxuXHRcdC8vIHN1Y2ggZmxhbWluZ29fZmx5QV8wMDMsIGZsYW1pbmdvX3J1bjFfMDAzLCBjcmRlYXRoMDA1OVxyXG5cdFx0Y29uc3QgcGF0dGVybiA9IC9eKFtcXHctXSo/KShbXFxkXSspJC87XHJcblxyXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXHJcblx0XHQvLyBwYXR0ZXJucyBsaWtlIFdhbGtfMDAxLCBXYWxrXzAwMiwgUnVuXzAwMSwgUnVuXzAwMlxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XHJcblx0XHRcdGNvbnN0IHBhcnRzID0gbW9ycGhUYXJnZXQubmFtZS5tYXRjaCggcGF0dGVybiApO1xyXG5cclxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBuYW1lID0gcGFydHNbIDEgXTtcclxuXHJcblx0XHRcdFx0bGV0IGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF07XHJcblxyXG5cdFx0XHRcdGlmICggISBhbmltYXRpb25Nb3JwaFRhcmdldHMgKSB7XHJcblxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSA9IGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IFtdO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGFuaW1hdGlvbk1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBjbGlwcyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgKSB7XHJcblxyXG5cdFx0XHRjbGlwcy5wdXNoKCB0aGlzLkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlKCBuYW1lLCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdLCBmcHMsIG5vTG9vcCApICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjbGlwcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBwYXJzZSB0aGUgYW5pbWF0aW9uLmhpZXJhcmNoeSBmb3JtYXRcclxuXHRzdGF0aWMgcGFyc2VBbmltYXRpb24oIGFuaW1hdGlvbiwgYm9uZXMgKSB7XHJcblxyXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25DbGlwOiBObyBhbmltYXRpb24gaW4gSlNPTkxvYWRlciBkYXRhLicgKTtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGFkZE5vbmVtcHR5VHJhY2sgPSBmdW5jdGlvbiAoIHRyYWNrVHlwZSwgdHJhY2tOYW1lLCBhbmltYXRpb25LZXlzLCBwcm9wZXJ0eU5hbWUsIGRlc3RUcmFja3MgKSB7XHJcblxyXG5cdFx0XHQvLyBvbmx5IHJldHVybiB0cmFjayBpZiB0aGVyZSBhcmUgYWN0dWFsbHkga2V5cy5cclxuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzLmxlbmd0aCAhPT0gMCApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcclxuXHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xyXG5cclxuXHRcdFx0XHQvLyBlbXB0eSBrZXlzIGFyZSBmaWx0ZXJlZCBvdXQsIHNvIGNoZWNrIGFnYWluXHJcblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0ZGVzdFRyYWNrcy5wdXNoKCBuZXcgdHJhY2tUeXBlKCB0cmFja05hbWUsIHRpbWVzLCB2YWx1ZXMgKSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCB0cmFja3MgPSBbXTtcclxuXHJcblx0XHRjb25zdCBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0JztcclxuXHRcdGNvbnN0IGZwcyA9IGFuaW1hdGlvbi5mcHMgfHwgMzA7XHJcblx0XHRjb25zdCBibGVuZE1vZGUgPSBhbmltYXRpb24uYmxlbmRNb2RlO1xyXG5cclxuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxyXG5cdFx0bGV0IGR1cmF0aW9uID0gYW5pbWF0aW9uLmxlbmd0aCB8fCAtIDE7XHJcblxyXG5cdFx0Y29uc3QgaGllcmFyY2h5VHJhY2tzID0gYW5pbWF0aW9uLmhpZXJhcmNoeSB8fCBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYW5pbWF0aW9uS2V5cyA9IGhpZXJhcmNoeVRyYWNrc1sgaCBdLmtleXM7XHJcblxyXG5cdFx0XHQvLyBza2lwIGVtcHR5IHRyYWNrc1xyXG5cdFx0XHRpZiAoICEgYW5pbWF0aW9uS2V5cyB8fCBhbmltYXRpb25LZXlzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCB0YXJnZXRzXHJcblx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgMCBdLm1vcnBoVGFyZ2V0cyApIHtcclxuXHJcblx0XHRcdFx0Ly8gZmlndXJlIG91dCBhbGwgbW9ycGggdGFyZ2V0cyB1c2VkIGluIHRoaXMgdHJhY2tcclxuXHRcdFx0XHRjb25zdCBtb3JwaFRhcmdldE5hbWVzID0ge307XHJcblxyXG5cdFx0XHRcdGxldCBrO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cyApIHtcclxuXHJcblx0XHRcdFx0XHRcdGZvciAoIGxldCBtID0gMDsgbSA8IGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMubGVuZ3RoOyBtICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gY3JlYXRlIGEgdHJhY2sgZm9yIGVhY2ggbW9ycGggdGFyZ2V0IHdpdGggYWxsIHplcm9cclxuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxyXG5cdFx0XHRcdC8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC5cclxuXHRcdFx0XHRmb3IgKCBjb25zdCBtb3JwaFRhcmdldE5hbWUgaW4gbW9ycGhUYXJnZXROYW1lcyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCB0aW1lcyA9IFtdO1xyXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgKysgbSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGFuaW1hdGlvbktleSA9IGFuaW1hdGlvbktleXNbIGsgXTtcclxuXHJcblx0XHRcdFx0XHRcdHRpbWVzLnB1c2goIGFuaW1hdGlvbktleS50aW1lICk7XHJcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCAoIGFuaW1hdGlvbktleS5tb3JwaFRhcmdldCA9PT0gbW9ycGhUYXJnZXROYW1lICkgPyAxIDogMCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0cmFja3MucHVzaCggbmV3IE51bWJlcktleWZyYW1lVHJhY2soICcubW9ycGhUYXJnZXRJbmZsdWVuY2VbJyArIG1vcnBoVGFyZ2V0TmFtZSArICddJywgdGltZXMsIHZhbHVlcyApICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZHVyYXRpb24gPSBtb3JwaFRhcmdldE5hbWVzLmxlbmd0aCAqIGZwcztcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cclxuXHJcblx0XHRcdFx0Y29uc3QgYm9uZU5hbWUgPSAnLmJvbmVzWycgKyBib25lc1sgaCBdLm5hbWUgKyAnXSc7XHJcblxyXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXHJcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucG9zaXRpb24nLFxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3BvcycsIHRyYWNrcyApO1xyXG5cclxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxyXG5cdFx0XHRcdFx0UXVhdGVybmlvbktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5xdWF0ZXJuaW9uJyxcclxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdyb3QnLCB0cmFja3MgKTtcclxuXHJcblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcclxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5zY2FsZScsXHJcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHJhY2tzLmxlbmd0aCA9PT0gMCApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBjbGlwID0gbmV3IHRoaXMoIGNsaXBOYW1lLCBkdXJhdGlvbiwgdHJhY2tzLCBibGVuZE1vZGUgKTtcclxuXHJcblx0XHRyZXR1cm4gY2xpcDtcclxuXHJcblx0fVxyXG5cclxuXHRyZXNldER1cmF0aW9uKCkge1xyXG5cclxuXHRcdGNvbnN0IHRyYWNrcyA9IHRoaXMudHJhY2tzO1xyXG5cdFx0bGV0IGR1cmF0aW9uID0gMDtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB0cmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xyXG5cclxuXHRcdFx0ZHVyYXRpb24gPSBNYXRoLm1heCggZHVyYXRpb24sIHRyYWNrLnRpbWVzWyB0cmFjay50aW1lcy5sZW5ndGggLSAxIF0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRyaW0oKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS50cmltKCAwLCB0aGlzLmR1cmF0aW9uICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhbGlkYXRlKCkge1xyXG5cclxuXHRcdGxldCB2YWxpZCA9IHRydWU7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1sgaSBdLnZhbGlkYXRlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB2YWxpZDtcclxuXHJcblx0fVxyXG5cclxuXHRvcHRpbWl6ZSgpIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLm9wdGltaXplKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRyYWNrcy5wdXNoKCB0aGlzLnRyYWNrc1sgaSBdLmNsb25lKCkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLm5hbWUsIHRoaXMuZHVyYXRpb24sIHRyYWNrcywgdGhpcy5ibGVuZE1vZGUgKTtcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9KU09OKCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIHR5cGVOYW1lICkge1xyXG5cclxuXHRzd2l0Y2ggKCB0eXBlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xyXG5cclxuXHRcdGNhc2UgJ3NjYWxhcic6XHJcblx0XHRjYXNlICdkb3VibGUnOlxyXG5cdFx0Y2FzZSAnZmxvYXQnOlxyXG5cdFx0Y2FzZSAnbnVtYmVyJzpcclxuXHRcdGNhc2UgJ2ludGVnZXInOlxyXG5cclxuXHRcdFx0cmV0dXJuIE51bWJlcktleWZyYW1lVHJhY2s7XHJcblxyXG5cdFx0Y2FzZSAndmVjdG9yJzpcclxuXHRcdGNhc2UgJ3ZlY3RvcjInOlxyXG5cdFx0Y2FzZSAndmVjdG9yMyc6XHJcblx0XHRjYXNlICd2ZWN0b3I0JzpcclxuXHJcblx0XHRcdHJldHVybiBWZWN0b3JLZXlmcmFtZVRyYWNrO1xyXG5cclxuXHRcdGNhc2UgJ2NvbG9yJzpcclxuXHJcblx0XHRcdHJldHVybiBDb2xvcktleWZyYW1lVHJhY2s7XHJcblxyXG5cdFx0Y2FzZSAncXVhdGVybmlvbic6XHJcblxyXG5cdFx0XHRyZXR1cm4gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XHJcblxyXG5cdFx0Y2FzZSAnYm9vbCc6XHJcblx0XHRjYXNlICdib29sZWFuJzpcclxuXHJcblx0XHRcdHJldHVybiBCb29sZWFuS2V5ZnJhbWVUcmFjaztcclxuXHJcblx0XHRjYXNlICdzdHJpbmcnOlxyXG5cclxuXHRcdFx0cmV0dXJuIFN0cmluZ0tleWZyYW1lVHJhY2s7XHJcblxyXG5cdH1cclxuXHJcblx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVW5zdXBwb3J0ZWQgdHlwZU5hbWU6ICcgKyB0eXBlTmFtZSApO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uICkge1xyXG5cclxuXHRpZiAoIGpzb24udHlwZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbnN0IHRyYWNrVHlwZSA9IGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIGpzb24udHlwZSApO1xyXG5cclxuXHRpZiAoIGpzb24udGltZXMgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRjb25zdCB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRBbmltYXRpb25VdGlscy5mbGF0dGVuSlNPTigganNvbi5rZXlzLCB0aW1lcywgdmFsdWVzLCAndmFsdWUnICk7XHJcblxyXG5cdFx0anNvbi50aW1lcyA9IHRpbWVzO1xyXG5cdFx0anNvbi52YWx1ZXMgPSB2YWx1ZXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgcGFyc2UgbWV0aG9kXHJcblx0aWYgKCB0cmFja1R5cGUucGFyc2UgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRyZXR1cm4gdHJhY2tUeXBlLnBhcnNlKCBqc29uICk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIGEgY29uc3RydWN0b3IgY29tcGF0aWJsZSB3aXRoIHRoZSBiYXNlXHJcblx0XHRyZXR1cm4gbmV3IHRyYWNrVHlwZSgganNvbi5uYW1lLCBqc29uLnRpbWVzLCBqc29uLnZhbHVlcywganNvbi5pbnRlcnBvbGF0aW9uICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFuaW1hdGlvbkNsaXAgfTtcclxuIiwiY29uc3QgQ2FjaGUgPSB7XHJcblxyXG5cdGVuYWJsZWQ6IGZhbHNlLFxyXG5cclxuXHRmaWxlczoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQWRkaW5nIGtleTonLCBrZXkgKTtcclxuXHJcblx0XHR0aGlzLmZpbGVzWyBrZXkgXSA9IGZpbGU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldDogZnVuY3Rpb24gKCBrZXkgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQ2hlY2tpbmcga2V5OicsIGtleSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZpbGVzWyBrZXkgXTtcclxuXHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiAoIGtleSApIHtcclxuXHJcblx0XHRkZWxldGUgdGhpcy5maWxlc1sga2V5IF07XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5maWxlcyA9IHt9O1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCB7IENhY2hlIH07XHJcbiIsImNsYXNzIExvYWRpbmdNYW5hZ2VyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0bGV0IGlzTG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0bGV0IGl0ZW1zTG9hZGVkID0gMDtcclxuXHRcdGxldCBpdGVtc1RvdGFsID0gMDtcclxuXHRcdGxldCB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcclxuXHRcdGNvbnN0IGhhbmRsZXJzID0gW107XHJcblxyXG5cdFx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxyXG5cdFx0Ly8gaW4gdGhlIGNvbnN0cnVjdG9yXHJcblxyXG5cdFx0dGhpcy5vblN0YXJ0ID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5vbkxvYWQgPSBvbkxvYWQ7XHJcblx0XHR0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzO1xyXG5cdFx0dGhpcy5vbkVycm9yID0gb25FcnJvcjtcclxuXHJcblx0XHR0aGlzLml0ZW1TdGFydCA9IGZ1bmN0aW9uICggdXJsICkge1xyXG5cclxuXHRcdFx0aXRlbXNUb3RhbCArKztcclxuXHJcblx0XHRcdGlmICggaXNMb2FkaW5nID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBzY29wZS5vblN0YXJ0ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0c2NvcGUub25TdGFydCggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5pdGVtRW5kID0gZnVuY3Rpb24gKCB1cmwgKSB7XHJcblxyXG5cdFx0XHRpdGVtc0xvYWRlZCArKztcclxuXHJcblx0XHRcdGlmICggc2NvcGUub25Qcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRzY29wZS5vblByb2dyZXNzKCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGl0ZW1zTG9hZGVkID09PSBpdGVtc1RvdGFsICkge1xyXG5cclxuXHRcdFx0XHRpc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aWYgKCBzY29wZS5vbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRzY29wZS5vbkxvYWQoKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5pdGVtRXJyb3IgPSBmdW5jdGlvbiAoIHVybCApIHtcclxuXHJcblx0XHRcdGlmICggc2NvcGUub25FcnJvciAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRzY29wZS5vbkVycm9yKCB1cmwgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMucmVzb2x2ZVVSTCA9IGZ1bmN0aW9uICggdXJsICkge1xyXG5cclxuXHRcdFx0aWYgKCB1cmxNb2RpZmllciApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHVybE1vZGlmaWVyKCB1cmwgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB1cmw7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLnNldFVSTE1vZGlmaWVyID0gZnVuY3Rpb24gKCB0cmFuc2Zvcm0gKSB7XHJcblxyXG5cdFx0XHR1cmxNb2RpZmllciA9IHRyYW5zZm9ybTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5hZGRIYW5kbGVyID0gZnVuY3Rpb24gKCByZWdleCwgbG9hZGVyICkge1xyXG5cclxuXHRcdFx0aGFuZGxlcnMucHVzaCggcmVnZXgsIGxvYWRlciApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLnJlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4ICkge1xyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKCByZWdleCApO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xyXG5cclxuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGluZGV4LCAyICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuZ2V0SGFuZGxlciA9IGZ1bmN0aW9uICggZmlsZSApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMiApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgcmVnZXggPSBoYW5kbGVyc1sgaSBdO1xyXG5cdFx0XHRcdGNvbnN0IGxvYWRlciA9IGhhbmRsZXJzWyBpICsgMSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIHJlZ2V4Lmdsb2JhbCApIHJlZ2V4Lmxhc3RJbmRleCA9IDA7IC8vIHNlZSAjMTc5MjBcclxuXHJcblx0XHRcdFx0aWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIGxvYWRlcjtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuY29uc3QgRGVmYXVsdExvYWRpbmdNYW5hZ2VyID0gLypAX19QVVJFX18qLyBuZXcgTG9hZGluZ01hbmFnZXIoKTtcclxuXHJcbmV4cG9ydCB7IERlZmF1bHRMb2FkaW5nTWFuYWdlciwgTG9hZGluZ01hbmFnZXIgfTtcclxuIiwiaW1wb3J0IHsgRGVmYXVsdExvYWRpbmdNYW5hZ2VyIH0gZnJvbSAnLi9Mb2FkaW5nTWFuYWdlci5qcyc7XHJcblxyXG5jbGFzcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcclxuXHJcblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XHJcblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wYXRoID0gJyc7XHJcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9ICcnO1xyXG5cdFx0dGhpcy5yZXF1ZXN0SGVhZGVyID0ge307XHJcblxyXG5cdH1cclxuXHJcblx0bG9hZCggLyogdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKi8gKSB7fVxyXG5cclxuXHRsb2FkQXN5bmMoIHVybCwgb25Qcm9ncmVzcyApIHtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcclxuXHJcblx0XHRcdHNjb3BlLmxvYWQoIHVybCwgcmVzb2x2ZSwgb25Qcm9ncmVzcywgcmVqZWN0ICk7XHJcblxyXG5cdFx0fSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHBhcnNlKCAvKiBkYXRhICovICkge31cclxuXHJcblx0c2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICkge1xyXG5cclxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFdpdGhDcmVkZW50aWFscyggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFBhdGgoIHBhdGggKSB7XHJcblxyXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFJlc291cmNlUGF0aCggcmVzb3VyY2VQYXRoICkge1xyXG5cclxuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gcmVzb3VyY2VQYXRoO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0UmVxdWVzdEhlYWRlciggcmVxdWVzdEhlYWRlciApIHtcclxuXHJcblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSByZXF1ZXN0SGVhZGVyO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbkxvYWRlci5ERUZBVUxUX01BVEVSSUFMX05BTUUgPSAnX19ERUZBVUxUJztcclxuXHJcbmV4cG9ydCB7IExvYWRlciB9O1xyXG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vQ2FjaGUuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcblxyXG5jb25zdCBsb2FkaW5nID0ge307XHJcblxyXG5jbGFzcyBIdHRwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBtZXNzYWdlLCByZXNwb25zZSApIHtcclxuXHJcblx0XHRzdXBlciggbWVzc2FnZSApO1xyXG5cdFx0dGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5jbGFzcyBGaWxlTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcclxuXHJcblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XHJcblxyXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcclxuXHJcblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XHJcblxyXG5cdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XHJcblxyXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcclxuXHJcblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xyXG5cclxuXHRcdFx0fSwgMCApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBkdXBsaWNhdGVcclxuXHJcblx0XHRpZiAoIGxvYWRpbmdbIHVybCBdICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XHJcblxyXG5cdFx0XHRcdG9uTG9hZDogb25Mb2FkLFxyXG5cdFx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXHJcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxyXG5cclxuXHRcdFx0fSApO1xyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbml0aWFsaXNlIGFycmF5IGZvciBkdXBsaWNhdGUgcmVxdWVzdHNcclxuXHRcdGxvYWRpbmdbIHVybCBdID0gW107XHJcblxyXG5cdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xyXG5cdFx0XHRvbkxvYWQ6IG9uTG9hZCxcclxuXHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcclxuXHRcdFx0b25FcnJvcjogb25FcnJvcixcclxuXHRcdH0gKTtcclxuXHJcblx0XHQvLyBjcmVhdGUgcmVxdWVzdFxyXG5cdFx0Y29uc3QgcmVxID0gbmV3IFJlcXVlc3QoIHVybCwge1xyXG5cdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyggdGhpcy5yZXF1ZXN0SGVhZGVyICksXHJcblx0XHRcdGNyZWRlbnRpYWxzOiB0aGlzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXHJcblx0XHRcdC8vIEFuIGFib3J0IGNvbnRyb2xsZXIgY291bGQgYmUgYWRkZWQgd2l0aGluIGEgZnV0dXJlIFBSXHJcblx0XHR9ICk7XHJcblxyXG5cdFx0Ly8gcmVjb3JkIHN0YXRlcyAoIGF2b2lkIGRhdGEgcmFjZSApXHJcblx0XHRjb25zdCBtaW1lVHlwZSA9IHRoaXMubWltZVR5cGU7XHJcblx0XHRjb25zdCByZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTtcclxuXHJcblx0XHQvLyBzdGFydCB0aGUgZmV0Y2hcclxuXHRcdGZldGNoKCByZXEgKVxyXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xyXG5cclxuXHRcdFx0XHRpZiAoIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIHJldHVybiBIVFRQIFN0YXR1cyAwIHdoZW4gdXNpbmcgbm9uLWh0dHAgcHJvdG9jb2xcclxuXHRcdFx0XHRcdC8vIGUuZy4gJ2ZpbGU6Ly8nIG9yICdkYXRhOi8vJy4gSGFuZGxlIGFzIHN1Y2Nlc3MuXHJcblxyXG5cdFx0XHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLicgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gV29ya2Fyb3VuZDogQ2hlY2tpbmcgaWYgcmVzcG9uc2UuYm9keSA9PT0gdW5kZWZpbmVkIGZvciBBbGlwYXkgYnJvd3NlciAjMjM1NDhcclxuXHJcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcgfHwgcmVzcG9uc2UuYm9keSA9PT0gdW5kZWZpbmVkIHx8IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xyXG5cdFx0XHRcdFx0Y29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcclxuXHJcblx0XHRcdFx0XHQvLyBOZ2lueCBuZWVkcyBYLUZpbGUtU2l6ZSBjaGVja1xyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzQ4Mjg3NS93aHktZG9lcy1uZ2lueC1yZW1vdmUtY29udGVudC1sZW5ndGgtaGVhZGVyLWZvci1jaHVua2VkLWNvbnRlbnRcclxuXHRcdFx0XHRcdGNvbnN0IGNvbnRlbnRMZW5ndGggPSByZXNwb25zZS5oZWFkZXJzLmdldCggJ1gtRmlsZS1TaXplJyApIHx8IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCAnQ29udGVudC1MZW5ndGgnICk7XHJcblx0XHRcdFx0XHRjb25zdCB0b3RhbCA9IGNvbnRlbnRMZW5ndGggPyBwYXJzZUludCggY29udGVudExlbmd0aCApIDogMDtcclxuXHRcdFx0XHRcdGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPT0gMDtcclxuXHRcdFx0XHRcdGxldCBsb2FkZWQgPSAwO1xyXG5cclxuXHRcdFx0XHRcdC8vIHBlcmlvZGljYWxseSByZWFkIGRhdGEgaW50byB0aGUgbmV3IHN0cmVhbSB0cmFja2luZyB3aGlsZSBkb3dubG9hZCBwcm9ncmVzc1xyXG5cdFx0XHRcdFx0Y29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKCB7XHJcblx0XHRcdFx0XHRcdHN0YXJ0KCBjb250cm9sbGVyICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZWFkRGF0YSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbiByZWFkRGF0YSgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oICggeyBkb25lLCB2YWx1ZSB9ICkgPT4ge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkb25lICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb250cm9sbGVyLmNsb3NlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgZXZlbnQgPSBuZXcgUHJvZ3Jlc3NFdmVudCggJ3Byb2dyZXNzJywgeyBsZW5ndGhDb21wdXRhYmxlLCBsb2FkZWQsIHRvdGFsIH0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uUHJvZ3Jlc3MgKSBjYWxsYmFjay5vblByb2dyZXNzKCBldmVudCApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZSggdmFsdWUgKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZWFkRGF0YSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdH0sICggZSApID0+IHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBSZXNwb25zZSggc3RyZWFtICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEh0dHBFcnJvciggYGZldGNoIGZvciBcIiR7cmVzcG9uc2UudXJsfVwiIHJlc3BvbmRlZCB3aXRoICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWAsIHJlc3BvbnNlICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gKVxyXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xyXG5cclxuXHRcdFx0XHRzd2l0Y2ggKCByZXNwb25zZVR5cGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnYmxvYic6XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYmxvYigpO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ2RvY3VtZW50JzpcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KClcclxuXHRcdFx0XHRcdFx0XHQudGhlbiggdGV4dCA9PiB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIHRleHQsIG1pbWVUeXBlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHRjYXNlICdqc29uJzpcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcblxyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWltZVR5cGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHNuaWZmIGVuY29kaW5nXHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmUgPSAvY2hhcnNldD1cIj8oW147XCJcXHNdKilcIj8vaTtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBleGVjID0gcmUuZXhlYyggbWltZVR5cGUgKTtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBsYWJlbCA9IGV4ZWMgJiYgZXhlY1sgMSBdID8gZXhlY1sgMSBdLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlciggbGFiZWwgKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKCBhYiA9PiBkZWNvZGVyLmRlY29kZSggYWIgKSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IClcclxuXHRcdFx0LnRoZW4oIGRhdGEgPT4ge1xyXG5cclxuXHRcdFx0XHQvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlXHJcblx0XHRcdFx0Ly8gZXJyb3IgcmVzcG9uc2UgYm9kaWVzIGFzIHByb3BlciByZXNwb25zZXMgdG8gcmVxdWVzdHMuXHJcblx0XHRcdFx0Q2FjaGUuYWRkKCB1cmwsIGRhdGEgKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XHJcblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XHJcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uTG9hZCApIGNhbGxiYWNrLm9uTG9hZCggZGF0YSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IClcclxuXHRcdFx0LmNhdGNoKCBlcnIgPT4ge1xyXG5cclxuXHRcdFx0XHQvLyBBYm9ydCBlcnJvcnMgYW5kIG90aGVyIGVycm9ycyBhcmUgaGFuZGxlZCB0aGUgc2FtZVxyXG5cclxuXHRcdFx0XHRjb25zdCBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBjYWxsYmFja3MgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBXaGVuIG9uTG9hZCB3YXMgY2FsbGVkIGFuZCB1cmwgd2FzIGRlbGV0ZWQgaW4gYGxvYWRpbmdgXHJcblx0XHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcclxuXHRcdFx0XHRcdHRocm93IGVycjtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcclxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGVyciApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRoaXMubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xyXG5cclxuXHRcdFx0fSApXHJcblx0XHRcdC5maW5hbGx5KCAoKSA9PiB7XHJcblxyXG5cdFx0XHRcdHRoaXMubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHR0aGlzLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRSZXNwb25zZVR5cGUoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMucmVzcG9uc2VUeXBlID0gdmFsdWU7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRNaW1lVHlwZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5taW1lVHlwZSA9IHZhbHVlO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBGaWxlTG9hZGVyIH07XHJcbiIsImltcG9ydCB7IEFuaW1hdGlvbkNsaXAgfSBmcm9tICcuLi9hbmltYXRpb24vQW5pbWF0aW9uQ2xpcC5qcyc7XHJcbmltcG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL0ZpbGVMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcblxyXG5jbGFzcyBBbmltYXRpb25Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XHJcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XHJcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xyXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcclxuXHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XHJcblxyXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xyXG5cclxuXHR9XHJcblxyXG5cdHBhcnNlKCBqc29uICkge1xyXG5cclxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTtcclxuXHJcblx0XHRcdGFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEFuaW1hdGlvbkxvYWRlciB9O1xyXG4iLCJpbXBvcnQgeyBMaW5lYXJGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9GaWxlTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgQ29tcHJlc3NlZFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9Db21wcmVzc2VkVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcclxuICpcclxuICogU3ViIGNsYXNzZXMgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHBhcnNlKCkgbWV0aG9kIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBsb2FkKCkuXHJcbiAqL1xyXG5cclxuY2xhc3MgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCBpbWFnZXMgPSBbXTtcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IENvbXByZXNzZWRUZXh0dXJlKCk7XHJcblxyXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xyXG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xyXG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xyXG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggc2NvcGUud2l0aENyZWRlbnRpYWxzICk7XHJcblxyXG5cdFx0bGV0IGxvYWRlZCA9IDA7XHJcblxyXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XHJcblxyXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsWyBpIF0sIGZ1bmN0aW9uICggYnVmZmVyICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcclxuXHJcblx0XHRcdFx0aW1hZ2VzWyBpIF0gPSB7XHJcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXHJcblx0XHRcdFx0XHRoZWlnaHQ6IHRleERhdGFzLmhlaWdodCxcclxuXHRcdFx0XHRcdGZvcm1hdDogdGV4RGF0YXMuZm9ybWF0LFxyXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xyXG5cclxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XHJcblxyXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcclxuXHRcdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xyXG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHVybC5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHtcclxuXHJcblx0XHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gY29tcHJlc3NlZCBjdWJlbWFwIHRleHR1cmUgc3RvcmVkIGluIGEgc2luZ2xlIEREUyBmaWxlXHJcblxyXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgdGV4RGF0YXMgPSBzY29wZS5wYXJzZSggYnVmZmVyLCB0cnVlICk7XHJcblxyXG5cdFx0XHRcdGlmICggdGV4RGF0YXMuaXNDdWJlbWFwICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgZiA9IDA7IGYgPCBmYWNlczsgZiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdGltYWdlc1sgZiBdID0geyBtaXBtYXBzOiBbXSB9O1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLm1pcG1hcHMucHVzaCggdGV4RGF0YXMubWlwbWFwc1sgZiAqIHRleERhdGFzLm1pcG1hcENvdW50ICsgaSBdICk7XHJcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xyXG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XHJcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2VzO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcclxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xyXG5cdFx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YXMubWlwbWFwcztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xyXG5cdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xyXG5cclxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IENvbXByZXNzZWRUZXh0dXJlTG9hZGVyIH07XHJcbiIsImltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9DYWNoZS5qcyc7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudE5TIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5cclxuY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XHJcblxyXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xyXG5cclxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XHJcblxyXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcclxuXHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHRcdH0sIDAgKTtcclxuXHJcblx0XHRcdHJldHVybiBjYWNoZWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGltYWdlID0gY3JlYXRlRWxlbWVudE5TKCAnaW1nJyApO1xyXG5cclxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xyXG5cclxuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcblx0XHRcdENhY2hlLmFkZCggdXJsLCB0aGlzICk7XHJcblxyXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApO1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHtcclxuXHJcblx0XHRcdHJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBldmVudCApO1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuXHJcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XHJcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcclxuXHRcdGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcclxuXHJcblx0XHRpZiAoIHVybC5zbGljZSggMCwgNSApICE9PSAnZGF0YTonICkge1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgKSBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY3Jvc3NPcmlnaW47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcclxuXHJcblx0XHRpbWFnZS5zcmMgPSB1cmw7XHJcblxyXG5cdFx0cmV0dXJuIGltYWdlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgSW1hZ2VMb2FkZXIgfTtcclxuIiwiaW1wb3J0IHsgSW1hZ2VMb2FkZXIgfSBmcm9tICcuL0ltYWdlTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgQ3ViZVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgU1JHQkNvbG9yU3BhY2UgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgQ3ViZVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybHMsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XHJcblx0XHR0ZXh0dXJlLmNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZTtcclxuXHJcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XHJcblxyXG5cdFx0bGV0IGxvYWRlZCA9IDA7XHJcblxyXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XHJcblxyXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsc1sgaSBdLCBmdW5jdGlvbiAoIGltYWdlICkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlc1sgaSBdID0gaW1hZ2U7XHJcblxyXG5cdFx0XHRcdGxvYWRlZCArKztcclxuXHJcblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSwgdW5kZWZpbmVkLCBvbkVycm9yICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyArKyBpICkge1xyXG5cclxuXHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRleHR1cmU7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBDdWJlVGV4dHVyZUxvYWRlciB9O1xyXG4iLCJpbXBvcnQgeyBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgQ2xhbXBUb0VkZ2VXcmFwcGluZyB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL0ZpbGVMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcclxuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9Mb2FkZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IEJhc2UgY2xhc3MgdG8gbG9hZCBnZW5lcmljIGJpbmFyeSB0ZXh0dXJlcyBmb3JtYXRzIChyZ2JlLCBoZHIsIC4uLilcclxuICpcclxuICogU3ViIGNsYXNzZXMgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHBhcnNlKCkgbWV0aG9kIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBsb2FkKCkuXHJcbiAqL1xyXG5cclxuY2xhc3MgRGF0YVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XHJcblxyXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xyXG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xyXG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggc2NvcGUud2l0aENyZWRlbnRpYWxzICk7XHJcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcclxuXHJcblx0XHRcdGxldCB0ZXhEYXRhO1xyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0dGV4RGF0YSA9IHNjb3BlLnBhcnNlKCBidWZmZXIgKTtcclxuXHJcblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0b25FcnJvciggZXJyb3IgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlcnJvciApO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHRleERhdGEuaW1hZ2UgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXhEYXRhLmRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS53aWR0aCA9IHRleERhdGEud2lkdGg7XHJcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhLmhlaWdodDtcclxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ZXh0dXJlLndyYXBTID0gdGV4RGF0YS53cmFwUyAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XHJcblx0XHRcdHRleHR1cmUud3JhcFQgPSB0ZXhEYXRhLndyYXBUICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHJcblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gdGV4RGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xyXG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IHRleERhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcclxuXHJcblx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IHRleERhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5hbmlzb3Ryb3B5IDogMTtcclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS5jb2xvclNwYWNlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRleHR1cmUuY29sb3JTcGFjZSA9IHRleERhdGEuY29sb3JTcGFjZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLmZsaXBZID0gdGV4RGF0YS5mbGlwWTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhLmZvcm1hdDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRleHR1cmUudHlwZSA9IHRleERhdGEudHlwZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRleHR1cmUubWlwbWFwcyA9IHRleERhdGEubWlwbWFwcztcclxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjsgLy8gcHJlc3VtYWJseS4uLlxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcENvdW50ID09PSAxICkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdGV4RGF0YS5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0ZXhEYXRhLmdlbmVyYXRlTWlwbWFwcztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTtcclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XHJcblxyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgRGF0YVRleHR1cmVMb2FkZXIgfTtcclxuIiwiaW1wb3J0IHsgSW1hZ2VMb2FkZXIgfSBmcm9tICcuL0ltYWdlTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL1RleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcblxyXG5jbGFzcyBUZXh0dXJlTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcclxuXHJcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XHJcblxyXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHtcclxuXHJcblx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZTtcclxuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRvbkxvYWQoIHRleHR1cmUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XHJcblxyXG5cdFx0cmV0dXJuIHRleHR1cmU7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBUZXh0dXJlTG9hZGVyIH07XHJcbiIsImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBMaWdodCBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgPSAxICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5pc0xpZ2h0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnTGlnaHQnO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XHJcblx0XHR0aGlzLmludGVuc2l0eSA9IGludGVuc2l0eTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdC8vIEVtcHR5IGhlcmUgaW4gYmFzZSBjbGFzczsgc29tZSBzdWJjbGFzc2VzIG92ZXJyaWRlLlxyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcclxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oIG1ldGEgKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xyXG5cclxuXHRcdGRhdGEub2JqZWN0LmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcclxuXHRcdGRhdGEub2JqZWN0LmludGVuc2l0eSA9IHRoaXMuaW50ZW5zaXR5O1xyXG5cclxuXHRcdGlmICggdGhpcy5ncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZ3JvdW5kQ29sb3IgPSB0aGlzLmdyb3VuZENvbG9yLmdldEhleCgpO1xyXG5cclxuXHRcdGlmICggdGhpcy5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xyXG5cdFx0aWYgKCB0aGlzLmFuZ2xlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5hbmdsZSA9IHRoaXMuYW5nbGU7XHJcblx0XHRpZiAoIHRoaXMuZGVjYXkgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmRlY2F5ID0gdGhpcy5kZWNheTtcclxuXHRcdGlmICggdGhpcy5wZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QucGVudW1icmEgPSB0aGlzLnBlbnVtYnJhO1xyXG5cclxuXHRcdGlmICggdGhpcy5zaGFkb3cgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnNoYWRvdyA9IHRoaXMuc2hhZG93LnRvSlNPTigpO1xyXG5cdFx0aWYgKCB0aGlzLnRhcmdldCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QudGFyZ2V0ID0gdGhpcy50YXJnZXQudXVpZDtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTGlnaHQgfTtcclxuIiwiaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0LmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuXHJcbmNsYXNzIEhlbWlzcGhlcmVMaWdodCBleHRlbmRzIExpZ2h0IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHNreUNvbG9yLCBncm91bmRDb2xvciwgaW50ZW5zaXR5ICkge1xyXG5cclxuXHRcdHN1cGVyKCBza3lDb2xvciwgaW50ZW5zaXR5ICk7XHJcblxyXG5cdFx0dGhpcy5pc0hlbWlzcGhlcmVMaWdodCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0hlbWlzcGhlcmVMaWdodCc7XHJcblxyXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5ERUZBVUxUX1VQICk7XHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHRcdHRoaXMuZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoIGdyb3VuZENvbG9yICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcclxuXHJcblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBIZW1pc3BoZXJlTGlnaHQgfTtcclxuIiwiaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uL21hdGgvVmVjdG9yNC5qcyc7XHJcbmltcG9ydCB7IEZydXN0dW0gfSBmcm9tICcuLi9tYXRoL0ZydXN0dW0uanMnO1xyXG5cclxuY29uc3QgX3Byb2pTY3JlZW5NYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF9saWdodFBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9sb29rVGFyZ2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgTGlnaHRTaGFkb3cge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggY2FtZXJhICkge1xyXG5cclxuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xyXG5cclxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gMTtcclxuXHJcblx0XHR0aGlzLmJpYXMgPSAwO1xyXG5cdFx0dGhpcy5ub3JtYWxCaWFzID0gMDtcclxuXHRcdHRoaXMucmFkaXVzID0gMTtcclxuXHRcdHRoaXMuYmx1clNhbXBsZXMgPSA4O1xyXG5cclxuXHRcdHRoaXMubWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCA1MTIsIDUxMiApO1xyXG5cclxuXHRcdHRoaXMubWFwID0gbnVsbDtcclxuXHRcdHRoaXMubWFwUGFzcyA9IG51bGw7XHJcblx0XHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcclxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLl9mcnVzdHVtID0gbmV3IEZydXN0dW0oKTtcclxuXHRcdHRoaXMuX2ZyYW1lRXh0ZW50cyA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XHJcblxyXG5cdFx0dGhpcy5fdmlld3BvcnRDb3VudCA9IDE7XHJcblxyXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xyXG5cclxuXHRcdFx0bmV3IFZlY3RvcjQoIDAsIDAsIDEsIDEgKVxyXG5cclxuXHRcdF07XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Vmlld3BvcnRDb3VudCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fdmlld3BvcnRDb3VudDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRGcnVzdHVtKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9mcnVzdHVtO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCApIHtcclxuXHJcblx0XHRjb25zdCBzaGFkb3dDYW1lcmEgPSB0aGlzLmNhbWVyYTtcclxuXHRcdGNvbnN0IHNoYWRvd01hdHJpeCA9IHRoaXMubWF0cml4O1xyXG5cclxuXHRcdF9saWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0c2hhZG93Q2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQgKTtcclxuXHJcblx0XHRfbG9va1RhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0c2hhZG93Q2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcclxuXHRcdHNoYWRvd0NhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHRcdF9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XHJcblx0XHR0aGlzLl9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xyXG5cclxuXHRcdHNoYWRvd01hdHJpeC5zZXQoXHJcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcclxuXHRcdFx0MC4wLCAwLjUsIDAuMCwgMC41LFxyXG5cdFx0XHQwLjAsIDAuMCwgMC41LCAwLjUsXHJcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxyXG5cdFx0KTtcclxuXHJcblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIF9wcm9qU2NyZWVuTWF0cml4ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Vmlld3BvcnQoIHZpZXdwb3J0SW5kZXggKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldEZyYW1lRXh0ZW50cygpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm1hcCApIHtcclxuXHJcblx0XHRcdHRoaXMubWFwLmRpc3Bvc2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLm1hcFBhc3MgKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1hcFBhc3MuZGlzcG9zZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0dGhpcy5jYW1lcmEgPSBzb3VyY2UuY2FtZXJhLmNsb25lKCk7XHJcblxyXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xyXG5cclxuXHRcdHRoaXMuYmlhcyA9IHNvdXJjZS5iaWFzO1xyXG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xyXG5cclxuXHRcdHRoaXMubWFwU2l6ZS5jb3B5KCBzb3VyY2UubWFwU2l6ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3Qgb2JqZWN0ID0ge307XHJcblxyXG5cdFx0aWYgKCB0aGlzLmludGVuc2l0eSAhPT0gMSApIG9iamVjdC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcclxuXHRcdGlmICggdGhpcy5iaWFzICE9PSAwICkgb2JqZWN0LmJpYXMgPSB0aGlzLmJpYXM7XHJcblx0XHRpZiAoIHRoaXMubm9ybWFsQmlhcyAhPT0gMCApIG9iamVjdC5ub3JtYWxCaWFzID0gdGhpcy5ub3JtYWxCaWFzO1xyXG5cdFx0aWYgKCB0aGlzLnJhZGl1cyAhPT0gMSApIG9iamVjdC5yYWRpdXMgPSB0aGlzLnJhZGl1cztcclxuXHRcdGlmICggdGhpcy5tYXBTaXplLnggIT09IDUxMiB8fCB0aGlzLm1hcFNpemUueSAhPT0gNTEyICkgb2JqZWN0Lm1hcFNpemUgPSB0aGlzLm1hcFNpemUudG9BcnJheSgpO1xyXG5cclxuXHRcdG9iamVjdC5jYW1lcmEgPSB0aGlzLmNhbWVyYS50b0pTT04oIGZhbHNlICkub2JqZWN0O1xyXG5cdFx0ZGVsZXRlIG9iamVjdC5jYW1lcmEubWF0cml4O1xyXG5cclxuXHRcdHJldHVybiBvYmplY3Q7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IExpZ2h0U2hhZG93IH07XHJcbiIsImltcG9ydCB7IExpZ2h0U2hhZG93IH0gZnJvbSAnLi9MaWdodFNoYWRvdy5qcyc7XHJcbmltcG9ydCB7IFJBRDJERUcgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi4vY2FtZXJhcy9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XHJcblxyXG5jbGFzcyBTcG90TGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDUwLCAxLCAwLjUsIDUwMCApICk7XHJcblxyXG5cdFx0dGhpcy5pc1Nwb3RMaWdodFNoYWRvdyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5mb2N1cyA9IDE7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cmljZXMoIGxpZ2h0ICkge1xyXG5cclxuXHRcdGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xyXG5cclxuXHRcdGNvbnN0IGZvdiA9IFJBRDJERUcgKiAyICogbGlnaHQuYW5nbGUgKiB0aGlzLmZvY3VzO1xyXG5cdFx0Y29uc3QgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcclxuXHRcdGNvbnN0IGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XHJcblxyXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcclxuXHJcblx0XHRcdGNhbWVyYS5mb3YgPSBmb3Y7XHJcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XHJcblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XHJcblx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpY2VzKCBsaWdodCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTcG90TGlnaHRTaGFkb3cgfTtcclxuIiwiaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0LmpzJztcclxuaW1wb3J0IHsgU3BvdExpZ2h0U2hhZG93IH0gZnJvbSAnLi9TcG90TGlnaHRTaGFkb3cuanMnO1xyXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5cclxuY2xhc3MgU3BvdExpZ2h0IGV4dGVuZHMgTGlnaHQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UgPSAwLCBhbmdsZSA9IE1hdGguUEkgLyAzLCBwZW51bWJyYSA9IDAsIGRlY2F5ID0gMiApIHtcclxuXHJcblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xyXG5cclxuXHRcdHRoaXMuaXNTcG90TGlnaHQgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdTcG90TGlnaHQnO1xyXG5cclxuXHRcdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuREVGQVVMVF9VUCApO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xyXG5cclxuXHRcdHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuXHRcdHRoaXMucGVudW1icmEgPSBwZW51bWJyYTtcclxuXHRcdHRoaXMuZGVjYXkgPSBkZWNheTtcclxuXHJcblx0XHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5zaGFkb3cgPSBuZXcgU3BvdExpZ2h0U2hhZG93KCk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHBvd2VyKCkge1xyXG5cclxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBjYW5kZWxhKVxyXG5cdFx0Ly8gYnkgY29udmVudGlvbiBmb3IgYSBzcG90bGlnaHQsIGx1bWlub3VzIHBvd2VyIChsbSkgPSDPgCAqIGx1bWlub3VzIGludGVuc2l0eSAoY2QpXHJcblx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XHJcblxyXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxyXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvIE1hdGguUEk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLnNoYWRvdy5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcclxuXHJcblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xyXG5cdFx0dGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTtcclxuXHRcdHRoaXMucGVudW1icmEgPSBzb3VyY2UucGVudW1icmE7XHJcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xyXG5cclxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTcG90TGlnaHQgfTtcclxuIiwiaW1wb3J0IHsgTGlnaHRTaGFkb3cgfSBmcm9tICcuL0xpZ2h0U2hhZG93LmpzJztcclxuaW1wb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmFzL1BlcnNwZWN0aXZlQ2FtZXJhLmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uL21hdGgvVmVjdG9yNC5qcyc7XHJcblxyXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX2xpZ2h0UG9zaXRpb25Xb3JsZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX2xvb2tUYXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jbGFzcyBQb2ludExpZ2h0U2hhZG93IGV4dGVuZHMgTGlnaHRTaGFkb3cge1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHJcblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA5MCwgMSwgMC41LCA1MDAgKSApO1xyXG5cclxuXHRcdHRoaXMuaXNQb2ludExpZ2h0U2hhZG93ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLl9mcmFtZUV4dGVudHMgPSBuZXcgVmVjdG9yMiggNCwgMiApO1xyXG5cclxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2O1xyXG5cclxuXHRcdHRoaXMuX3ZpZXdwb3J0cyA9IFtcclxuXHRcdFx0Ly8gVGhlc2Ugdmlld3BvcnRzIG1hcCBhIGN1YmUtbWFwIG9udG8gYSAyRCB0ZXh0dXJlIHdpdGggdGhlXHJcblx0XHRcdC8vIGZvbGxvd2luZyBvcmllbnRhdGlvbjpcclxuXHRcdFx0Ly9cclxuXHRcdFx0Ly8gIHh6WFpcclxuXHRcdFx0Ly8gICB5IFlcclxuXHRcdFx0Ly9cclxuXHRcdFx0Ly8gWCAtIFBvc2l0aXZlIHggZGlyZWN0aW9uXHJcblx0XHRcdC8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxyXG5cdFx0XHQvLyBZIC0gUG9zaXRpdmUgeSBkaXJlY3Rpb25cclxuXHRcdFx0Ly8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXHJcblx0XHRcdC8vIFogLSBQb3NpdGl2ZSB6IGRpcmVjdGlvblxyXG5cdFx0XHQvLyB6IC0gTmVnYXRpdmUgeiBkaXJlY3Rpb25cclxuXHJcblx0XHRcdC8vIHBvc2l0aXZlIFhcclxuXHRcdFx0bmV3IFZlY3RvcjQoIDIsIDEsIDEsIDEgKSxcclxuXHRcdFx0Ly8gbmVnYXRpdmUgWFxyXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMSwgMSwgMSApLFxyXG5cdFx0XHQvLyBwb3NpdGl2ZSBaXHJcblx0XHRcdG5ldyBWZWN0b3I0KCAzLCAxLCAxLCAxICksXHJcblx0XHRcdC8vIG5lZ2F0aXZlIFpcclxuXHRcdFx0bmV3IFZlY3RvcjQoIDEsIDEsIDEsIDEgKSxcclxuXHRcdFx0Ly8gcG9zaXRpdmUgWVxyXG5cdFx0XHRuZXcgVmVjdG9yNCggMywgMCwgMSwgMSApLFxyXG5cdFx0XHQvLyBuZWdhdGl2ZSBZXHJcblx0XHRcdG5ldyBWZWN0b3I0KCAxLCAwLCAxLCAxIClcclxuXHRcdF07XHJcblxyXG5cdFx0dGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbXHJcblx0XHRcdG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcclxuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgLSAxLCAwIClcclxuXHRcdF07XHJcblxyXG5cdFx0dGhpcy5fY3ViZVVwcyA9IFtcclxuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSxcclxuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKVxyXG5cdFx0XTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZpZXdwb3J0SW5kZXggPSAwICkge1xyXG5cclxuXHRcdGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xyXG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XHJcblxyXG5cdFx0Y29uc3QgZmFyID0gbGlnaHQuZGlzdGFuY2UgfHwgY2FtZXJhLmZhcjtcclxuXHJcblx0XHRpZiAoIGZhciAhPT0gY2FtZXJhLmZhciApIHtcclxuXHJcblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XHJcblx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF9saWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQgKTtcclxuXHJcblx0XHRfbG9va1RhcmdldC5jb3B5KCBjYW1lcmEucG9zaXRpb24gKTtcclxuXHRcdF9sb29rVGFyZ2V0LmFkZCggdGhpcy5fY3ViZURpcmVjdGlvbnNbIHZpZXdwb3J0SW5kZXggXSApO1xyXG5cdFx0Y2FtZXJhLnVwLmNvcHkoIHRoaXMuX2N1YmVVcHNbIHZpZXdwb3J0SW5kZXggXSApO1xyXG5cdFx0Y2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcclxuXHRcdGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHRcdHNoYWRvd01hdHJpeC5tYWtlVHJhbnNsYXRpb24oIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC54LCAtIF9saWdodFBvc2l0aW9uV29ybGQueSwgLSBfbGlnaHRQb3NpdGlvbldvcmxkLnogKTtcclxuXHJcblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xyXG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUG9pbnRMaWdodFNoYWRvdyB9O1xyXG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQuanMnO1xyXG5pbXBvcnQgeyBQb2ludExpZ2h0U2hhZG93IH0gZnJvbSAnLi9Qb2ludExpZ2h0U2hhZG93LmpzJztcclxuXHJcbmNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSA9IDAsIGRlY2F5ID0gMiApIHtcclxuXHJcblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xyXG5cclxuXHRcdHRoaXMuaXNQb2ludExpZ2h0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRMaWdodCc7XHJcblxyXG5cdFx0dGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG5cdFx0dGhpcy5kZWNheSA9IGRlY2F5O1xyXG5cclxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgcG93ZXIoKSB7XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbGlnaHQncyBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKSBmcm9tIGl0cyBpbnRlbnNpdHkgKGluIGNhbmRlbGEpXHJcblx0XHQvLyBmb3IgYW4gaXNvdHJvcGljIGxpZ2h0IHNvdXJjZSwgbHVtaW5vdXMgcG93ZXIgKGxtKSA9IDQgz4AgbHVtaW5vdXMgaW50ZW5zaXR5IChjZClcclxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIDQgKiBNYXRoLlBJO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XHJcblxyXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxyXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xyXG5cclxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XHJcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xyXG5cclxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBQb2ludExpZ2h0IH07XHJcbiIsImltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vQ2FtZXJhLmpzJztcclxuXHJcbmNsYXNzIE9ydGhvZ3JhcGhpY0NhbWVyYSBleHRlbmRzIENhbWVyYSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBsZWZ0ID0gLSAxLCByaWdodCA9IDEsIHRvcCA9IDEsIGJvdHRvbSA9IC0gMSwgbmVhciA9IDAuMSwgZmFyID0gMjAwMCApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNPcnRob2dyYXBoaWNDYW1lcmEgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdPcnRob2dyYXBoaWNDYW1lcmEnO1xyXG5cclxuXHRcdHRoaXMuem9vbSA9IDE7XHJcblx0XHR0aGlzLnZpZXcgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMubGVmdCA9IGxlZnQ7XHJcblx0XHR0aGlzLnJpZ2h0ID0gcmlnaHQ7XHJcblx0XHR0aGlzLnRvcCA9IHRvcDtcclxuXHRcdHRoaXMuYm90dG9tID0gYm90dG9tO1xyXG5cclxuXHRcdHRoaXMubmVhciA9IG5lYXI7XHJcblx0XHR0aGlzLmZhciA9IGZhcjtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xyXG5cclxuXHRcdHRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0O1xyXG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcclxuXHRcdHRoaXMudG9wID0gc291cmNlLnRvcDtcclxuXHRcdHRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTtcclxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xyXG5cdFx0dGhpcy5mYXIgPSBzb3VyY2UuZmFyO1xyXG5cclxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xyXG5cdFx0dGhpcy52aWV3ID0gc291cmNlLnZpZXcgPT09IG51bGwgPyBudWxsIDogT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS52aWV3ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xyXG5cclxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy52aWV3ID0ge1xyXG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxyXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXHJcblx0XHRcdFx0b2Zmc2V0WDogMCxcclxuXHRcdFx0XHRvZmZzZXRZOiAwLFxyXG5cdFx0XHRcdHdpZHRoOiAxLFxyXG5cdFx0XHRcdGhlaWdodDogMVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XHJcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xyXG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xyXG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsZWFyVmlld09mZnNldCgpIHtcclxuXHJcblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XHJcblxyXG5cdFx0Y29uc3QgZHggPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvICggMiAqIHRoaXMuem9vbSApO1xyXG5cdFx0Y29uc3QgZHkgPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvICggMiAqIHRoaXMuem9vbSApO1xyXG5cdFx0Y29uc3QgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XHJcblx0XHRjb25zdCBjeSA9ICggdGhpcy50b3AgKyB0aGlzLmJvdHRvbSApIC8gMjtcclxuXHJcblx0XHRsZXQgbGVmdCA9IGN4IC0gZHg7XHJcblx0XHRsZXQgcmlnaHQgPSBjeCArIGR4O1xyXG5cdFx0bGV0IHRvcCA9IGN5ICsgZHk7XHJcblx0XHRsZXQgYm90dG9tID0gY3kgLSBkeTtcclxuXHJcblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcclxuXHJcblx0XHRcdGNvbnN0IHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCAvIHRoaXMuem9vbTtcclxuXHRcdFx0Y29uc3Qgc2NhbGVIID0gKCB0aGlzLnRvcCAtIHRoaXMuYm90dG9tICkgLyB0aGlzLnZpZXcuZnVsbEhlaWdodCAvIHRoaXMuem9vbTtcclxuXHJcblx0XHRcdGxlZnQgKz0gc2NhbGVXICogdGhpcy52aWV3Lm9mZnNldFg7XHJcblx0XHRcdHJpZ2h0ID0gbGVmdCArIHNjYWxlVyAqIHRoaXMudmlldy53aWR0aDtcclxuXHRcdFx0dG9wIC09IHNjYWxlSCAqIHRoaXMudmlldy5vZmZzZXRZO1xyXG5cdFx0XHRib3R0b20gPSB0b3AgLSBzY2FsZUggKiB0aGlzLnZpZXcuaGVpZ2h0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCB0aGlzLm5lYXIsIHRoaXMuZmFyLCB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gKTtcclxuXHJcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMucHJvamVjdGlvbk1hdHJpeCApLmludmVydCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggbWV0YSApIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcclxuXHRcdGRhdGEub2JqZWN0LmxlZnQgPSB0aGlzLmxlZnQ7XHJcblx0XHRkYXRhLm9iamVjdC5yaWdodCA9IHRoaXMucmlnaHQ7XHJcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcclxuXHRcdGRhdGEub2JqZWN0LmJvdHRvbSA9IHRoaXMuYm90dG9tO1xyXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcclxuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xyXG5cclxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH07XHJcbiIsImltcG9ydCB7IExpZ2h0U2hhZG93IH0gZnJvbSAnLi9MaWdodFNoYWRvdy5qcyc7XHJcbmltcG9ydCB7IE9ydGhvZ3JhcGhpY0NhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvT3J0aG9ncmFwaGljQ2FtZXJhLmpzJztcclxuXHJcbmNsYXNzIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDUsIDUsIDUsIC0gNSwgMC41LCA1MDAgKSApO1xyXG5cclxuXHRcdHRoaXMuaXNEaXJlY3Rpb25hbExpZ2h0U2hhZG93ID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB9O1xyXG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQuanMnO1xyXG5pbXBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IH0gZnJvbSAnLi9EaXJlY3Rpb25hbExpZ2h0U2hhZG93LmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuXHJcbmNsYXNzIERpcmVjdGlvbmFsTGlnaHQgZXh0ZW5kcyBMaWdodCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5ICkge1xyXG5cclxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XHJcblxyXG5cdFx0dGhpcy5pc0RpcmVjdGlvbmFsTGlnaHQgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdEaXJlY3Rpb25hbExpZ2h0JztcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRFRkFVTFRfVVAgKTtcclxuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcclxuXHJcblx0XHR0aGlzLnNoYWRvdyA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLnNoYWRvdy5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xyXG5cdFx0dGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IERpcmVjdGlvbmFsTGlnaHQgfTtcclxuIiwiaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0LmpzJztcclxuXHJcbmNsYXNzIEFtYmllbnRMaWdodCBleHRlbmRzIExpZ2h0IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcclxuXHJcblx0XHR0aGlzLmlzQW1iaWVudExpZ2h0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQW1iaWVudExpZ2h0IH07XHJcbiIsImltcG9ydCB7IExpZ2h0IH0gZnJvbSAnLi9MaWdodC5qcyc7XHJcblxyXG5jbGFzcyBSZWN0QXJlYUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSwgd2lkdGggPSAxMCwgaGVpZ2h0ID0gMTAgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcclxuXHJcblx0XHR0aGlzLmlzUmVjdEFyZWFMaWdodCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHQnO1xyXG5cclxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHR9XHJcblxyXG5cdGdldCBwb3dlcigpIHtcclxuXHJcblx0XHQvLyBjb21wdXRlIHRoZSBsaWdodCdzIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpIGZyb20gaXRzIGludGVuc2l0eSAoaW4gbml0cylcclxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIE1hdGguUEk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0IHBvd2VyKCBwb3dlciApIHtcclxuXHJcblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBuaXRzKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXHJcblx0XHR0aGlzLmludGVuc2l0eSA9IHBvd2VyIC8gKCB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQgKiBNYXRoLlBJICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9KU09OKCBtZXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcclxuXHJcblx0XHRkYXRhLm9iamVjdC53aWR0aCA9IHRoaXMud2lkdGg7XHJcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUmVjdEFyZWFMaWdodCB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBQcmltYXJ5IHJlZmVyZW5jZTpcclxuICogICBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcclxuICpcclxuICogU2Vjb25kYXJ5IHJlZmVyZW5jZTpcclxuICogICBodHRwczovL3d3dy5wcHNsb2FuLm9yZy9wdWJsaWNhdGlvbnMvU3R1cGlkU0gzNi5wZGZcclxuICovXHJcblxyXG4vLyAzLWJhbmQgU0ggZGVmaW5lZCBieSA5IGNvZWZmaWNpZW50c1xyXG5cclxuY2xhc3MgU3BoZXJpY2FsSGFybW9uaWNzMyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHRoaXMuaXNTcGhlcmljYWxIYXJtb25pY3MzID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmNvZWZmaWNpZW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHNldCggY29lZmZpY2llbnRzICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmNvcHkoIGNvZWZmaWNpZW50c1sgaSBdICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHplcm8oKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uc2V0KCAwLCAwLCAwICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXHJcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xyXG5cdGdldEF0KCBub3JtYWwsIHRhcmdldCApIHtcclxuXHJcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxyXG5cclxuXHRcdGNvbnN0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XHJcblxyXG5cdFx0Y29uc3QgY29lZmYgPSB0aGlzLmNvZWZmaWNpZW50cztcclxuXHJcblx0XHQvLyBiYW5kIDBcclxuXHRcdHRhcmdldC5jb3B5KCBjb2VmZlsgMCBdICkubXVsdGlwbHlTY2FsYXIoIDAuMjgyMDk1ICk7XHJcblxyXG5cdFx0Ly8gYmFuZCAxXHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMSBdLCAwLjQ4ODYwMyAqIHkgKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDAuNDg4NjAzICogeiApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDMgXSwgMC40ODg2MDMgKiB4ICk7XHJcblxyXG5cdFx0Ly8gYmFuZCAyXHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNCBdLCAxLjA5MjU0OCAqICggeCAqIHkgKSApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDUgXSwgMS4wOTI1NDggKiAoIHkgKiB6ICkgKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA2IF0sIDAuMzE1MzkyICogKCAzLjAgKiB6ICogeiAtIDEuMCApICk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNyBdLCAxLjA5MjU0OCAqICggeCAqIHogKSApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDggXSwgMC41NDYyNzQgKiAoIHggKiB4IC0geSAqIHkgKSApO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZ2V0IHRoZSBpcnJhZGlhbmNlIChyYWRpYW5jZSBjb252b2x2ZWQgd2l0aCBjb3NpbmUgbG9iZSkgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXHJcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xyXG5cdC8vIGh0dHBzOi8vZ3JhcGhpY3Muc3RhbmZvcmQuZWR1L3BhcGVycy9lbnZtYXAvZW52bWFwLnBkZlxyXG5cdGdldElycmFkaWFuY2VBdCggbm9ybWFsLCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcclxuXHJcblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xyXG5cclxuXHRcdGNvbnN0IGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XHJcblxyXG5cdFx0Ly8gYmFuZCAwXHJcblx0XHR0YXJnZXQuY29weSggY29lZmZbIDAgXSApLm11bHRpcGx5U2NhbGFyKCAwLjg4NjIyNyApOyAvLyDPgCAqIDAuMjgyMDk1XHJcblxyXG5cdFx0Ly8gYmFuZCAxXHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMSBdLCAyLjAgKiAwLjUxMTY2NCAqIHkgKTsgLy8gKCAyICogz4AgLyAzICkgKiAwLjQ4ODYwM1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDIgXSwgMi4wICogMC41MTE2NjQgKiB6ICk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMyBdLCAyLjAgKiAwLjUxMTY2NCAqIHggKTtcclxuXHJcblx0XHQvLyBiYW5kIDJcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA0IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHkgKTsgLy8gKCDPgCAvIDQgKSAqIDEuMDkyNTQ4XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6ICk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNiBdLCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTsgLy8gKCDPgCAvIDQgKSAqIDAuMzE1MzkyICogM1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDcgXSwgMi4wICogMC40MjkwNDMgKiB4ICogeiApO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDggXSwgMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKSApOyAvLyAoIM+AIC8gNCApICogMC41NDYyNzRcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZCggc2ggKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkKCBzaC5jb2VmZmljaWVudHNbIGkgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRhZGRTY2FsZWRTSCggc2gsIHMgKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkU2NhbGVkVmVjdG9yKCBzaC5jb2VmZmljaWVudHNbIGkgXSwgcyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzY2FsZSggcyApIHtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5tdWx0aXBseVNjYWxhciggcyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRsZXJwKCBzaCwgYWxwaGEgKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0ubGVycCggc2guY29lZmZpY2llbnRzWyBpIF0sIGFscGhhICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGVxdWFscyggc2ggKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcclxuXHJcblx0XHRcdGlmICggISB0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmVxdWFscyggc2guY29lZmZpY2llbnRzWyBpIF0gKSApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzaCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXQoIHNoLmNvZWZmaWNpZW50cyApO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGNvbnN0IGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS5mcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgKyAoIGkgKiAzICkgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcclxuXHJcblx0XHRjb25zdCBjb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xyXG5cclxuXHRcdFx0Y29lZmZpY2llbnRzWyBpIF0udG9BcnJheSggYXJyYXksIG9mZnNldCArICggaSAqIDMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZXZhbHVhdGUgdGhlIGJhc2lzIGZ1bmN0aW9uc1xyXG5cdC8vIHNoQmFzaXMgaXMgYW4gQXJyYXlbIDkgXVxyXG5cdHN0YXRpYyBnZXRCYXNpc0F0KCBub3JtYWwsIHNoQmFzaXMgKSB7XHJcblxyXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcclxuXHJcblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xyXG5cclxuXHRcdC8vIGJhbmQgMFxyXG5cdFx0c2hCYXNpc1sgMCBdID0gMC4yODIwOTU7XHJcblxyXG5cdFx0Ly8gYmFuZCAxXHJcblx0XHRzaEJhc2lzWyAxIF0gPSAwLjQ4ODYwMyAqIHk7XHJcblx0XHRzaEJhc2lzWyAyIF0gPSAwLjQ4ODYwMyAqIHo7XHJcblx0XHRzaEJhc2lzWyAzIF0gPSAwLjQ4ODYwMyAqIHg7XHJcblxyXG5cdFx0Ly8gYmFuZCAyXHJcblx0XHRzaEJhc2lzWyA0IF0gPSAxLjA5MjU0OCAqIHggKiB5O1xyXG5cdFx0c2hCYXNpc1sgNSBdID0gMS4wOTI1NDggKiB5ICogejtcclxuXHRcdHNoQmFzaXNbIDYgXSA9IDAuMzE1MzkyICogKCAzICogeiAqIHogLSAxICk7XHJcblx0XHRzaEJhc2lzWyA3IF0gPSAxLjA5MjU0OCAqIHggKiB6O1xyXG5cdFx0c2hCYXNpc1sgOCBdID0gMC41NDYyNzQgKiAoIHggKiB4IC0geSAqIHkgKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgU3BoZXJpY2FsSGFybW9uaWNzMyB9O1xyXG4iLCJpbXBvcnQgeyBTcGhlcmljYWxIYXJtb25pY3MzIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmljYWxIYXJtb25pY3MzLmpzJztcclxuaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0LmpzJztcclxuXHJcbmNsYXNzIExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBzaCA9IG5ldyBTcGhlcmljYWxIYXJtb25pY3MzKCksIGludGVuc2l0eSA9IDEgKSB7XHJcblxyXG5cdFx0c3VwZXIoIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7XHJcblxyXG5cdFx0dGhpcy5pc0xpZ2h0UHJvYmUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuc2ggPSBzaDtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XHJcblxyXG5cdFx0dGhpcy5zaC5jb3B5KCBzb3VyY2Uuc2ggKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tSlNPTigganNvbiApIHtcclxuXHJcblx0XHR0aGlzLmludGVuc2l0eSA9IGpzb24uaW50ZW5zaXR5OyAvLyBUT0RPOiBNb3ZlIHRoaXMgYml0IHRvIExpZ2h0LmZyb21KU09OKCk7XHJcblx0XHR0aGlzLnNoLmZyb21BcnJheSgganNvbi5zaCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRvSlNPTiggbWV0YSApIHtcclxuXHJcblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3Quc2ggPSB0aGlzLnNoLnRvQXJyYXkoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTGlnaHRQcm9iZSB9O1xyXG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjQuanMnO1xyXG5pbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vbWF0aC9NYXRyaXgzLmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL0ZpbGVMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcbmltcG9ydCB7XHJcblx0U2hhZG93TWF0ZXJpYWwsXHJcblx0U3ByaXRlTWF0ZXJpYWwsXHJcblx0UmF3U2hhZGVyTWF0ZXJpYWwsXHJcblx0U2hhZGVyTWF0ZXJpYWwsXHJcblx0UG9pbnRzTWF0ZXJpYWwsXHJcblx0TWVzaFBoeXNpY2FsTWF0ZXJpYWwsXHJcblx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwsXHJcblx0TWVzaFBob25nTWF0ZXJpYWwsXHJcblx0TWVzaFRvb25NYXRlcmlhbCxcclxuXHRNZXNoTm9ybWFsTWF0ZXJpYWwsXHJcblx0TWVzaExhbWJlcnRNYXRlcmlhbCxcclxuXHRNZXNoRGVwdGhNYXRlcmlhbCxcclxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbCxcclxuXHRNZXNoQmFzaWNNYXRlcmlhbCxcclxuXHRNZXNoTWF0Y2FwTWF0ZXJpYWwsXHJcblx0TGluZURhc2hlZE1hdGVyaWFsLFxyXG5cdExpbmVCYXNpY01hdGVyaWFsLFxyXG5cdE1hdGVyaWFsLFxyXG59IGZyb20gJy4uL21hdGVyaWFscy9NYXRlcmlhbHMuanMnO1xyXG5cclxuY2xhc3MgTWF0ZXJpYWxMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHt9O1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcclxuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCBzY29wZS5yZXF1ZXN0SGVhZGVyICk7XHJcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCBzY29wZS53aXRoQ3JlZGVudGlhbHMgKTtcclxuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcclxuXHJcblx0XHRcdHRyeSB7XHJcblxyXG5cdFx0XHRcdG9uTG9hZCggc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7XHJcblxyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xyXG5cclxuXHRcdFx0XHRcdG9uRXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZSgganNvbiApIHtcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlcyA9IHRoaXMudGV4dHVyZXM7XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcclxuXHJcblx0XHRcdGlmICggdGV4dHVyZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbExvYWRlcjogVW5kZWZpbmVkIHRleHR1cmUnLCBuYW1lICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGV4dHVyZXNbIG5hbWUgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLmNyZWF0ZU1hdGVyaWFsRnJvbVR5cGUoIGpzb24udHlwZSApO1xyXG5cclxuXHRcdGlmICgganNvbi51dWlkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51dWlkID0ganNvbi51dWlkO1xyXG5cdFx0aWYgKCBqc29uLm5hbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5hbWUgPSBqc29uLm5hbWU7XHJcblx0XHRpZiAoIGpzb24uY29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5jb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3Iuc2V0SGV4KCBqc29uLmNvbG9yICk7XHJcblx0XHRpZiAoIGpzb24ucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3MgPSBqc29uLnJvdWdobmVzcztcclxuXHRcdGlmICgganNvbi5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzcyA9IGpzb24ubWV0YWxuZXNzO1xyXG5cdFx0aWYgKCBqc29uLnNoZWVuICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbiA9IGpzb24uc2hlZW47XHJcblx0XHRpZiAoIGpzb24uc2hlZW5Db2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hlZW5Db2xvciA9IG5ldyBDb2xvcigpLnNldEhleCgganNvbi5zaGVlbkNvbG9yICk7XHJcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzID0ganNvbi5zaGVlblJvdWdobmVzcztcclxuXHRcdGlmICgganNvbi5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgoIGpzb24uZW1pc3NpdmUgKTtcclxuXHRcdGlmICgganNvbi5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLnNwZWN1bGFyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhci5zZXRIZXgoIGpzb24uc3BlY3VsYXIgKTtcclxuXHRcdGlmICgganNvbi5zcGVjdWxhckludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHkgPSBqc29uLnNwZWN1bGFySW50ZW5zaXR5O1xyXG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLnNldEhleCgganNvbi5zcGVjdWxhckNvbG9yICk7XHJcblx0XHRpZiAoIGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGluaW5lc3MgPSBqc29uLnNoaW5pbmVzcztcclxuXHRcdGlmICgganNvbi5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdCA9IGpzb24uY2xlYXJjb2F0O1xyXG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0ganNvbi5jbGVhcmNvYXRSb3VnaG5lc3M7XHJcblx0XHRpZiAoIGpzb24uZGlzcGVyc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGVyc2lvbiA9IGpzb24uZGlzcGVyc2lvbjtcclxuXHRcdGlmICgganNvbi5pcmlkZXNjZW5jZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBqc29uLmlyaWRlc2NlbmNlO1xyXG5cdFx0aWYgKCBqc29uLmlyaWRlc2NlbmNlSU9SICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUiA9IGpzb24uaXJpZGVzY2VuY2VJT1I7XHJcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZTtcclxuXHRcdGlmICgganNvbi50cmFuc21pc3Npb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA9IGpzb24udHJhbnNtaXNzaW9uO1xyXG5cdFx0aWYgKCBqc29uLnRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudGhpY2tuZXNzID0ganNvbi50aGlja25lc3M7XHJcblx0XHRpZiAoIGpzb24uYXR0ZW51YXRpb25EaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSA9IGpzb24uYXR0ZW51YXRpb25EaXN0YW5jZTtcclxuXHRcdGlmICgganNvbi5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvci5zZXRIZXgoIGpzb24uYXR0ZW51YXRpb25Db2xvciApO1xyXG5cdFx0aWYgKCBqc29uLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFuaXNvdHJvcHkgPSBqc29uLmFuaXNvdHJvcHk7XHJcblx0XHRpZiAoIGpzb24uYW5pc290cm9weVJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gPSBqc29uLmFuaXNvdHJvcHlSb3RhdGlvbjtcclxuXHRcdGlmICgganNvbi5mb2cgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvZyA9IGpzb24uZm9nO1xyXG5cdFx0aWYgKCBqc29uLmZsYXRTaGFkaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uZmxhdFNoYWRpbmc7XHJcblx0XHRpZiAoIGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kaW5nID0ganNvbi5ibGVuZGluZztcclxuXHRcdGlmICgganNvbi5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb21iaW5lID0ganNvbi5jb21iaW5lO1xyXG5cdFx0aWYgKCBqc29uLnNpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpZGUgPSBqc29uLnNpZGU7XHJcblx0XHRpZiAoIGpzb24uc2hhZG93U2lkZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hhZG93U2lkZSA9IGpzb24uc2hhZG93U2lkZTtcclxuXHRcdGlmICgganNvbi5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5vcGFjaXR5ID0ganNvbi5vcGFjaXR5O1xyXG5cdFx0aWYgKCBqc29uLnRyYW5zcGFyZW50ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGpzb24udHJhbnNwYXJlbnQ7XHJcblx0XHRpZiAoIGpzb24uYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDtcclxuXHRcdGlmICgganNvbi5hbHBoYUhhc2ggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhSGFzaCA9IGpzb24uYWxwaGFIYXNoO1xyXG5cdFx0aWYgKCBqc29uLmRlcHRoRnVuYyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhGdW5jID0ganNvbi5kZXB0aEZ1bmM7XHJcblx0XHRpZiAoIGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFRlc3QgPSBqc29uLmRlcHRoVGVzdDtcclxuXHRcdGlmICgganNvbi5kZXB0aFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFdyaXRlID0ganNvbi5kZXB0aFdyaXRlO1xyXG5cdFx0aWYgKCBqc29uLmNvbG9yV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yV3JpdGUgPSBqc29uLmNvbG9yV3JpdGU7XHJcblx0XHRpZiAoIGpzb24uYmxlbmRTcmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kU3JjID0ganNvbi5ibGVuZFNyYztcclxuXHRcdGlmICgganNvbi5ibGVuZERzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmREc3QgPSBqc29uLmJsZW5kRHN0O1xyXG5cdFx0aWYgKCBqc29uLmJsZW5kRXF1YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24gPSBqc29uLmJsZW5kRXF1YXRpb247XHJcblx0XHRpZiAoIGpzb24uYmxlbmRTcmNBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSA9IGpzb24uYmxlbmRTcmNBbHBoYTtcclxuXHRcdGlmICgganNvbi5ibGVuZERzdEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZERzdEFscGhhID0ganNvbi5ibGVuZERzdEFscGhhO1xyXG5cdFx0aWYgKCBqc29uLmJsZW5kRXF1YXRpb25BbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhID0ganNvbi5ibGVuZEVxdWF0aW9uQWxwaGE7XHJcblx0XHRpZiAoIGpzb24uYmxlbmRDb2xvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmJsZW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kQ29sb3Iuc2V0SGV4KCBqc29uLmJsZW5kQ29sb3IgKTtcclxuXHRcdGlmICgganNvbi5ibGVuZEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZEFscGhhID0ganNvbi5ibGVuZEFscGhhO1xyXG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxXcml0ZU1hc2sgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZU1hc2sgPSBqc29uLnN0ZW5jaWxXcml0ZU1hc2s7XHJcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGdW5jID0ganNvbi5zdGVuY2lsRnVuYztcclxuXHRcdGlmICgganNvbi5zdGVuY2lsUmVmICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsUmVmID0ganNvbi5zdGVuY2lsUmVmO1xyXG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxGdW5jTWFzayAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrID0ganNvbi5zdGVuY2lsRnVuY01hc2s7XHJcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGYWlsID0ganNvbi5zdGVuY2lsRmFpbDtcclxuXHRcdGlmICgganNvbi5zdGVuY2lsWkZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCA9IGpzb24uc3RlbmNpbFpGYWlsO1xyXG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxaUGFzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFpQYXNzID0ganNvbi5zdGVuY2lsWlBhc3M7XHJcblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPSBqc29uLnN0ZW5jaWxXcml0ZTtcclxuXHJcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWUgPSBqc29uLndpcmVmcmFtZTtcclxuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCA9IGpzb24ud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmVjYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVjYXAgPSBqc29uLndpcmVmcmFtZUxpbmVjYXA7XHJcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWpvaW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVqb2luID0ganNvbi53aXJlZnJhbWVMaW5lam9pbjtcclxuXHJcblx0XHRpZiAoIGpzb24ucm90YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdGF0aW9uID0ganNvbi5yb3RhdGlvbjtcclxuXHJcblx0XHRpZiAoIGpzb24ubGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saW5ld2lkdGggPSBqc29uLmxpbmV3aWR0aDtcclxuXHRcdGlmICgganNvbi5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplO1xyXG5cdFx0aWYgKCBqc29uLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdhcFNpemUgPSBqc29uLmdhcFNpemU7XHJcblx0XHRpZiAoIGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNjYWxlID0ganNvbi5zY2FsZTtcclxuXHJcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDtcclxuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yID0ganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xyXG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7XHJcblxyXG5cdFx0aWYgKCBqc29uLmRpdGhlcmluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGl0aGVyaW5nID0ganNvbi5kaXRoZXJpbmc7XHJcblxyXG5cdFx0aWYgKCBqc29uLmFscGhhVG9Db3ZlcmFnZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID0ganNvbi5hbHBoYVRvQ292ZXJhZ2U7XHJcblx0XHRpZiAoIGpzb24ucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgPSBqc29uLnByZW11bHRpcGxpZWRBbHBoYTtcclxuXHRcdGlmICgganNvbi5mb3JjZVNpbmdsZVBhc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9IGpzb24uZm9yY2VTaW5nbGVQYXNzO1xyXG5cclxuXHRcdGlmICgganNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52aXNpYmxlID0ganNvbi52aXNpYmxlO1xyXG5cclxuXHRcdGlmICgganNvbi50b25lTWFwcGVkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50b25lTWFwcGVkID0ganNvbi50b25lTWFwcGVkO1xyXG5cclxuXHRcdGlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xyXG5cclxuXHRcdGlmICgganNvbi52ZXJ0ZXhDb2xvcnMgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGlmICggdHlwZW9mIGpzb24udmVydGV4Q29sb3JzID09PSAnbnVtYmVyJyApIHtcclxuXHJcblx0XHRcdFx0bWF0ZXJpYWwudmVydGV4Q29sb3JzID0gKCBqc29uLnZlcnRleENvbG9ycyA+IDAgKSA/IHRydWUgOiBmYWxzZTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGpzb24udmVydGV4Q29sb3JzO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaGFkZXIgTWF0ZXJpYWxcclxuXHJcblx0XHRpZiAoIGpzb24udW5pZm9ybXMgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IG5hbWUgaW4ganNvbi51bmlmb3JtcyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgdW5pZm9ybSA9IGpzb24udW5pZm9ybXNbIG5hbWUgXTtcclxuXHJcblx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXSA9IHt9O1xyXG5cclxuXHRcdFx0XHRzd2l0Y2ggKCB1bmlmb3JtLnR5cGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAndCc6XHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBnZXRUZXh0dXJlKCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ2MnOlxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IENvbG9yKCkuc2V0SGV4KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ3YyJzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ3YzJzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ3Y0JzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ20zJzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ200JzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgganNvbi5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZWZpbmVzID0ganNvbi5kZWZpbmVzO1xyXG5cdFx0aWYgKCBqc29uLnZlcnRleFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4U2hhZGVyID0ganNvbi52ZXJ0ZXhTaGFkZXI7XHJcblx0XHRpZiAoIGpzb24uZnJhZ21lbnRTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyID0ganNvbi5mcmFnbWVudFNoYWRlcjtcclxuXHRcdGlmICgganNvbi5nbHNsVmVyc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ2xzbFZlcnNpb24gPSBqc29uLmdsc2xWZXJzaW9uO1xyXG5cclxuXHRcdGlmICgganNvbi5leHRlbnNpb25zICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4ganNvbi5leHRlbnNpb25zICkge1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbC5leHRlbnNpb25zWyBrZXkgXSA9IGpzb24uZXh0ZW5zaW9uc1sga2V5IF07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgganNvbi5saWdodHMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0cyA9IGpzb24ubGlnaHRzO1xyXG5cdFx0aWYgKCBqc29uLmNsaXBwaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGlwcGluZyA9IGpzb24uY2xpcHBpbmc7XHJcblxyXG5cdFx0Ly8gZm9yIFBvaW50c01hdGVyaWFsXHJcblxyXG5cdFx0aWYgKCBqc29uLnNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemUgPSBqc29uLnNpemU7XHJcblx0XHRpZiAoIGpzb24uc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPSBqc29uLnNpemVBdHRlbnVhdGlvbjtcclxuXHJcblx0XHQvLyBtYXBzXHJcblxyXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcclxuXHRcdGlmICgganNvbi5tYXRjYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1hdGNhcCA9IGdldFRleHR1cmUoIGpzb24ubWF0Y2FwICk7XHJcblxyXG5cdFx0aWYgKCBqc29uLmFscGhhTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIGpzb24uYWxwaGFNYXAgKTtcclxuXHJcblx0XHRpZiAoIGpzb24uYnVtcE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcE1hcCA9IGdldFRleHR1cmUoIGpzb24uYnVtcE1hcCApO1xyXG5cdFx0aWYgKCBqc29uLmJ1bXBTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7XHJcblxyXG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5ub3JtYWxNYXAgKTtcclxuXHRcdGlmICgganNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlO1xyXG5cdFx0aWYgKCBqc29uLm5vcm1hbFNjYWxlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRsZXQgbm9ybWFsU2NhbGUgPSBqc29uLm5vcm1hbFNjYWxlO1xyXG5cclxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBub3JtYWxTY2FsZSApID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQmxlbmRlciBleHBvcnRlciB1c2VkIHRvIGV4cG9ydCBhIHNjYWxhci4gU2VlICM3NDU5XHJcblxyXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIG5vcm1hbFNjYWxlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZGlzcGxhY2VtZW50TWFwICk7XHJcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0ganNvbi5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRCaWFzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzID0ganNvbi5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHRcdGlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ucm91Z2huZXNzTWFwICk7XHJcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1ldGFsbmVzc01hcCApO1xyXG5cclxuXHRcdGlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVtaXNzaXZlTWFwICk7XHJcblx0XHRpZiAoIGpzb24uZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0ganNvbi5lbWlzc2l2ZUludGVuc2l0eTtcclxuXHJcblx0XHRpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhck1hcCApO1xyXG5cdFx0aWYgKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCA9IGdldFRleHR1cmUoIGpzb24uc3BlY3VsYXJJbnRlbnNpdHlNYXAgKTtcclxuXHRcdGlmICgganNvbi5zcGVjdWxhckNvbG9yTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhckNvbG9yTWFwICk7XHJcblxyXG5cdFx0aWYgKCBqc29uLmVudk1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbnZNYXAgKTtcclxuXHRcdGlmICgganNvbi5lbnZNYXBSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwUm90YXRpb24uZnJvbUFycmF5KCBqc29uLmVudk1hcFJvdGF0aW9uICk7XHJcblx0XHRpZiAoIGpzb24uZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSBqc29uLmVudk1hcEludGVuc2l0eTtcclxuXHJcblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcclxuXHRcdGlmICgganNvbi5yZWZyYWN0aW9uUmF0aW8gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IGpzb24ucmVmcmFjdGlvblJhdGlvO1xyXG5cclxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XHJcblx0XHRpZiAoIGpzb24ubGlnaHRNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0ganNvbi5saWdodE1hcEludGVuc2l0eTtcclxuXHJcblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xyXG5cdFx0aWYgKCBqc29uLmFvTWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hb01hcEludGVuc2l0eSA9IGpzb24uYW9NYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcclxuXHJcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdE1hcCApO1xyXG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKTtcclxuXHRcdGlmICgganNvbi5jbGVhcmNvYXROb3JtYWxNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICk7XHJcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcclxuXHJcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwID0gZ2V0VGV4dHVyZSgganNvbi5pcmlkZXNjZW5jZU1hcCApO1xyXG5cdFx0aWYgKCBqc29uLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgKTtcclxuXHJcblx0XHRpZiAoIGpzb24udHJhbnNtaXNzaW9uTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgPSBnZXRUZXh0dXJlKCBqc29uLnRyYW5zbWlzc2lvbk1hcCApO1xyXG5cdFx0aWYgKCBqc29uLnRoaWNrbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudGhpY2tuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi50aGlja25lc3NNYXAgKTtcclxuXHJcblx0XHRpZiAoIGpzb24uYW5pc290cm9weU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW5pc290cm9weU1hcCA9IGdldFRleHR1cmUoIGpzb24uYW5pc290cm9weU1hcCApO1xyXG5cclxuXHRcdGlmICgganNvbi5zaGVlbkNvbG9yTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlbkNvbG9yTWFwICk7XHJcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlblJvdWdobmVzc01hcCApO1xyXG5cclxuXHRcdHJldHVybiBtYXRlcmlhbDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRUZXh0dXJlcyggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSggdHlwZSApIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0ZXJpYWxMb2FkZXIuY3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSggdHlwZSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjcmVhdGVNYXRlcmlhbEZyb21UeXBlKCB0eXBlICkge1xyXG5cclxuXHRcdGNvbnN0IG1hdGVyaWFsTGliID0ge1xyXG5cdFx0XHRTaGFkb3dNYXRlcmlhbCxcclxuXHRcdFx0U3ByaXRlTWF0ZXJpYWwsXHJcblx0XHRcdFJhd1NoYWRlck1hdGVyaWFsLFxyXG5cdFx0XHRTaGFkZXJNYXRlcmlhbCxcclxuXHRcdFx0UG9pbnRzTWF0ZXJpYWwsXHJcblx0XHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxyXG5cdFx0XHRNZXNoU3RhbmRhcmRNYXRlcmlhbCxcclxuXHRcdFx0TWVzaFBob25nTWF0ZXJpYWwsXHJcblx0XHRcdE1lc2hUb29uTWF0ZXJpYWwsXHJcblx0XHRcdE1lc2hOb3JtYWxNYXRlcmlhbCxcclxuXHRcdFx0TWVzaExhbWJlcnRNYXRlcmlhbCxcclxuXHRcdFx0TWVzaERlcHRoTWF0ZXJpYWwsXHJcblx0XHRcdE1lc2hEaXN0YW5jZU1hdGVyaWFsLFxyXG5cdFx0XHRNZXNoQmFzaWNNYXRlcmlhbCxcclxuXHRcdFx0TWVzaE1hdGNhcE1hdGVyaWFsLFxyXG5cdFx0XHRMaW5lRGFzaGVkTWF0ZXJpYWwsXHJcblx0XHRcdExpbmVCYXNpY01hdGVyaWFsLFxyXG5cdFx0XHRNYXRlcmlhbFxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gbmV3IG1hdGVyaWFsTGliWyB0eXBlIF0oKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTWF0ZXJpYWxMb2FkZXIgfTtcclxuIiwiY2xhc3MgTG9hZGVyVXRpbHMge1xyXG5cclxuXHRzdGF0aWMgZGVjb2RlVGV4dCggYXJyYXkgKSB7IC8vIEBkZXByZWNhdGVkLCByMTY1XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyVXRpbHM6IGRlY29kZVRleHQoKSBoYXMgYmVlbiBkZXByZWNhdGVkIHdpdGggcjE2NSBhbmQgd2lsbCBiZSByZW1vdmVkIHdpdGggcjE3NS4gVXNlIFRleHREZWNvZGVyIGluc3RlYWQuJyApO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyApIHtcclxuXHJcblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoIGFycmF5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEF2b2lkIHRoZSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5KSBzaG9ydGN1dCwgd2hpY2hcclxuXHRcdC8vIHRocm93cyBhIFwibWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIiBlcnJvciBmb3IgbGFyZ2UgYXJyYXlzLlxyXG5cclxuXHRcdGxldCBzID0gJyc7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0Ly8gSW1wbGljaXRseSBhc3N1bWVzIGxpdHRsZS1lbmRpYW4uXHJcblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0cnkge1xyXG5cclxuXHRcdFx0Ly8gbWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cclxuXHJcblx0XHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoIGVzY2FwZSggcyApICk7XHJcblxyXG5cdFx0fSBjYXRjaCAoIGUgKSB7IC8vIHNlZSAjMTYzNThcclxuXHJcblx0XHRcdHJldHVybiBzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXh0cmFjdFVybEJhc2UoIHVybCApIHtcclxuXHJcblx0XHRjb25zdCBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7XHJcblxyXG5cdFx0aWYgKCBpbmRleCA9PT0gLSAxICkgcmV0dXJuICcuLyc7XHJcblxyXG5cdFx0cmV0dXJuIHVybC5zbGljZSggMCwgaW5kZXggKyAxICk7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlc29sdmVVUkwoIHVybCwgcGF0aCApIHtcclxuXHJcblx0XHQvLyBJbnZhbGlkIFVSTFxyXG5cdFx0aWYgKCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnICkgcmV0dXJuICcnO1xyXG5cclxuXHRcdC8vIEhvc3QgUmVsYXRpdmUgVVJMXHJcblx0XHRpZiAoIC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QoIHBhdGggKSAmJiAvXlxcLy8udGVzdCggdXJsICkgKSB7XHJcblxyXG5cdFx0XHRwYXRoID0gcGF0aC5yZXBsYWNlKCAvKF5odHRwcz86XFwvXFwvW15cXC9dKykuKi9pLCAnJDEnICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFic29sdXRlIFVSTCBodHRwOi8vLGh0dHBzOi8vLC8vXHJcblx0XHRpZiAoIC9eKGh0dHBzPzopP1xcL1xcLy9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcclxuXHJcblx0XHQvLyBEYXRhIFVSSVxyXG5cdFx0aWYgKCAvXmRhdGE6LiosLiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xyXG5cclxuXHRcdC8vIEJsb2IgVVJMXHJcblx0XHRpZiAoIC9eYmxvYjouKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XHJcblxyXG5cdFx0Ly8gUmVsYXRpdmUgVVJMXHJcblx0XHRyZXR1cm4gcGF0aCArIHVybDtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTG9hZGVyVXRpbHMgfTtcclxuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuXHJcbmNsYXNzIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5JztcclxuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IEluZmluaXR5O1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSApIHtcclxuXHJcblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcclxuXHJcblx0XHR0aGlzLmluc3RhbmNlQ291bnQgPSBzb3VyY2UuaW5zdGFuY2VDb3VudDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oKSB7XHJcblxyXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xyXG5cclxuXHRcdGRhdGEuaW5zdGFuY2VDb3VudCA9IHRoaXMuaW5zdGFuY2VDb3VudDtcclxuXHJcblx0XHRkYXRhLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSB9O1xyXG4iLCJpbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL0ZpbGVMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcbmltcG9ydCB7IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyLmpzJztcclxuaW1wb3J0IHsgZ2V0VHlwZWRBcnJheSB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuXHJcbmNsYXNzIEJ1ZmZlckdlb21ldHJ5TG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcclxuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XHJcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggc2NvcGUucmVxdWVzdEhlYWRlciApO1xyXG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggc2NvcGUud2l0aENyZWRlbnRpYWxzICk7XHJcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cclxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xyXG5cclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggb25FcnJvciApIHtcclxuXHJcblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XHJcblxyXG5cdH1cclxuXHJcblx0cGFyc2UoIGpzb24gKSB7XHJcblxyXG5cdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXJNYXAgPSB7fTtcclxuXHRcdGNvbnN0IGFycmF5QnVmZmVyTWFwID0ge307XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0SW50ZXJsZWF2ZWRCdWZmZXIoIGpzb24sIHV1aWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBpbnRlcmxlYXZlZEJ1ZmZlck1hcFsgdXVpZCBdO1xyXG5cclxuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXJzID0ganNvbi5pbnRlcmxlYXZlZEJ1ZmZlcnM7XHJcblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gaW50ZXJsZWF2ZWRCdWZmZXJzWyB1dWlkIF07XHJcblxyXG5cdFx0XHRjb25zdCBidWZmZXIgPSBnZXRBcnJheUJ1ZmZlcigganNvbiwgaW50ZXJsZWF2ZWRCdWZmZXIuYnVmZmVyICk7XHJcblxyXG5cdFx0XHRjb25zdCBhcnJheSA9IGdldFR5cGVkQXJyYXkoIGludGVybGVhdmVkQnVmZmVyLnR5cGUsIGJ1ZmZlciApO1xyXG5cdFx0XHRjb25zdCBpYiA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIGludGVybGVhdmVkQnVmZmVyLnN0cmlkZSApO1xyXG5cdFx0XHRpYi51dWlkID0gaW50ZXJsZWF2ZWRCdWZmZXIudXVpZDtcclxuXHJcblx0XHRcdGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF0gPSBpYjtcclxuXHJcblx0XHRcdHJldHVybiBpYjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0QXJyYXlCdWZmZXIoIGpzb24sIHV1aWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGFycmF5QnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBhcnJheUJ1ZmZlck1hcFsgdXVpZCBdO1xyXG5cclxuXHRcdFx0Y29uc3QgYXJyYXlCdWZmZXJzID0ganNvbi5hcnJheUJ1ZmZlcnM7XHJcblx0XHRcdGNvbnN0IGFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJzWyB1dWlkIF07XHJcblxyXG5cdFx0XHRjb25zdCBhYiA9IG5ldyBVaW50MzJBcnJheSggYXJyYXlCdWZmZXIgKS5idWZmZXI7XHJcblxyXG5cdFx0XHRhcnJheUJ1ZmZlck1hcFsgdXVpZCBdID0gYWI7XHJcblxyXG5cdFx0XHRyZXR1cm4gYWI7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0ganNvbi5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID8gbmV3IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KCkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcblx0XHRjb25zdCBpbmRleCA9IGpzb24uZGF0YS5pbmRleDtcclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggaW5kZXgudHlwZSwgaW5kZXguYXJyYXkgKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcclxuXHRcdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZTtcclxuXHJcblx0XHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gZ2V0SW50ZXJsZWF2ZWRCdWZmZXIoIGpzb24uZGF0YSwgYXR0cmlidXRlLmRhdGEgKTtcclxuXHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5vZmZzZXQsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggYXR0cmlidXRlLnR5cGUsIGF0dHJpYnV0ZS5hcnJheSApO1xyXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZUNvbnN0ciA9IGF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA/IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA6IEJ1ZmZlckF0dHJpYnV0ZTtcclxuXHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgYnVmZmVyQXR0cmlidXRlQ29uc3RyKCB0eXBlZEFycmF5LCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xyXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS51c2FnZSAhPT0gdW5kZWZpbmVkICkgYnVmZmVyQXR0cmlidXRlLnNldFVzYWdlKCBhdHRyaWJ1dGUudXNhZ2UgKTtcclxuXHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgga2V5LCBidWZmZXJBdHRyaWJ1dGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0ganNvbi5kYXRhLm1vcnBoQXR0cmlidXRlcztcclxuXHJcblx0XHRpZiAoIG1vcnBoQXR0cmlidXRlcyApIHtcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZUFycmF5ID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXkgXTtcclxuXHJcblx0XHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5WyBpIF07XHJcblx0XHRcdFx0XHRsZXQgYnVmZmVyQXR0cmlidXRlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlciA9IGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLmRhdGEsIGF0dHJpYnV0ZS5kYXRhICk7XHJcblx0XHRcdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgdHlwZWRBcnJheSA9IGdldFR5cGVkQXJyYXkoIGF0dHJpYnV0ZS50eXBlLCBhdHRyaWJ1dGUuYXJyYXkgKTtcclxuXHRcdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xyXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggYnVmZmVyQXR0cmlidXRlICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Z2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXSA9IGFycmF5O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGpzb24uZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcclxuXHJcblx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xyXG5cclxuXHRcdFx0Z2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XHJcblxyXG5cdFx0aWYgKCBncm91cHMgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGdyb3Vwcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSBqc29uLmRhdGEuYm91bmRpbmdTcGhlcmU7XHJcblxyXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdGlmICggYm91bmRpbmdTcGhlcmUuY2VudGVyICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGNlbnRlci5mcm9tQXJyYXkoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCBjZW50ZXIsIGJvdW5kaW5nU3BoZXJlLnJhZGl1cyApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpzb24ubmFtZSApIGdlb21ldHJ5Lm5hbWUgPSBqc29uLm5hbWU7XHJcblx0XHRpZiAoIGpzb24udXNlckRhdGEgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XHJcblxyXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCdWZmZXJHZW9tZXRyeUxvYWRlciB9O1xyXG4iLCJpbXBvcnQge1xyXG5cdFVWTWFwcGluZyxcclxuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXHJcblx0Q3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxyXG5cdEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLFxyXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLFxyXG5cdEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxyXG5cclxuXHRSZXBlYXRXcmFwcGluZyxcclxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nLFxyXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsXHJcblxyXG5cdE5lYXJlc3RGaWx0ZXIsXHJcblx0TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXHJcblx0TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcixcclxuXHRMaW5lYXJGaWx0ZXIsXHJcblx0TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcixcclxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJcclxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IEdyb3VwIH0gZnJvbSAnLi4vb2JqZWN0cy9Hcm91cC5qcyc7XHJcbmltcG9ydCB7IEluc3RhbmNlZE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL0luc3RhbmNlZE1lc2guanMnO1xyXG5pbXBvcnQgeyBCYXRjaGVkTWVzaCB9IGZyb20gJy4uL29iamVjdHMvQmF0Y2hlZE1lc2guanMnO1xyXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICcuLi9vYmplY3RzL1Nwcml0ZS5qcyc7XHJcbmltcG9ydCB7IFBvaW50cyB9IGZyb20gJy4uL29iamVjdHMvUG9pbnRzLmpzJztcclxuaW1wb3J0IHsgTGluZSB9IGZyb20gJy4uL29iamVjdHMvTGluZS5qcyc7XHJcbmltcG9ydCB7IExpbmVMb29wIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lTG9vcC5qcyc7XHJcbmltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcclxuaW1wb3J0IHsgTE9EIH0gZnJvbSAnLi4vb2JqZWN0cy9MT0QuanMnO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi4vb2JqZWN0cy9NZXNoLmpzJztcclxuaW1wb3J0IHsgU2tpbm5lZE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL1NraW5uZWRNZXNoLmpzJztcclxuaW1wb3J0IHsgQm9uZSB9IGZyb20gJy4uL29iamVjdHMvQm9uZS5qcyc7XHJcbmltcG9ydCB7IFNrZWxldG9uIH0gZnJvbSAnLi4vb2JqZWN0cy9Ta2VsZXRvbi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vZXh0cmFzL2NvcmUvU2hhcGUuanMnO1xyXG5pbXBvcnQgeyBGb2cgfSBmcm9tICcuLi9zY2VuZXMvRm9nLmpzJztcclxuaW1wb3J0IHsgRm9nRXhwMiB9IGZyb20gJy4uL3NjZW5lcy9Gb2dFeHAyLmpzJztcclxuaW1wb3J0IHsgSGVtaXNwaGVyZUxpZ2h0IH0gZnJvbSAnLi4vbGlnaHRzL0hlbWlzcGhlcmVMaWdodC5qcyc7XHJcbmltcG9ydCB7IFNwb3RMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9TcG90TGlnaHQuanMnO1xyXG5pbXBvcnQgeyBQb2ludExpZ2h0IH0gZnJvbSAnLi4vbGlnaHRzL1BvaW50TGlnaHQuanMnO1xyXG5pbXBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0IH0gZnJvbSAnLi4vbGlnaHRzL0RpcmVjdGlvbmFsTGlnaHQuanMnO1xyXG5pbXBvcnQgeyBBbWJpZW50TGlnaHQgfSBmcm9tICcuLi9saWdodHMvQW1iaWVudExpZ2h0LmpzJztcclxuaW1wb3J0IHsgUmVjdEFyZWFMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9SZWN0QXJlYUxpZ2h0LmpzJztcclxuaW1wb3J0IHsgTGlnaHRQcm9iZSB9IGZyb20gJy4uL2xpZ2h0cy9MaWdodFByb2JlLmpzJztcclxuaW1wb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnLi4vY2FtZXJhcy9PcnRob2dyYXBoaWNDYW1lcmEuanMnO1xyXG5pbXBvcnQgeyBQZXJzcGVjdGl2ZUNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMnO1xyXG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4uL3NjZW5lcy9TY2VuZS5qcyc7XHJcbmltcG9ydCB7IEN1YmVUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvQ3ViZVRleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XHJcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJy4uL3RleHR1cmVzL1NvdXJjZS5qcyc7XHJcbmltcG9ydCB7IERhdGFUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvRGF0YVRleHR1cmUuanMnO1xyXG5pbXBvcnQgeyBJbWFnZUxvYWRlciB9IGZyb20gJy4vSW1hZ2VMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkaW5nTWFuYWdlciB9IGZyb20gJy4vTG9hZGluZ01hbmFnZXIuanMnO1xyXG5pbXBvcnQgeyBBbmltYXRpb25DbGlwIH0gZnJvbSAnLi4vYW5pbWF0aW9uL0FuaW1hdGlvbkNsaXAuanMnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbExvYWRlciB9IGZyb20gJy4vTWF0ZXJpYWxMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXJVdGlscyB9IGZyb20gJy4vTG9hZGVyVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeUxvYWRlciB9IGZyb20gJy4vQnVmZmVyR2VvbWV0cnlMb2FkZXIuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcbmltcG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL0ZpbGVMb2FkZXIuanMnO1xyXG5pbXBvcnQgKiBhcyBHZW9tZXRyaWVzIGZyb20gJy4uL2dlb21ldHJpZXMvR2VvbWV0cmllcy5qcyc7XHJcbmltcG9ydCB7IGdldFR5cGVkQXJyYXkgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcbmltcG9ydCB7IEJveDMgfSBmcm9tICcuLi9tYXRoL0JveDMuanMnO1xyXG5pbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XHJcblxyXG5jbGFzcyBPYmplY3RMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcclxuXHJcblx0XHRzdXBlciggbWFuYWdlciApO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHRjb25zdCBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XHJcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9IHRoaXMucmVzb3VyY2VQYXRoIHx8IHBhdGg7XHJcblxyXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xyXG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xyXG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcclxuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcclxuXHJcblx0XHRcdGxldCBqc29uID0gbnVsbDtcclxuXHJcblx0XHRcdHRyeSB7XHJcblxyXG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XHJcblxyXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggZXJyb3IgKTtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFOk9iamVjdExvYWRlcjogQ2FuXFwndCBwYXJzZSAnICsgdXJsICsgJy4nLCBlcnJvci5tZXNzYWdlICk7XHJcblxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTtcclxuXHJcblx0XHRcdGlmICggbWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZ2VvbWV0cnknICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgIT09IHVuZGVmaW5lZCApIG9uRXJyb3IoIG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKSApO1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW5cXCd0IGxvYWQgJyArIHVybCApO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNjb3BlLnBhcnNlKCBqc29uLCBvbkxvYWQgKTtcclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKSB7XHJcblxyXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdGNvbnN0IHBhdGggPSAoIHRoaXMucGF0aCA9PT0gJycgKSA/IExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKSA6IHRoaXMucGF0aDtcclxuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcclxuXHJcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XHJcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XHJcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xyXG5cclxuXHRcdGNvbnN0IHRleHQgPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKTtcclxuXHJcblx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xyXG5cclxuXHRcdGNvbnN0IG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTtcclxuXHJcblx0XHRpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGF3YWl0IHNjb3BlLnBhcnNlQXN5bmMoIGpzb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZSgganNvbiwgb25Mb2FkICkge1xyXG5cclxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLnBhcnNlQW5pbWF0aW9ucygganNvbi5hbmltYXRpb25zICk7XHJcblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGVzKCBqc29uLnNoYXBlcyApO1xyXG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xyXG5cclxuXHRcdGNvbnN0IGltYWdlcyA9IHRoaXMucGFyc2VJbWFnZXMoIGpzb24uaW1hZ2VzLCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgb25Mb2FkKCBvYmplY3QgKTtcclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoIGpzb24udGV4dHVyZXMsIGltYWdlcyApO1xyXG5cdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XHJcblxyXG5cdFx0Y29uc3Qgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgganNvbi5vYmplY3QsIGdlb21ldHJpZXMsIG1hdGVyaWFscywgdGV4dHVyZXMsIGFuaW1hdGlvbnMgKTtcclxuXHRcdGNvbnN0IHNrZWxldG9ucyA9IHRoaXMucGFyc2VTa2VsZXRvbnMoIGpzb24uc2tlbGV0b25zLCBvYmplY3QgKTtcclxuXHJcblx0XHR0aGlzLmJpbmRTa2VsZXRvbnMoIG9iamVjdCwgc2tlbGV0b25zICk7XHJcblx0XHR0aGlzLmJpbmRMaWdodFRhcmdldHMoIG9iamVjdCApO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGxldCBoYXNJbWFnZXMgPSBmYWxzZTtcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IHV1aWQgaW4gaW1hZ2VzICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIGltYWdlc1sgdXVpZCBdLmRhdGEgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdGhhc0ltYWdlcyA9IHRydWU7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBoYXNJbWFnZXMgPT09IGZhbHNlICkgb25Mb2FkKCBvYmplY3QgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG9iamVjdDtcclxuXHJcblx0fVxyXG5cclxuXHRhc3luYyBwYXJzZUFzeW5jKCBqc29uICkge1xyXG5cclxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLnBhcnNlQW5pbWF0aW9ucygganNvbi5hbmltYXRpb25zICk7XHJcblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGVzKCBqc29uLnNoYXBlcyApO1xyXG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xyXG5cclxuXHRcdGNvbnN0IGltYWdlcyA9IGF3YWl0IHRoaXMucGFyc2VJbWFnZXNBc3luYygganNvbi5pbWFnZXMgKTtcclxuXHJcblx0XHRjb25zdCB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XHJcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB0aGlzLnBhcnNlTWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZXMgKTtcclxuXHJcblx0XHRjb25zdCBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KCBqc29uLm9iamVjdCwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApO1xyXG5cdFx0Y29uc3Qgc2tlbGV0b25zID0gdGhpcy5wYXJzZVNrZWxldG9ucygganNvbi5za2VsZXRvbnMsIG9iamVjdCApO1xyXG5cclxuXHRcdHRoaXMuYmluZFNrZWxldG9ucyggb2JqZWN0LCBza2VsZXRvbnMgKTtcclxuXHRcdHRoaXMuYmluZExpZ2h0VGFyZ2V0cyggb2JqZWN0ICk7XHJcblxyXG5cdFx0cmV0dXJuIG9iamVjdDtcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZVNoYXBlcygganNvbiApIHtcclxuXHJcblx0XHRjb25zdCBzaGFwZXMgPSB7fTtcclxuXHJcblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKS5mcm9tSlNPTigganNvblsgaSBdICk7XHJcblxyXG5cdFx0XHRcdHNoYXBlc1sgc2hhcGUudXVpZCBdID0gc2hhcGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBzaGFwZXM7XHJcblxyXG5cdH1cclxuXHJcblx0cGFyc2VTa2VsZXRvbnMoIGpzb24sIG9iamVjdCApIHtcclxuXHJcblx0XHRjb25zdCBza2VsZXRvbnMgPSB7fTtcclxuXHRcdGNvbnN0IGJvbmVzID0ge307XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgYm9uZSBsb29rdXAgdGFibGVcclxuXHJcblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGNoaWxkLmlzQm9uZSApIGJvbmVzWyBjaGlsZC51dWlkIF0gPSBjaGlsZDtcclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIHNrZWxldG9uc1xyXG5cclxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbigpLmZyb21KU09OKCBqc29uWyBpIF0sIGJvbmVzICk7XHJcblxyXG5cdFx0XHRcdHNrZWxldG9uc1sgc2tlbGV0b24udXVpZCBdID0gc2tlbGV0b247XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBza2VsZXRvbnM7XHJcblxyXG5cdH1cclxuXHJcblx0cGFyc2VHZW9tZXRyaWVzKCBqc29uLCBzaGFwZXMgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHt9O1xyXG5cclxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0bGV0IGdlb21ldHJ5O1xyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XHJcblxyXG5cdFx0XHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcclxuXHJcblx0XHRcdFx0XHRjYXNlICdCdWZmZXJHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEudHlwZSBpbiBHZW9tZXRyaWVzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeSA9IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdLmZyb21KU09OKCBkYXRhLCBzaGFwZXMgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggYFRIUkVFLk9iamVjdExvYWRlcjogVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBcIiR7IGRhdGEudHlwZSB9XCJgICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Z2VvbWV0cnkudXVpZCA9IGRhdGEudXVpZDtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5Lm5hbWUgPSBkYXRhLm5hbWU7XHJcblx0XHRcdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XHJcblxyXG5cdFx0XHRcdGdlb21ldHJpZXNbIGRhdGEudXVpZCBdID0gZ2VvbWV0cnk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBnZW9tZXRyaWVzO1xyXG5cclxuXHR9XHJcblxyXG5cdHBhcnNlTWF0ZXJpYWxzKCBqc29uLCB0ZXh0dXJlcyApIHtcclxuXHJcblx0XHRjb25zdCBjYWNoZSA9IHt9OyAvLyBNdWx0aU1hdGVyaWFsXHJcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB7fTtcclxuXHJcblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGNvbnN0IGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xyXG5cdFx0XHRsb2FkZXIuc2V0VGV4dHVyZXMoIHRleHR1cmVzICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XHJcblxyXG5cdFx0XHRcdGlmICggY2FjaGVbIGRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y2FjaGVbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGNhY2hlWyBkYXRhLnV1aWQgXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1hdGVyaWFscztcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZUFuaW1hdGlvbnMoIGpzb24gKSB7XHJcblxyXG5cdFx0Y29uc3QgYW5pbWF0aW9ucyA9IHt9O1xyXG5cclxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XHJcblxyXG5cdFx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdGFuaW1hdGlvbnNbIGNsaXAudXVpZCBdID0gY2xpcDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XHJcblxyXG5cdH1cclxuXHJcblx0cGFyc2VJbWFnZXMoIGpzb24sIG9uTG9hZCApIHtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblx0XHRjb25zdCBpbWFnZXMgPSB7fTtcclxuXHJcblx0XHRsZXQgbG9hZGVyO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxvYWRJbWFnZSggdXJsICkge1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHVybCA9IGltYWdlO1xyXG5cclxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGxvYWRJbWFnZSggcGF0aCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0aWYgKCBpbWFnZS5kYXRhICkge1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdGRhdGE6IGdldFR5cGVkQXJyYXkoIGltYWdlLnR5cGUsIGltYWdlLmRhdGEgKSxcclxuXHRcdFx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxyXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBtYW5hZ2VyID0gbmV3IExvYWRpbmdNYW5hZ2VyKCBvbkxvYWQgKTtcclxuXHJcblx0XHRcdGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggbWFuYWdlciApO1xyXG5cdFx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IGpzb25bIGkgXTtcclxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZS51cmw7XHJcblxyXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9hZCBhcnJheSBvZiBpbWFnZXMgZS5nIEN1YmVUZXh0dXJlXHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VBcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBjdXJyZW50VXJsID0gdXJsWyBqIF07XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGRlc2VyaWFsaXplSW1hZ2UoIGN1cnJlbnRVcmwgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggZGVzZXJpYWxpemVkSW1hZ2UgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzcGVjaWFsIGNhc2U6IGhhbmRsZSBhcnJheSBvZiBkYXRhIHRleHR1cmVzIGZvciBjdWJlIHRleHR1cmVzXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2VBcnJheS5wdXNoKCBuZXcgRGF0YVRleHR1cmUoIGRlc2VyaWFsaXplZEltYWdlLmRhdGEsIGRlc2VyaWFsaXplZEltYWdlLndpZHRoLCBkZXNlcmlhbGl6ZWRJbWFnZS5oZWlnaHQgKSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggaW1hZ2VBcnJheSApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBpbWFnZS51cmwgKTtcclxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggZGVzZXJpYWxpemVkSW1hZ2UgKTtcclxuXHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGltYWdlcztcclxuXHJcblx0fVxyXG5cclxuXHRhc3luYyBwYXJzZUltYWdlc0FzeW5jKCBqc29uICkge1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHRcdGNvbnN0IGltYWdlcyA9IHt9O1xyXG5cclxuXHRcdGxldCBsb2FkZXI7XHJcblxyXG5cdFx0YXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHVybCA9IGltYWdlO1xyXG5cclxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoIHBhdGggKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGlmICggaW1hZ2UuZGF0YSApIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRkYXRhOiBnZXRUeXBlZEFycmF5KCBpbWFnZS50eXBlLCBpbWFnZS5kYXRhICksXHJcblx0XHRcdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcclxuXHRcdFx0XHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHRcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0bG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcclxuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW1hZ2UgPSBqc29uWyBpIF07XHJcblx0XHRcdFx0Y29uc3QgdXJsID0gaW1hZ2UudXJsO1xyXG5cclxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGltYWdlQXJyYXkgPSBbXTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gdXJsLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgY3VycmVudFVybCA9IHVybFsgaiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBhd2FpdCBkZXNlcmlhbGl6ZUltYWdlKCBjdXJyZW50VXJsICk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpbWFnZUFycmF5LnB1c2goIGRlc2VyaWFsaXplZEltYWdlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcyBmb3IgY3ViZSB0ZXh0dXJlc1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggbmV3IERhdGFUZXh0dXJlKCBkZXNlcmlhbGl6ZWRJbWFnZS5kYXRhLCBkZXNlcmlhbGl6ZWRJbWFnZS53aWR0aCwgZGVzZXJpYWxpemVkSW1hZ2UuaGVpZ2h0ICkgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGltYWdlQXJyYXkgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGRlc2VyaWFsaXplZEltYWdlID0gYXdhaXQgZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UudXJsICk7XHJcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGRlc2VyaWFsaXplZEltYWdlICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGltYWdlcztcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZVRleHR1cmVzKCBqc29uLCBpbWFnZXMgKSB7XHJcblxyXG5cdFx0ZnVuY3Rpb24gcGFyc2VDb25zdGFudCggdmFsdWUsIHR5cGUgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLicsIHZhbHVlICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdHlwZVsgdmFsdWUgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB7fTtcclxuXHJcblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmltYWdlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggaW1hZ2VzWyBkYXRhLmltYWdlIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjb25zdCBzb3VyY2UgPSBpbWFnZXNbIGRhdGEuaW1hZ2UgXTtcclxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IHNvdXJjZS5kYXRhO1xyXG5cclxuXHRcdFx0XHRsZXQgdGV4dHVyZTtcclxuXHJcblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGltYWdlLmxlbmd0aCA9PT0gNiApIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGlmICggaW1hZ2UgJiYgaW1hZ2UuZGF0YSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggaW1hZ2UgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gdGV4dHVyZXMgY2FuIGhhdmUgdW5kZWZpbmVkIGltYWdlIGRhdGFcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLnNvdXJjZSA9IHNvdXJjZTtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5uYW1lID0gZGF0YS5uYW1lO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEubWFwcGluZyAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYXBwaW5nID0gcGFyc2VDb25zdGFudCggZGF0YS5tYXBwaW5nLCBURVhUVVJFX01BUFBJTkcgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEuY2hhbm5lbCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5jaGFubmVsID0gZGF0YS5jaGFubmVsO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEub2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm9mZnNldC5mcm9tQXJyYXkoIGRhdGEub2Zmc2V0ICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhLnJlcGVhdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCBkYXRhLnJlcGVhdCApO1xyXG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUucm90YXRpb24gPSBkYXRhLnJvdGF0aW9uO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUud3JhcFMgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDAgXSwgVEVYVFVSRV9XUkFQUElORyApO1xyXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mb3JtYXQgPSBkYXRhLmZvcm1hdDtcclxuXHRcdFx0XHRpZiAoIGRhdGEuaW50ZXJuYWxGb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSBkYXRhLmludGVybmFsRm9ybWF0O1xyXG5cdFx0XHRcdGlmICggZGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7XHJcblx0XHRcdFx0aWYgKCBkYXRhLmNvbG9yU3BhY2UgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY29sb3JTcGFjZSA9IGRhdGEuY29sb3JTcGFjZTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hZ0ZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFnRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApO1xyXG5cdFx0XHRcdGlmICggZGF0YS5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmFuaXNvdHJvcHkgPSBkYXRhLmFuaXNvdHJvcHk7XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mbGlwWSA9IGRhdGEuZmxpcFk7XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YS5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZGF0YS5nZW5lcmF0ZU1pcG1hcHM7XHJcblx0XHRcdFx0aWYgKCBkYXRhLnByZW11bHRpcGx5QWxwaGEgIT09IHVuZGVmaW5lZCApIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSA9IGRhdGEucHJlbXVsdGlwbHlBbHBoYTtcclxuXHRcdFx0XHRpZiAoIGRhdGEudW5wYWNrQWxpZ25tZW50ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVucGFja0FsaWdubWVudCA9IGRhdGEudW5wYWNrQWxpZ25tZW50O1xyXG5cdFx0XHRcdGlmICggZGF0YS5jb21wYXJlRnVuY3Rpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uID0gZGF0YS5jb21wYXJlRnVuY3Rpb247XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YS51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XHJcblxyXG5cdFx0XHRcdHRleHR1cmVzWyBkYXRhLnV1aWQgXSA9IHRleHR1cmU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlcztcclxuXHJcblx0fVxyXG5cclxuXHRwYXJzZU9iamVjdCggZGF0YSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApIHtcclxuXHJcblx0XHRsZXQgb2JqZWN0O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xyXG5cclxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnknLCBuYW1lICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZ2VvbWV0cmllc1sgbmFtZSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcclxuXHJcblx0XHRcdGlmICggbmFtZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBuYW1lLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgdXVpZCA9IG5hbWVbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIHV1aWQgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIG1hdGVyaWFsc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgbmFtZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsc1sgbmFtZSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCB1dWlkICkge1xyXG5cclxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIHRleHR1cmUnLCB1dWlkICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGV4dHVyZXNbIHV1aWQgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGdlb21ldHJ5LCBtYXRlcmlhbDtcclxuXHJcblx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XHJcblxyXG5cdFx0XHRjYXNlICdTY2VuZSc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggTnVtYmVyLmlzSW50ZWdlciggZGF0YS5iYWNrZ3JvdW5kICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gZ2V0VGV4dHVyZSggZGF0YS5iYWNrZ3JvdW5kICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YS5lbnZpcm9ubWVudCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IGdldFRleHR1cmUoIGRhdGEuZW52aXJvbm1lbnQgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEuZm9nICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcclxuXHJcblx0XHRcdFx0XHRcdG9iamVjdC5mb2cgPSBuZXcgRm9nKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cubmVhciwgZGF0YS5mb2cuZmFyICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZGF0YS5mb2cudHlwZSA9PT0gJ0ZvZ0V4cDInICkge1xyXG5cclxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGRhdGEuZm9nLm5hbWUgIT09ICcnICkge1xyXG5cclxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZy5uYW1lID0gZGF0YS5mb2cubmFtZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzO1xyXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmFja2dyb3VuZEludGVuc2l0eSA9IGRhdGEuYmFja2dyb3VuZEludGVuc2l0eTtcclxuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmFja2dyb3VuZFJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5iYWNrZ3JvdW5kUm90YXRpb24gKTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmVudmlyb25tZW50SW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZW52aXJvbm1lbnRJbnRlbnNpdHkgPSBkYXRhLmVudmlyb25tZW50SW50ZW5zaXR5O1xyXG5cdFx0XHRcdGlmICggZGF0YS5lbnZpcm9ubWVudFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZW52aXJvbm1lbnRSb3RhdGlvbi5mcm9tQXJyYXkoIGRhdGEuZW52aXJvbm1lbnRSb3RhdGlvbiApO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1BlcnNwZWN0aXZlQ2FtZXJhJzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBkYXRhLmZvdiwgZGF0YS5hc3BlY3QsIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmZvY3VzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzO1xyXG5cdFx0XHRcdGlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSBvYmplY3Quem9vbSA9IGRhdGEuem9vbTtcclxuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbUdhdWdlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbUdhdWdlID0gZGF0YS5maWxtR2F1Z2U7XHJcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1PZmZzZXQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0O1xyXG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdPcnRob2dyYXBoaWNDYW1lcmEnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCBkYXRhLmxlZnQsIGRhdGEucmlnaHQsIGRhdGEudG9wLCBkYXRhLmJvdHRvbSwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XHJcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0FtYmllbnRMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBBbWJpZW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xyXG5cdFx0XHRcdG9iamVjdC50YXJnZXQgPSBkYXRhLnRhcmdldCB8fCAnJztcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdQb2ludExpZ2h0JzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdTcG90TGlnaHQnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xyXG5cdFx0XHRcdG9iamVjdC50YXJnZXQgPSBkYXRhLnRhcmdldCB8fCAnJztcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgSGVtaXNwaGVyZUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmdyb3VuZENvbG9yLCBkYXRhLmludGVuc2l0eSApO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0xpZ2h0UHJvYmUnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGlnaHRQcm9iZSgpLmZyb21KU09OKCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnU2tpbm5lZE1lc2gnOlxyXG5cclxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XHJcblx0XHRcdCBcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhLmJpbmRNb2RlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmluZE1vZGUgPSBkYXRhLmJpbmRNb2RlO1xyXG5cdFx0XHRcdGlmICggZGF0YS5iaW5kTWF0cml4ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmluZE1hdHJpeC5mcm9tQXJyYXkoIGRhdGEuYmluZE1hdHJpeCApO1xyXG5cdFx0XHRcdGlmICggZGF0YS5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNrZWxldG9uID0gZGF0YS5za2VsZXRvbjtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdNZXNoJzpcclxuXHJcblx0XHRcdFx0Z2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xyXG5cdFx0XHRcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0luc3RhbmNlZE1lc2gnOlxyXG5cclxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XHJcblx0XHRcdFx0bWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xyXG5cdFx0XHRcdGNvbnN0IGNvdW50ID0gZGF0YS5jb3VudDtcclxuXHRcdFx0XHRjb25zdCBpbnN0YW5jZU1hdHJpeCA9IGRhdGEuaW5zdGFuY2VNYXRyaXg7XHJcblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VDb2xvciA9IGRhdGEuaW5zdGFuY2VDb2xvcjtcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKTtcclxuXHRcdFx0XHRvYmplY3QuaW5zdGFuY2VNYXRyaXggPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBpbnN0YW5jZU1hdHJpeC5hcnJheSApLCAxNiApO1xyXG5cdFx0XHRcdGlmICggaW5zdGFuY2VDb2xvciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lmluc3RhbmNlQ29sb3IgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBpbnN0YW5jZUNvbG9yLmFycmF5ICksIGluc3RhbmNlQ29sb3IuaXRlbVNpemUgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdCYXRjaGVkTWVzaCc6XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcclxuXHRcdFx0XHRtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBCYXRjaGVkTWVzaCggZGF0YS5tYXhJbnN0YW5jZUNvdW50LCBkYXRhLm1heFZlcnRleENvdW50LCBkYXRhLm1heEluZGV4Q291bnQsIG1hdGVyaWFsICk7XHJcblx0XHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcblx0XHRcdFx0b2JqZWN0LnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSBkYXRhLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7XHJcblx0XHRcdFx0b2JqZWN0LnNvcnRPYmplY3RzID0gZGF0YS5zb3J0T2JqZWN0cztcclxuXHJcblx0XHRcdFx0b2JqZWN0Ll9kcmF3UmFuZ2VzID0gZGF0YS5kcmF3UmFuZ2VzO1xyXG5cdFx0XHRcdG9iamVjdC5fcmVzZXJ2ZWRSYW5nZXMgPSBkYXRhLnJlc2VydmVkUmFuZ2VzO1xyXG5cclxuXHRcdFx0XHRvYmplY3QuX3Zpc2liaWxpdHkgPSBkYXRhLnZpc2liaWxpdHk7XHJcblx0XHRcdFx0b2JqZWN0Ll9hY3RpdmUgPSBkYXRhLmFjdGl2ZTtcclxuXHRcdFx0XHRvYmplY3QuX2JvdW5kcyA9IGRhdGEuYm91bmRzLm1hcCggYm91bmQgPT4ge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGJveCA9IG5ldyBCb3gzKCk7XHJcblx0XHRcdFx0XHRib3gubWluLmZyb21BcnJheSggYm91bmQuYm94TWluICk7XHJcblx0XHRcdFx0XHRib3gubWF4LmZyb21BcnJheSggYm91bmQuYm94TWF4ICk7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3Qgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xyXG5cdFx0XHRcdFx0c3BoZXJlLnJhZGl1cyA9IGJvdW5kLnNwaGVyZVJhZGl1cztcclxuXHRcdFx0XHRcdHNwaGVyZS5jZW50ZXIuZnJvbUFycmF5KCBib3VuZC5zcGhlcmVDZW50ZXIgKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRib3hJbml0aWFsaXplZDogYm91bmQuYm94SW5pdGlhbGl6ZWQsXHJcblx0XHRcdFx0XHRcdGJveDogYm94LFxyXG5cclxuXHRcdFx0XHRcdFx0c3BoZXJlSW5pdGlhbGl6ZWQ6IGJvdW5kLnNwaGVyZUluaXRpYWxpemVkLFxyXG5cdFx0XHRcdFx0XHRzcGhlcmU6IHNwaGVyZVxyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0fSApO1xyXG5cclxuXHRcdFx0XHRvYmplY3QuX21heEluc3RhbmNlQ291bnQgPSBkYXRhLm1heEluc3RhbmNlQ291bnQ7XHJcblx0XHRcdFx0b2JqZWN0Ll9tYXhWZXJ0ZXhDb3VudCA9IGRhdGEubWF4VmVydGV4Q291bnQ7XHJcblx0XHRcdFx0b2JqZWN0Ll9tYXhJbmRleENvdW50ID0gZGF0YS5tYXhJbmRleENvdW50O1xyXG5cclxuXHRcdFx0XHRvYmplY3QuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSBkYXRhLmdlb21ldHJ5SW5pdGlhbGl6ZWQ7XHJcblx0XHRcdFx0b2JqZWN0Ll9nZW9tZXRyeUNvdW50ID0gZGF0YS5nZW9tZXRyeUNvdW50O1xyXG5cclxuXHRcdFx0XHRvYmplY3QuX21hdHJpY2VzVGV4dHVyZSA9IGdldFRleHR1cmUoIGRhdGEubWF0cmljZXNUZXh0dXJlLnV1aWQgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEuY29sb3JzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Ll9jb2xvcnNUZXh0dXJlID0gZ2V0VGV4dHVyZSggZGF0YS5jb2xvcnNUZXh0dXJlLnV1aWQgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdMT0QnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTE9EKCk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnTGluZSc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XHJcblx0XHRcdGNhc2UgJ1BvaW50cyc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdTcHJpdGUnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnR3JvdXAnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgR3JvdXAoKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdCb25lJzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IEJvbmUoKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT2JqZWN0M0QoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0b2JqZWN0LnV1aWQgPSBkYXRhLnV1aWQ7XHJcblxyXG5cdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5uYW1lID0gZGF0YS5uYW1lO1xyXG5cclxuXHRcdGlmICggZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdG9iamVjdC5tYXRyaXguZnJvbUFycmF5KCBkYXRhLm1hdHJpeCApO1xyXG5cclxuXHRcdFx0aWYgKCBkYXRhLm1hdHJpeEF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlO1xyXG5cdFx0XHRpZiAoIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlICkgb2JqZWN0Lm1hdHJpeC5kZWNvbXBvc2UoIG9iamVjdC5wb3NpdGlvbiwgb2JqZWN0LnF1YXRlcm5pb24sIG9iamVjdC5zY2FsZSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRpZiAoIGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTtcclxuXHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Qucm90YXRpb24uZnJvbUFycmF5KCBkYXRhLnJvdGF0aW9uICk7XHJcblx0XHRcdGlmICggZGF0YS5xdWF0ZXJuaW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3QucXVhdGVybmlvbi5mcm9tQXJyYXkoIGRhdGEucXVhdGVybmlvbiApO1xyXG5cdFx0XHRpZiAoIGRhdGEuc2NhbGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhLnVwICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXAuZnJvbUFycmF5KCBkYXRhLnVwICk7XHJcblxyXG5cdFx0aWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5jYXN0U2hhZG93ID0gZGF0YS5jYXN0U2hhZG93O1xyXG5cdFx0aWYgKCBkYXRhLnJlY2VpdmVTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gZGF0YS5yZWNlaXZlU2hhZG93O1xyXG5cclxuXHRcdGlmICggZGF0YS5zaGFkb3cgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5pbnRlbnNpdHkgPSBkYXRhLnNoYWRvdy5pbnRlbnNpdHk7XHJcblx0XHRcdGlmICggZGF0YS5zaGFkb3cuYmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5iaWFzID0gZGF0YS5zaGFkb3cuYmlhcztcclxuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5ub3JtYWxCaWFzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93Lm5vcm1hbEJpYXMgPSBkYXRhLnNoYWRvdy5ub3JtYWxCaWFzO1xyXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LnJhZGl1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5yYWRpdXMgPSBkYXRhLnNoYWRvdy5yYWRpdXM7XHJcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApO1xyXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmNhbWVyYSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5jYW1lcmEgPSB0aGlzLnBhcnNlT2JqZWN0KCBkYXRhLnNoYWRvdy5jYW1lcmEgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aXNpYmxlID0gZGF0YS52aXNpYmxlO1xyXG5cdFx0aWYgKCBkYXRhLmZydXN0dW1DdWxsZWQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkO1xyXG5cdFx0aWYgKCBkYXRhLnJlbmRlck9yZGVyICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVuZGVyT3JkZXIgPSBkYXRhLnJlbmRlck9yZGVyO1xyXG5cdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xyXG5cdFx0aWYgKCBkYXRhLmxheWVycyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7XHJcblxyXG5cdFx0aWYgKCBkYXRhLmNoaWxkcmVuICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5hZGQoIHRoaXMucGFyc2VPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGdlb21ldHJpZXMsIG1hdGVyaWFscywgdGV4dHVyZXMsIGFuaW1hdGlvbnMgKSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGRhdGEuYW5pbWF0aW9ucyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgb2JqZWN0QW5pbWF0aW9ucyA9IGRhdGEuYW5pbWF0aW9ucztcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCB1dWlkID0gb2JqZWN0QW5pbWF0aW9uc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRvYmplY3QuYW5pbWF0aW9ucy5wdXNoKCBhbmltYXRpb25zWyB1dWlkIF0gKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdMT0QnICkge1xyXG5cclxuXHRcdFx0aWYgKCBkYXRhLmF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5hdXRvVXBkYXRlID0gZGF0YS5hdXRvVXBkYXRlO1xyXG5cclxuXHRcdFx0Y29uc3QgbGV2ZWxzID0gZGF0YS5sZXZlbHM7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgbCBdO1xyXG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gb2JqZWN0LmdldE9iamVjdEJ5UHJvcGVydHkoICd1dWlkJywgbGV2ZWwub2JqZWN0ICk7XHJcblxyXG5cdFx0XHRcdGlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRvYmplY3QuYWRkTGV2ZWwoIGNoaWxkLCBsZXZlbC5kaXN0YW5jZSwgbGV2ZWwuaHlzdGVyZXNpcyApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmplY3Q7XHJcblxyXG5cdH1cclxuXHJcblx0YmluZFNrZWxldG9ucyggb2JqZWN0LCBza2VsZXRvbnMgKSB7XHJcblxyXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggc2tlbGV0b25zICkubGVuZ3RoID09PSAwICkgcmV0dXJuO1xyXG5cclxuXHRcdG9iamVjdC50cmF2ZXJzZSggZnVuY3Rpb24gKCBjaGlsZCApIHtcclxuXHJcblx0XHRcdGlmICggY2hpbGQuaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZSAmJiBjaGlsZC5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IHNrZWxldG9uc1sgY2hpbGQuc2tlbGV0b24gXTtcclxuXHJcblx0XHRcdFx0aWYgKCBza2VsZXRvbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogTm8gc2tlbGV0b24gZm91bmQgd2l0aCBVVUlEOicsIGNoaWxkLnNrZWxldG9uICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Y2hpbGQuYmluZCggc2tlbGV0b24sIGNoaWxkLmJpbmRNYXRyaXggKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRiaW5kTGlnaHRUYXJnZXRzKCBvYmplY3QgKSB7XHJcblxyXG5cdFx0b2JqZWN0LnRyYXZlcnNlKCBmdW5jdGlvbiAoIGNoaWxkICkge1xyXG5cclxuXHRcdFx0aWYgKCBjaGlsZC5pc0RpcmVjdGlvbmFsTGlnaHQgfHwgY2hpbGQuaXNTcG90TGlnaHQgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHV1aWQgPSBjaGlsZC50YXJnZXQ7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHRhcmdldCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIHV1aWQgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0YXJnZXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRjaGlsZC50YXJnZXQgPSB0YXJnZXQ7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Y2hpbGQudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IFRFWFRVUkVfTUFQUElORyA9IHtcclxuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcclxuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVSZWZsZWN0aW9uTWFwcGluZyxcclxuXHRDdWJlUmVmcmFjdGlvbk1hcHBpbmc6IEN1YmVSZWZyYWN0aW9uTWFwcGluZyxcclxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXHJcblx0RXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLFxyXG5cdEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZ1xyXG59O1xyXG5cclxuY29uc3QgVEVYVFVSRV9XUkFQUElORyA9IHtcclxuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXHJcblx0Q2xhbXBUb0VkZ2VXcmFwcGluZzogQ2xhbXBUb0VkZ2VXcmFwcGluZyxcclxuXHRNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nXHJcbn07XHJcblxyXG5jb25zdCBURVhUVVJFX0ZJTFRFUiA9IHtcclxuXHROZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxyXG5cdE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyOiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcixcclxuXHROZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyOiBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLFxyXG5cdExpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLFxyXG5cdExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXI6IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXHJcblx0TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJcclxufTtcclxuXHJcbmV4cG9ydCB7IE9iamVjdExvYWRlciB9O1xyXG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vQ2FjaGUuanMnO1xyXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XHJcblxyXG5jbGFzcyBJbWFnZUJpdG1hcExvYWRlciBleHRlbmRzIExvYWRlciB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xyXG5cclxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XHJcblxyXG5cdFx0dGhpcy5pc0ltYWdlQml0bWFwTG9hZGVyID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBjcmVhdGVJbWFnZUJpdG1hcCA9PT0gJ3VuZGVmaW5lZCcgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMub3B0aW9ucyA9IHsgcHJlbXVsdGlwbHlBbHBoYTogJ25vbmUnIH07XHJcblxyXG5cdH1cclxuXHJcblx0c2V0T3B0aW9ucyggb3B0aW9ucyApIHtcclxuXHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xyXG5cclxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcclxuXHJcblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xyXG5cclxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcclxuXHJcblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xyXG5cclxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIGEgcHJvbWlzZSwgd2FpdCBmb3IgaXQgdG8gcmVzb2x2ZVxyXG5cdFx0XHRpZiAoIGNhY2hlZC50aGVuICkge1xyXG5cclxuXHRcdFx0XHRjYWNoZWQudGhlbiggaW1hZ2VCaXRtYXAgPT4ge1xyXG5cclxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBpbWFnZUJpdG1hcCApO1xyXG5cclxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XHJcblxyXG5cdFx0XHRcdH0gKS5jYXRjaCggZSA9PiB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZSApO1xyXG5cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIG5vdCBhIHByb21pc2UgKGkuZS4sIGl0J3MgYWxyZWFkeSBhbiBpbWFnZUJpdG1hcClcclxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XHJcblxyXG5cdFx0XHR9LCAwICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBmZXRjaE9wdGlvbnMgPSB7fTtcclxuXHRcdGZldGNoT3B0aW9ucy5jcmVkZW50aWFscyA9ICggdGhpcy5jcm9zc09yaWdpbiA9PT0gJ2Fub255bW91cycgKSA/ICdzYW1lLW9yaWdpbicgOiAnaW5jbHVkZSc7XHJcblx0XHRmZXRjaE9wdGlvbnMuaGVhZGVycyA9IHRoaXMucmVxdWVzdEhlYWRlcjtcclxuXHJcblx0XHRjb25zdCBwcm9taXNlID0gZmV0Y2goIHVybCwgZmV0Y2hPcHRpb25zICkudGhlbiggZnVuY3Rpb24gKCByZXMgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVzLmJsb2IoKTtcclxuXHJcblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBibG9iICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKCBibG9iLCBPYmplY3QuYXNzaWduKCBzY29wZS5vcHRpb25zLCB7IGNvbG9yU3BhY2VDb252ZXJzaW9uOiAnbm9uZScgfSApICk7XHJcblxyXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggaW1hZ2VCaXRtYXAgKSB7XHJcblxyXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgaW1hZ2VCaXRtYXAgKTtcclxuXHJcblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBpbWFnZUJpdG1hcCApO1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcclxuXHJcblx0XHRcdHJldHVybiBpbWFnZUJpdG1hcDtcclxuXHJcblx0XHR9ICkuY2F0Y2goIGZ1bmN0aW9uICggZSApIHtcclxuXHJcblx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdENhY2hlLnJlbW92ZSggdXJsICk7XHJcblxyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XHJcblxyXG5cdFx0fSApO1xyXG5cclxuXHRcdENhY2hlLmFkZCggdXJsLCBwcm9taXNlICk7XHJcblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEltYWdlQml0bWFwTG9hZGVyIH07XHJcbiIsImxldCBfY29udGV4dDtcclxuXHJcbmNsYXNzIEF1ZGlvQ29udGV4dCB7XHJcblxyXG5cdHN0YXRpYyBnZXRDb250ZXh0KCkge1xyXG5cclxuXHRcdGlmICggX2NvbnRleHQgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdF9jb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF9jb250ZXh0O1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzZXRDb250ZXh0KCB2YWx1ZSApIHtcclxuXHJcblx0XHRfY29udGV4dCA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBBdWRpb0NvbnRleHQgfTtcclxuIiwiaW1wb3J0IHsgQXVkaW9Db250ZXh0IH0gZnJvbSAnLi4vYXVkaW8vQXVkaW9Db250ZXh0LmpzJztcclxuaW1wb3J0IHsgRmlsZUxvYWRlciB9IGZyb20gJy4vRmlsZUxvYWRlci5qcyc7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcclxuXHJcbmNsYXNzIEF1ZGlvTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XHJcblxyXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcclxuXHJcblx0fVxyXG5cclxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xyXG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xyXG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xyXG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcclxuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0Ly8gQ3JlYXRlIGEgY29weSBvZiB0aGUgYnVmZmVyLiBUaGUgYGRlY29kZUF1ZGlvRGF0YWAgbWV0aG9kXHJcblx0XHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxyXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckNvcHkgPSBidWZmZXIuc2xpY2UoIDAgKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XHJcblx0XHRcdFx0Y29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIGJ1ZmZlckNvcHksIGZ1bmN0aW9uICggYXVkaW9CdWZmZXIgKSB7XHJcblxyXG5cdFx0XHRcdFx0b25Mb2FkKCBhdWRpb0J1ZmZlciApO1xyXG5cclxuXHRcdFx0XHR9ICkuY2F0Y2goIGhhbmRsZUVycm9yICk7XHJcblxyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0aGFuZGxlRXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gaGFuZGxlRXJyb3IoIGUgKSB7XHJcblxyXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSB7XHJcblxyXG5cdFx0XHRcdG9uRXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBBdWRpb0xvYWRlciB9O1xyXG4iLCJpbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcclxuaW1wb3J0IHsgREVHMlJBRCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcclxuaW1wb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuL1BlcnNwZWN0aXZlQ2FtZXJhLmpzJztcclxuXHJcbmNvbnN0IF9leWVSaWdodCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX2V5ZUxlZnQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF9wcm9qZWN0aW9uTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xyXG5cclxuY2xhc3MgU3RlcmVvQ2FtZXJhIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1N0ZXJlb0NhbWVyYSc7XHJcblxyXG5cdFx0dGhpcy5hc3BlY3QgPSAxO1xyXG5cclxuXHRcdHRoaXMuZXllU2VwID0gMC4wNjQ7XHJcblxyXG5cdFx0dGhpcy5jYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XHJcblx0XHR0aGlzLmNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xyXG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcclxuXHRcdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XHJcblx0XHR0aGlzLmNhbWVyYVIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuX2NhY2hlID0ge1xyXG5cdFx0XHRmb2N1czogbnVsbCxcclxuXHRcdFx0Zm92OiBudWxsLFxyXG5cdFx0XHRhc3BlY3Q6IG51bGwsXHJcblx0XHRcdG5lYXI6IG51bGwsXHJcblx0XHRcdGZhcjogbnVsbCxcclxuXHRcdFx0em9vbTogbnVsbCxcclxuXHRcdFx0ZXllU2VwOiBudWxsXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSggY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGU7XHJcblxyXG5cdFx0Y29uc3QgbmVlZHNVcGRhdGUgPSBjYWNoZS5mb2N1cyAhPT0gY2FtZXJhLmZvY3VzIHx8IGNhY2hlLmZvdiAhPT0gY2FtZXJhLmZvdiB8fFxyXG5cdFx0XHRjYWNoZS5hc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdCB8fCBjYWNoZS5uZWFyICE9PSBjYW1lcmEubmVhciB8fFxyXG5cdFx0XHRjYWNoZS5mYXIgIT09IGNhbWVyYS5mYXIgfHwgY2FjaGUuem9vbSAhPT0gY2FtZXJhLnpvb20gfHwgY2FjaGUuZXllU2VwICE9PSB0aGlzLmV5ZVNlcDtcclxuXHJcblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xyXG5cclxuXHRcdFx0Y2FjaGUuZm9jdXMgPSBjYW1lcmEuZm9jdXM7XHJcblx0XHRcdGNhY2hlLmZvdiA9IGNhbWVyYS5mb3Y7XHJcblx0XHRcdGNhY2hlLmFzcGVjdCA9IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdDtcclxuXHRcdFx0Y2FjaGUubmVhciA9IGNhbWVyYS5uZWFyO1xyXG5cdFx0XHRjYWNoZS5mYXIgPSBjYW1lcmEuZmFyO1xyXG5cdFx0XHRjYWNoZS56b29tID0gY2FtZXJhLnpvb207XHJcblx0XHRcdGNhY2hlLmV5ZVNlcCA9IHRoaXMuZXllU2VwO1xyXG5cclxuXHRcdFx0Ly8gT2ZmLWF4aXMgc3RlcmVvc2NvcGljIGVmZmVjdCBiYXNlZCBvblxyXG5cdFx0XHQvLyBodHRwOi8vcGF1bGJvdXJrZS5uZXQvc3RlcmVvZ3JhcGhpY3Mvc3RlcmVvcmVuZGVyL1xyXG5cclxuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcclxuXHRcdFx0Y29uc3QgZXllU2VwSGFsZiA9IGNhY2hlLmV5ZVNlcCAvIDI7XHJcblx0XHRcdGNvbnN0IGV5ZVNlcE9uUHJvamVjdGlvbiA9IGV5ZVNlcEhhbGYgKiBjYWNoZS5uZWFyIC8gY2FjaGUuZm9jdXM7XHJcblx0XHRcdGNvbnN0IHltYXggPSAoIGNhY2hlLm5lYXIgKiBNYXRoLnRhbiggREVHMlJBRCAqIGNhY2hlLmZvdiAqIDAuNSApICkgLyBjYWNoZS56b29tO1xyXG5cdFx0XHRsZXQgeG1pbiwgeG1heDtcclxuXHJcblx0XHRcdC8vIHRyYW5zbGF0ZSB4T2Zmc2V0XHJcblxyXG5cdFx0XHRfZXllTGVmdC5lbGVtZW50c1sgMTIgXSA9IC0gZXllU2VwSGFsZjtcclxuXHRcdFx0X2V5ZVJpZ2h0LmVsZW1lbnRzWyAxMiBdID0gZXllU2VwSGFsZjtcclxuXHJcblx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxyXG5cclxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcclxuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XHJcblxyXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIGNhY2hlLm5lYXIgLyAoIHhtYXggLSB4bWluICk7XHJcblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XHJcblxyXG5cdFx0XHR0aGlzLmNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBfcHJvamVjdGlvbk1hdHJpeCApO1xyXG5cclxuXHRcdFx0Ly8gZm9yIHJpZ2h0IGV5ZVxyXG5cclxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcclxuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247XHJcblxyXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIGNhY2hlLm5lYXIgLyAoIHhtYXggLSB4bWluICk7XHJcblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XHJcblxyXG5cdFx0XHR0aGlzLmNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBfcHJvamVjdGlvbk1hdHJpeCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIF9leWVMZWZ0ICk7XHJcblx0XHR0aGlzLmNhbWVyYVIubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIF9leWVSaWdodCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBTdGVyZW9DYW1lcmEgfTtcclxuIiwiaW1wb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuL1BlcnNwZWN0aXZlQ2FtZXJhLmpzJztcclxuXHJcbmNsYXNzIEFycmF5Q2FtZXJhIGV4dGVuZHMgUGVyc3BlY3RpdmVDYW1lcmEge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXkgPSBbXSApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaXNBcnJheUNhbWVyYSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5jYW1lcmFzID0gYXJyYXk7XHJcblx0XHR0aGlzLmluZGV4ID0gMDtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQXJyYXlDYW1lcmEgfTtcclxuIiwiY2xhc3MgQ2xvY2sge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXV0b1N0YXJ0ID0gdHJ1ZSApIHtcclxuXHJcblx0XHR0aGlzLmF1dG9TdGFydCA9IGF1dG9TdGFydDtcclxuXHJcblx0XHR0aGlzLnN0YXJ0VGltZSA9IDA7XHJcblx0XHR0aGlzLm9sZFRpbWUgPSAwO1xyXG5cdFx0dGhpcy5lbGFwc2VkVGltZSA9IDA7XHJcblxyXG5cdFx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhcnQoKSB7XHJcblxyXG5cdFx0dGhpcy5zdGFydFRpbWUgPSBub3coKTtcclxuXHJcblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcclxuXHRcdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG5cdFx0dGhpcy5ydW5uaW5nID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRzdG9wKCkge1xyXG5cclxuXHRcdHRoaXMuZ2V0RWxhcHNlZFRpbWUoKTtcclxuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5hdXRvU3RhcnQgPSBmYWxzZTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRFbGFwc2VkVGltZSgpIHtcclxuXHJcblx0XHR0aGlzLmdldERlbHRhKCk7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGFwc2VkVGltZTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXREZWx0YSgpIHtcclxuXHJcblx0XHRsZXQgZGlmZiA9IDA7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmF1dG9TdGFydCAmJiAhIHRoaXMucnVubmluZyApIHtcclxuXHJcblx0XHRcdHRoaXMuc3RhcnQoKTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5ydW5uaW5nICkge1xyXG5cclxuXHRcdFx0Y29uc3QgbmV3VGltZSA9IG5vdygpO1xyXG5cclxuXHRcdFx0ZGlmZiA9ICggbmV3VGltZSAtIHRoaXMub2xkVGltZSApIC8gMTAwMDtcclxuXHRcdFx0dGhpcy5vbGRUaW1lID0gbmV3VGltZTtcclxuXHJcblx0XHRcdHRoaXMuZWxhcHNlZFRpbWUgKz0gZGlmZjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRpZmY7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vdygpIHtcclxuXHJcblx0cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ2xvY2sgfTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuLi9tYXRoL1F1YXRlcm5pb24uanMnO1xyXG5pbXBvcnQgeyBDbG9jayB9IGZyb20gJy4uL2NvcmUvQ2xvY2suanMnO1xyXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5pbXBvcnQgeyBBdWRpb0NvbnRleHQgfSBmcm9tICcuL0F1ZGlvQ29udGV4dC5qcyc7XHJcblxyXG5jb25zdCBfcG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9xdWF0ZXJuaW9uID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9vcmllbnRhdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIEF1ZGlvTGlzdGVuZXIgZXh0ZW5kcyBPYmplY3QzRCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0F1ZGlvTGlzdGVuZXInO1xyXG5cclxuXHRcdHRoaXMuY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XHJcblxyXG5cdFx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcclxuXHJcblx0XHR0aGlzLmZpbHRlciA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy50aW1lRGVsdGEgPSAwO1xyXG5cclxuXHRcdC8vIHByaXZhdGVcclxuXHJcblx0XHR0aGlzLl9jbG9jayA9IG5ldyBDbG9jaygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldElucHV0KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdhaW47XHJcblxyXG5cdH1cclxuXHJcblx0cmVtb3ZlRmlsdGVyKCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcclxuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XHJcblx0XHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcclxuXHRcdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRGaWx0ZXIoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZpbHRlciggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xyXG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xyXG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuZmlsdGVyICk7XHJcblx0XHR0aGlzLmZpbHRlci5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRNYXN0ZXJWb2x1bWUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldE1hc3RlclZvbHVtZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xyXG5cclxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xyXG5cclxuXHRcdGNvbnN0IGxpc3RlbmVyID0gdGhpcy5jb250ZXh0Lmxpc3RlbmVyO1xyXG5cdFx0Y29uc3QgdXAgPSB0aGlzLnVwO1xyXG5cclxuXHRcdHRoaXMudGltZURlbHRhID0gdGhpcy5fY2xvY2suZ2V0RGVsdGEoKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiwgX3NjYWxlICk7XHJcblxyXG5cdFx0X29yaWVudGF0aW9uLnNldCggMCwgMCwgLSAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiApO1xyXG5cclxuXHRcdGlmICggbGlzdGVuZXIucG9zaXRpb25YICkge1xyXG5cclxuXHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgKHNlZSAjMTQzOTMpXHJcblxyXG5cdFx0XHRjb25zdCBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy50aW1lRGVsdGE7XHJcblxyXG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbi54LCBlbmRUaW1lICk7XHJcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnksIGVuZFRpbWUgKTtcclxuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24ueiwgZW5kVGltZSApO1xyXG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLngsIGVuZFRpbWUgKTtcclxuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi55LCBlbmRUaW1lICk7XHJcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueiwgZW5kVGltZSApO1xyXG5cdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTtcclxuXHRcdFx0bGlzdGVuZXIudXBZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC55LCBlbmRUaW1lICk7XHJcblx0XHRcdGxpc3RlbmVyLnVwWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueiwgZW5kVGltZSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRsaXN0ZW5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uLngsIF9wb3NpdGlvbi55LCBfcG9zaXRpb24ueiApO1xyXG5cdFx0XHRsaXN0ZW5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiwgdXAueCwgdXAueSwgdXAueiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQXVkaW9MaXN0ZW5lciB9O1xyXG4iLCJpbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5cclxuY2xhc3MgQXVkaW8gZXh0ZW5kcyBPYmplY3QzRCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBsaXN0ZW5lciApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdBdWRpbyc7XHJcblxyXG5cdFx0dGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xyXG5cdFx0dGhpcy5jb250ZXh0ID0gbGlzdGVuZXIuY29udGV4dDtcclxuXHJcblx0XHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xyXG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIGxpc3RlbmVyLmdldElucHV0KCkgKTtcclxuXHJcblx0XHR0aGlzLmF1dG9wbGF5ID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5idWZmZXIgPSBudWxsO1xyXG5cdFx0dGhpcy5kZXR1bmUgPSAwO1xyXG5cdFx0dGhpcy5sb29wID0gZmFsc2U7XHJcblx0XHR0aGlzLmxvb3BTdGFydCA9IDA7XHJcblx0XHR0aGlzLmxvb3BFbmQgPSAwO1xyXG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xyXG5cdFx0dGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gMTtcclxuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XHJcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7XHJcblx0XHR0aGlzLnNvdXJjZSA9IG51bGw7XHJcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnZW1wdHknO1xyXG5cclxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IDA7XHJcblx0XHR0aGlzLl9wcm9ncmVzcyA9IDA7XHJcblx0XHR0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLmZpbHRlcnMgPSBbXTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRPdXRwdXQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcclxuXHJcblx0fVxyXG5cclxuXHRzZXROb2RlU291cmNlKCBhdWRpb05vZGUgKSB7XHJcblxyXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcclxuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdhdWRpb05vZGUnO1xyXG5cdFx0dGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7XHJcblx0XHR0aGlzLmNvbm5lY3QoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApIHtcclxuXHJcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhTm9kZSc7XHJcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xyXG5cdFx0dGhpcy5jb25uZWN0KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICkge1xyXG5cclxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XHJcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFTdHJlYW1Ob2RlJztcclxuXHRcdHRoaXMuc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKCBtZWRpYVN0cmVhbSApO1xyXG5cdFx0dGhpcy5jb25uZWN0KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0QnVmZmVyKCBhdWRpb0J1ZmZlciApIHtcclxuXHJcblx0XHR0aGlzLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmF1dG9wbGF5ICkgdGhpcy5wbGF5KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cGxheSggZGVsYXkgPSAwICkge1xyXG5cclxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLicgKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9zdGFydGVkQXQgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyBkZWxheTtcclxuXHJcblx0XHRjb25zdCBzb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcblx0XHRzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XHJcblx0XHRzb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcclxuXHRcdHNvdXJjZS5sb29wU3RhcnQgPSB0aGlzLmxvb3BTdGFydDtcclxuXHRcdHNvdXJjZS5sb29wRW5kID0gdGhpcy5sb29wRW5kO1xyXG5cdFx0c291cmNlLm9uZW5kZWQgPSB0aGlzLm9uRW5kZWQuYmluZCggdGhpcyApO1xyXG5cdFx0c291cmNlLnN0YXJ0KCB0aGlzLl9zdGFydGVkQXQsIHRoaXMuX3Byb2dyZXNzICsgdGhpcy5vZmZzZXQsIHRoaXMuZHVyYXRpb24gKTtcclxuXHJcblx0XHR0aGlzLmlzUGxheWluZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcblxyXG5cdFx0dGhpcy5zZXREZXR1bmUoIHRoaXMuZGV0dW5lICk7XHJcblx0XHR0aGlzLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb25uZWN0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0cGF1c2UoKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdC8vIHVwZGF0ZSBjdXJyZW50IHByb2dyZXNzXHJcblxyXG5cdFx0XHR0aGlzLl9wcm9ncmVzcyArPSBNYXRoLm1heCggdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lIC0gdGhpcy5fc3RhcnRlZEF0LCAwICkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcclxuXHJcblx0XHRcdGlmICggdGhpcy5sb29wID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHQvLyBlbnN1cmUgX3Byb2dyZXNzIGRvZXMgbm90IGV4Y2VlZCBkdXJhdGlvbiB3aXRoIGxvb3BlZCBhdWRpb3NcclxuXHJcblx0XHRcdFx0dGhpcy5fcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcyAlICggdGhpcy5kdXJhdGlvbiB8fCB0aGlzLmJ1ZmZlci5kdXJhdGlvbiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xyXG5cdFx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcclxuXHJcblx0XHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0b3AoIGRlbGF5ID0gMCApIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9wcm9ncmVzcyA9IDA7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnNvdXJjZSAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLnN0b3AoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGRlbGF5ICk7XHJcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvbm5lY3QoKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzY29ubmVjdCgpIHtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2Nvbm5lY3RlZCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRGaWx0ZXJzKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZpbHRlcnM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RmlsdGVycyggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcclxuXHJcblx0XHRpZiAoIHRoaXMuX2Nvbm5lY3RlZCA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdHRoaXMuZGlzY29ubmVjdCgpO1xyXG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZS5zbGljZSgpO1xyXG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWUuc2xpY2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RGV0dW5lKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLmRldHVuZSA9IHZhbHVlO1xyXG5cclxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgJiYgdGhpcy5zb3VyY2UuZGV0dW5lICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldERldHVuZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kZXR1bmU7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0RmlsdGVyKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldEZpbHRlcnMoKVsgMCBdO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZpbHRlciggZmlsdGVyICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEZpbHRlcnMoIGZpbHRlciA/IFsgZmlsdGVyIF0gOiBbXSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFBsYXliYWNrUmF0ZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFRhcmdldEF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQbGF5YmFja1JhdGUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucGxheWJhY2tSYXRlO1xyXG5cclxuXHR9XHJcblxyXG5cdG9uRW5kZWQoKSB7XHJcblxyXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRMb29wKCkge1xyXG5cclxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmxvb3A7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TG9vcCggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5sb29wID0gdmFsdWU7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldExvb3BTdGFydCggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5sb29wU3RhcnQgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRMb29wRW5kKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLmxvb3BFbmQgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRnZXRWb2x1bWUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFZvbHVtZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcclxuXHJcblx0XHRpZiAoIHNvdXJjZS5zb3VyY2VUeXBlICE9PSAnYnVmZmVyJyApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBzb3VyY2UgdHlwZSBjYW5ub3QgYmUgY29waWVkLicgKTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmF1dG9wbGF5ID0gc291cmNlLmF1dG9wbGF5O1xyXG5cclxuXHRcdHRoaXMuYnVmZmVyID0gc291cmNlLmJ1ZmZlcjtcclxuXHRcdHRoaXMuZGV0dW5lID0gc291cmNlLmRldHVuZTtcclxuXHRcdHRoaXMubG9vcCA9IHNvdXJjZS5sb29wO1xyXG5cdFx0dGhpcy5sb29wU3RhcnQgPSBzb3VyY2UubG9vcFN0YXJ0O1xyXG5cdFx0dGhpcy5sb29wRW5kID0gc291cmNlLmxvb3BFbmQ7XHJcblx0XHR0aGlzLm9mZnNldCA9IHNvdXJjZS5vZmZzZXQ7XHJcblx0XHR0aGlzLmR1cmF0aW9uID0gc291cmNlLmR1cmF0aW9uO1xyXG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSBzb3VyY2UucGxheWJhY2tSYXRlO1xyXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBzb3VyY2UuaGFzUGxheWJhY2tDb250cm9sO1xyXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gc291cmNlLnNvdXJjZVR5cGU7XHJcblxyXG5cdFx0dGhpcy5maWx0ZXJzID0gc291cmNlLmZpbHRlcnMuc2xpY2UoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSggcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5saXN0ZW5lciApLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBBdWRpbyB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL21hdGgvUXVhdGVybmlvbi5qcyc7XHJcbmltcG9ydCB7IEF1ZGlvIH0gZnJvbSAnLi9BdWRpby5qcyc7XHJcblxyXG5jb25zdCBfcG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9xdWF0ZXJuaW9uID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9vcmllbnRhdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIFBvc2l0aW9uYWxBdWRpbyBleHRlbmRzIEF1ZGlvIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGxpc3RlbmVyICkge1xyXG5cclxuXHRcdHN1cGVyKCBsaXN0ZW5lciApO1xyXG5cclxuXHRcdHRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xyXG5cdFx0dGhpcy5wYW5uZXIucGFubmluZ01vZGVsID0gJ0hSVEYnO1xyXG5cdFx0dGhpcy5wYW5uZXIuY29ubmVjdCggdGhpcy5nYWluICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y29ubmVjdCgpIHtcclxuXHJcblx0XHRzdXBlci5jb25uZWN0KCk7XHJcblxyXG5cdFx0dGhpcy5wYW5uZXIuY29ubmVjdCggdGhpcy5nYWluICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzY29ubmVjdCgpIHtcclxuXHJcblx0XHRzdXBlci5kaXNjb25uZWN0KCk7XHJcblxyXG5cdFx0dGhpcy5wYW5uZXIuZGlzY29ubmVjdCggdGhpcy5nYWluICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0T3V0cHV0KCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRSZWZEaXN0YW5jZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2U7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0UmVmRGlzdGFuY2UoIHZhbHVlICkge1xyXG5cclxuXHRcdHRoaXMucGFubmVyLnJlZkRpc3RhbmNlID0gdmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Um9sbG9mZkZhY3RvcigpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRSb2xsb2ZmRmFjdG9yKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0RGlzdGFuY2VNb2RlbCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXREaXN0YW5jZU1vZGVsKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsID0gdmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0TWF4RGlzdGFuY2UoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldE1heERpc3RhbmNlKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldERpcmVjdGlvbmFsQ29uZSggY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluICkge1xyXG5cclxuXHRcdHRoaXMucGFubmVyLmNvbmVJbm5lckFuZ2xlID0gY29uZUlubmVyQW5nbGU7XHJcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlO1xyXG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyR2FpbiA9IGNvbmVPdXRlckdhaW47XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xyXG5cclxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xyXG5cclxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IHRydWUgJiYgdGhpcy5pc1BsYXlpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24sIF9xdWF0ZXJuaW9uLCBfc2NhbGUgKTtcclxuXHJcblx0XHRfb3JpZW50YXRpb24uc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiApO1xyXG5cclxuXHRcdGNvbnN0IHBhbm5lciA9IHRoaXMucGFubmVyO1xyXG5cclxuXHRcdGlmICggcGFubmVyLnBvc2l0aW9uWCApIHtcclxuXHJcblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxyXG5cclxuXHRcdFx0Y29uc3QgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMubGlzdGVuZXIudGltZURlbHRhO1xyXG5cclxuXHRcdFx0cGFubmVyLnBvc2l0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLngsIGVuZFRpbWUgKTtcclxuXHRcdFx0cGFubmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnksIGVuZFRpbWUgKTtcclxuXHRcdFx0cGFubmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnosIGVuZFRpbWUgKTtcclxuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLngsIGVuZFRpbWUgKTtcclxuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnksIGVuZFRpbWUgKTtcclxuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnosIGVuZFRpbWUgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cGFubmVyLnNldFBvc2l0aW9uKCBfcG9zaXRpb24ueCwgX3Bvc2l0aW9uLnksIF9wb3NpdGlvbi56ICk7XHJcblx0XHRcdHBhbm5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUG9zaXRpb25hbEF1ZGlvIH07XHJcbiIsImNsYXNzIEF1ZGlvQW5hbHlzZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXVkaW8sIGZmdFNpemUgPSAyMDQ4ICkge1xyXG5cclxuXHRcdHRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XHJcblx0XHR0aGlzLmFuYWx5c2VyLmZmdFNpemUgPSBmZnRTaXplO1xyXG5cclxuXHRcdHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KCB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50ICk7XHJcblxyXG5cdFx0YXVkaW8uZ2V0T3V0cHV0KCkuY29ubmVjdCggdGhpcy5hbmFseXNlciApO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHRnZXRGcmVxdWVuY3lEYXRhKCkge1xyXG5cclxuXHRcdHRoaXMuYW5hbHlzZXIuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoIHRoaXMuZGF0YSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRhdGE7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0QXZlcmFnZUZyZXF1ZW5jeSgpIHtcclxuXHJcblx0XHRsZXQgdmFsdWUgPSAwO1xyXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0dmFsdWUgKz0gZGF0YVsgaSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsdWUgLyBkYXRhLmxlbmd0aDtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQXVkaW9BbmFseXNlciB9O1xyXG4iLCJpbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vbWF0aC9RdWF0ZXJuaW9uLmpzJztcclxuXHJcbmNsYXNzIFByb3BlcnR5TWl4ZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYmluZGluZywgdHlwZU5hbWUsIHZhbHVlU2l6ZSApIHtcclxuXHJcblx0XHR0aGlzLmJpbmRpbmcgPSBiaW5kaW5nO1xyXG5cdFx0dGhpcy52YWx1ZVNpemUgPSB2YWx1ZVNpemU7XHJcblxyXG5cdFx0bGV0IG1peEZ1bmN0aW9uLFxyXG5cdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlLFxyXG5cdFx0XHRzZXRJZGVudGl0eTtcclxuXHJcblx0XHQvLyBidWZmZXIgbGF5b3V0OiBbIGluY29taW5nIHwgYWNjdTAgfCBhY2N1MSB8IG9yaWcgfCBhZGRBY2N1IHwgKG9wdGlvbmFsIHdvcmspIF1cclxuXHRcdC8vXHJcblx0XHQvLyBpbnRlcnBvbGF0b3JzIGNhbiB1c2UgLmJ1ZmZlciBhcyB0aGVpciAucmVzdWx0XHJcblx0XHQvLyB0aGUgZGF0YSB0aGVuIGdvZXMgdG8gJ2luY29taW5nJ1xyXG5cdFx0Ly9cclxuXHRcdC8vICdhY2N1MCcgYW5kICdhY2N1MScgYXJlIHVzZWQgZnJhbWUtaW50ZXJsZWF2ZWQgZm9yXHJcblx0XHQvLyB0aGUgY3VtdWxhdGl2ZSByZXN1bHQgYW5kIGFyZSBjb21wYXJlZCB0byBkZXRlY3RcclxuXHRcdC8vIGNoYW5nZXNcclxuXHRcdC8vXHJcblx0XHQvLyAnb3JpZycgc3RvcmVzIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgcHJvcGVydHlcclxuXHRcdC8vXHJcblx0XHQvLyAnYWRkJyBpcyB1c2VkIGZvciBhZGRpdGl2ZSBjdW11bGF0aXZlIHJlc3VsdHNcclxuXHRcdC8vXHJcblx0XHQvLyAnd29yaycgaXMgb3B0aW9uYWwgYW5kIGlzIG9ubHkgcHJlc2VudCBmb3IgcXVhdGVybmlvbiB0eXBlcy4gSXQgaXMgdXNlZFxyXG5cdFx0Ly8gdG8gc3RvcmUgaW50ZXJtZWRpYXRlIHF1YXRlcm5pb24gbXVsdGlwbGljYXRpb24gcmVzdWx0c1xyXG5cclxuXHRcdHN3aXRjaCAoIHR5cGVOYW1lICkge1xyXG5cclxuXHRcdFx0Y2FzZSAncXVhdGVybmlvbic6XHJcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zbGVycDtcclxuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fc2xlcnBBZGRpdGl2ZTtcclxuXHRcdFx0XHRzZXRJZGVudGl0eSA9IHRoaXMuX3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uO1xyXG5cclxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkoIHZhbHVlU2l6ZSAqIDYgKTtcclxuXHRcdFx0XHR0aGlzLl93b3JrSW5kZXggPSA1O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnc3RyaW5nJzpcclxuXHRcdFx0Y2FzZSAnYm9vbCc6XHJcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zZWxlY3Q7XHJcblxyXG5cdFx0XHRcdC8vIFVzZSB0aGUgcmVndWxhciBtaXggZnVuY3Rpb24gYW5kIGZvciBhZGRpdGl2ZSBvbiB0aGVzZSB0eXBlcyxcclxuXHRcdFx0XHQvLyBhZGRpdGl2ZSBpcyBub3QgcmVsZXZhbnQgZm9yIG5vbi1udW1lcmljIHR5cGVzXHJcblx0XHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSA9IHRoaXMuX3NlbGVjdDtcclxuXHJcblx0XHRcdFx0c2V0SWRlbnRpdHkgPSB0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXI7XHJcblxyXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCB2YWx1ZVNpemUgKiA1ICk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fbGVycDtcclxuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fbGVycEFkZGl0aXZlO1xyXG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWM7XHJcblxyXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheSggdmFsdWVTaXplICogNSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24gPSBtaXhGdW5jdGlvbjtcclxuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlID0gbWl4RnVuY3Rpb25BZGRpdGl2ZTtcclxuXHRcdHRoaXMuX3NldElkZW50aXR5ID0gc2V0SWRlbnRpdHk7XHJcblx0XHR0aGlzLl9vcmlnSW5kZXggPSAzO1xyXG5cdFx0dGhpcy5fYWRkSW5kZXggPSA0O1xyXG5cclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XHJcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSA9IDA7XHJcblxyXG5cdFx0dGhpcy51c2VDb3VudCA9IDA7XHJcblx0XHR0aGlzLnJlZmVyZW5jZUNvdW50ID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBhY2N1bXVsYXRlIGRhdGEgaW4gdGhlICdpbmNvbWluZycgcmVnaW9uIGludG8gJ2FjY3U8aT4nXHJcblx0YWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKSB7XHJcblxyXG5cdFx0Ly8gbm90ZTogaGFwcGlseSBhY2N1bXVsYXRpbmcgbm90aGluZyB3aGVuIHdlaWdodCA9IDAsIHRoZSBjYWxsZXIga25vd3NcclxuXHRcdC8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlXHJcblxyXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGU7XHJcblxyXG5cdFx0bGV0IGN1cnJlbnRXZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQ7XHJcblxyXG5cdFx0aWYgKCBjdXJyZW50V2VpZ2h0ID09PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gYWNjdU4gOj0gaW5jb21pbmcgKiB3ZWlnaHRcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xyXG5cclxuXHRcdFx0XHRidWZmZXJbIG9mZnNldCArIGkgXSA9IGJ1ZmZlclsgaSBdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHdlaWdodDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBpbmNvbWluZyAqIHdlaWdodFxyXG5cclxuXHRcdFx0Y3VycmVudFdlaWdodCArPSB3ZWlnaHQ7XHJcblx0XHRcdGNvbnN0IG1peCA9IHdlaWdodCAvIGN1cnJlbnRXZWlnaHQ7XHJcblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiggYnVmZmVyLCBvZmZzZXQsIDAsIG1peCwgc3RyaWRlICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gYWNjdW11bGF0ZSBkYXRhIGluIHRoZSAnaW5jb21pbmcnIHJlZ2lvbiBpbnRvICdhZGQnXHJcblx0YWNjdW11bGF0ZUFkZGl0aXZlKCB3ZWlnaHQgKSB7XHJcblxyXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cdFx0XHRvZmZzZXQgPSBzdHJpZGUgKiB0aGlzLl9hZGRJbmRleDtcclxuXHJcblx0XHRpZiAoIHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID09PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gYWRkID0gaWRlbnRpdHlcclxuXHJcblx0XHRcdHRoaXMuX3NldElkZW50aXR5KCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFkZCA6PSBhZGQgKyBpbmNvbWluZyAqIHdlaWdodFxyXG5cclxuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlKCBidWZmZXIsIG9mZnNldCwgMCwgd2VpZ2h0LCBzdHJpZGUgKTtcclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlICs9IHdlaWdodDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBhcHBseSB0aGUgc3RhdGUgb2YgJ2FjY3U8aT4nIHRvIHRoZSBiaW5kaW5nIHdoZW4gYWNjdXMgZGlmZmVyXHJcblx0YXBwbHkoIGFjY3VJbmRleCApIHtcclxuXHJcblx0XHRjb25zdCBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcclxuXHJcblx0XHRcdHdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodCxcclxuXHRcdFx0d2VpZ2h0QWRkaXRpdmUgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSxcclxuXHJcblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XHJcblxyXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID0gMDtcclxuXHJcblx0XHRpZiAoIHdlaWdodCA8IDEgKSB7XHJcblxyXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIG9yaWdpbmFsICogKCAxIC0gY3VtdWxhdGl2ZVdlaWdodCApXHJcblxyXG5cdFx0XHRjb25zdCBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fb3JpZ0luZGV4O1xyXG5cclxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKFxyXG5cdFx0XHRcdGJ1ZmZlciwgb2Zmc2V0LCBvcmlnaW5hbFZhbHVlT2Zmc2V0LCAxIC0gd2VpZ2h0LCBzdHJpZGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB3ZWlnaHRBZGRpdGl2ZSA+IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIGFkZGl0aXZlIGFjY3VOXHJcblxyXG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSggYnVmZmVyLCBvZmZzZXQsIHRoaXMuX2FkZEluZGV4ICogc3RyaWRlLCAxLCBzdHJpZGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGJ1ZmZlclsgaSBdICE9PSBidWZmZXJbIGkgKyBzdHJpZGUgXSApIHtcclxuXHJcblx0XHRcdFx0Ly8gdmFsdWUgaGFzIGNoYW5nZWQgLT4gdXBkYXRlIHNjZW5lIGdyYXBoXHJcblxyXG5cdFx0XHRcdGJpbmRpbmcuc2V0VmFsdWUoIGJ1ZmZlciwgb2Zmc2V0ICk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIHJlbWVtYmVyIHRoZSBzdGF0ZSBvZiB0aGUgYm91bmQgcHJvcGVydHkgYW5kIGNvcHkgaXQgdG8gYm90aCBhY2N1c1xyXG5cdHNhdmVPcmlnaW5hbFN0YXRlKCkge1xyXG5cclxuXHRcdGNvbnN0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XHJcblxyXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cclxuXHRcdFx0b3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIHRoaXMuX29yaWdJbmRleDtcclxuXHJcblx0XHRiaW5kaW5nLmdldFZhbHVlKCBidWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcclxuXHJcblx0XHQvLyBhY2N1WzAuLjFdIDo9IG9yaWcgLS0gaW5pdGlhbGx5IGRldGVjdCBjaGFuZ2VzIGFnYWluc3QgdGhlIG9yaWdpbmFsXHJcblx0XHRmb3IgKCBsZXQgaSA9IHN0cmlkZSwgZSA9IG9yaWdpbmFsVmFsdWVPZmZzZXQ7IGkgIT09IGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRidWZmZXJbIGkgXSA9IGJ1ZmZlclsgb3JpZ2luYWxWYWx1ZU9mZnNldCArICggaSAlIHN0cmlkZSApIF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB0byBpZGVudGl0eSBmb3IgYWRkaXRpdmVcclxuXHRcdHRoaXMuX3NldElkZW50aXR5KCk7XHJcblxyXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xyXG5cdHJlc3RvcmVPcmlnaW5hbFN0YXRlKCkge1xyXG5cclxuXHRcdGNvbnN0IG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XHJcblx0XHR0aGlzLmJpbmRpbmcuc2V0VmFsdWUoIHRoaXMuYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldEFkZGl0aXZlSWRlbnRpdHlOdW1lcmljKCkge1xyXG5cclxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplO1xyXG5cdFx0Y29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgdGhpcy52YWx1ZVNpemU7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJ1ZmZlclsgaSBdID0gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0X3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uKCkge1xyXG5cclxuXHRcdHRoaXMuX3NldEFkZGl0aXZlSWRlbnRpdHlOdW1lcmljKCk7XHJcblx0XHR0aGlzLmJ1ZmZlclsgdGhpcy5fYWRkSW5kZXggKiB0aGlzLnZhbHVlU2l6ZSArIDMgXSA9IDE7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldEFkZGl0aXZlSWRlbnRpdHlPdGhlcigpIHtcclxuXHJcblx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fb3JpZ0luZGV4ICogdGhpcy52YWx1ZVNpemU7XHJcblx0XHRjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2FkZEluZGV4ICogdGhpcy52YWx1ZVNpemU7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZVNpemU7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJ1ZmZlclsgdGFyZ2V0SW5kZXggKyBpIF0gPSB0aGlzLmJ1ZmZlclsgc3RhcnRJbmRleCArIGkgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblxyXG5cdC8vIG1peCBmdW5jdGlvbnNcclxuXHJcblx0X3NlbGVjdCggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkge1xyXG5cclxuXHRcdGlmICggdCA+PSAwLjUgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcclxuXHJcblx0XHRcdFx0YnVmZmVyWyBkc3RPZmZzZXQgKyBpIF0gPSBidWZmZXJbIHNyY09mZnNldCArIGkgXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0X3NsZXJwKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0ICkge1xyXG5cclxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgc3JjT2Zmc2V0LCB0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0X3NsZXJwQWRkaXRpdmUoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcclxuXHJcblx0XHRjb25zdCB3b3JrT2Zmc2V0ID0gdGhpcy5fd29ya0luZGV4ICogc3RyaWRlO1xyXG5cclxuXHRcdC8vIFN0b3JlIHJlc3VsdCBpbiBpbnRlcm1lZGlhdGUgYnVmZmVyIG9mZnNldFxyXG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdCggYnVmZmVyLCB3b3JrT2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQgKTtcclxuXHJcblx0XHQvLyBTbGVycCB0byB0aGUgaW50ZXJtZWRpYXRlIHJlc3VsdFxyXG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCB3b3JrT2Zmc2V0LCB0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0X2xlcnAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcclxuXHJcblx0XHRjb25zdCBzID0gMSAtIHQ7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcclxuXHJcblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKiBzICsgYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF0gKiB0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfbGVycEFkZGl0aXZlKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcclxuXHJcblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgUHJvcGVydHlNaXhlciB9O1xyXG4iLCIvLyBDaGFyYWN0ZXJzIFtdLjovIGFyZSByZXNlcnZlZCBmb3IgdHJhY2sgYmluZGluZyBzeW50YXguXHJcbmNvbnN0IF9SRVNFUlZFRF9DSEFSU19SRSA9ICdcXFxcW1xcXFxdXFxcXC46XFxcXC8nO1xyXG5jb25zdCBfcmVzZXJ2ZWRSZSA9IG5ldyBSZWdFeHAoICdbJyArIF9SRVNFUlZFRF9DSEFSU19SRSArICddJywgJ2cnICk7XHJcblxyXG4vLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xyXG4vLyBvbmx5IGxhdGluIGNoYXJhY3RlcnMsIGFuZCB0aGUgdW5pY29kZSBcXHB7TH0gaXMgbm90IHlldCBzdXBwb3J0ZWQuIFNvXHJcbi8vIGluc3RlYWQsIHdlIGV4Y2x1ZGUgcmVzZXJ2ZWQgY2hhcmFjdGVycyBhbmQgbWF0Y2ggZXZlcnl0aGluZyBlbHNlLlxyXG5jb25zdCBfd29yZENoYXIgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nO1xyXG5jb25zdCBfd29yZENoYXJPckRvdCA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSggJ1xcXFwuJywgJycgKSArICddJztcclxuXHJcbi8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0XHJcbi8vIGJlIG1hdGNoZWQgdG8gcGFyc2UgdGhlIHJlc3Qgb2YgdGhlIHRyYWNrIG5hbWUuXHJcbmNvbnN0IF9kaXJlY3RvcnlSZSA9IC8qQF9fUFVSRV9fKi8gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcclxuXHJcbi8vIFRhcmdldCBub2RlLiBNYXkgY29udGFpbiB3b3JkIGNoYXJhY3RlcnMgKGEtekEtWjAtOV8pIGFuZCAnLicgb3IgJy0nLlxyXG5jb25zdCBfbm9kZVJlID0gLypAX19QVVJFX18qLyAvKFdDT0QrKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0NPRCcsIF93b3JkQ2hhck9yRG90ICk7XHJcblxyXG4vLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXHJcbi8vIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heSBjb250YWluIGFueSBjaGFyYWN0ZXIgZXhjZXB0IGNsb3NpbmcgYnJhY2tldC5cclxuY29uc3QgX29iamVjdFJlID0gLypAX19QVVJFX18qLyAvKD86XFwuKFdDKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xyXG5cclxuLy8gUHJvcGVydHkgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWQgY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5XHJcbi8vIGNvbnRhaW4gYW55IG5vbi1icmFja2V0IGNoYXJhY3RlcnMuXHJcbmNvbnN0IF9wcm9wZXJ0eVJlID0gLypAX19QVVJFX18qLyAvXFwuKFdDKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcclxuXHJcbmNvbnN0IF90cmFja1JlID0gbmV3IFJlZ0V4cCggJydcclxuXHQrICdeJ1xyXG5cdCsgX2RpcmVjdG9yeVJlXHJcblx0KyBfbm9kZVJlXHJcblx0KyBfb2JqZWN0UmVcclxuXHQrIF9wcm9wZXJ0eVJlXHJcblx0KyAnJCdcclxuKTtcclxuXHJcbmNvbnN0IF9zdXBwb3J0ZWRPYmplY3ROYW1lcyA9IFsgJ21hdGVyaWFsJywgJ21hdGVyaWFscycsICdib25lcycsICdtYXAnIF07XHJcblxyXG5jbGFzcyBDb21wb3NpdGUge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggdGFyZ2V0R3JvdXAsIHBhdGgsIG9wdGlvbmFsUGFyc2VkUGF0aCApIHtcclxuXHJcblx0XHRjb25zdCBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xyXG5cclxuXHRcdHRoaXMuX3RhcmdldEdyb3VwID0gdGFyZ2V0R3JvdXA7XHJcblx0XHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRWYWx1ZSggYXJyYXksIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLmJpbmQoKTsgLy8gYmluZCBhbGwgYmluZGluZ1xyXG5cclxuXHRcdGNvbnN0IGZpcnN0VmFsaWRJbmRleCA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxcclxuXHRcdFx0YmluZGluZyA9IHRoaXMuX2JpbmRpbmdzWyBmaXJzdFZhbGlkSW5kZXggXTtcclxuXHJcblx0XHQvLyBhbmQgb25seSBjYWxsIC5nZXRWYWx1ZSBvbiB0aGUgZmlyc3RcclxuXHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgYmluZGluZy5nZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnNldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGJpbmQoKSB7XHJcblxyXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcclxuXHJcblx0XHRcdGJpbmRpbmdzWyBpIF0uYmluZCgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR1bmJpbmQoKSB7XHJcblxyXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcclxuXHJcblx0XHRcdGJpbmRpbmdzWyBpIF0udW5iaW5kKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vLyBOb3RlOiBUaGlzIGNsYXNzIHVzZXMgYSBTdGF0ZSBwYXR0ZXJuIG9uIGEgcGVyLW1ldGhvZCBiYXNpczpcclxuLy8gJ2JpbmQnIHNldHMgJ3RoaXMuZ2V0VmFsdWUnIC8gJ3NldFZhbHVlJyBhbmQgc2hhZG93cyB0aGVcclxuLy8gcHJvdG90eXBlIHZlcnNpb24gb2YgdGhlc2UgbWV0aG9kcyB3aXRoIG9uZSB0aGF0IHJlcHJlc2VudHNcclxuLy8gdGhlIGJvdW5kIHN0YXRlLiBXaGVuIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQsIHRoZSBtZXRob2RzXHJcbi8vIGJlY29tZSBuby1vcHMuXHJcbmNsYXNzIFByb3BlcnR5QmluZGluZyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCByb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCApIHtcclxuXHJcblx0XHR0aGlzLnBhdGggPSBwYXRoO1xyXG5cdFx0dGhpcy5wYXJzZWRQYXRoID0gcGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcclxuXHJcblx0XHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKTtcclxuXHJcblx0XHR0aGlzLnJvb3ROb2RlID0gcm9vdE5vZGU7XHJcblxyXG5cdFx0Ly8gaW5pdGlhbCBzdGF0ZSBvZiB0aGVzZSBtZXRob2RzIHRoYXQgY2FsbHMgJ2JpbmQnXHJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDtcclxuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHRzdGF0aWMgY3JlYXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICkge1xyXG5cclxuXHRcdGlmICggISAoIHJvb3QgJiYgcm9vdC5pc0FuaW1hdGlvbk9iamVjdEdyb3VwICkgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tXHJcblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC5cclxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XHJcblx0ICovXHJcblx0c3RhdGljIHNhbml0aXplTm9kZU5hbWUoIG5hbWUgKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5hbWUucmVwbGFjZSggL1xccy9nLCAnXycgKS5yZXBsYWNlKCBfcmVzZXJ2ZWRSZSwgJycgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcGFyc2VUcmFja05hbWUoIHRyYWNrTmFtZSApIHtcclxuXHJcblx0XHRjb25zdCBtYXRjaGVzID0gX3RyYWNrUmUuZXhlYyggdHJhY2tOYW1lICk7XHJcblxyXG5cdFx0aWYgKCBtYXRjaGVzID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHJlc3VsdHMgPSB7XHJcblx0XHRcdC8vIGRpcmVjdG9yeU5hbWU6IG1hdGNoZXNbIDEgXSwgLy8gKHRzY2h3KSBjdXJyZW50bHkgdW51c2VkXHJcblx0XHRcdG5vZGVOYW1lOiBtYXRjaGVzWyAyIF0sXHJcblx0XHRcdG9iamVjdE5hbWU6IG1hdGNoZXNbIDMgXSxcclxuXHRcdFx0b2JqZWN0SW5kZXg6IG1hdGNoZXNbIDQgXSxcclxuXHRcdFx0cHJvcGVydHlOYW1lOiBtYXRjaGVzWyA1IF0sIC8vIHJlcXVpcmVkXHJcblx0XHRcdHByb3BlcnR5SW5kZXg6IG1hdGNoZXNbIDYgXVxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBsYXN0RG90ID0gcmVzdWx0cy5ub2RlTmFtZSAmJiByZXN1bHRzLm5vZGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKTtcclxuXHJcblx0XHRpZiAoIGxhc3REb3QgIT09IHVuZGVmaW5lZCAmJiBsYXN0RG90ICE9PSAtIDEgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBvYmplY3ROYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIGxhc3REb3QgKyAxICk7XHJcblxyXG5cdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYW4gYWxsb3dsaXN0LiBPdGhlcndpc2UsIHRoZXJlXHJcblx0XHRcdC8vIGlzIG5vIHdheSB0byBwYXJzZSAnZm9vLmJhci5iYXonOiAnYmF6JyBtdXN0IGJlIGEgcHJvcGVydHksIGJ1dFxyXG5cdFx0XHQvLyAnYmFyJyBjb3VsZCBiZSB0aGUgb2JqZWN0TmFtZSwgb3IgcGFydCBvZiBhIG5vZGVOYW1lICh3aGljaCBjYW5cclxuXHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXHJcblx0XHRcdGlmICggX3N1cHBvcnRlZE9iamVjdE5hbWVzLmluZGV4T2YoIG9iamVjdE5hbWUgKSAhPT0gLSAxICkge1xyXG5cclxuXHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTtcclxuXHRcdFx0XHRyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCApIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogY2FuIG5vdCBwYXJzZSBwcm9wZXJ0eU5hbWUgZnJvbSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZpbmROb2RlKCByb290LCBub2RlTmFtZSApIHtcclxuXHJcblx0XHRpZiAoIG5vZGVOYW1lID09PSB1bmRlZmluZWQgfHwgbm9kZU5hbWUgPT09ICcnIHx8IG5vZGVOYW1lID09PSAnLicgfHwgbm9kZU5hbWUgPT09IC0gMSB8fCBub2RlTmFtZSA9PT0gcm9vdC5uYW1lIHx8IG5vZGVOYW1lID09PSByb290LnV1aWQgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gcm9vdDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2VhcmNoIGludG8gc2tlbGV0b24gYm9uZXMuXHJcblx0XHRpZiAoIHJvb3Quc2tlbGV0b24gKSB7XHJcblxyXG5cdFx0XHRjb25zdCBib25lID0gcm9vdC5za2VsZXRvbi5nZXRCb25lQnlOYW1lKCBub2RlTmFtZSApO1xyXG5cclxuXHRcdFx0aWYgKCBib25lICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBib25lO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZWFyY2ggaW50byBub2RlIHN1YnRyZWUuXHJcblx0XHRpZiAoIHJvb3QuY2hpbGRyZW4gKSB7XHJcblxyXG5cdFx0XHRjb25zdCBzZWFyY2hOb2RlU3VidHJlZSA9IGZ1bmN0aW9uICggY2hpbGRyZW4gKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBjaGlsZE5vZGUgPSBjaGlsZHJlblsgaSBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICggY2hpbGROb2RlLm5hbWUgPT09IG5vZGVOYW1lIHx8IGNoaWxkTm9kZS51dWlkID09PSBub2RlTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZE5vZGU7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IHNlYXJjaE5vZGVTdWJ0cmVlKCBjaGlsZE5vZGUuY2hpbGRyZW4gKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJlc3VsdCApIHJldHVybiByZXN1bHQ7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Y29uc3Qgc3ViVHJlZU5vZGUgPSBzZWFyY2hOb2RlU3VidHJlZSggcm9vdC5jaGlsZHJlbiApO1xyXG5cclxuXHRcdFx0aWYgKCBzdWJUcmVlTm9kZSApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHN1YlRyZWVOb2RlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyB0aGVzZSBhcmUgdXNlZCB0byBcImJpbmRcIiBhIG5vbmV4aXN0ZW50IHByb3BlcnR5XHJcblx0X2dldFZhbHVlX3VuYXZhaWxhYmxlKCkge31cclxuXHRfc2V0VmFsdWVfdW5hdmFpbGFibGUoKSB7fVxyXG5cclxuXHQvLyBHZXR0ZXJzXHJcblxyXG5cdF9nZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXTtcclxuXHJcblx0fVxyXG5cclxuXHRfZ2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IHNvdXJjZSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzb3VyY2UubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgKysgXSA9IHNvdXJjZVsgaSBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfZ2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcclxuXHJcblx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXTtcclxuXHJcblx0fVxyXG5cclxuXHRfZ2V0VmFsdWVfdG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LnRvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gRGlyZWN0XHJcblxyXG5cdF9zZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcclxuXHJcblx0fVxyXG5cclxuXHRfc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBFbnRpcmVBcnJheVxyXG5cclxuXHRfc2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBBcnJheUVsZW1lbnRcclxuXHJcblx0X3NldFZhbHVlX2FycmF5RWxlbWVudCggYnVmZmVyLCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XHJcblxyXG5cdH1cclxuXHJcblx0X3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcclxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIEhhc1RvRnJvbUFycmF5XHJcblxyXG5cdF9zZXRWYWx1ZV9mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcclxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRfc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xyXG5cclxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XHJcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRfZ2V0VmFsdWVfdW5ib3VuZCggdGFyZ2V0QXJyYXksIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLmJpbmQoKTtcclxuXHRcdHRoaXMuZ2V0VmFsdWUoIHRhcmdldEFycmF5LCBvZmZzZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRfc2V0VmFsdWVfdW5ib3VuZCggc291cmNlQXJyYXksIG9mZnNldCApIHtcclxuXHJcblx0XHR0aGlzLmJpbmQoKTtcclxuXHRcdHRoaXMuc2V0VmFsdWUoIHNvdXJjZUFycmF5LCBvZmZzZXQgKTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBjcmVhdGUgZ2V0dGVyIC8gc2V0dGVyIHBhaXIgZm9yIGEgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoXHJcblx0YmluZCgpIHtcclxuXHJcblx0XHRsZXQgdGFyZ2V0T2JqZWN0ID0gdGhpcy5ub2RlO1xyXG5cdFx0Y29uc3QgcGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aDtcclxuXHJcblx0XHRjb25zdCBvYmplY3ROYW1lID0gcGFyc2VkUGF0aC5vYmplY3ROYW1lO1xyXG5cdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gcGFyc2VkUGF0aC5wcm9wZXJ0eU5hbWU7XHJcblx0XHRsZXQgcHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcclxuXHJcblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xyXG5cclxuXHRcdFx0dGFyZ2V0T2JqZWN0ID0gUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlKCB0aGlzLnJvb3ROb2RlLCBwYXJzZWRQYXRoLm5vZGVOYW1lICk7XHJcblxyXG5cdFx0XHR0aGlzLm5vZGUgPSB0YXJnZXRPYmplY3Q7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yXHJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5hdmFpbGFibGU7XHJcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5hdmFpbGFibGU7XHJcblxyXG5cdFx0Ly8gZW5zdXJlIHRoZXJlIGlzIGEgdmFsdWUgbm9kZVxyXG5cdFx0aWYgKCAhIHRhcmdldE9iamVjdCApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogTm8gdGFyZ2V0IG5vZGUgZm91bmQgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJy4nICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvYmplY3ROYW1lICkge1xyXG5cclxuXHRcdFx0bGV0IG9iamVjdEluZGV4ID0gcGFyc2VkUGF0aC5vYmplY3RJbmRleDtcclxuXHJcblx0XHRcdC8vIHNwZWNpYWwgY2FzZXMgd2VyZSB3ZSBuZWVkIHRvIHJlYWNoIGRlZXBlciBpbnRvIHRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSBmYWNlIG1hdGVyaWFscy4uLi5cclxuXHRcdFx0c3dpdGNoICggb2JqZWN0TmFtZSApIHtcclxuXHJcblx0XHRcdFx0Y2FzZSAnbWF0ZXJpYWxzJzpcclxuXHJcblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFsLicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscyApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdib25lcyc6XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5za2VsZXRvbiApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBib25lcyBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBza2VsZXRvbi4nLCB0aGlzICk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gcG90ZW50aWFsIGZ1dHVyZSBvcHRpbWl6YXRpb246IHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlclxyXG5cdFx0XHRcdFx0Ly8gYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxyXG5cclxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5za2VsZXRvbi5ib25lcztcclxuXHJcblx0XHRcdFx0XHQvLyBzdXBwb3J0IHJlc29sdmluZyBtb3JwaFRhcmdldCBuYW1lcyBpbnRvIGluZGljZXMuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIGkgXS5uYW1lID09PSBvYmplY3RJbmRleCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0b2JqZWN0SW5kZXggPSBpO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAnbWFwJzpcclxuXHJcblx0XHRcdFx0XHRpZiAoICdtYXAnIGluIHRhcmdldE9iamVjdCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFsLicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hcCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXAgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWFwLicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWFwO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG9iamVjdE5hbWUgb2Ygbm9kZSB1bmRlZmluZWQuJywgdGhpcyApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGlmICggb2JqZWN0SW5kZXggIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCApO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0SW5kZXggXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmVzb2x2ZSBwcm9wZXJ0eVxyXG5cdFx0Y29uc3Qgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTtcclxuXHJcblx0XHRpZiAoIG5vZGVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgbm9kZU5hbWUgPSBwYXJzZWRQYXRoLm5vZGVOYW1lO1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6ICcgKyBub2RlTmFtZSArXHJcblx0XHRcdFx0Jy4nICsgcHJvcGVydHlOYW1lICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJywgdGFyZ2V0T2JqZWN0ICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZGV0ZXJtaW5lIHZlcnNpb25pbmcgc2NoZW1lXHJcblx0XHRsZXQgdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5Ob25lO1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0O1xyXG5cclxuXHRcdGlmICggdGFyZ2V0T2JqZWN0LmlzTWF0ZXJpYWwgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5lZWRzVXBkYXRlO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHRhcmdldE9iamVjdC5pc09iamVjdDNEID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBkZXRlcm1pbmUgaG93IHRoZSBwcm9wZXJ0eSBnZXRzIGJvdW5kXHJcblx0XHRsZXQgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtcclxuXHJcblx0XHRpZiAoIHByb3BlcnR5SW5kZXggIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdC8vIGFjY2VzcyBhIHN1YiBlbGVtZW50IG9mIHRoZSBwcm9wZXJ0eSBhcnJheSAob25seSBwcmltaXRpdmVzIGFyZSBzdXBwb3J0ZWQgcmlnaHQgbm93KVxyXG5cclxuXHRcdFx0aWYgKCBwcm9wZXJ0eU5hbWUgPT09ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnICkge1xyXG5cclxuXHRcdFx0XHQvLyBwb3RlbnRpYWwgb3B0aW1pemF0aW9uLCBza2lwIHRoaXMgaWYgcHJvcGVydHlJbmRleCBpcyBhbHJlYWR5IGFuIGludGVnZXIsIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cclxuXHJcblx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxyXG5cdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyApIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLicsIHRoaXMgKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdHByb3BlcnR5SW5kZXggPSB0YXJnZXRPYmplY3QubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBwcm9wZXJ0eUluZGV4IF07XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7XHJcblxyXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XHJcblx0XHRcdHRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggbm9kZVByb3BlcnR5LmZyb21BcnJheSAhPT0gdW5kZWZpbmVkICYmIG5vZGVQcm9wZXJ0eS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHQvLyBtdXN0IHVzZSBjb3B5IGZvciBPYmplY3QzRC5FdWxlci9RdWF0ZXJuaW9uXHJcblxyXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuSGFzRnJvbVRvQXJyYXk7XHJcblxyXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggbm9kZVByb3BlcnR5ICkgKSB7XHJcblxyXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRW50aXJlQXJyYXk7XHJcblxyXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZWxlY3QgZ2V0dGVyIC8gc2V0dGVyXHJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlWyBiaW5kaW5nVHlwZSBdO1xyXG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmdbIGJpbmRpbmdUeXBlIF1bIHZlcnNpb25pbmcgXTtcclxuXHJcblx0fVxyXG5cclxuXHR1bmJpbmQoKSB7XHJcblxyXG5cdFx0dGhpcy5ub2RlID0gbnVsbDtcclxuXHJcblx0XHQvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlXHJcblx0XHQvLyBub3RlOiBhdm9pZGluZyB0byBtdXRhdGUgdGhlIHNoYXBlIG9mICd0aGlzJyB2aWEgJ2RlbGV0ZSdcclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xyXG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblByb3BlcnR5QmluZGluZy5Db21wb3NpdGUgPSBDb21wb3NpdGU7XHJcblxyXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLkJpbmRpbmdUeXBlID0ge1xyXG5cdERpcmVjdDogMCxcclxuXHRFbnRpcmVBcnJheTogMSxcclxuXHRBcnJheUVsZW1lbnQ6IDIsXHJcblx0SGFzRnJvbVRvQXJyYXk6IDNcclxufTtcclxuXHJcblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuVmVyc2lvbmluZyA9IHtcclxuXHROb25lOiAwLFxyXG5cdE5lZWRzVXBkYXRlOiAxLFxyXG5cdE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDJcclxufTtcclxuXHJcblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuR2V0dGVyQnlCaW5kaW5nVHlwZSA9IFtcclxuXHJcblx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fZ2V0VmFsdWVfZGlyZWN0LFxyXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX2FycmF5LFxyXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX2FycmF5RWxlbWVudCxcclxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV90b0FycmF5LFxyXG5cclxuXTtcclxuXHJcblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmcgPSBbXHJcblxyXG5cdFtcclxuXHRcdC8vIERpcmVjdFxyXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0LFxyXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlLFxyXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXHJcblxyXG5cdF0sIFtcclxuXHJcblx0XHQvLyBFbnRpcmVBcnJheVxyXG5cclxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5LFxyXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUsXHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxyXG5cclxuXHRdLCBbXHJcblxyXG5cdFx0Ly8gQXJyYXlFbGVtZW50XHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnQsXHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUsXHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSxcclxuXHJcblx0XSwgW1xyXG5cclxuXHRcdC8vIEhhc1RvRnJvbUFycmF5XHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXksXHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUsXHJcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSxcclxuXHJcblx0XVxyXG5cclxuXTtcclxuXHJcblxyXG5leHBvcnQgeyBQcm9wZXJ0eUJpbmRpbmcgfTtcclxuIiwiaW1wb3J0IHsgUHJvcGVydHlCaW5kaW5nIH0gZnJvbSAnLi9Qcm9wZXJ0eUJpbmRpbmcuanMnO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcblxyXG4vKipcclxuICpcclxuICogQSBncm91cCBvZiBvYmplY3RzIHRoYXQgcmVjZWl2ZXMgYSBzaGFyZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICpcclxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcclxuICogICAgY29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cclxuICpcclxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cclxuICpcclxuICogIC0gWW91IGNhbiBhbHNvIGFkZCBhbmQgcmVtb3ZlIG9iamVjdHMgbGF0ZXIgd2hlbiB0aGUgbWl4ZXJcclxuICogICAgaXMgcnVubmluZy5cclxuICpcclxuICogTm90ZTpcclxuICpcclxuICogICAgT2JqZWN0cyBvZiB0aGlzIGNsYXNzIGFwcGVhciBhcyBvbmUgb2JqZWN0IHRvIHRoZSBtaXhlcixcclxuICogICAgc28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZVxyXG4gKiAgICBvbiB0aGUgZ3JvdXAuXHJcbiAqXHJcbiAqIExpbWl0YXRpb246XHJcbiAqXHJcbiAqICAtIFRoZSBhbmltYXRlZCBwcm9wZXJ0aWVzIG11c3QgYmUgY29tcGF0aWJsZSBhbW9uZyB0aGVcclxuICogICAgYWxsIG9iamVjdHMgaW4gdGhlIGdyb3VwLlxyXG4gKlxyXG4gKiAgLSBBIHNpbmdsZSBwcm9wZXJ0eSBjYW4gZWl0aGVyIGJlIGNvbnRyb2xsZWQgdGhyb3VnaCBhXHJcbiAqICAgIHRhcmdldCBncm91cCBvciBkaXJlY3RseSwgYnV0IG5vdCBib3RoLlxyXG4gKi9cclxuXHJcbmNsYXNzIEFuaW1hdGlvbk9iamVjdEdyb3VwIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0dGhpcy5pc0FuaW1hdGlvbk9iamVjdEdyb3VwID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuXHJcblx0XHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcclxuXHRcdHRoaXMuX29iamVjdHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XHJcblxyXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGRcclxuXHRcdC8vIG5vdGU6IHJlYWQgYnkgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZVxyXG5cclxuXHRcdGNvbnN0IGluZGljZXMgPSB7fTtcclxuXHRcdHRoaXMuX2luZGljZXNCeVVVSUQgPSBpbmRpY2VzOyAvLyBmb3IgYm9va2tlZXBpbmdcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0aW5kaWNlc1sgYXJndW1lbnRzWyBpIF0udXVpZCBdID0gaTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fcGF0aHMgPSBbXTsgLy8gaW5zaWRlOiBzdHJpbmdcclxuXHRcdHRoaXMuX3BhcnNlZFBhdGhzID0gW107IC8vIGluc2lkZTogeyB3ZSBkb24ndCBjYXJlLCBoZXJlIH1cclxuXHRcdHRoaXMuX2JpbmRpbmdzID0gW107IC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+XHJcblx0XHR0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGggPSB7fTsgLy8gaW5zaWRlOiBpbmRpY2VzIGluIHRoZXNlIGFycmF5c1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR0aGlzLnN0YXRzID0ge1xyXG5cclxuXHRcdFx0b2JqZWN0czoge1xyXG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX29iamVjdHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRnZXQgYmluZGluZ3NQZXJPYmplY3QoKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBzY29wZS5fYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCkge1xyXG5cclxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxyXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcclxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcclxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdGxldCBrbm93bk9iamVjdCA9IHVuZGVmaW5lZCxcclxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcclxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXHJcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkO1xyXG5cdFx0XHRsZXQgaW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XHJcblxyXG5cdFx0XHRpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHVua25vd24gb2JqZWN0IC0+IGFkZCBpdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxyXG5cclxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xyXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGluZGV4O1xyXG5cdFx0XHRcdG9iamVjdHMucHVzaCggb2JqZWN0ICk7XHJcblxyXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xyXG5cclxuXHRcdFx0XHRcdGJpbmRpbmdzWyBqIF0ucHVzaCggbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoc1sgaiBdLCBwYXJzZWRQYXRoc1sgaiBdICkgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcclxuXHJcblx0XHRcdFx0a25vd25PYmplY3QgPSBvYmplY3RzWyBpbmRleCBdO1xyXG5cclxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxyXG5cclxuXHRcdFx0XHRjb25zdCBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXHJcblx0XHRcdFx0XHRsYXN0Q2FjaGVkT2JqZWN0ID0gb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xyXG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xyXG5cdFx0XHRcdG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IG9iamVjdDtcclxuXHJcblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcclxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdGxldCBiaW5kaW5nID0gYmluZGluZ3NGb3JQYXRoWyBpbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzaW5jZSB3ZSBkbyBub3QgYm90aGVyIHRvIGNyZWF0ZSBuZXcgYmluZGluZ3NcclxuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcclxuXHRcdFx0XHRcdFx0Ly8gb3IgbWF5IG5vdCBleGlzdFxyXG5cclxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdHNbIGluZGV4IF0gIT09IGtub3duT2JqZWN0ICkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uT2JqZWN0R3JvdXA6IERpZmZlcmVudCBvYmplY3RzIHdpdGggdGhlIHNhbWUgVVVJRCAnICtcclxuXHRcdFx0XHRcdCdkZXRlY3RlZC4gQ2xlYW4gdGhlIGNhY2hlcyBvciByZWNyZWF0ZSB5b3VyIGluZnJhc3RydWN0dXJlIHdoZW4gcmVsb2FkaW5nIHNjZW5lcy4nICk7XHJcblxyXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcclxuXHJcblx0XHR9IC8vIGZvciBhcmd1bWVudHNcclxuXHJcblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlbW92ZSgpIHtcclxuXHJcblx0XHRjb25zdCBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcclxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXHJcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXHJcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcclxuXHJcblx0XHRsZXQgbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXHJcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxyXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkge1xyXG5cclxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCBpbnRvIHRoZSBDQUNIRUQgcmVnaW9uXHJcblxyXG5cdFx0XHRcdGNvbnN0IGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxyXG5cdFx0XHRcdFx0Zmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXTtcclxuXHJcblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XHJcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGZpcnN0QWN0aXZlT2JqZWN0O1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XHJcblx0XHRcdFx0b2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF0gPSBvYmplY3Q7XHJcblxyXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXHJcblx0XHRcdFx0XHRcdGZpcnN0QWN0aXZlID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0Q2FjaGVkSW5kZXggXSxcclxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZTtcclxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXHJcblxyXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcclxuXHJcblx0fVxyXG5cclxuXHQvLyByZW1vdmUgJiBmb3JnZXRcclxuXHR1bmNhY2hlKCkge1xyXG5cclxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxyXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdGxldCBuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxyXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcclxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXHJcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XHJcblxyXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdGRlbGV0ZSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XHJcblxyXG5cdFx0XHRcdGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cclxuXHJcblx0XHRcdFx0XHRjb25zdCBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXHJcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0sXHJcblx0XHRcdFx0XHRcdGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxyXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gbGFzdCBjYWNoZWQgb2JqZWN0IHRha2VzIHRoaXMgb2JqZWN0J3MgcGxhY2VcclxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7XHJcblx0XHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcclxuXHJcblx0XHRcdFx0XHQvLyBsYXN0IG9iamVjdCBnb2VzIHRvIHRoZSBhY3RpdmF0ZWQgc2xvdCBhbmQgcG9wXHJcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7XHJcblx0XHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0T2JqZWN0O1xyXG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcclxuXHJcblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcclxuXHRcdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0sXHJcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xyXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XHJcblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aC5wb3AoKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gb2JqZWN0IGlzIGFjdGl2ZSwganVzdCBzd2FwIHdpdGggdGhlIGxhc3QgYW5kIHBvcFxyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxyXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBpbmRleDtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XHJcblx0XHRcdFx0XHRvYmplY3RzLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpbmRleCBdID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0SW5kZXggXTtcclxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXHJcblxyXG5cdFx0XHR9IC8vIGlmIG9iamVjdCBpcyBrbm93blxyXG5cclxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xyXG5cclxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gSW50ZXJuYWwgaW50ZXJmYWNlIHVzZWQgYnkgYmVmcmllbmRlZCBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlOlxyXG5cclxuXHRzdWJzY3JpYmVfKCBwYXRoLCBwYXJzZWRQYXRoICkge1xyXG5cclxuXHRcdC8vIHJldHVybnMgYW4gYXJyYXkgb2YgYmluZGluZ3MgZm9yIHRoZSBnaXZlbiBwYXRoIHRoYXQgaXMgY2hhbmdlZFxyXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoO1xyXG5cdFx0bGV0IGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xyXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYmluZGluZ3NbIGluZGV4IF07XHJcblxyXG5cdFx0Y29uc3QgcGF0aHMgPSB0aGlzLl9wYXRocyxcclxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcclxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXHJcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXHJcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXHJcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcclxuXHJcblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcclxuXHJcblx0XHRpbmRpY2VzQnlQYXRoWyBwYXRoIF0gPSBpbmRleDtcclxuXHJcblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XHJcblx0XHRwYXJzZWRQYXRocy5wdXNoKCBwYXJzZWRQYXRoICk7XHJcblx0XHRiaW5kaW5ncy5wdXNoKCBiaW5kaW5nc0ZvclBhdGggKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IG5DYWNoZWRPYmplY3RzLCBuID0gb2JqZWN0cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBvYmplY3QgPSBvYmplY3RzWyBpIF07XHJcblx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaSBdID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoLCBwYXJzZWRQYXRoICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XHJcblxyXG5cdH1cclxuXHJcblx0dW5zdWJzY3JpYmVfKCBwYXRoICkge1xyXG5cclxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcclxuXHRcdC8vIHVwZGF0ZSB0aGUgYXJyYXkgcHJldmlvdXNseSBvYnRhaW5lZCB3aXRoICdzdWJzY3JpYmVfJ1xyXG5cclxuXHRcdGNvbnN0IGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGgsXHJcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xyXG5cclxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGNvbnN0IHBhdGhzID0gdGhpcy5fcGF0aHMsXHJcblx0XHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcclxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxyXG5cdFx0XHRcdGxhc3RCaW5kaW5nc0luZGV4ID0gYmluZGluZ3MubGVuZ3RoIC0gMSxcclxuXHRcdFx0XHRsYXN0QmluZGluZ3MgPSBiaW5kaW5nc1sgbGFzdEJpbmRpbmdzSW5kZXggXSxcclxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcclxuXHJcblx0XHRcdGluZGljZXNCeVBhdGhbIGxhc3RCaW5kaW5nc1BhdGggXSA9IGluZGV4O1xyXG5cclxuXHRcdFx0YmluZGluZ3NbIGluZGV4IF0gPSBsYXN0QmluZGluZ3M7XHJcblx0XHRcdGJpbmRpbmdzLnBvcCgpO1xyXG5cclxuXHRcdFx0cGFyc2VkUGF0aHNbIGluZGV4IF0gPSBwYXJzZWRQYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcclxuXHRcdFx0cGFyc2VkUGF0aHMucG9wKCk7XHJcblxyXG5cdFx0XHRwYXRoc1sgaW5kZXggXSA9IHBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdO1xyXG5cdFx0XHRwYXRocy5wb3AoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFuaW1hdGlvbk9iamVjdEdyb3VwIH07XHJcbiIsImltcG9ydCB7IFdyYXBBcm91bmRFbmRpbmcsIFplcm9DdXJ2YXR1cmVFbmRpbmcsIFplcm9TbG9wZUVuZGluZywgTG9vcFBpbmdQb25nLCBMb29wT25jZSwgTG9vcFJlcGVhdCwgTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlLCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5cclxuY2xhc3MgQW5pbWF0aW9uQWN0aW9uIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgPSBudWxsLCBibGVuZE1vZGUgPSBjbGlwLmJsZW5kTW9kZSApIHtcclxuXHJcblx0XHR0aGlzLl9taXhlciA9IG1peGVyO1xyXG5cdFx0dGhpcy5fY2xpcCA9IGNsaXA7XHJcblx0XHR0aGlzLl9sb2NhbFJvb3QgPSBsb2NhbFJvb3Q7XHJcblx0XHR0aGlzLmJsZW5kTW9kZSA9IGJsZW5kTW9kZTtcclxuXHJcblx0XHRjb25zdCB0cmFja3MgPSBjbGlwLnRyYWNrcyxcclxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXHJcblx0XHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xyXG5cclxuXHRcdGNvbnN0IGludGVycG9sYW50U2V0dGluZ3MgPSB7XHJcblx0XHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxyXG5cdFx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcclxuXHRcdH07XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuVHJhY2tzOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSB0cmFja3NbIGkgXS5jcmVhdGVJbnRlcnBvbGFudCggbnVsbCApO1xyXG5cdFx0XHRpbnRlcnBvbGFudHNbIGkgXSA9IGludGVycG9sYW50O1xyXG5cdFx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xyXG5cclxuXHRcdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50czsgLy8gYm91bmQgYnkgdGhlIG1peGVyXHJcblxyXG5cdFx0Ly8gaW5zaWRlOiBQcm9wZXJ0eU1peGVyIChtYW5hZ2VkIGJ5IHRoZSBtaXhlcilcclxuXHRcdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcclxuXHJcblx0XHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxyXG5cdFx0dGhpcy5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXJcclxuXHJcblx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IG51bGw7XHJcblx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcclxuXHRcdHRoaXMuX2xvb3BDb3VudCA9IC0gMTtcclxuXHJcblx0XHQvLyBnbG9iYWwgbWl4ZXIgdGltZSB3aGVuIHRoZSBhY3Rpb24gaXMgdG8gYmUgc3RhcnRlZFxyXG5cdFx0Ly8gaXQncyBzZXQgYmFjayB0byAnbnVsbCcgdXBvbiBzdGFydCBvZiB0aGUgYWN0aW9uXHJcblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xyXG5cclxuXHRcdC8vIHNjYWxlZCBsb2NhbCB0aW1lIG9mIHRoZSBhY3Rpb25cclxuXHRcdC8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3BcclxuXHRcdHRoaXMudGltZSA9IDA7XHJcblxyXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxO1xyXG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTtcclxuXHJcblx0XHR0aGlzLndlaWdodCA9IDE7XHJcblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSAxO1xyXG5cclxuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xyXG5cclxuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7IC8vIHRydWUgLT4gemVybyBlZmZlY3RpdmUgdGltZSBzY2FsZVxyXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTsgLy8gZmFsc2UgLT4gemVybyBlZmZlY3RpdmUgd2VpZ2h0XHJcblxyXG5cdFx0dGhpcy5jbGFtcFdoZW5GaW5pc2hlZCA9IGZhbHNlOy8vIGtlZXAgZmVlZGluZyB0aGUgbGFzdCBmcmFtZT9cclxuXHJcblx0XHR0aGlzLnplcm9TbG9wZUF0U3RhcnQgPSB0cnVlOy8vIGZvciBzbW9vdGggaW50ZXJwb2xhdGlvbiB3L28gc2VwYXJhdGVcclxuXHRcdHRoaXMuemVyb1Nsb3BlQXRFbmQgPSB0cnVlOy8vIGNsaXBzIGZvciBzdGFydCwgbG9vcCBhbmQgZW5kXHJcblxyXG5cdH1cclxuXHJcblx0Ly8gU3RhdGUgJiBTY2hlZHVsaW5nXHJcblxyXG5cdHBsYXkoKSB7XHJcblxyXG5cdFx0dGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKCB0aGlzICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c3RvcCgpIHtcclxuXHJcblx0XHR0aGlzLl9taXhlci5fZGVhY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnJlc2V0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0cmVzZXQoKSB7XHJcblxyXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gcmVzdGFydCBjbGlwXHJcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtIDE7Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXHJcblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsOy8vIGZvcmdldCBzY2hlZHVsaW5nXHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdH1cclxuXHJcblx0aXNSdW5uaW5nKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVuYWJsZWQgJiYgISB0aGlzLnBhdXNlZCAmJiB0aGlzLnRpbWVTY2FsZSAhPT0gMCAmJlxyXG5cdFx0XHR0aGlzLl9zdGFydFRpbWUgPT09IG51bGwgJiYgdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcmV0dXJuIHRydWUgd2hlbiBwbGF5IGhhcyBiZWVuIGNhbGxlZFxyXG5cdGlzU2NoZWR1bGVkKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRzdGFydEF0KCB0aW1lICkge1xyXG5cclxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TG9vcCggbW9kZSwgcmVwZXRpdGlvbnMgKSB7XHJcblxyXG5cdFx0dGhpcy5sb29wID0gbW9kZTtcclxuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBXZWlnaHRcclxuXHJcblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcclxuXHQvLyBhbHRob3VnaCAuZW5hYmxlZCA9IGZhbHNlIHlpZWxkcyBhbiBlZmZlY3RpdmUgd2VpZ2h0IG9mIHplcm8sIHRoaXNcclxuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLmVuYWJsZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXHJcblx0c2V0RWZmZWN0aXZlV2VpZ2h0KCB3ZWlnaHQgKSB7XHJcblxyXG5cdFx0dGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcblxyXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxyXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcmV0dXJuIHRoZSB3ZWlnaHQgY29uc2lkZXJpbmcgZmFkaW5nIGFuZCAuZW5hYmxlZFxyXG5cdGdldEVmZmVjdGl2ZVdlaWdodCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0O1xyXG5cclxuXHR9XHJcblxyXG5cdGZhZGVJbiggZHVyYXRpb24gKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZhZGVPdXQoIGR1cmF0aW9uICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDEsIDAgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjcm9zc0ZhZGVGcm9tKCBmYWRlT3V0QWN0aW9uLCBkdXJhdGlvbiwgd2FycCApIHtcclxuXHJcblx0XHRmYWRlT3V0QWN0aW9uLmZhZGVPdXQoIGR1cmF0aW9uICk7XHJcblx0XHR0aGlzLmZhZGVJbiggZHVyYXRpb24gKTtcclxuXHJcblx0XHRpZiAoIHdhcnAgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBmYWRlSW5EdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb24sXHJcblx0XHRcdFx0ZmFkZU91dER1cmF0aW9uID0gZmFkZU91dEFjdGlvbi5fY2xpcC5kdXJhdGlvbixcclxuXHJcblx0XHRcdFx0c3RhcnRFbmRSYXRpbyA9IGZhZGVPdXREdXJhdGlvbiAvIGZhZGVJbkR1cmF0aW9uLFxyXG5cdFx0XHRcdGVuZFN0YXJ0UmF0aW8gPSBmYWRlSW5EdXJhdGlvbiAvIGZhZGVPdXREdXJhdGlvbjtcclxuXHJcblx0XHRcdGZhZGVPdXRBY3Rpb24ud2FycCggMS4wLCBzdGFydEVuZFJhdGlvLCBkdXJhdGlvbiApO1xyXG5cdFx0XHR0aGlzLndhcnAoIGVuZFN0YXJ0UmF0aW8sIDEuMCwgZHVyYXRpb24gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y3Jvc3NGYWRlVG8oIGZhZGVJbkFjdGlvbiwgZHVyYXRpb24sIHdhcnAgKSB7XHJcblxyXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0b3BGYWRpbmcoKSB7XHJcblxyXG5cdFx0Y29uc3Qgd2VpZ2h0SW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcclxuXHJcblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xyXG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIFRpbWUgU2NhbGUgQ29udHJvbFxyXG5cclxuXHQvLyBzZXQgdGhlIHRpbWUgc2NhbGUgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCB3YXJwaW5nXHJcblx0Ly8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXNcclxuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLnBhdXNlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcclxuXHRzZXRFZmZlY3RpdmVUaW1lU2NhbGUoIHRpbWVTY2FsZSApIHtcclxuXHJcblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcclxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRoaXMucGF1c2VkID8gMCA6IHRpbWVTY2FsZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIHJldHVybiB0aGUgdGltZSBzY2FsZSBjb25zaWRlcmluZyB3YXJwaW5nIGFuZCAucGF1c2VkXHJcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RHVyYXRpb24oIGR1cmF0aW9uICkge1xyXG5cclxuXHRcdHRoaXMudGltZVNjYWxlID0gdGhpcy5fY2xpcC5kdXJhdGlvbiAvIGR1cmF0aW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdH1cclxuXHJcblx0c3luY1dpdGgoIGFjdGlvbiApIHtcclxuXHJcblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcclxuXHRcdHRoaXMudGltZVNjYWxlID0gYWN0aW9uLnRpbWVTY2FsZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGhhbHQoIGR1cmF0aW9uICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHR3YXJwKCBzdGFydFRpbWVTY2FsZSwgZW5kVGltZVNjYWxlLCBkdXJhdGlvbiApIHtcclxuXHJcblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLFxyXG5cdFx0XHRub3cgPSBtaXhlci50aW1lLFxyXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcclxuXHJcblx0XHRsZXQgaW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcclxuXHJcblx0XHRpZiAoIGludGVycG9sYW50ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xyXG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IGludGVycG9sYW50O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcclxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xyXG5cclxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XHJcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XHJcblxyXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcclxuXHRcdHZhbHVlc1sgMSBdID0gZW5kVGltZVNjYWxlIC8gdGltZVNjYWxlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHN0b3BXYXJwaW5nKCkge1xyXG5cclxuXHRcdGNvbnN0IHRpbWVTY2FsZUludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDtcclxuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBPYmplY3QgQWNjZXNzb3JzXHJcblxyXG5cdGdldE1peGVyKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRDbGlwKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldFJvb3QoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBJbnRlcm5hXHJcblxyXG5cdF91cGRhdGUoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xyXG5cclxuXHRcdC8vIGNhbGxlZCBieSB0aGUgbWl4ZXJcclxuXHJcblx0XHRpZiAoICEgdGhpcy5lbmFibGVkICkge1xyXG5cclxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxyXG5cclxuXHRcdFx0dGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc3RhcnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lO1xyXG5cclxuXHRcdGlmICggc3RhcnRUaW1lICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cclxuXHJcblx0XHRcdGNvbnN0IHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xyXG5cdFx0XHRpZiAoIHRpbWVSdW5uaW5nIDwgMCB8fCB0aW1lRGlyZWN0aW9uID09PSAwICkge1xyXG5cclxuXHRcdFx0XHRkZWx0YVRpbWUgPSAwO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblxyXG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7IC8vIHVuc2NoZWR1bGVcclxuXHRcdFx0XHRkZWx0YVRpbWUgPSB0aW1lRGlyZWN0aW9uICogdGltZVJ1bm5pbmc7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFwcGx5IHRpbWUgc2NhbGUgYW5kIGFkdmFuY2UgdGltZVxyXG5cclxuXHRcdGRlbHRhVGltZSAqPSB0aGlzLl91cGRhdGVUaW1lU2NhbGUoIHRpbWUgKTtcclxuXHRcdGNvbnN0IGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XHJcblxyXG5cdFx0Ly8gbm90ZTogX3VwZGF0ZVRpbWUgbWF5IGRpc2FibGUgdGhlIGFjdGlvbiByZXN1bHRpbmcgaW5cclxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxyXG5cclxuXHRcdGNvbnN0IHdlaWdodCA9IHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xyXG5cclxuXHRcdGlmICggd2VpZ2h0ID4gMCApIHtcclxuXHJcblx0XHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2ludGVycG9sYW50cztcclxuXHRcdFx0Y29uc3QgcHJvcGVydHlNaXhlcnMgPSB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cclxuXHRcdFx0c3dpdGNoICggdGhpcy5ibGVuZE1vZGUgKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGU6XHJcblxyXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcclxuXHJcblx0XHRcdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xyXG5cdFx0XHRcdFx0XHRwcm9wZXJ0eU1peGVyc1sgaiBdLmFjY3VtdWxhdGVBZGRpdGl2ZSggd2VpZ2h0ICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZTpcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cclxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IGludGVycG9sYW50cy5sZW5ndGg7IGogIT09IG07ICsrIGogKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcclxuXHRcdFx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0X3VwZGF0ZVdlaWdodCggdGltZSApIHtcclxuXHJcblx0XHRsZXQgd2VpZ2h0ID0gMDtcclxuXHJcblx0XHRpZiAoIHRoaXMuZW5hYmxlZCApIHtcclxuXHJcblx0XHRcdHdlaWdodCA9IHRoaXMud2VpZ2h0O1xyXG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xyXG5cclxuXHRcdFx0aWYgKCBpbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW50ZXJwb2xhbnRWYWx1ZSA9IGludGVycG9sYW50LmV2YWx1YXRlKCB0aW1lIClbIDAgXTtcclxuXHJcblx0XHRcdFx0d2VpZ2h0ICo9IGludGVycG9sYW50VmFsdWU7XHJcblxyXG5cdFx0XHRcdGlmICggdGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sgMSBdICkge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuc3RvcEZhZGluZygpO1xyXG5cclxuXHRcdFx0XHRcdGlmICggaW50ZXJwb2xhbnRWYWx1ZSA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGZhZGVkIG91dCwgZGlzYWJsZVxyXG5cdFx0XHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gd2VpZ2h0O1xyXG5cdFx0cmV0dXJuIHdlaWdodDtcclxuXHJcblx0fVxyXG5cclxuXHRfdXBkYXRlVGltZVNjYWxlKCB0aW1lICkge1xyXG5cclxuXHRcdGxldCB0aW1lU2NhbGUgPSAwO1xyXG5cclxuXHRcdGlmICggISB0aGlzLnBhdXNlZCApIHtcclxuXHJcblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xyXG5cclxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcclxuXHJcblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XHJcblxyXG5cdFx0XHRcdHRpbWVTY2FsZSAqPSBpbnRlcnBvbGFudFZhbHVlO1xyXG5cclxuXHRcdFx0XHRpZiAoIHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbIDEgXSApIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0aW1lU2NhbGUgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBtb3Rpb24gaGFzIGhhbHRlZCwgcGF1c2VcclxuXHRcdFx0XHRcdFx0dGhpcy5wYXVzZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXHJcblx0XHRcdFx0XHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aW1lU2NhbGU7XHJcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xyXG5cclxuXHR9XHJcblxyXG5cdF91cGRhdGVUaW1lKCBkZWx0YVRpbWUgKSB7XHJcblxyXG5cdFx0Y29uc3QgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uO1xyXG5cdFx0Y29uc3QgbG9vcCA9IHRoaXMubG9vcDtcclxuXHJcblx0XHRsZXQgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcclxuXHRcdGxldCBsb29wQ291bnQgPSB0aGlzLl9sb29wQ291bnQ7XHJcblxyXG5cdFx0Y29uc3QgcGluZ1BvbmcgPSAoIGxvb3AgPT09IExvb3BQaW5nUG9uZyApO1xyXG5cclxuXHRcdGlmICggZGVsdGFUaW1lID09PSAwICkge1xyXG5cclxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHJldHVybiB0aW1lO1xyXG5cclxuXHRcdFx0cmV0dXJuICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbG9vcCA9PT0gTG9vcE9uY2UgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xyXG5cclxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcclxuXHJcblx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gMDtcclxuXHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcclxuXHJcblx0XHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uICkge1xyXG5cclxuXHRcdFx0XHRcdHRpbWUgPSBkdXJhdGlvbjtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZSA9IDA7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcclxuXHJcblx0XHRcdFx0XHRicmVhayBoYW5kbGVfc3RvcDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XHJcblx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcclxuXHJcblx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xyXG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxyXG5cdFx0XHRcdFx0ZGlyZWN0aW9uOiBkZWx0YVRpbWUgPCAwID8gLSAxIDogMVxyXG5cdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xyXG5cclxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcclxuXHJcblx0XHRcdFx0Ly8ganVzdCBzdGFydGVkXHJcblxyXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0bG9vcENvdW50ID0gMDtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCBwaW5nUG9uZyApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIHdoZW4gbG9vcGluZyBpbiByZXZlcnNlIGRpcmVjdGlvbiwgdGhlIGluaXRpYWxcclxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXHJcblx0XHRcdFx0XHQvLyBzbyBsZWF2ZSBsb29wQ291bnQgYXQgLTFcclxuXHJcblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHdyYXAgYXJvdW5kXHJcblxyXG5cdFx0XHRcdGNvbnN0IGxvb3BEZWx0YSA9IE1hdGguZmxvb3IoIHRpbWUgLyBkdXJhdGlvbiApOyAvLyBzaWduZWRcclxuXHRcdFx0XHR0aW1lIC09IGR1cmF0aW9uICogbG9vcERlbHRhO1xyXG5cclxuXHRcdFx0XHRsb29wQ291bnQgKz0gTWF0aC5hYnMoIGxvb3BEZWx0YSApO1xyXG5cclxuXHRcdFx0XHRjb25zdCBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcclxuXHJcblx0XHRcdFx0aWYgKCBwZW5kaW5nIDw9IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gaGF2ZSB0byBzdG9wIChzd2l0Y2ggc3RhdGUsIGNsYW1wIHRpbWUsIGZpcmUgZXZlbnQpXHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxyXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA+IDAgPyAxIDogLSAxXHJcblx0XHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8ga2VlcCBydW5uaW5nXHJcblxyXG5cdFx0XHRcdFx0aWYgKCBwZW5kaW5nID09PSAxICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcclxuXHJcblx0XHRcdFx0XHRcdGNvbnN0IGF0U3RhcnQgPSBkZWx0YVRpbWUgPCAwO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIGZhbHNlLCBmYWxzZSwgcGluZ1BvbmcgKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gbG9vcENvdW50O1xyXG5cclxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnbG9vcCcsIGFjdGlvbjogdGhpcywgbG9vcERlbHRhOiBsb29wRGVsdGFcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdC8vIGludmVydCB0aW1lIGZvciB0aGUgXCJwb25nIHJvdW5kXCJcclxuXHJcblx0XHRcdFx0cmV0dXJuIGR1cmF0aW9uIC0gdGltZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRpbWU7XHJcblxyXG5cdH1cclxuXHJcblx0X3NldEVuZGluZ3MoIGF0U3RhcnQsIGF0RW5kLCBwaW5nUG9uZyApIHtcclxuXHJcblx0XHRjb25zdCBzZXR0aW5ncyA9IHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M7XHJcblxyXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcclxuXHJcblx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gWmVyb1Nsb3BlRW5kaW5nO1xyXG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGFzc3VtaW5nIGZvciBMb29wT25jZSBhdFN0YXJ0ID09IGF0RW5kID09IHRydWVcclxuXHJcblx0XHRcdGlmICggYXRTdGFydCApIHtcclxuXHJcblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSB0aGlzLnplcm9TbG9wZUF0U3RhcnQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBXcmFwQXJvdW5kRW5kaW5nO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBhdEVuZCApIHtcclxuXHJcblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgXHQgPSBXcmFwQXJvdW5kRW5kaW5nO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7XHJcblxyXG5cdFx0Y29uc3QgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZTtcclxuXHRcdGxldCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xyXG5cclxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XHJcblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxyXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XHJcblxyXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcclxuXHRcdHZhbHVlc1sgMCBdID0gd2VpZ2h0Tm93O1xyXG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xyXG5cdFx0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgQW5pbWF0aW9uQWN0aW9uIH07XHJcbiIsImltcG9ydCB7IEFuaW1hdGlvbkFjdGlvbiB9IGZyb20gJy4vQW5pbWF0aW9uQWN0aW9uLmpzJztcclxuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vY29yZS9FdmVudERpc3BhdGNoZXIuanMnO1xyXG5pbXBvcnQgeyBMaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0xpbmVhckludGVycG9sYW50LmpzJztcclxuaW1wb3J0IHsgUHJvcGVydHlCaW5kaW5nIH0gZnJvbSAnLi9Qcm9wZXJ0eUJpbmRpbmcuanMnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eU1peGVyIH0gZnJvbSAnLi9Qcm9wZXJ0eU1peGVyLmpzJztcclxuaW1wb3J0IHsgQW5pbWF0aW9uQ2xpcCB9IGZyb20gJy4vQW5pbWF0aW9uQ2xpcC5qcyc7XHJcbmltcG9ydCB7IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5cclxuY29uc3QgX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCAxICk7XHJcblxyXG5cclxuY2xhc3MgQW5pbWF0aW9uTWl4ZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggcm9vdCApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuX3Jvb3QgPSByb290O1xyXG5cdFx0dGhpcy5faW5pdE1lbW9yeU1hbmFnZXIoKTtcclxuXHRcdHRoaXMuX2FjY3VJbmRleCA9IDA7XHJcblx0XHR0aGlzLnRpbWUgPSAwO1xyXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxLjA7XHJcblxyXG5cdH1cclxuXHJcblx0X2JpbmRBY3Rpb24oIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xyXG5cclxuXHRcdGNvbnN0IHJvb3QgPSBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290LFxyXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxyXG5cdFx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcclxuXHRcdFx0YmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3MsXHJcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxyXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcclxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWU7XHJcblxyXG5cdFx0bGV0IGJpbmRpbmdzQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XHJcblxyXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0YmluZGluZ3NCeU5hbWUgPSB7fTtcclxuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuVHJhY2tzOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0cmFja3NbIGkgXSxcclxuXHRcdFx0XHR0cmFja05hbWUgPSB0cmFjay5uYW1lO1xyXG5cclxuXHRcdFx0bGV0IGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XHJcblxyXG5cdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcclxuXHRcdFx0XHRiaW5kaW5nc1sgaSBdID0gYmluZGluZztcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBleGlzdGluZyBiaW5kaW5nLCBtYWtlIHN1cmUgdGhlIGNhY2hlIGtub3dzXHJcblxyXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcclxuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IHBhdGggPSBwcm90b3R5cGVBY3Rpb24gJiYgcHJvdG90eXBlQWN0aW9uLlxyXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XHJcblxyXG5cdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlNaXhlcihcclxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxyXG5cdFx0XHRcdFx0dHJhY2suVmFsdWVUeXBlTmFtZSwgdHJhY2suZ2V0VmFsdWVTaXplKCkgKTtcclxuXHJcblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcclxuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKTtcclxuXHJcblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnRlcnBvbGFudHNbIGkgXS5yZXN1bHRCdWZmZXIgPSBiaW5kaW5nLmJ1ZmZlcjtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0X2FjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcclxuXHJcblx0XHRcdGlmICggYWN0aW9uLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHQvLyB0aGlzIGFjdGlvbiBoYXMgYmVlbiBmb3Jnb3R0ZW4gYnkgdGhlIGNhY2hlLCBidXQgdGhlIHVzZXJcclxuXHRcdFx0XHQvLyBhcHBlYXJzIHRvIGJlIHN0aWxsIHVzaW5nIGl0IC0+IHJlYmluZFxyXG5cclxuXHRcdFx0XHRjb25zdCByb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQsXHJcblx0XHRcdFx0XHRjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxyXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xyXG5cclxuXHRcdFx0XHR0aGlzLl9iaW5kQWN0aW9uKCBhY3Rpb24sXHJcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCAmJiBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXSApO1xyXG5cclxuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cclxuXHRcdFx0Ly8gaW5jcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGJpbmRpbmcudXNlQ291bnQgKysgPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcclxuXHRcdFx0XHRcdGJpbmRpbmcuc2F2ZU9yaWdpbmFsU3RhdGUoKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fbGVuZEFjdGlvbiggYWN0aW9uICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdF9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcclxuXHJcblx0XHRcdC8vIGRlY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGVcclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xyXG5cclxuXHRcdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcclxuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXHJcblxyXG5cdF9pbml0TWVtb3J5TWFuYWdlcigpIHtcclxuXHJcblx0XHR0aGlzLl9hY3Rpb25zID0gW107IC8vICduQWN0aXZlQWN0aW9ucycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xyXG5cdFx0dGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwO1xyXG5cclxuXHRcdHRoaXMuX2FjdGlvbnNCeUNsaXAgPSB7fTtcclxuXHRcdC8vIGluc2lkZTpcclxuXHRcdC8vIHtcclxuXHRcdC8vIFx0a25vd25BY3Rpb25zOiBBcnJheTwgQW5pbWF0aW9uQWN0aW9uID4gLSB1c2VkIGFzIHByb3RvdHlwZXNcclxuXHRcdC8vIFx0YWN0aW9uQnlSb290OiBBbmltYXRpb25BY3Rpb24gLSBsb29rdXBcclxuXHRcdC8vIH1cclxuXHJcblxyXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xyXG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcclxuXHJcblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxyXG5cclxuXHJcblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxyXG5cdFx0dGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgPSAwO1xyXG5cclxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR0aGlzLnN0YXRzID0ge1xyXG5cclxuXHRcdFx0YWN0aW9uczoge1xyXG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2FjdGlvbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGJpbmRpbmdzOiB7XHJcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRjb250cm9sSW50ZXJwb2xhbnRzOiB7XHJcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fY29udHJvbEludGVycG9sYW50cy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzXHJcblxyXG5cdF9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkge1xyXG5cclxuXHRcdGNvbnN0IGluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xyXG5cdFx0cmV0dXJuIGluZGV4ICE9PSBudWxsICYmIGluZGV4IDwgdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XHJcblxyXG5cdH1cclxuXHJcblx0X2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApIHtcclxuXHJcblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XHJcblxyXG5cdFx0bGV0IGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcclxuXHJcblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHtcclxuXHJcblx0XHRcdFx0a25vd25BY3Rpb25zOiBbIGFjdGlvbiBdLFxyXG5cdFx0XHRcdGFjdGlvbkJ5Um9vdDoge31cclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSAwO1xyXG5cclxuXHRcdFx0YWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSA9IGFjdGlvbnNGb3JDbGlwO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zdCBrbm93bkFjdGlvbnMgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XHJcblxyXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xyXG5cdFx0XHRrbm93bkFjdGlvbnMucHVzaCggYWN0aW9uICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGFjdGlvbnMubGVuZ3RoO1xyXG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcclxuXHJcblx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gPSBhY3Rpb247XHJcblxyXG5cdH1cclxuXHJcblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXHJcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxyXG5cdFx0XHRjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xyXG5cclxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XHJcblx0XHRhY3Rpb25zWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVBY3Rpb247XHJcblx0XHRhY3Rpb25zLnBvcCgpO1xyXG5cclxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XHJcblxyXG5cclxuXHRcdGNvbnN0IGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXHJcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0sXHJcblx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnMsXHJcblxyXG5cdFx0XHRsYXN0S25vd25BY3Rpb24gPVxyXG5cdFx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoIC0gMSBdLFxyXG5cclxuXHRcdFx0YnlDbGlwQ2FjaGVJbmRleCA9IGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleDtcclxuXHJcblx0XHRsYXN0S25vd25BY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBieUNsaXBDYWNoZUluZGV4O1xyXG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsgYnlDbGlwQ2FjaGVJbmRleCBdID0gbGFzdEtub3duQWN0aW9uO1xyXG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcC5wb3AoKTtcclxuXHJcblx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xyXG5cclxuXHJcblx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXHJcblx0XHRcdHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZDtcclxuXHJcblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xyXG5cclxuXHRcdGlmICgga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggPT09IDAgKSB7XHJcblxyXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiggYWN0aW9uICk7XHJcblxyXG5cdH1cclxuXHJcblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApIHtcclxuXHJcblx0XHRjb25zdCBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcclxuXHJcblx0XHRcdGlmICggLS0gYmluZGluZy5yZWZlcmVuY2VDb3VudCA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdF9sZW5kQWN0aW9uKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8ICBpbmFjdGl2ZSBhY3Rpb25zICBdXHJcblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cclxuXHRcdC8vICAgICAgICAgICAgICAgICBzICAgICAgICBhXHJcblx0XHQvLyAgICAgICAgICAgICAgICAgIDwtc3dhcC0+XHJcblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xyXG5cclxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxyXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKyxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBsYXN0QWN0aXZlSW5kZXggXTtcclxuXHJcblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XHJcblx0XHRhY3Rpb25zWyBsYXN0QWN0aXZlSW5kZXggXSA9IGFjdGlvbjtcclxuXHJcblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xyXG5cdFx0YWN0aW9uc1sgcHJldkluZGV4IF0gPSBmaXJzdEluYWN0aXZlQWN0aW9uO1xyXG5cclxuXHR9XHJcblxyXG5cdF90YWtlQmFja0FjdGlvbiggYWN0aW9uICkge1xyXG5cclxuXHRcdC8vIFsgIGFjdGl2ZSBhY3Rpb25zICB8IGluYWN0aXZlIGFjdGlvbnMgXVxyXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXHJcblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xyXG5cdFx0Ly8gICAgICAgICA8LXN3YXAtPlxyXG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcclxuXHJcblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxyXG5cclxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XHJcblxyXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xyXG5cdFx0YWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XHJcblxyXG5cdFx0bGFzdEFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcclxuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUFjdGlvbjtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgUHJvcGVydHlNaXhlciBvYmplY3RzXHJcblxyXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKSB7XHJcblxyXG5cdFx0Y29uc3QgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXHJcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XHJcblxyXG5cdFx0bGV0IGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcclxuXHJcblx0XHRpZiAoIGJpbmRpbmdCeU5hbWUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcclxuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nQnlOYW1lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcclxuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTtcclxuXHJcblx0fVxyXG5cclxuXHRfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICkge1xyXG5cclxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXHJcblx0XHRcdHByb3BCaW5kaW5nID0gYmluZGluZy5iaW5kaW5nLFxyXG5cdFx0XHRyb290VXVpZCA9IHByb3BCaW5kaW5nLnJvb3ROb2RlLnV1aWQsXHJcblx0XHRcdHRyYWNrTmFtZSA9IHByb3BCaW5kaW5nLnBhdGgsXHJcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxyXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0sXHJcblxyXG5cdFx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGJpbmRpbmdzLmxlbmd0aCAtIDEgXSxcclxuXHRcdFx0Y2FjaGVJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXg7XHJcblxyXG5cdFx0bGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XHJcblx0XHRiaW5kaW5nc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQmluZGluZztcclxuXHRcdGJpbmRpbmdzLnBvcCgpO1xyXG5cclxuXHRcdGRlbGV0ZSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcclxuXHJcblx0XHRpZiAoIE9iamVjdC5rZXlzKCBiaW5kaW5nQnlOYW1lICkubGVuZ3RoID09PSAwICkge1xyXG5cclxuXHRcdFx0ZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfbGVuZEJpbmRpbmcoIGJpbmRpbmcgKSB7XHJcblxyXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcclxuXHJcblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncyArKyxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdO1xyXG5cclxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XHJcblx0XHRiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xyXG5cclxuXHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xyXG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XHJcblxyXG5cdH1cclxuXHJcblx0X3Rha2VCYWNrQmluZGluZyggYmluZGluZyApIHtcclxuXHJcblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxyXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxyXG5cclxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxyXG5cclxuXHRcdFx0bGFzdEFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XHJcblxyXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcclxuXHRcdGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0bGFzdEFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XHJcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQmluZGluZztcclxuXHJcblx0fVxyXG5cclxuXHJcblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgb2YgSW50ZXJwb2xhbnRzIGZvciB3ZWlnaHQgYW5kIHRpbWUgc2NhbGVcclxuXHJcblx0X2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKSB7XHJcblxyXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcclxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgKys7XHJcblxyXG5cdFx0bGV0IGludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXTtcclxuXHJcblx0XHRpZiAoIGludGVycG9sYW50ID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcclxuXHRcdFx0XHRuZXcgRmxvYXQzMkFycmF5KCAyICksIG5ldyBGbG9hdDMyQXJyYXkoIDIgKSxcclxuXHRcdFx0XHQxLCBfY29udHJvbEludGVycG9sYW50c1Jlc3VsdEJ1ZmZlciApO1xyXG5cclxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xyXG5cdFx0XHRpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbnRlcnBvbGFudDtcclxuXHJcblx0fVxyXG5cclxuXHRfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIGludGVycG9sYW50ICkge1xyXG5cclxuXHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXHJcblx0XHRcdHByZXZJbmRleCA9IGludGVycG9sYW50Ll9fY2FjaGVJbmRleCxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLFxyXG5cclxuXHRcdFx0bGFzdEFjdGl2ZUludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcclxuXHJcblx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XHJcblx0XHRpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0bGFzdEFjdGl2ZUludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcclxuXHRcdGludGVycG9sYW50c1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlSW50ZXJwb2xhbnQ7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcmV0dXJuIGFuIGFjdGlvbiBmb3IgYSBjbGlwIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gcm9vdCB0YXJnZXRcclxuXHQvLyBvYmplY3QgKHRoaXMgbWV0aG9kIGFsbG9jYXRlcyBhIGxvdCBvZiBkeW5hbWljIG1lbW9yeSBpbiBjYXNlIGFcclxuXHQvLyBwcmV2aW91c2x5IHVua25vd24gY2xpcC9yb290IGNvbWJpbmF0aW9uIGlzIHNwZWNpZmllZClcclxuXHRjbGlwQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QsIGJsZW5kTW9kZSApIHtcclxuXHJcblx0XHRjb25zdCByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXHJcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkO1xyXG5cclxuXHRcdGxldCBjbGlwT2JqZWN0ID0gdHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnID8gQW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwO1xyXG5cclxuXHRcdGNvbnN0IGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXA7XHJcblxyXG5cdFx0Y29uc3QgYWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xyXG5cdFx0bGV0IHByb3RvdHlwZUFjdGlvbiA9IG51bGw7XHJcblxyXG5cdFx0aWYgKCBibGVuZE1vZGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGlmICggY2xpcE9iamVjdCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0YmxlbmRNb2RlID0gY2xpcE9iamVjdC5ibGVuZE1vZGU7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRibGVuZE1vZGUgPSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGNvbnN0IGV4aXN0aW5nQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xyXG5cclxuXHRcdFx0aWYgKCBleGlzdGluZ0FjdGlvbiAhPT0gdW5kZWZpbmVkICYmIGV4aXN0aW5nQWN0aW9uLmJsZW5kTW9kZSA9PT0gYmxlbmRNb2RlICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdBY3Rpb247XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB3ZSBrbm93IHRoZSBjbGlwLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHBhcnNlIGFsbFxyXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcclxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF07XHJcblxyXG5cdFx0XHQvLyBhbHNvLCB0YWtlIHRoZSBjbGlwIGZyb20gdGhlIHByb3RvdHlwZSBhY3Rpb25cclxuXHRcdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsIClcclxuXHRcdFx0XHRjbGlwT2JqZWN0ID0gcHJvdG90eXBlQWN0aW9uLl9jbGlwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjbGlwIG11c3QgYmUga25vd24gd2hlbiBzcGVjaWZpZWQgdmlhIHN0cmluZ1xyXG5cdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcclxuXHRcdGNvbnN0IG5ld0FjdGlvbiA9IG5ldyBBbmltYXRpb25BY3Rpb24oIHRoaXMsIGNsaXBPYmplY3QsIG9wdGlvbmFsUm9vdCwgYmxlbmRNb2RlICk7XHJcblxyXG5cdFx0dGhpcy5fYmluZEFjdGlvbiggbmV3QWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKTtcclxuXHJcblx0XHQvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlclxyXG5cdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XHJcblxyXG5cdFx0cmV0dXJuIG5ld0FjdGlvbjtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBnZXQgYW4gZXhpc3RpbmcgYWN0aW9uXHJcblx0ZXhpc3RpbmdBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcclxuXHJcblx0XHRjb25zdCByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXHJcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxyXG5cclxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XHJcblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLFxyXG5cclxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcclxuXHJcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcclxuXHJcblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdIHx8IG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGRlYWN0aXZhdGVzIGFsbCBwcmV2aW91c2x5IHNjaGVkdWxlZCBhY3Rpb25zXHJcblx0c3RvcEFsbEFjdGlvbigpIHtcclxuXHJcblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IG5BY3Rpb25zIC0gMTsgaSA+PSAwOyAtLSBpICkge1xyXG5cclxuXHRcdFx0YWN0aW9uc1sgaSBdLnN0b3AoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gYWR2YW5jZSB0aGUgdGltZSBhbmQgdXBkYXRlIGFwcGx5IHRoZSBhbmltYXRpb25cclxuXHR1cGRhdGUoIGRlbHRhVGltZSApIHtcclxuXHJcblx0XHRkZWx0YVRpbWUgKj0gdGhpcy50aW1lU2NhbGU7XHJcblxyXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXHJcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXHJcblxyXG5cdFx0XHR0aW1lID0gdGhpcy50aW1lICs9IGRlbHRhVGltZSxcclxuXHRcdFx0dGltZURpcmVjdGlvbiA9IE1hdGguc2lnbiggZGVsdGFUaW1lICksXHJcblxyXG5cdFx0XHRhY2N1SW5kZXggPSB0aGlzLl9hY2N1SW5kZXggXj0gMTtcclxuXHJcblx0XHQvLyBydW4gYWN0aXZlIGFjdGlvbnNcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArKyBpICkge1xyXG5cclxuXHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1sgaSBdO1xyXG5cclxuXHRcdFx0YWN0aW9uLl91cGRhdGUoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxyXG5cclxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXHJcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5CaW5kaW5nczsgKysgaSApIHtcclxuXHJcblx0XHRcdGJpbmRpbmdzWyBpIF0uYXBwbHkoIGFjY3VJbmRleCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBBbGxvd3MgeW91IHRvIHNlZWsgdG8gYSBzcGVjaWZpYyB0aW1lIGluIGFuIGFuaW1hdGlvbi5cclxuXHRzZXRUaW1lKCB0aW1lSW5TZWNvbmRzICkge1xyXG5cclxuXHRcdHRoaXMudGltZSA9IDA7IC8vIFplcm8gb3V0IHRpbWUgYXR0cmlidXRlIGZvciBBbmltYXRpb25NaXhlciBvYmplY3Q7XHJcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9hY3Rpb25zLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdHRoaXMuX2FjdGlvbnNbIGkgXS50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIGFsbCBhc3NvY2lhdGVkIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzLlxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoIHRpbWVJblNlY29uZHMgKTsgLy8gVXBkYXRlIHVzZWQgdG8gc2V0IGV4YWN0IHRpbWUuIFJldHVybnMgXCJ0aGlzXCIgQW5pbWF0aW9uTWl4ZXIgb2JqZWN0LlxyXG5cclxuXHR9XHJcblxyXG5cdC8vIHJldHVybiB0aGlzIG1peGVyJ3Mgcm9vdCB0YXJnZXQgb2JqZWN0XHJcblx0Z2V0Um9vdCgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fcm9vdDtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIGNsaXBcclxuXHR1bmNhY2hlQ2xpcCggY2xpcCApIHtcclxuXHJcblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXHJcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XHJcblxyXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0Ly8gbm90ZToganVzdCBjYWxsaW5nIF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiB3b3VsZCBtZXNzIHVwIHRoZVxyXG5cdFx0XHQvLyBpdGVyYXRpb24gc3RhdGUgYW5kIGFsc28gcmVxdWlyZSB1cGRhdGluZyB0aGUgc3RhdGUgd2UgY2FuXHJcblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxyXG5cclxuXHRcdFx0Y29uc3QgYWN0aW9uc1RvUmVtb3ZlID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYWN0aW9uc1RvUmVtb3ZlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1RvUmVtb3ZlWyBpIF07XHJcblxyXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xyXG5cclxuXHRcdFx0XHRjb25zdCBjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxyXG5cdFx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgYWN0aW9ucy5sZW5ndGggLSAxIF07XHJcblxyXG5cdFx0XHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XHJcblx0XHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDtcclxuXHJcblx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcclxuXHRcdFx0XHRhY3Rpb25zWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVBY3Rpb247XHJcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcclxuXHJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiggYWN0aW9uICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3RcclxuXHR1bmNhY2hlUm9vdCggcm9vdCApIHtcclxuXHJcblx0XHRjb25zdCByb290VXVpZCA9IHJvb3QudXVpZCxcclxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XHJcblxyXG5cdFx0Zm9yICggY29uc3QgY2xpcFV1aWQgaW4gYWN0aW9uc0J5Q2xpcCApIHtcclxuXHJcblx0XHRcdGNvbnN0IGFjdGlvbkJ5Um9vdCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0uYWN0aW9uQnlSb290LFxyXG5cdFx0XHRcdGFjdGlvbiA9IGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcclxuXHJcblx0XHRcdGlmICggYWN0aW9uICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xyXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXHJcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcclxuXHJcblx0XHRpZiAoIGJpbmRpbmdCeU5hbWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGZvciAoIGNvbnN0IHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xyXG5cclxuXHRcdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XHJcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xyXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyByZW1vdmUgYSB0YXJnZXRlZCBjbGlwIGZyb20gdGhlIGNhY2hlXHJcblx0dW5jYWNoZUFjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICkge1xyXG5cclxuXHRcdGNvbnN0IGFjdGlvbiA9IHRoaXMuZXhpc3RpbmdBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApO1xyXG5cclxuXHRcdGlmICggYWN0aW9uICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XHJcblx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFuaW1hdGlvbk1peGVyIH07XHJcbiIsImltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4vUmVuZGVyVGFyZ2V0LmpzJztcclxuaW1wb3J0IHsgRGF0YTNEVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGEzRFRleHR1cmUuanMnO1xyXG5cclxuY2xhc3MgUmVuZGVyVGFyZ2V0M0QgZXh0ZW5kcyBSZW5kZXJUYXJnZXQge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcclxuXHJcblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xyXG5cclxuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXQzRCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZSA9IG5ldyBEYXRhM0RUZXh0dXJlKCBudWxsLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBSZW5kZXJUYXJnZXQzRCB9O1xyXG4iLCJpbXBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuL1JlbmRlclRhcmdldC5qcyc7XHJcbmltcG9ydCB7IERhdGFBcnJheVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhQXJyYXlUZXh0dXJlLmpzJztcclxuXHJcbmNsYXNzIFJlbmRlclRhcmdldEFycmF5IGV4dGVuZHMgUmVuZGVyVGFyZ2V0IHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxLCBvcHRpb25zID0ge30gKSB7XHJcblxyXG5cdFx0c3VwZXIoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcclxuXHJcblx0XHR0aGlzLmlzUmVuZGVyVGFyZ2V0QXJyYXkgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUmVuZGVyVGFyZ2V0QXJyYXkgfTtcclxuIiwiY2xhc3MgVW5pZm9ybSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSApIHtcclxuXHJcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBVbmlmb3JtKCB0aGlzLnZhbHVlLmNsb25lID09PSB1bmRlZmluZWQgPyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZS5jbG9uZSgpICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFVuaWZvcm0gfTtcclxuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi9FdmVudERpc3BhdGNoZXIuanMnO1xyXG5pbXBvcnQgeyBTdGF0aWNEcmF3VXNhZ2UgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxubGV0IF9pZCA9IDA7XHJcblxyXG5jbGFzcyBVbmlmb3Jtc0dyb3VwIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlzVW5pZm9ybXNHcm91cCA9IHRydWU7XHJcblxyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQgKysgfSApO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9ICcnO1xyXG5cclxuXHRcdHRoaXMudXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7XHJcblx0XHR0aGlzLnVuaWZvcm1zID0gW107XHJcblxyXG5cdH1cclxuXHJcblx0YWRkKCB1bmlmb3JtICkge1xyXG5cclxuXHRcdHRoaXMudW5pZm9ybXMucHVzaCggdW5pZm9ybSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlbW92ZSggdW5pZm9ybSApIHtcclxuXHJcblx0XHRjb25zdCBpbmRleCA9IHRoaXMudW5pZm9ybXMuaW5kZXhPZiggdW5pZm9ybSApO1xyXG5cclxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHRoaXMudW5pZm9ybXMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldE5hbWUoIG5hbWUgKSB7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRVc2FnZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xyXG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcclxuXHJcblx0XHRjb25zdCB1bmlmb3Jtc1NvdXJjZSA9IHNvdXJjZS51bmlmb3JtcztcclxuXHJcblx0XHR0aGlzLnVuaWZvcm1zLmxlbmd0aCA9IDA7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdW5pZm9ybXNTb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHVuaWZvcm1zID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybXNTb3VyY2VbIGkgXSApID8gdW5pZm9ybXNTb3VyY2VbIGkgXSA6IFsgdW5pZm9ybXNTb3VyY2VbIGkgXSBdO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdW5pZm9ybXMubGVuZ3RoOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHR0aGlzLnVuaWZvcm1zLnB1c2goIHVuaWZvcm1zWyBqIF0uY2xvbmUoKSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFVuaWZvcm1zR3JvdXAgfTtcclxuIiwiaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuL0ludGVybGVhdmVkQnVmZmVyLmpzJztcclxuXHJcbmNsYXNzIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIGV4dGVuZHMgSW50ZXJsZWF2ZWRCdWZmZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XHJcblxyXG5cdFx0c3VwZXIoIGFycmF5LCBzdHJpZGUgKTtcclxuXHJcblx0XHR0aGlzLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggc291cmNlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xyXG5cclxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCBkYXRhICkge1xyXG5cclxuXHRcdGNvbnN0IGliID0gc3VwZXIuY2xvbmUoIGRhdGEgKTtcclxuXHJcblx0XHRpYi5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdHJldHVybiBpYjtcclxuXHJcblx0fVxyXG5cclxuXHR0b0pTT04oIGRhdGEgKSB7XHJcblxyXG5cdFx0Y29uc3QganNvbiA9IHN1cGVyLnRvSlNPTiggZGF0YSApO1xyXG5cclxuXHRcdGpzb24uaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciA9IHRydWU7XHJcblx0XHRqc29uLm1lc2hQZXJBdHRyaWJ1dGUgPSB0aGlzLm1lc2hQZXJBdHRyaWJ1dGU7XHJcblxyXG5cdFx0cmV0dXJuIGpzb247XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIH07XHJcbiIsImNsYXNzIEdMQnVmZmVyQXR0cmlidXRlIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGJ1ZmZlciwgdHlwZSwgaXRlbVNpemUsIGVsZW1lbnRTaXplLCBjb3VudCApIHtcclxuXHJcblx0XHR0aGlzLmlzR0xCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubmFtZSA9ICcnO1xyXG5cclxuXHRcdHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcclxuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcclxuXHRcdHRoaXMuZWxlbWVudFNpemUgPSBlbGVtZW50U2l6ZTtcclxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcclxuXHJcblx0XHR0aGlzLnZlcnNpb24gPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRCdWZmZXIoIGJ1ZmZlciApIHtcclxuXHJcblx0XHR0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRUeXBlKCB0eXBlLCBlbGVtZW50U2l6ZSApIHtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdFx0dGhpcy5lbGVtZW50U2l6ZSA9IGVsZW1lbnRTaXplO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEl0ZW1TaXplKCBpdGVtU2l6ZSApIHtcclxuXHJcblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0Q291bnQoIGNvdW50ICkge1xyXG5cclxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgR0xCdWZmZXJBdHRyaWJ1dGUgfTtcclxuIiwiaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IFJheSB9IGZyb20gJy4uL21hdGgvUmF5LmpzJztcclxuaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSAnLi9MYXllcnMuanMnO1xyXG5cclxuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuXHJcbmNsYXNzIFJheWNhc3RlciB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBvcmlnaW4sIGRpcmVjdGlvbiwgbmVhciA9IDAsIGZhciA9IEluZmluaXR5ICkge1xyXG5cclxuXHRcdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcclxuXHRcdC8vIGRpcmVjdGlvbiBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgKGZvciBhY2N1cmF0ZSBkaXN0YW5jZSBjYWxjdWxhdGlvbnMpXHJcblxyXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcclxuXHRcdHRoaXMuZmFyID0gZmFyO1xyXG5cdFx0dGhpcy5jYW1lcmEgPSBudWxsO1xyXG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XHJcblxyXG5cdFx0dGhpcy5wYXJhbXMgPSB7XHJcblx0XHRcdE1lc2g6IHt9LFxyXG5cdFx0XHRMaW5lOiB7IHRocmVzaG9sZDogMSB9LFxyXG5cdFx0XHRMT0Q6IHt9LFxyXG5cdFx0XHRQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sXHJcblx0XHRcdFNwcml0ZToge31cclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcclxuXHJcblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxyXG5cclxuXHRcdHRoaXMucmF5LnNldCggb3JpZ2luLCBkaXJlY3Rpb24gKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQ2FtZXJhKCBjb29yZHMsIGNhbWVyYSApIHtcclxuXHJcblx0XHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xyXG5cclxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XHJcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIGNvb3Jkcy54LCBjb29yZHMueSwgMC41ICkudW5wcm9qZWN0KCBjYW1lcmEgKS5zdWIoIHRoaXMucmF5Lm9yaWdpbiApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcclxuXHRcdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldCggMCwgMCwgLSAxICkudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcclxuXHRcdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlOiAnICsgY2FtZXJhLnR5cGUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbVhSQ29udHJvbGxlciggY29udHJvbGxlciApIHtcclxuXHJcblx0XHRfbWF0cml4LmlkZW50aXR5KCkuZXh0cmFjdFJvdGF0aW9uKCBjb250cm9sbGVyLm1hdHJpeFdvcmxkICk7XHJcblxyXG5cdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY29udHJvbGxlci5tYXRyaXhXb3JsZCApO1xyXG5cdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldCggMCwgMCwgLSAxICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGludGVyc2VjdHMgPSBbXSApIHtcclxuXHJcblx0XHRpbnRlcnNlY3QoIG9iamVjdCwgdGhpcywgaW50ZXJzZWN0cywgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XHJcblxyXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0T2JqZWN0cyggb2JqZWN0cywgcmVjdXJzaXZlID0gdHJ1ZSwgaW50ZXJzZWN0cyA9IFtdICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdGludGVyc2VjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XHJcblxyXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzY1NvcnQoIGEsIGIgKSB7XHJcblxyXG5cdHJldHVybiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludGVyc2VjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHtcclxuXHJcblx0bGV0IHByb3BhZ2F0ZSA9IHRydWU7XHJcblxyXG5cdGlmICggb2JqZWN0LmxheWVycy50ZXN0KCByYXljYXN0ZXIubGF5ZXJzICkgKSB7XHJcblxyXG5cdFx0Y29uc3QgcmVzdWx0ID0gb2JqZWN0LnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xyXG5cclxuXHRcdGlmICggcmVzdWx0ID09PSBmYWxzZSApIHByb3BhZ2F0ZSA9IGZhbHNlO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggcHJvcGFnYXRlID09PSB0cnVlICYmIHJlY3Vyc2l2ZSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRjb25zdCBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0KCBjaGlsZHJlblsgaSBdLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRydWUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFJheWNhc3RlciB9O1xyXG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vTWF0aFV0aWxzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxyXG4gKlxyXG4gKiBwaGkgKHRoZSBwb2xhciBhbmdsZSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgeS1heGlzLiBUaGUgcG9zaXRpdmUgeS1heGlzIGlzIHVwLlxyXG4gKiB0aGV0YSAodGhlIGF6aW11dGhhbCBhbmdsZSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzLlxyXG4gKi9cclxuY2xhc3MgU3BoZXJpY2FsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHBoaSA9IDAsIHRoZXRhID0gMCApIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHRcdHRoaXMucGhpID0gcGhpOyAvLyBwb2xhciBhbmdsZVxyXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhOyAvLyBhemltdXRoYWwgYW5nbGVcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHRcdHRoaXMucGhpID0gcGhpO1xyXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIG90aGVyICkge1xyXG5cclxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xyXG5cdFx0dGhpcy5waGkgPSBvdGhlci5waGk7XHJcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gRVBTIGFuZCBQSS1FUFNcclxuXHRtYWtlU2FmZSgpIHtcclxuXHJcblx0XHRjb25zdCBFUFMgPSAwLjAwMDAwMTtcclxuXHRcdHRoaXMucGhpID0gY2xhbXAoIHRoaXMucGhpLCBFUFMsIE1hdGguUEkgLSBFUFMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB2LngsIHYueSwgdi56ICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkcyggeCwgeSwgeiApIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB5ICogeSArIHogKiB6ICk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnJhZGl1cyA9PT0gMCApIHtcclxuXHJcblx0XHRcdHRoaXMudGhldGEgPSAwO1xyXG5cdFx0XHR0aGlzLnBoaSA9IDA7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XHJcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKCBjbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFNwaGVyaWNhbCB9O1xyXG4iLCIvKipcclxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeWxpbmRyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxyXG4gKi9cclxuXHJcbmNsYXNzIEN5bGluZHJpY2FsIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHRoZXRhID0gMCwgeSA9IDAgKSB7XHJcblxyXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7IC8vIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byBhIHBvaW50IGluIHRoZSB4LXogcGxhbmVcclxuXHRcdHRoaXMudGhldGEgPSB0aGV0YTsgLy8gY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzXHJcblx0XHR0aGlzLnkgPSB5OyAvLyBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggcmFkaXVzLCB0aGV0YSwgeSApIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcclxuXHRcdHRoaXMueSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggb3RoZXIgKSB7XHJcblxyXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XHJcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XHJcblx0XHR0aGlzLnkgPSBvdGhlci55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldEZyb21WZWN0b3IzKCB2ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB4LCB5LCB6ICkge1xyXG5cclxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCB4ICogeCArIHogKiB6ICk7XHJcblx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRjbG9uZSgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEN5bGluZHJpY2FsIH07XHJcbiIsImV4cG9ydCBjbGFzcyBNYXRyaXgyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG4xMSwgbjEyLCBuMjEsIG4yMiApIHtcclxuXHJcblx0XHRNYXRyaXgyLnByb3RvdHlwZS5pc01hdHJpeDIgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuZWxlbWVudHMgPSBbXHJcblx0XHRcdDEsIDAsXHJcblx0XHRcdDAsIDEsXHJcblx0XHRdO1xyXG5cclxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNldCggbjExLCBuMTIsIG4yMSwgbjIyICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGlkZW50aXR5KCkge1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cdFx0XHQxLCAwLFxyXG5cdFx0XHQwLCAxLFxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDQ7IGkgKysgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIG4xMSwgbjEyLCBuMjEsIG4yMiApIHtcclxuXHJcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dGVbIDAgXSA9IG4xMTsgdGVbIDIgXSA9IG4xMjtcclxuXHRcdHRlWyAxIF0gPSBuMjE7IHRlWyAzIF0gPSBuMjI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vVmVjdG9yMi5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xyXG5cclxuY2xhc3MgQm94MiB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBtaW4gPSBuZXcgVmVjdG9yMiggKyBJbmZpbml0eSwgKyBJbmZpbml0eSApLCBtYXggPSBuZXcgVmVjdG9yMiggLSBJbmZpbml0eSwgLSBJbmZpbml0eSApICkge1xyXG5cclxuXHRcdHRoaXMuaXNCb3gyID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLm1pbiA9IG1pbjtcclxuXHRcdHRoaXMubWF4ID0gbWF4O1xyXG5cclxuXHR9XHJcblxyXG5cdHNldCggbWluLCBtYXggKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XHJcblx0XHR0aGlzLm1heC5jb3B5KCBtYXggKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XHJcblxyXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBwb2ludHNbIGkgXSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xyXG5cclxuXHRcdGNvbnN0IGhhbGZTaXplID0gX3ZlY3Rvci5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xyXG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xyXG5cdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNsb25lKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBib3ggKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xyXG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdG1ha2VFbXB0eSgpIHtcclxuXHJcblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9ICsgSW5maW5pdHk7XHJcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IC0gSW5maW5pdHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0aXNFbXB0eSgpIHtcclxuXHJcblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xyXG5cclxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAgKSA6IHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLm1heCwgdGhpcy5taW4gKTtcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHR0aGlzLm1pbi5taW4oIHBvaW50ICk7XHJcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcclxuXHJcblx0XHR0aGlzLm1pbi5zdWIoIHZlY3RvciApO1xyXG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRleHBhbmRCeVNjYWxhciggc2NhbGFyICkge1xyXG5cclxuXHRcdHRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTtcclxuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50LnggPj0gdGhpcy5taW4ueCAmJiBwb2ludC54IDw9IHRoaXMubWF4LnggJiZcclxuXHRcdFx0cG9pbnQueSA+PSB0aGlzLm1pbi55ICYmIHBvaW50LnkgPD0gdGhpcy5tYXgueTtcclxuXHJcblx0fVxyXG5cclxuXHRjb250YWluc0JveCggYm94ICkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxyXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcclxuXHJcblx0fVxyXG5cclxuXHRnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcclxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXHJcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcclxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApXHJcblx0XHQpO1xyXG5cclxuXHR9XHJcblxyXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcclxuXHJcblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xyXG5cclxuXHRcdHJldHVybiBib3gubWF4LnggPj0gdGhpcy5taW4ueCAmJiBib3gubWluLnggPD0gdGhpcy5tYXgueCAmJlxyXG5cdFx0XHRib3gubWF4LnkgPj0gdGhpcy5taW4ueSAmJiBib3gubWluLnkgPD0gdGhpcy5tYXgueTtcclxuXHJcblx0fVxyXG5cclxuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jbGFtcFBvaW50KCBwb2ludCwgX3ZlY3RvciApLmRpc3RhbmNlVG8oIHBvaW50ICk7XHJcblxyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0KCBib3ggKSB7XHJcblxyXG5cdFx0dGhpcy5taW4ubWF4KCBib3gubWluICk7XHJcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkgdGhpcy5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR1bmlvbiggYm94ICkge1xyXG5cclxuXHRcdHRoaXMubWluLm1pbiggYm94Lm1pbiApO1xyXG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcclxuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZXF1YWxzKCBib3ggKSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCb3gyIH07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vTWF0aFV0aWxzLmpzJztcclxuXHJcbmNvbnN0IF9zdGFydFAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9zdGFydEVuZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNsYXNzIExpbmUzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHN0YXJ0ID0gbmV3IFZlY3RvcjMoKSwgZW5kID0gbmV3IFZlY3RvcjMoKSApIHtcclxuXHJcblx0XHR0aGlzLnN0YXJ0ID0gc3RhcnQ7XHJcblx0XHR0aGlzLmVuZCA9IGVuZDtcclxuXHJcblx0fVxyXG5cclxuXHRzZXQoIHN0YXJ0LCBlbmQgKSB7XHJcblxyXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBzdGFydCApO1xyXG5cdFx0dGhpcy5lbmQuY29weSggZW5kICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Y29weSggbGluZSApIHtcclxuXHJcblx0XHR0aGlzLnN0YXJ0LmNvcHkoIGxpbmUuc3RhcnQgKTtcclxuXHRcdHRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkZWx0YSggdGFyZ2V0ICkge1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXN0YW5jZVNxKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmVuZCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3RhbmNlKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8oIHRoaXMuZW5kICk7XHJcblxyXG5cdH1cclxuXHJcblx0YXQoIHQsIHRhcmdldCApIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKSB7XHJcblxyXG5cdFx0X3N0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xyXG5cdFx0X3N0YXJ0RW5kLnN1YlZlY3RvcnMoIHRoaXMuZW5kLCB0aGlzLnN0YXJ0ICk7XHJcblxyXG5cdFx0Y29uc3Qgc3RhcnRFbmQyID0gX3N0YXJ0RW5kLmRvdCggX3N0YXJ0RW5kICk7XHJcblx0XHRjb25zdCBzdGFydEVuZF9zdGFydFAgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRQICk7XHJcblxyXG5cdFx0bGV0IHQgPSBzdGFydEVuZF9zdGFydFAgLyBzdGFydEVuZDI7XHJcblxyXG5cdFx0aWYgKCBjbGFtcFRvTGluZSApIHtcclxuXHJcblx0XHRcdHQgPSBjbGFtcCggdCwgMCwgMSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdDtcclxuXHJcblx0fVxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgY2xhbXBUb0xpbmUsIHRhcmdldCApIHtcclxuXHJcblx0XHRjb25zdCB0ID0gdGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcclxuXHJcblx0fVxyXG5cclxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcclxuXHJcblx0XHR0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NCggbWF0cml4ICk7XHJcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGVxdWFscyggbGluZSApIHtcclxuXHJcblx0XHRyZXR1cm4gbGluZS5zdGFydC5lcXVhbHMoIHRoaXMuc3RhcnQgKSAmJiBsaW5lLmVuZC5lcXVhbHMoIHRoaXMuZW5kICk7XHJcblxyXG5cdH1cclxuXHJcblx0Y2xvbmUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBMaW5lMyB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuaW1wb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lU2VnbWVudHMuanMnO1xyXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgU3BvdExpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggbGlnaHQsIGNvbG9yICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xyXG5cclxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0SGVscGVyJztcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFtcclxuXHRcdFx0MCwgMCwgMCwgXHQwLCAwLCAxLFxyXG5cdFx0XHQwLCAwLCAwLCBcdDEsIDAsIDEsXHJcblx0XHRcdDAsIDAsIDAsXHQtIDEsIDAsIDEsXHJcblx0XHRcdDAsIDAsIDAsIFx0MCwgMSwgMSxcclxuXHRcdFx0MCwgMCwgMCwgXHQwLCAtIDEsIDFcclxuXHRcdF07XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IHAxID0gKCBpIC8gbCApICogTWF0aC5QSSAqIDI7XHJcblx0XHRcdGNvbnN0IHAyID0gKCBqIC8gbCApICogTWF0aC5QSSAqIDI7XHJcblxyXG5cdFx0XHRwb3NpdGlvbnMucHVzaChcclxuXHRcdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXHJcblx0XHRcdFx0TWF0aC5jb3MoIHAyICksIE1hdGguc2luKCBwMiApLCAxXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xyXG5cclxuXHRcdHRoaXMuY29uZSA9IG5ldyBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cdFx0dGhpcy5hZGQoIHRoaXMuY29uZSApO1xyXG5cclxuXHRcdHRoaXMudXBkYXRlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0dGhpcy5saWdodC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcclxuXHRcdHRoaXMubGlnaHQudGFyZ2V0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdC8vIHVwZGF0ZSB0aGUgbG9jYWwgbWF0cml4IGJhc2VkIG9uIHRoZSBwYXJlbnQgYW5kIGxpZ2h0IHRhcmdldCB0cmFuc2Zvcm1zXHJcblx0XHRpZiAoIHRoaXMucGFyZW50ICkge1xyXG5cclxuXHRcdFx0dGhpcy5wYXJlbnQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUgKTtcclxuXHJcblx0XHRcdHRoaXMubWF0cml4XHJcblx0XHRcdFx0LmNvcHkoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkIClcclxuXHRcdFx0XHQuaW52ZXJ0KClcclxuXHRcdFx0XHQubXVsdGlwbHkoIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5tYXRyaXguY29weSggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHRjb25zdCBjb25lTGVuZ3RoID0gdGhpcy5saWdodC5kaXN0YW5jZSA/IHRoaXMubGlnaHQuZGlzdGFuY2UgOiAxMDAwO1xyXG5cdFx0Y29uc3QgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XHJcblxyXG5cdFx0dGhpcy5jb25lLnNjYWxlLnNldCggY29uZVdpZHRoLCBjb25lV2lkdGgsIGNvbmVMZW5ndGggKTtcclxuXHJcblx0XHRfdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcclxuXHJcblx0XHR0aGlzLmNvbmUubG9va0F0KCBfdmVjdG9yICk7XHJcblxyXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgU3BvdExpZ2h0SGVscGVyIH07XHJcbiIsImltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XHJcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfYm9uZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcclxuY29uc3QgX21hdHJpeFdvcmxkSW52ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHJcbmNsYXNzIFNrZWxldG9uSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG9iamVjdCApIHtcclxuXHJcblx0XHRjb25zdCBib25lcyA9IGdldEJvbmVMaXN0KCBvYmplY3QgKTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XHJcblx0XHRjb25zdCBjb2xvcnMgPSBbXTtcclxuXHJcblx0XHRjb25zdCBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcclxuXHRcdGNvbnN0IGNvbG9yMiA9IG5ldyBDb2xvciggMCwgMSwgMCApO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHRcdGNvbnN0IGJvbmUgPSBib25lc1sgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XHJcblxyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XHJcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKTtcclxuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xyXG5cclxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XHJcblxyXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdHRoaXMuaXNTa2VsZXRvbkhlbHBlciA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1NrZWxldG9uSGVscGVyJztcclxuXHJcblx0XHR0aGlzLnJvb3QgPSBvYmplY3Q7XHJcblx0XHR0aGlzLmJvbmVzID0gYm9uZXM7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7XHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XHJcblxyXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XHJcblxyXG5cdFx0X21hdHJpeFdvcmxkSW52LmNvcHkoIHRoaXMucm9vdC5tYXRyaXhXb3JsZCApLmludmVydCgpO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcclxuXHJcblx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xyXG5cclxuXHRcdFx0XHRfYm9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfbWF0cml4V29ybGRJbnYsIGJvbmUubWF0cml4V29ybGQgKTtcclxuXHRcdFx0XHRfdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggX2JvbmVNYXRyaXggKTtcclxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGosIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcclxuXHJcblx0XHRcdFx0X2JvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggX21hdHJpeFdvcmxkSW52LCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0XHRcdF92ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xyXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiArIDEsIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcclxuXHJcblx0XHRcdFx0aiArPSAyO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0Qm9uZUxpc3QoIG9iamVjdCApIHtcclxuXHJcblx0Y29uc3QgYm9uZUxpc3QgPSBbXTtcclxuXHJcblx0aWYgKCBvYmplY3QuaXNCb25lID09PSB0cnVlICkge1xyXG5cclxuXHRcdGJvbmVMaXN0LnB1c2goIG9iamVjdCApO1xyXG5cclxuXHR9XHJcblxyXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdC5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XHJcblxyXG5cdFx0Ym9uZUxpc3QucHVzaC5hcHBseSggYm9uZUxpc3QsIGdldEJvbmVMaXN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSApICk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGJvbmVMaXN0O1xyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IFNrZWxldG9uSGVscGVyIH07XHJcbiIsImltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL01lc2guanMnO1xyXG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9NZXNoQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IFNwaGVyZUdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cmllcy9TcGhlcmVHZW9tZXRyeS5qcyc7XHJcblxyXG5jbGFzcyBQb2ludExpZ2h0SGVscGVyIGV4dGVuZHMgTWVzaCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc3BoZXJlU2l6ZSwgY29sb3IgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgU3BoZXJlR2VvbWV0cnkoIHNwaGVyZVNpemUsIDQsIDIgKTtcclxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHJcblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0SGVscGVyJztcclxuXHJcblx0XHR0aGlzLm1hdHJpeCA9IHRoaXMubGlnaHQubWF0cml4V29ybGQ7XHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHJcblx0XHQvKlxyXG5cdC8vIFRPRE86IGRlbGV0ZSB0aGlzIGNvbW1lbnQ/XHJcblx0Y29uc3QgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCAxLCAyICk7XHJcblx0Y29uc3QgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XHJcblxyXG5cdHRoaXMubGlnaHRTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggYnVsYkdlb21ldHJ5LCBidWxiTWF0ZXJpYWwgKTtcclxuXHR0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApO1xyXG5cclxuXHRjb25zdCBkID0gbGlnaHQuZGlzdGFuY2U7XHJcblxyXG5cdGlmICggZCA9PT0gMC4wICkge1xyXG5cclxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcclxuXHQqL1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0dGhpcy5saWdodC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvKlxyXG5cdFx0Y29uc3QgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XHJcblxyXG5cdFx0aWYgKCBkID09PSAwLjAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IHRydWU7XHJcblx0XHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcclxuXHJcblx0XHR9XHJcblx0XHQqL1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgUG9pbnRMaWdodEhlbHBlciB9O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XHJcbmltcG9ydCB7IE1lc2hCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL01lc2hCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgT2N0YWhlZHJvbkdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cmllcy9PY3RhaGVkcm9uR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcblxyXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfY29sb3IxID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcclxuY29uc3QgX2NvbG9yMiA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XHJcblxyXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHRIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcclxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnSGVtaXNwaGVyZUxpZ2h0SGVscGVyJztcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBPY3RhaGVkcm9uR2VvbWV0cnkoIHNpemUgKTtcclxuXHRcdGdlb21ldHJ5LnJvdGF0ZVkoIE1hdGguUEkgKiAwLjUgKTtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xyXG5cdFx0aWYgKCB0aGlzLmNvbG9yID09PSB1bmRlZmluZWQgKSB0aGlzLm1hdGVyaWFsLnZlcnRleENvbG9ycyA9IHRydWU7XHJcblxyXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcclxuXHRcdGNvbnN0IGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uLmNvdW50ICogMyApO1xyXG5cclxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcclxuXHJcblx0XHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkgKTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlKCkge1xyXG5cclxuXHRcdGNvbnN0IG1lc2ggPSB0aGlzLmNoaWxkcmVuWyAwIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zdCBjb2xvcnMgPSBtZXNoLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ2NvbG9yJyApO1xyXG5cclxuXHRcdFx0X2NvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XHJcblx0XHRcdF9jb2xvcjIuY29weSggdGhpcy5saWdodC5ncm91bmRDb2xvciApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY29sb3JzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgY29sb3IgPSAoIGkgPCAoIGwgLyAyICkgKSA/IF9jb2xvcjEgOiBfY29sb3IyO1xyXG5cclxuXHRcdFx0XHRjb2xvcnMuc2V0WFlaKCBpLCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdG1lc2gubG9va0F0KCBfdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBIZW1pc3BoZXJlTGlnaHRIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lU2VnbWVudHMuanMnO1xyXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBHcmlkSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHNpemUgPSAxMCwgZGl2aXNpb25zID0gMTAsIGNvbG9yMSA9IDB4NDQ0NDQ0LCBjb2xvcjIgPSAweDg4ODg4OCApIHtcclxuXHJcblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xyXG5cdFx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgKTtcclxuXHJcblx0XHRjb25zdCBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xyXG5cdFx0Y29uc3Qgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XHJcblx0XHRjb25zdCBoYWxmU2l6ZSA9IHNpemUgLyAyO1xyXG5cclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW10sIGNvbG9ycyA9IFtdO1xyXG5cclxuXHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDAsIGsgPSAtIGhhbGZTaXplOyBpIDw9IGRpdmlzaW9uczsgaSArKywgayArPSBzdGVwICkge1xyXG5cclxuXHRcdFx0dmVydGljZXMucHVzaCggLSBoYWxmU2l6ZSwgMCwgaywgaGFsZlNpemUsIDAsIGsgKTtcclxuXHRcdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcclxuXHJcblx0XHRcdGNvbnN0IGNvbG9yID0gaSA9PT0gY2VudGVyID8gY29sb3IxIDogY29sb3IyO1xyXG5cclxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcclxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcclxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcclxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcclxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XHJcblxyXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdHcmlkSGVscGVyJztcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBHcmlkSGVscGVyIH07XHJcbiIsImltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcclxuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xyXG5cclxuY2xhc3MgUG9sYXJHcmlkSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEwLCBzZWN0b3JzID0gMTYsIHJpbmdzID0gOCwgZGl2aXNpb25zID0gNjQsIGNvbG9yMSA9IDB4NDQ0NDQ0LCBjb2xvcjIgPSAweDg4ODg4OCApIHtcclxuXHJcblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xyXG5cdFx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgKTtcclxuXHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgY29sb3JzID0gW107XHJcblxyXG5cdFx0Ly8gY3JlYXRlIHRoZSBzZWN0b3JzXHJcblxyXG5cdFx0aWYgKCBzZWN0b3JzID4gMSApIHtcclxuXHJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlY3RvcnM7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHYgPSAoIGkgLyBzZWN0b3JzICkgKiAoIE1hdGguUEkgKiAyICk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHggPSBNYXRoLnNpbiggdiApICogcmFkaXVzO1xyXG5cdFx0XHRcdGNvbnN0IHogPSBNYXRoLmNvcyggdiApICogcmFkaXVzO1xyXG5cclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XHJcblx0XHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xyXG5cclxuXHRcdFx0XHRjb25zdCBjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcclxuXHJcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcclxuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjcmVhdGUgdGhlIHJpbmdzXHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcmluZ3M7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcclxuXHJcblx0XHRcdGNvbnN0IHIgPSByYWRpdXMgLSAoIHJhZGl1cyAvIHJpbmdzICogaSApO1xyXG5cclxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xyXG5cclxuXHRcdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcclxuXHJcblx0XHRcdFx0bGV0IHYgPSAoIGogLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcclxuXHJcblx0XHRcdFx0bGV0IHggPSBNYXRoLnNpbiggdiApICogcjtcclxuXHRcdFx0XHRsZXQgeiA9IE1hdGguY29zKCB2ICkgKiByO1xyXG5cclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XHJcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcclxuXHJcblx0XHRcdFx0Ly8gc2Vjb25kIHZlcnRleFxyXG5cclxuXHRcdFx0XHR2ID0gKCAoIGogKyAxICkgLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcclxuXHJcblx0XHRcdFx0eCA9IE1hdGguc2luKCB2ICkgKiByO1xyXG5cdFx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcclxuXHJcblx0XHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xyXG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xyXG5cclxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnUG9sYXJHcmlkSGVscGVyJztcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBQb2xhckdyaWRIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuLi9vYmplY3RzL0xpbmUuanMnO1xyXG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcblxyXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF92MiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX3YzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5cclxuY2xhc3MgRGlyZWN0aW9uYWxMaWdodEhlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzaXplLCBjb2xvciApIHtcclxuXHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMubGlnaHQgPSBsaWdodDtcclxuXHJcblx0XHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xyXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdEaXJlY3Rpb25hbExpZ2h0SGVscGVyJztcclxuXHJcblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xyXG5cclxuXHRcdGxldCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xyXG5cdFx0XHQtIHNpemUsIHNpemUsIDAsXHJcblx0XHRcdHNpemUsIHNpemUsIDAsXHJcblx0XHRcdHNpemUsIC0gc2l6ZSwgMCxcclxuXHRcdFx0LSBzaXplLCAtIHNpemUsIDAsXHJcblx0XHRcdC0gc2l6ZSwgc2l6ZSwgMFxyXG5cdFx0XSwgMyApICk7XHJcblxyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xyXG5cclxuXHRcdHRoaXMubGlnaHRQbGFuZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHRcdHRoaXMuYWRkKCB0aGlzLmxpZ2h0UGxhbmUgKTtcclxuXHJcblx0XHRnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAwLCAxIF0sIDMgKSApO1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0TGluZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHRcdHRoaXMuYWRkKCB0aGlzLnRhcmdldExpbmUgKTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0dGhpcy5saWdodC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcclxuXHRcdHRoaXMubGlnaHQudGFyZ2V0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xyXG5cclxuXHRcdF92MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcclxuXHRcdF92Mi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XHJcblx0XHRfdjMuc3ViVmVjdG9ycyggX3YyLCBfdjEgKTtcclxuXHJcblx0XHR0aGlzLmxpZ2h0UGxhbmUubG9va0F0KCBfdjIgKTtcclxuXHJcblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcclxuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xyXG5cdFx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRhcmdldExpbmUubG9va0F0KCBfdjIgKTtcclxuXHRcdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gX3YzLmxlbmd0aCgpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgRGlyZWN0aW9uYWxMaWdodEhlbHBlciB9O1xyXG4iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmFzL0NhbWVyYS5qcyc7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgV2ViR0xDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IF9jYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBDYW1lcmEoKTtcclxuXHJcbi8qKlxyXG4gKlx0LSBzaG93cyBmcnVzdHVtLCBsaW5lIG9mIHNpZ2h0IGFuZCB1cCBvZiB0aGUgY2FtZXJhXHJcbiAqXHQtIHN1aXRhYmxlIGZvciBmYXN0IHVwZGF0ZXNcclxuICogXHQtIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlXHJcbiAqXHRcdGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9saWdodGdsLmpzL2Jsb2IvbWFzdGVyL3Rlc3RzL3NoYWRvd21hcC5odG1sXHJcbiAqL1xyXG5cclxuY2xhc3MgQ2FtZXJhSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIGNhbWVyYSApIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcclxuXHJcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgY29sb3JzID0gW107XHJcblxyXG5cdFx0Y29uc3QgcG9pbnRNYXAgPSB7fTtcclxuXHJcblx0XHQvLyBuZWFyXHJcblxyXG5cdFx0YWRkTGluZSggJ24xJywgJ24yJyApO1xyXG5cdFx0YWRkTGluZSggJ24yJywgJ240JyApO1xyXG5cdFx0YWRkTGluZSggJ240JywgJ24zJyApO1xyXG5cdFx0YWRkTGluZSggJ24zJywgJ24xJyApO1xyXG5cclxuXHRcdC8vIGZhclxyXG5cclxuXHRcdGFkZExpbmUoICdmMScsICdmMicgKTtcclxuXHRcdGFkZExpbmUoICdmMicsICdmNCcgKTtcclxuXHRcdGFkZExpbmUoICdmNCcsICdmMycgKTtcclxuXHRcdGFkZExpbmUoICdmMycsICdmMScgKTtcclxuXHJcblx0XHQvLyBzaWRlc1xyXG5cclxuXHRcdGFkZExpbmUoICduMScsICdmMScgKTtcclxuXHRcdGFkZExpbmUoICduMicsICdmMicgKTtcclxuXHRcdGFkZExpbmUoICduMycsICdmMycgKTtcclxuXHRcdGFkZExpbmUoICduNCcsICdmNCcgKTtcclxuXHJcblx0XHQvLyBjb25lXHJcblxyXG5cdFx0YWRkTGluZSggJ3AnLCAnbjEnICk7XHJcblx0XHRhZGRMaW5lKCAncCcsICduMicgKTtcclxuXHRcdGFkZExpbmUoICdwJywgJ24zJyApO1xyXG5cdFx0YWRkTGluZSggJ3AnLCAnbjQnICk7XHJcblxyXG5cdFx0Ly8gdXBcclxuXHJcblx0XHRhZGRMaW5lKCAndTEnLCAndTInICk7XHJcblx0XHRhZGRMaW5lKCAndTInLCAndTMnICk7XHJcblx0XHRhZGRMaW5lKCAndTMnLCAndTEnICk7XHJcblxyXG5cdFx0Ly8gdGFyZ2V0XHJcblxyXG5cdFx0YWRkTGluZSggJ2MnLCAndCcgKTtcclxuXHRcdGFkZExpbmUoICdwJywgJ2MnICk7XHJcblxyXG5cdFx0Ly8gY3Jvc3NcclxuXHJcblx0XHRhZGRMaW5lKCAnY24xJywgJ2NuMicgKTtcclxuXHRcdGFkZExpbmUoICdjbjMnLCAnY240JyApO1xyXG5cclxuXHRcdGFkZExpbmUoICdjZjEnLCAnY2YyJyApO1xyXG5cdFx0YWRkTGluZSggJ2NmMycsICdjZjQnICk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYWRkTGluZSggYSwgYiApIHtcclxuXHJcblx0XHRcdGFkZFBvaW50KCBhICk7XHJcblx0XHRcdGFkZFBvaW50KCBiICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZFBvaW50KCBpZCApIHtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcclxuXHRcdFx0Y29sb3JzLnB1c2goIDAsIDAsIDAgKTtcclxuXHJcblx0XHRcdGlmICggcG9pbnRNYXBbIGlkIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0cG9pbnRNYXBbIGlkIF0gPSBbXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhSGVscGVyJztcclxuXHJcblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcclxuXHRcdGlmICggdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCApIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZDtcclxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdHRoaXMucG9pbnRNYXAgPSBwb2ludE1hcDtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHRcdC8vIGNvbG9yc1xyXG5cclxuXHRcdGNvbnN0IGNvbG9yRnJ1c3R1bSA9IG5ldyBDb2xvciggMHhmZmFhMDAgKTtcclxuXHRcdGNvbnN0IGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcclxuXHRcdGNvbnN0IGNvbG9yVXAgPSBuZXcgQ29sb3IoIDB4MDBhYWZmICk7XHJcblx0XHRjb25zdCBjb2xvclRhcmdldCA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcclxuXHRcdGNvbnN0IGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XHJcblxyXG5cdFx0dGhpcy5zZXRDb2xvcnMoIGNvbG9yRnJ1c3R1bSwgY29sb3JDb25lLCBjb2xvclVwLCBjb2xvclRhcmdldCwgY29sb3JDcm9zcyApO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldENvbG9ycyggZnJ1c3R1bSwgY29uZSwgdXAsIHRhcmdldCwgY3Jvc3MgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cclxuXHRcdGNvbnN0IGNvbG9yQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAnY29sb3InICk7XHJcblxyXG5cdFx0Ly8gbmVhclxyXG5cclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMCwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDEsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjEsIG4yXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDIsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIG4yLCBuNFxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuNCwgbjNcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNiwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDcsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjMsIG4xXHJcblxyXG5cdFx0Ly8gZmFyXHJcblxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA4LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggOSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMSwgZjJcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTAsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMiwgZjRcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTIsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxMywgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmNCwgZjNcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTQsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxNSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMywgZjFcclxuXHJcblx0XHQvLyBzaWRlc1xyXG5cclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTYsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxNywgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMSwgZjFcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTgsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxOSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMiwgZjJcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjAsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMywgZjNcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjIsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyMywgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuNCwgZjRcclxuXHJcblx0XHQvLyBjb25lXHJcblxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyNCwgY29uZS5yLCBjb25lLmcsIGNvbmUuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI1LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IC8vIHAsIG4xXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI2LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjcsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjJcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjgsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyOSwgY29uZS5yLCBjb25lLmcsIGNvbmUuYiApOyAvLyBwLCBuM1xyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzMCwgY29uZS5yLCBjb25lLmcsIGNvbmUuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMxLCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IC8vIHAsIG40XHJcblxyXG5cdFx0Ly8gdXBcclxuXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMyLCB1cC5yLCB1cC5nLCB1cC5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzMsIHVwLnIsIHVwLmcsIHVwLmIgKTsgLy8gdTEsIHUyXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM0LCB1cC5yLCB1cC5nLCB1cC5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzUsIHVwLnIsIHVwLmcsIHVwLmIgKTsgLy8gdTIsIHUzXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM2LCB1cC5yLCB1cC5nLCB1cC5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzcsIHVwLnIsIHVwLmcsIHVwLmIgKTsgLy8gdTMsIHUxXHJcblxyXG5cdFx0Ly8gdGFyZ2V0XHJcblxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzOCwgdGFyZ2V0LnIsIHRhcmdldC5nLCB0YXJnZXQuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM5LCB0YXJnZXQuciwgdGFyZ2V0LmcsIHRhcmdldC5iICk7IC8vIGMsIHRcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDAsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0MSwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBwLCBjXHJcblxyXG5cdFx0Ly8gY3Jvc3NcclxuXHJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQyLCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDMsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgLy8gY24xLCBjbjJcclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDQsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NSwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjbjMsIGNuNFxyXG5cclxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDYsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NywgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjZjEsIGNmMlxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0OCwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQ5LCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IC8vIGNmMywgY2Y0XHJcblxyXG5cdFx0Y29sb3JBdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSgpIHtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHRjb25zdCBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7XHJcblxyXG5cdFx0Y29uc3QgdyA9IDEsIGggPSAxO1xyXG5cclxuXHRcdC8vIHdlIG5lZWQganVzdCBjYW1lcmEgcHJvamVjdGlvbiBtYXRyaXggaW52ZXJzZVxyXG5cdFx0Ly8gd29ybGQgbWF0cml4IG11c3QgYmUgaWRlbnRpdHlcclxuXHJcblx0XHRfY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XHJcblxyXG5cdFx0Ly8gQWRqdXN0IHogdmFsdWVzIGJhc2VkIG9uIGNvb3JkaW5hdGUgc3lzdGVtXHJcblx0XHRjb25zdCBuZWFyWiA9IHRoaXMuY2FtZXJhLmNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSA/IC0gMSA6IDA7XHJcblxyXG5cdFx0Ly8gY2VudGVyIC8gdGFyZ2V0XHJcblx0XHRzZXRQb2ludCggJ2MnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIG5lYXJaICk7XHJcblx0XHRzZXRQb2ludCggJ3QnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIDEgKTtcclxuXHJcblx0XHQvLyBuZWFyXHJcblxyXG5cdFx0c2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIG5lYXJaICk7XHJcblx0XHRzZXRQb2ludCggJ24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIG5lYXJaICk7XHJcblx0XHRzZXRQb2ludCggJ24zJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIG5lYXJaICk7XHJcblx0XHRzZXRQb2ludCggJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCBuZWFyWiApO1xyXG5cclxuXHRcdC8vIGZhclxyXG5cclxuXHRcdHNldFBvaW50KCAnZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgLSBoLCAxICk7XHJcblx0XHRzZXRQb2ludCggJ2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIDEgKTtcclxuXHRcdHNldFBvaW50KCAnZjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgaCwgMSApO1xyXG5cdFx0c2V0UG9pbnQoICdmNCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgaCwgMSApO1xyXG5cclxuXHRcdC8vIHVwXHJcblxyXG5cdFx0c2V0UG9pbnQoICd1MScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdyAqIDAuNywgaCAqIDEuMSwgbmVhclogKTtcclxuXHRcdHNldFBvaW50KCAndTInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdyAqIDAuNywgaCAqIDEuMSwgbmVhclogKTtcclxuXHRcdHNldFBvaW50KCAndTMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGggKiAyLCBuZWFyWiApO1xyXG5cclxuXHRcdC8vIGNyb3NzXHJcblxyXG5cdFx0c2V0UG9pbnQoICdjZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgMCwgMSApO1xyXG5cdFx0c2V0UG9pbnQoICdjZjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIDAsIDEgKTtcclxuXHRcdHNldFBvaW50KCAnY2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAtIGgsIDEgKTtcclxuXHRcdHNldFBvaW50KCAnY2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCAxICk7XHJcblxyXG5cdFx0c2V0UG9pbnQoICdjbjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgMCwgbmVhclogKTtcclxuXHRcdHNldFBvaW50KCAnY24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCBuZWFyWiApO1xyXG5cdFx0c2V0UG9pbnQoICdjbjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgbmVhclogKTtcclxuXHRcdHNldFBvaW50KCAnY240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCBuZWFyWiApO1xyXG5cclxuXHRcdGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZXRQb2ludCggcG9pbnQsIHBvaW50TWFwLCBnZW9tZXRyeSwgY2FtZXJhLCB4LCB5LCB6ICkge1xyXG5cclxuXHRfdmVjdG9yLnNldCggeCwgeSwgeiApLnVucHJvamVjdCggY2FtZXJhICk7XHJcblxyXG5cdGNvbnN0IHBvaW50cyA9IHBvaW50TWFwWyBwb2ludCBdO1xyXG5cclxuXHRpZiAoIHBvaW50cyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XHJcblxyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIHBvaW50c1sgaSBdLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDYW1lcmFIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XHJcbmltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcclxuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcblxyXG5jb25zdCBfYm94ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xyXG5cclxuY2xhc3MgQm94SGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG9iamVjdCwgY29sb3IgPSAweGZmZmYwMCApIHtcclxuXHJcblx0XHRjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KCBbIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDcgXSApO1xyXG5cdFx0Y29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggOCAqIDMgKTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGljZXMsIDEgKSApO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XHJcblxyXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblx0XHR0aGlzLnR5cGUgPSAnQm94SGVscGVyJztcclxuXHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZSggb2JqZWN0ICkge1xyXG5cclxuXHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5vYmplY3QgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdF9ib3guc2V0RnJvbU9iamVjdCggdGhpcy5vYmplY3QgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBfYm94LmlzRW1wdHkoKSApIHJldHVybjtcclxuXHJcblx0XHRjb25zdCBtaW4gPSBfYm94Lm1pbjtcclxuXHRcdGNvbnN0IG1heCA9IF9ib3gubWF4O1xyXG5cclxuXHRcdC8qXHJcblx0XHRcdDVfX19fNFxyXG5cdFx0MS9fX18wL3xcclxuXHRcdHwgNl9ffF83XHJcblx0XHQyL19fXzMvXHJcblxyXG5cdFx0MDogbWF4LngsIG1heC55LCBtYXguelxyXG5cdFx0MTogbWluLngsIG1heC55LCBtYXguelxyXG5cdFx0MjogbWluLngsIG1pbi55LCBtYXguelxyXG5cdFx0MzogbWF4LngsIG1pbi55LCBtYXguelxyXG5cdFx0NDogbWF4LngsIG1heC55LCBtaW4uelxyXG5cdFx0NTogbWluLngsIG1heC55LCBtaW4uelxyXG5cdFx0NjogbWluLngsIG1pbi55LCBtaW4uelxyXG5cdFx0NzogbWF4LngsIG1pbi55LCBtaW4uelxyXG5cdFx0Ki9cclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdGNvbnN0IGFycmF5ID0gcG9zaXRpb24uYXJyYXk7XHJcblxyXG5cdFx0YXJyYXlbIDAgXSA9IG1heC54OyBhcnJheVsgMSBdID0gbWF4Lnk7IGFycmF5WyAyIF0gPSBtYXguejtcclxuXHRcdGFycmF5WyAzIF0gPSBtaW4ueDsgYXJyYXlbIDQgXSA9IG1heC55OyBhcnJheVsgNSBdID0gbWF4Lno7XHJcblx0XHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xyXG5cdFx0YXJyYXlbIDkgXSA9IG1heC54OyBhcnJheVsgMTAgXSA9IG1pbi55OyBhcnJheVsgMTEgXSA9IG1heC56O1xyXG5cdFx0YXJyYXlbIDEyIF0gPSBtYXgueDsgYXJyYXlbIDEzIF0gPSBtYXgueTsgYXJyYXlbIDE0IF0gPSBtaW4uejtcclxuXHRcdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XHJcblx0XHRhcnJheVsgMTggXSA9IG1pbi54OyBhcnJheVsgMTkgXSA9IG1pbi55OyBhcnJheVsgMjAgXSA9IG1pbi56O1xyXG5cdFx0YXJyYXlbIDIxIF0gPSBtYXgueDsgYXJyYXlbIDIyIF0gPSBtaW4ueTsgYXJyYXlbIDIzIF0gPSBtaW4uejtcclxuXHJcblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0fVxyXG5cclxuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QgKSB7XHJcblxyXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xyXG5cclxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XHJcblxyXG5cdFx0dGhpcy5vYmplY3QgPSBzb3VyY2Uub2JqZWN0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEJveEhlbHBlciB9O1xyXG4iLCJpbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XHJcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5cclxuY2xhc3MgQm94M0hlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBib3gsIGNvbG9yID0gMHhmZmZmMDAgKSB7XHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBbIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSwgMSwgMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEgXTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcclxuXHJcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XHJcblxyXG5cdFx0dGhpcy5ib3ggPSBib3g7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0JveDNIZWxwZXInO1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xyXG5cclxuXHRcdGNvbnN0IGJveCA9IHRoaXMuYm94O1xyXG5cclxuXHRcdGlmICggYm94LmlzRW1wdHkoKSApIHJldHVybjtcclxuXHJcblx0XHRib3guZ2V0Q2VudGVyKCB0aGlzLnBvc2l0aW9uICk7XHJcblxyXG5cdFx0Ym94LmdldFNpemUoIHRoaXMuc2NhbGUgKTtcclxuXHJcblx0XHR0aGlzLnNjYWxlLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcclxuXHJcblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKCkge1xyXG5cclxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEJveDNIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgTGluZSB9IGZyb20gJy4uL29iamVjdHMvTGluZS5qcyc7XHJcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL01lc2guanMnO1xyXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IE1lc2hCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL01lc2hCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcclxuXHJcbmNsYXNzIFBsYW5lSGVscGVyIGV4dGVuZHMgTGluZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBwbGFuZSwgc2l6ZSA9IDEsIGhleCA9IDB4ZmZmZjAwICkge1xyXG5cclxuXHRcdGNvbnN0IGNvbG9yID0gaGV4O1xyXG5cclxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFsgMSwgLSAxLCAwLCAtIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAxLCAwLCAtIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAtIDEsIDAsIDEsIDEsIDAgXTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcclxuXHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ1BsYW5lSGVscGVyJztcclxuXHJcblx0XHR0aGlzLnBsYW5lID0gcGxhbmU7XHJcblxyXG5cdFx0dGhpcy5zaXplID0gc2l6ZTtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbnMyID0gWyAxLCAxLCAwLCAtIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAxLCAwLCAtIDEsIC0gMSwgMCwgMSwgLSAxLCAwIF07XHJcblxyXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0XHRnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7XHJcblx0XHRnZW9tZXRyeTIuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdFx0dGhpcy5hZGQoIG5ldyBNZXNoKCBnZW9tZXRyeTIsIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIG9wYWNpdHk6IDAuMiwgdHJhbnNwYXJlbnQ6IHRydWUsIGRlcHRoV3JpdGU6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKSApO1xyXG5cclxuXHR9XHJcblxyXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLnNldCggMCwgMCwgMCApO1xyXG5cclxuXHRcdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgMSApO1xyXG5cclxuXHRcdHRoaXMubG9va0F0KCB0aGlzLnBsYW5lLm5vcm1hbCApO1xyXG5cclxuXHRcdHRoaXMudHJhbnNsYXRlWiggLSB0aGlzLnBsYW5lLmNvbnN0YW50ICk7XHJcblxyXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFBsYW5lSGVscGVyIH07XHJcbiIsImltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XHJcbmltcG9ydCB7IEN5bGluZGVyR2VvbWV0cnkgfSBmcm9tICcuLi9nZW9tZXRyaWVzL0N5bGluZGVyR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9NZXNoQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XHJcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuLi9vYmplY3RzL0xpbmUuanMnO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcclxuXHJcbmNvbnN0IF9heGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xyXG5sZXQgX2xpbmVHZW9tZXRyeSwgX2NvbmVHZW9tZXRyeTtcclxuXHJcbmNsYXNzIEFycm93SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xyXG5cclxuXHQvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdGNvbnN0cnVjdG9yKCBkaXIgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApLCBvcmlnaW4gPSBuZXcgVmVjdG9yMyggMCwgMCwgMCApLCBsZW5ndGggPSAxLCBjb2xvciA9IDB4ZmZmZjAwLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0Fycm93SGVscGVyJztcclxuXHJcblx0XHRpZiAoIF9saW5lR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdF9saW5lR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRcdFx0X2xpbmVHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDEsIDAgXSwgMyApICk7XHJcblxyXG5cdFx0XHRfY29uZUdlb21ldHJ5ID0gbmV3IEN5bGluZGVyR2VvbWV0cnkoIDAsIDAuNSwgMSwgNSwgMSApO1xyXG5cdFx0XHRfY29uZUdlb21ldHJ5LnRyYW5zbGF0ZSggMCwgLSAwLjUsIDAgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBvcmlnaW4gKTtcclxuXHJcblx0XHR0aGlzLmxpbmUgPSBuZXcgTGluZSggX2xpbmVHZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XHJcblx0XHR0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5hZGQoIHRoaXMubGluZSApO1xyXG5cclxuXHRcdHRoaXMuY29uZSA9IG5ldyBNZXNoKCBfY29uZUdlb21ldHJ5LCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcclxuXHRcdHRoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0XHR0aGlzLmFkZCggdGhpcy5jb25lICk7XHJcblxyXG5cdFx0dGhpcy5zZXREaXJlY3Rpb24oIGRpciApO1xyXG5cdFx0dGhpcy5zZXRMZW5ndGgoIGxlbmd0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0RGlyZWN0aW9uKCBkaXIgKSB7XHJcblxyXG5cdFx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxyXG5cclxuXHRcdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xyXG5cclxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMCwgMCwgMCwgMSApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGRpci55IDwgLSAwLjk5OTk5ICkge1xyXG5cclxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMSwgMCwgMCwgMCApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfYXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRjb25zdCByYWRpYW5zID0gTWF0aC5hY29zKCBkaXIueSApO1xyXG5cclxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIF9heGlzLCByYWRpYW5zICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xyXG5cclxuXHRcdHRoaXMubGluZS5zY2FsZS5zZXQoIDEsIE1hdGgubWF4KCAwLjAwMDEsIGxlbmd0aCAtIGhlYWRMZW5ndGggKSwgMSApOyAvLyBzZWUgIzE3NDU4XHJcblx0XHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0dGhpcy5jb25lLnNjYWxlLnNldCggaGVhZFdpZHRoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcclxuXHRcdHRoaXMuY29uZS5wb3NpdGlvbi55ID0gbGVuZ3RoO1xyXG5cdFx0dGhpcy5jb25lLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldENvbG9yKCBjb2xvciApIHtcclxuXHJcblx0XHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xyXG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5KCBzb3VyY2UgKSB7XHJcblxyXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xyXG5cclxuXHRcdHRoaXMubGluZS5jb3B5KCBzb3VyY2UubGluZSApO1xyXG5cdFx0dGhpcy5jb25lLmNvcHkoIHNvdXJjZS5jb25lICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpIHtcclxuXHJcblx0XHR0aGlzLmxpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgQXJyb3dIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lU2VnbWVudHMuanMnO1xyXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XHJcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XHJcblxyXG5jbGFzcyBBeGVzSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHNpemUgPSAxICkge1xyXG5cclxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xyXG5cdFx0XHQwLCAwLCAwLFx0c2l6ZSwgMCwgMCxcclxuXHRcdFx0MCwgMCwgMCxcdDAsIHNpemUsIDAsXHJcblx0XHRcdDAsIDAsIDAsXHQwLCAwLCBzaXplXHJcblx0XHRdO1xyXG5cclxuXHRcdGNvbnN0IGNvbG9ycyA9IFtcclxuXHRcdFx0MSwgMCwgMCxcdDEsIDAuNiwgMCxcclxuXHRcdFx0MCwgMSwgMCxcdDAuNiwgMSwgMCxcclxuXHRcdFx0MCwgMCwgMSxcdDAsIDAuNiwgMVxyXG5cdFx0XTtcclxuXHJcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xyXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcclxuXHJcblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcclxuXHJcblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XHJcblxyXG5cdFx0dGhpcy50eXBlID0gJ0F4ZXNIZWxwZXInO1xyXG5cclxuXHR9XHJcblxyXG5cdHNldENvbG9ycyggeEF4aXNDb2xvciwgeUF4aXNDb2xvciwgekF4aXNDb2xvciApIHtcclxuXHJcblx0XHRjb25zdCBjb2xvciA9IG5ldyBDb2xvcigpO1xyXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IuYXJyYXk7XHJcblxyXG5cdFx0Y29sb3Iuc2V0KCB4QXhpc0NvbG9yICk7XHJcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMCApO1xyXG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDMgKTtcclxuXHJcblx0XHRjb2xvci5zZXQoIHlBeGlzQ29sb3IgKTtcclxuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCA2ICk7XHJcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgOSApO1xyXG5cclxuXHRcdGNvbG9yLnNldCggekF4aXNDb2xvciApO1xyXG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDEyICk7XHJcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMTUgKTtcclxuXHJcblx0XHR0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEF4ZXNIZWxwZXIgfTtcclxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcclxuaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4vUGF0aC5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi9TaGFwZS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlVXRpbHMgfSBmcm9tICcuLi9TaGFwZVV0aWxzLmpzJztcclxuXHJcbmNsYXNzIFNoYXBlUGF0aCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cclxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZVBhdGgnO1xyXG5cclxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoKTtcclxuXHJcblx0XHR0aGlzLnN1YlBhdGhzID0gW107XHJcblx0XHR0aGlzLmN1cnJlbnRQYXRoID0gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHRtb3ZlVG8oIHgsIHkgKSB7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG5ldyBQYXRoKCk7XHJcblx0XHR0aGlzLnN1YlBhdGhzLnB1c2goIHRoaXMuY3VycmVudFBhdGggKTtcclxuXHRcdHRoaXMuY3VycmVudFBhdGgubW92ZVRvKCB4LCB5ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0bGluZVRvKCB4LCB5ICkge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGgubGluZVRvKCB4LCB5ICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblx0YmV6aWVyQ3VydmVUbyggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApIHtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQYXRoLmJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHRzcGxpbmVUaHJ1KCBwdHMgKSB7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5zcGxpbmVUaHJ1KCBwdHMgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxuXHR0b1NoYXBlcyggaXNDQ1cgKSB7XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9TaGFwZXNOb0hvbGVzKCBpblN1YnBhdGhzICkge1xyXG5cclxuXHRcdFx0Y29uc3Qgc2hhcGVzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHRtcFBhdGggPSBpblN1YnBhdGhzWyBpIF07XHJcblxyXG5cdFx0XHRcdGNvbnN0IHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XHJcblx0XHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XHJcblxyXG5cdFx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNoYXBlcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNQb2ludEluc2lkZVBvbHlnb24oIGluUHQsIGluUG9seWdvbiApIHtcclxuXHJcblx0XHRcdGNvbnN0IHBvbHlMZW4gPSBpblBvbHlnb24ubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gaW5QdCBvbiBwb2x5Z29uIGNvbnRvdXIgPT4gaW1tZWRpYXRlIHN1Y2Nlc3MgICAgb3JcclxuXHRcdFx0Ly8gdG9nZ2xpbmcgb2YgaW5zaWRlL291dHNpZGUgYXQgZXZlcnkgc2luZ2xlISBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgYW4gZWRnZVxyXG5cdFx0XHQvLyAgd2l0aCB0aGUgaG9yaXpvbnRhbCBsaW5lIHRocm91Z2ggaW5QdCwgbGVmdCBvZiBpblB0XHJcblx0XHRcdC8vICBub3QgY291bnRpbmcgbG93ZXJZIGVuZHBvaW50cyBvZiBlZGdlcyBhbmQgd2hvbGUgZWRnZXMgb24gdGhhdCBsaW5lXHJcblx0XHRcdGxldCBpbnNpZGUgPSBmYWxzZTtcclxuXHRcdFx0Zm9yICggbGV0IHAgPSBwb2x5TGVuIC0gMSwgcSA9IDA7IHEgPCBwb2x5TGVuOyBwID0gcSArKyApIHtcclxuXHJcblx0XHRcdFx0bGV0IGVkZ2VMb3dQdCA9IGluUG9seWdvblsgcCBdO1xyXG5cdFx0XHRcdGxldCBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBxIF07XHJcblxyXG5cdFx0XHRcdGxldCBlZGdlRHggPSBlZGdlSGlnaFB0LnggLSBlZGdlTG93UHQueDtcclxuXHRcdFx0XHRsZXQgZWRnZUR5ID0gZWRnZUhpZ2hQdC55IC0gZWRnZUxvd1B0Lnk7XHJcblxyXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIGVkZ2VEeSApID4gTnVtYmVyLkVQU0lMT04gKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXHJcblx0XHRcdFx0XHRpZiAoIGVkZ2VEeSA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7XHJcblx0XHRcdFx0XHRcdGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHAgXTsgZWRnZUR5ID0gLSBlZGdlRHk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggKCBpblB0LnkgPCBlZGdlTG93UHQueSApIHx8ICggaW5QdC55ID4gZWRnZUhpZ2hQdC55ICkgKSBcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgPT09IGVkZ2VMb3dQdC55ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBpblB0LnggPT09IGVkZ2VMb3dQdC54IClcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xyXG5cdFx0XHRcdFx0XHQvLyBjb250aW51ZTtcdFx0XHRcdC8vIG5vIGludGVyc2VjdGlvbiBvciBlZGdlTG93UHQgPT4gZG9lc24ndCBjb3VudCAhISFcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc3QgcGVycEVkZ2UgPSBlZGdlRHkgKiAoIGluUHQueCAtIGVkZ2VMb3dQdC54ICkgLSBlZGdlRHggKiAoIGluUHQueSAtIGVkZ2VMb3dQdC55ICk7XHJcblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPT09IDAgKVx0XHRcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xyXG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlIDwgMCApIFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1x0XHQvLyB0cnVlIGludGVyc2VjdGlvbiBsZWZ0IG9mIGluUHRcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcGFyYWxsZWwgb3IgY29sbGluZWFyXHJcblx0XHRcdFx0XHRpZiAoIGluUHQueSAhPT0gZWRnZUxvd1B0LnkgKSBcdFx0Y29udGludWU7XHRcdFx0Ly8gcGFyYWxsZWxcclxuXHRcdFx0XHRcdC8vIGVkZ2UgbGllcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsIGxpbmUgYXMgaW5QdFxyXG5cdFx0XHRcdFx0aWYgKCAoICggZWRnZUhpZ2hQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VMb3dQdC54ICkgKSB8fFxyXG5cdFx0XHRcdFx0XHQgKCAoIGVkZ2VMb3dQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VIaWdoUHQueCApICkgKVx0XHRyZXR1cm5cdHRydWU7XHQvLyBpblB0OiBQb2ludCBvbiBjb250b3VyICFcclxuXHRcdFx0XHRcdC8vIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm5cdGluc2lkZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgaXNDbG9ja1dpc2UgPSBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlO1xyXG5cclxuXHRcdGNvbnN0IHN1YlBhdGhzID0gdGhpcy5zdWJQYXRocztcclxuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgcmV0dXJuIFtdO1xyXG5cclxuXHRcdGxldCBzb2xpZCwgdG1wUGF0aCwgdG1wU2hhcGU7XHJcblx0XHRjb25zdCBzaGFwZXMgPSBbXTtcclxuXHJcblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMSApIHtcclxuXHJcblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgMCBdO1xyXG5cdFx0XHR0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcclxuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XHJcblx0XHRcdHJldHVybiBzaGFwZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBob2xlc0ZpcnN0ID0gISBpc0Nsb2NrV2lzZSggc3ViUGF0aHNbIDAgXS5nZXRQb2ludHMoKSApO1xyXG5cdFx0aG9sZXNGaXJzdCA9IGlzQ0NXID8gISBob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDtcclxuXHJcblx0XHQvLyBjb25zb2xlLmxvZyhcIkhvbGVzIGZpcnN0XCIsIGhvbGVzRmlyc3QpO1xyXG5cclxuXHRcdGNvbnN0IGJldHRlclNoYXBlSG9sZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5ld1NoYXBlcyA9IFtdO1xyXG5cdFx0bGV0IG5ld1NoYXBlSG9sZXMgPSBbXTtcclxuXHRcdGxldCBtYWluSWR4ID0gMDtcclxuXHRcdGxldCB0bXBQb2ludHM7XHJcblxyXG5cdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB1bmRlZmluZWQ7XHJcblx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzdWJQYXRocy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xyXG5cclxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyBpIF07XHJcblx0XHRcdHRtcFBvaW50cyA9IHRtcFBhdGguZ2V0UG9pbnRzKCk7XHJcblx0XHRcdHNvbGlkID0gaXNDbG9ja1dpc2UoIHRtcFBvaW50cyApO1xyXG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gISBzb2xpZCA6IHNvbGlkO1xyXG5cclxuXHRcdFx0aWYgKCBzb2xpZCApIHtcclxuXHJcblx0XHRcdFx0aWYgKCAoICEgaG9sZXNGaXJzdCApICYmICggbmV3U2hhcGVzWyBtYWluSWR4IF0gKSApXHRtYWluSWR4ICsrO1xyXG5cclxuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xyXG5cdFx0XHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdLnMuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XHJcblxyXG5cdFx0XHRcdGlmICggaG9sZXNGaXJzdCApXHRtYWluSWR4ICsrO1xyXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xyXG5cclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdycsIGkpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdLnB1c2goIHsgaDogdG1wUGF0aCwgcDogdG1wUG9pbnRzWyAwIF0gfSApO1xyXG5cclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gb25seSBIb2xlcz8gLT4gcHJvYmFibHkgYWxsIFNoYXBlcyB3aXRoIHdyb25nIG9yaWVudGF0aW9uXHJcblx0XHRpZiAoICEgbmV3U2hhcGVzWyAwIF0gKVx0cmV0dXJuXHR0b1NoYXBlc05vSG9sZXMoIHN1YlBhdGhzICk7XHJcblxyXG5cclxuXHRcdGlmICggbmV3U2hhcGVzLmxlbmd0aCA+IDEgKSB7XHJcblxyXG5cdFx0XHRsZXQgYW1iaWd1b3VzID0gZmFsc2U7XHJcblx0XHRcdGxldCB0b0NoYW5nZSA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcclxuXHJcblx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdID0gW107XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcclxuXHJcblx0XHRcdFx0Y29uc3Qgc2hvID0gbmV3U2hhcGVIb2xlc1sgc0lkeCBdO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBsZXQgaElkeCA9IDA7IGhJZHggPCBzaG8ubGVuZ3RoOyBoSWR4ICsrICkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGhvID0gc2hvWyBoSWR4IF07XHJcblx0XHRcdFx0XHRsZXQgaG9sZV91bmFzc2lnbmVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCBsZXQgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4ICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBpc1BvaW50SW5zaWRlUG9seWdvbiggaG8ucCwgbmV3U2hhcGVzWyBzMklkeCBdLnAgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzSWR4ICE9PSBzMklkeCApXHR0b0NoYW5nZSArKztcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aG9sZV91bmFzc2lnbmVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzMklkeCBdLnB1c2goIGhvICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0YW1iaWd1b3VzID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXS5wdXNoKCBobyApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0b0NoYW5nZSA+IDAgJiYgYW1iaWd1b3VzID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0bmV3U2hhcGVIb2xlcyA9IGJldHRlclNoYXBlSG9sZXM7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB0bXBIb2xlcztcclxuXHJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbmV3U2hhcGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xyXG5cclxuXHRcdFx0dG1wU2hhcGUgPSBuZXdTaGFwZXNbIGkgXS5zO1xyXG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcclxuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzWyBpIF07XHJcblxyXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gdG1wSG9sZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XHJcblxyXG5cdFx0XHRcdHRtcFNoYXBlLmhvbGVzLnB1c2goIHRtcEhvbGVzWyBqIF0uaCApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL2NvbnNvbGUubG9nKFwic2hhcGVcIiwgc2hhcGVzKTtcclxuXHJcblx0XHRyZXR1cm4gc2hhcGVzO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgU2hhcGVQYXRoIH07XHJcbiIsImltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4uL2NvcmUvRXZlbnREaXNwYXRjaGVyLmpzJztcclxuXHJcbmNsYXNzIENvbnRyb2xzIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIG9iamVjdCwgZG9tRWxlbWVudCA9IG51bGwgKSB7XHJcblxyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XHJcblxyXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnN0YXRlID0gLSAxO1xyXG5cclxuXHRcdHRoaXMua2V5cyA9IHt9O1xyXG5cdFx0dGhpcy5tb3VzZUJ1dHRvbnMgPSB7IExFRlQ6IG51bGwsIE1JRERMRTogbnVsbCwgUklHSFQ6IG51bGwgfTtcclxuXHRcdHRoaXMudG91Y2hlcyA9IHsgT05FOiBudWxsLCBUV086IG51bGwgfTtcclxuXHJcblx0fVxyXG5cclxuXHRjb25uZWN0KCkge31cclxuXHJcblx0ZGlzY29ubmVjdCgpIHt9XHJcblxyXG5cdGRpc3Bvc2UoKSB7fVxyXG5cclxuXHR1cGRhdGUoIC8qIGRlbHRhICovICkge31cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbnRyb2xzIH07XHJcbiIsImltcG9ydCB7IEFscGhhRm9ybWF0LCBMdW1pbmFuY2VGb3JtYXQsIEx1bWluYW5jZUFscGhhRm9ybWF0LCBSZWRGb3JtYXQsIFJlZEludGVnZXJGb3JtYXQsIFJHRm9ybWF0LCBSR0ludGVnZXJGb3JtYXQsIFJHQkZvcm1hdCwgUkdCQUZvcm1hdCwgUkdCQUludGVnZXJGb3JtYXQsIFJHQl9TM1RDX0RYVDFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfRVRDMV9Gb3JtYXQsIFJHQl9FVEMyX0Zvcm1hdCwgUkdCQV9FVEMyX0VBQ19Gb3JtYXQsIFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgUkdCQV9CUFRDX0Zvcm1hdCwgUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCwgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0LCBSRURfUkdUQzFfRm9ybWF0LCBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCwgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQsIFVuc2lnbmVkQnl0ZVR5cGUsIEJ5dGVUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgU2hvcnRUeXBlLCBIYWxmRmxvYXRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRJbnRUeXBlLCBJbnRUeXBlLCBGbG9hdFR5cGUsIFVuc2lnbmVkSW50NTk5OVR5cGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xyXG5cclxuZnVuY3Rpb24gY29udGFpbiggdGV4dHVyZSwgYXNwZWN0ICkge1xyXG5cclxuXHRjb25zdCBpbWFnZUFzcGVjdCA9ICggdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlLmltYWdlLndpZHRoICkgPyB0ZXh0dXJlLmltYWdlLndpZHRoIC8gdGV4dHVyZS5pbWFnZS5oZWlnaHQgOiAxO1xyXG5cclxuXHRpZiAoIGltYWdlQXNwZWN0ID4gYXNwZWN0ICkge1xyXG5cclxuXHRcdHRleHR1cmUucmVwZWF0LnggPSAxO1xyXG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IGltYWdlQXNwZWN0IC8gYXNwZWN0O1xyXG5cclxuXHRcdHRleHR1cmUub2Zmc2V0LnggPSAwO1xyXG5cdFx0dGV4dHVyZS5vZmZzZXQueSA9ICggMSAtIHRleHR1cmUucmVwZWF0LnkgKSAvIDI7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGV4dHVyZS5yZXBlYXQueCA9IGFzcGVjdCAvIGltYWdlQXNwZWN0O1xyXG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XHJcblxyXG5cdFx0dGV4dHVyZS5vZmZzZXQueCA9ICggMSAtIHRleHR1cmUucmVwZWF0LnggKSAvIDI7XHJcblx0XHR0ZXh0dXJlLm9mZnNldC55ID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGV4dHVyZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvdmVyKCB0ZXh0dXJlLCBhc3BlY3QgKSB7XHJcblxyXG5cdGNvbnN0IGltYWdlQXNwZWN0ID0gKCB0ZXh0dXJlLmltYWdlICYmIHRleHR1cmUuaW1hZ2Uud2lkdGggKSA/IHRleHR1cmUuaW1hZ2Uud2lkdGggLyB0ZXh0dXJlLmltYWdlLmhlaWdodCA6IDE7XHJcblxyXG5cdGlmICggaW1hZ2VBc3BlY3QgPiBhc3BlY3QgKSB7XHJcblxyXG5cdFx0dGV4dHVyZS5yZXBlYXQueCA9IGFzcGVjdCAvIGltYWdlQXNwZWN0O1xyXG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XHJcblxyXG5cdFx0dGV4dHVyZS5vZmZzZXQueCA9ICggMSAtIHRleHR1cmUucmVwZWF0LnggKSAvIDI7XHJcblx0XHR0ZXh0dXJlLm9mZnNldC55ID0gMDtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR0ZXh0dXJlLnJlcGVhdC54ID0gMTtcclxuXHRcdHRleHR1cmUucmVwZWF0LnkgPSBpbWFnZUFzcGVjdCAvIGFzcGVjdDtcclxuXHJcblx0XHR0ZXh0dXJlLm9mZnNldC54ID0gMDtcclxuXHRcdHRleHR1cmUub2Zmc2V0LnkgPSAoIDEgLSB0ZXh0dXJlLnJlcGVhdC55ICkgLyAyO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0ZXh0dXJlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZmlsbCggdGV4dHVyZSApIHtcclxuXHJcblx0dGV4dHVyZS5yZXBlYXQueCA9IDE7XHJcblx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XHJcblxyXG5cdHRleHR1cmUub2Zmc2V0LnggPSAwO1xyXG5cdHRleHR1cmUub2Zmc2V0LnkgPSAwO1xyXG5cclxuXHRyZXR1cm4gdGV4dHVyZTtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEdpdmVuIHRoZSB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIGFuZCB0eXBlIG9mIGEgdGV4dHVyZS4gRGV0ZXJtaW5lcyBob3cgbWFueVxyXG4gKiBieXRlcyBtdXN0IGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSB0ZXh0dXJlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcclxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxyXG4gKiBAcGFyYW0ge051bWJlcn0gZm9ybWF0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlXHJcbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byByZXByZXNlbnQgdGhlIHRleHR1cmUuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCeXRlTGVuZ3RoKCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKSB7XHJcblxyXG5cdGNvbnN0IHR5cGVCeXRlTGVuZ3RoID0gZ2V0VGV4dHVyZVR5cGVCeXRlTGVuZ3RoKCB0eXBlICk7XHJcblxyXG5cdHN3aXRjaCAoIGZvcm1hdCApIHtcclxuXHJcblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL09wZW5HTC1SZWZwYWdlcy9lczMuMC9odG1sL2dsVGV4SW1hZ2UyRC54aHRtbFxyXG5cdFx0Y2FzZSBBbHBoYUZvcm1hdDpcclxuXHRcdFx0cmV0dXJuIHdpZHRoICogaGVpZ2h0O1xyXG5cdFx0Y2FzZSBMdW1pbmFuY2VGb3JtYXQ6XHJcblx0XHRcdHJldHVybiB3aWR0aCAqIGhlaWdodDtcclxuXHRcdGNhc2UgTHVtaW5hbmNlQWxwaGFGb3JtYXQ6XHJcblx0XHRcdHJldHVybiB3aWR0aCAqIGhlaWdodCAqIDI7XHJcblx0XHRjYXNlIFJlZEZvcm1hdDpcclxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcclxuXHRcdGNhc2UgUmVkSW50ZWdlckZvcm1hdDpcclxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcclxuXHRcdGNhc2UgUkdGb3JtYXQ6XHJcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiAyICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xyXG5cdFx0Y2FzZSBSR0ludGVnZXJGb3JtYXQ6XHJcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiAyICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xyXG5cdFx0Y2FzZSBSR0JGb3JtYXQ6XHJcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiAzICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xyXG5cdFx0Y2FzZSBSR0JBRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICogNCApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcclxuXHRcdGNhc2UgUkdCQUludGVnZXJGb3JtYXQ6XHJcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiA0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xyXG5cclxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiL1xyXG5cdFx0Y2FzZSBSR0JfUzNUQ19EWFQxX0Zvcm1hdDpcclxuXHRcdGNhc2UgUkdCQV9TM1RDX0RYVDFfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogODtcclxuXHRcdGNhc2UgUkdCQV9TM1RDX0RYVDNfRm9ybWF0OlxyXG5cdFx0Y2FzZSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQ6XHJcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgMyApIC8gNCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyAzICkgLyA0ICkgKiAxNjtcclxuXHJcblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjL1xyXG5cdFx0Y2FzZSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdDpcclxuXHRcdGNhc2UgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gKCBNYXRoLm1heCggd2lkdGgsIDE2ICkgKiBNYXRoLm1heCggaGVpZ2h0LCA4ICkgKSAvIDQ7XHJcblx0XHRjYXNlIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0OlxyXG5cdFx0Y2FzZSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ6XHJcblx0XHRcdHJldHVybiAoIE1hdGgubWF4KCB3aWR0aCwgOCApICogTWF0aC5tYXgoIGhlaWdodCwgOCApICkgLyAyO1xyXG5cclxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjL1xyXG5cdFx0Y2FzZSBSR0JfRVRDMV9Gb3JtYXQ6XHJcblx0XHRjYXNlIFJHQl9FVEMyX0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDg7XHJcblx0XHRjYXNlIFJHQkFfRVRDMl9FQUNfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7XHJcblxyXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjL1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfNHg0X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfNXg0X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA0ICkgLyA1ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfNXg1X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA0ICkgLyA1ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfNng1X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA1ICkgLyA2ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfNng2X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA1ICkgLyA2ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDUgKSAvIDYgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfOHg1X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA3ICkgLyA4ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfOHg2X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA3ICkgLyA4ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDUgKSAvIDYgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfOHg4X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA3ICkgLyA4ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDcgKSAvIDggKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQ6XHJcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgOSApIC8gMTAgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7XHJcblx0XHRjYXNlIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA5ICkgLyAxMCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA1ICkgLyA2ICkgKiAxNjtcclxuXHRcdGNhc2UgUkdCQV9BU1RDXzEweDhfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDcgKSAvIDggKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDkgKSAvIDEwICkgKiAxNjtcclxuXHRcdGNhc2UgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAxMSApIC8gMTIgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgOSApIC8gMTAgKSAqIDE2O1xyXG5cdFx0Y2FzZSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0OlxyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDExICkgLyAxMiApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyAxMSApIC8gMTIgKSAqIDE2O1xyXG5cclxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9FWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjL1xyXG5cdFx0Y2FzZSBSR0JBX0JQVENfRm9ybWF0OlxyXG5cdFx0Y2FzZSBSR0JfQlBUQ19TSUdORURfRm9ybWF0OlxyXG5cdFx0Y2FzZSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQ6XHJcblx0XHRcdHJldHVybiBNYXRoLmNlaWwoIHdpZHRoIC8gNCApICogTWF0aC5jZWlsKCBoZWlnaHQgLyA0ICkgKiAxNjtcclxuXHJcblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvRVhUX3RleHR1cmVfY29tcHJlc3Npb25fcmd0Yy9cclxuXHRcdGNhc2UgUkVEX1JHVEMxX0Zvcm1hdDpcclxuXHRcdGNhc2UgU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQ6XHJcblx0XHRcdHJldHVybiBNYXRoLmNlaWwoIHdpZHRoIC8gNCApICogTWF0aC5jZWlsKCBoZWlnaHQgLyA0ICkgKiA4O1xyXG5cdFx0Y2FzZSBSRURfR1JFRU5fUkdUQzJfRm9ybWF0OlxyXG5cdFx0Y2FzZSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdDpcclxuXHRcdFx0cmV0dXJuIE1hdGguY2VpbCggd2lkdGggLyA0ICkgKiBNYXRoLmNlaWwoIGhlaWdodCAvIDQgKSAqIDE2O1xyXG5cclxuXHR9XHJcblxyXG5cdHRocm93IG5ldyBFcnJvcihcclxuXHRcdGBVbmFibGUgdG8gZGV0ZXJtaW5lIHRleHR1cmUgYnl0ZSBsZW5ndGggZm9yICR7Zm9ybWF0fSBmb3JtYXQuYCxcclxuXHQpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGV4dHVyZVR5cGVCeXRlTGVuZ3RoKCB0eXBlICkge1xyXG5cclxuXHRzd2l0Y2ggKCB0eXBlICkge1xyXG5cclxuXHRcdGNhc2UgVW5zaWduZWRCeXRlVHlwZTpcclxuXHRcdGNhc2UgQnl0ZVR5cGU6XHJcblx0XHRcdHJldHVybiB7IGJ5dGVMZW5ndGg6IDEsIGNvbXBvbmVudHM6IDEgfTtcclxuXHRcdGNhc2UgVW5zaWduZWRTaG9ydFR5cGU6XHJcblx0XHRjYXNlIFNob3J0VHlwZTpcclxuXHRcdGNhc2UgSGFsZkZsb2F0VHlwZTpcclxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogMiwgY29tcG9uZW50czogMSB9O1xyXG5cdFx0Y2FzZSBVbnNpZ25lZFNob3J0NDQ0NFR5cGU6XHJcblx0XHRjYXNlIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZTpcclxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogMiwgY29tcG9uZW50czogNCB9O1xyXG5cdFx0Y2FzZSBVbnNpZ25lZEludFR5cGU6XHJcblx0XHRjYXNlIEludFR5cGU6XHJcblx0XHRjYXNlIEZsb2F0VHlwZTpcclxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogNCwgY29tcG9uZW50czogMSB9O1xyXG5cdFx0Y2FzZSBVbnNpZ25lZEludDU5OTlUeXBlOlxyXG5cdFx0XHRyZXR1cm4geyBieXRlTGVuZ3RoOiA0LCBjb21wb25lbnRzOiAzIH07XHJcblxyXG5cdH1cclxuXHJcblx0dGhyb3cgbmV3IEVycm9yKCBgVW5rbm93biB0ZXh0dXJlIHR5cGUgJHt0eXBlfS5gICk7XHJcblxyXG59XHJcblxyXG5jb25zdCBUZXh0dXJlVXRpbHMgPSB7XHJcblx0Y29udGFpbixcclxuXHRjb3ZlcixcclxuXHRmaWxsLFxyXG5cdGdldEJ5dGVMZW5ndGhcclxufTtcclxuXHJcbmV4cG9ydCB7IGNvbnRhaW4sIGNvdmVyLCBmaWxsLCBnZXRCeXRlTGVuZ3RoLCBUZXh0dXJlVXRpbHMgfTtcclxuIiwiaW1wb3J0IHsgUkVWSVNJT04gfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XHJcblxyXG5leHBvcnQgeyBXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi9yZW5kZXJlcnMvV2ViR0xBcnJheVJlbmRlclRhcmdldC5qcyc7XHJcbmV4cG9ydCB7IFdlYkdMM0RSZW5kZXJUYXJnZXQgfSBmcm9tICcuL3JlbmRlcmVycy9XZWJHTDNEUmVuZGVyVGFyZ2V0LmpzJztcclxuZXhwb3J0IHsgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi9yZW5kZXJlcnMvV2ViR0xDdWJlUmVuZGVyVGFyZ2V0LmpzJztcclxuZXhwb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICcuL3JlbmRlcmVycy9XZWJHTFJlbmRlclRhcmdldC5qcyc7XHJcbmV4cG9ydCB7IFdlYlhSQ29udHJvbGxlciB9IGZyb20gJy4vcmVuZGVyZXJzL3dlYnhyL1dlYlhSQ29udHJvbGxlci5qcyc7XHJcbmV4cG9ydCB7IEZvZ0V4cDIgfSBmcm9tICcuL3NjZW5lcy9Gb2dFeHAyLmpzJztcclxuZXhwb3J0IHsgRm9nIH0gZnJvbSAnLi9zY2VuZXMvRm9nLmpzJztcclxuZXhwb3J0IHsgU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9TY2VuZS5qcyc7XHJcbmV4cG9ydCB7IFNwcml0ZSB9IGZyb20gJy4vb2JqZWN0cy9TcHJpdGUuanMnO1xyXG5leHBvcnQgeyBMT0QgfSBmcm9tICcuL29iamVjdHMvTE9ELmpzJztcclxuZXhwb3J0IHsgU2tpbm5lZE1lc2ggfSBmcm9tICcuL29iamVjdHMvU2tpbm5lZE1lc2guanMnO1xyXG5leHBvcnQgeyBTa2VsZXRvbiB9IGZyb20gJy4vb2JqZWN0cy9Ta2VsZXRvbi5qcyc7XHJcbmV4cG9ydCB7IEJvbmUgfSBmcm9tICcuL29iamVjdHMvQm9uZS5qcyc7XHJcbmV4cG9ydCB7IE1lc2ggfSBmcm9tICcuL29iamVjdHMvTWVzaC5qcyc7XHJcbmV4cG9ydCB7IEluc3RhbmNlZE1lc2ggfSBmcm9tICcuL29iamVjdHMvSW5zdGFuY2VkTWVzaC5qcyc7XHJcbmV4cG9ydCB7IEJhdGNoZWRNZXNoIH0gZnJvbSAnLi9vYmplY3RzL0JhdGNoZWRNZXNoLmpzJztcclxuZXhwb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XHJcbmV4cG9ydCB7IExpbmVMb29wIH0gZnJvbSAnLi9vYmplY3RzL0xpbmVMb29wLmpzJztcclxuZXhwb3J0IHsgTGluZSB9IGZyb20gJy4vb2JqZWN0cy9MaW5lLmpzJztcclxuZXhwb3J0IHsgUG9pbnRzIH0gZnJvbSAnLi9vYmplY3RzL1BvaW50cy5qcyc7XHJcbmV4cG9ydCB7IEdyb3VwIH0gZnJvbSAnLi9vYmplY3RzL0dyb3VwLmpzJztcclxuZXhwb3J0IHsgVmlkZW9UZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9WaWRlb1RleHR1cmUuanMnO1xyXG5leHBvcnQgeyBWaWRlb0ZyYW1lVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvVmlkZW9GcmFtZVRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBGcmFtZWJ1ZmZlclRleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL0ZyYW1lYnVmZmVyVGV4dHVyZS5qcyc7XHJcbmV4cG9ydCB7IFNvdXJjZSB9IGZyb20gJy4vdGV4dHVyZXMvU291cmNlLmpzJztcclxuZXhwb3J0IHsgRGF0YVRleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcclxuZXhwb3J0IHsgRGF0YUFycmF5VGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvRGF0YUFycmF5VGV4dHVyZS5qcyc7XHJcbmV4cG9ydCB7IERhdGEzRFRleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL0RhdGEzRFRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBDb21wcmVzc2VkVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvQ29tcHJlc3NlZFRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBDb21wcmVzc2VkQXJyYXlUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9Db21wcmVzc2VkQXJyYXlUZXh0dXJlLmpzJztcclxuZXhwb3J0IHsgQ29tcHJlc3NlZEN1YmVUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9Db21wcmVzc2VkQ3ViZVRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBDdWJlVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvQ3ViZVRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBDYW52YXNUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9DYW52YXNUZXh0dXJlLmpzJztcclxuZXhwb3J0IHsgRGVwdGhUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9EZXB0aFRleHR1cmUuanMnO1xyXG5leHBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9UZXh0dXJlLmpzJztcclxuZXhwb3J0ICogZnJvbSAnLi9nZW9tZXRyaWVzL0dlb21ldHJpZXMuanMnO1xyXG5leHBvcnQgKiBmcm9tICcuL21hdGVyaWFscy9NYXRlcmlhbHMuanMnO1xyXG5leHBvcnQgeyBBbmltYXRpb25Mb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQW5pbWF0aW9uTG9hZGVyLmpzJztcclxuZXhwb3J0IHsgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIuanMnO1xyXG5leHBvcnQgeyBDdWJlVGV4dHVyZUxvYWRlciB9IGZyb20gJy4vbG9hZGVycy9DdWJlVGV4dHVyZUxvYWRlci5qcyc7XHJcbmV4cG9ydCB7IERhdGFUZXh0dXJlTG9hZGVyIH0gZnJvbSAnLi9sb2FkZXJzL0RhdGFUZXh0dXJlTG9hZGVyLmpzJztcclxuZXhwb3J0IHsgVGV4dHVyZUxvYWRlciB9IGZyb20gJy4vbG9hZGVycy9UZXh0dXJlTG9hZGVyLmpzJztcclxuZXhwb3J0IHsgT2JqZWN0TG9hZGVyIH0gZnJvbSAnLi9sb2FkZXJzL09iamVjdExvYWRlci5qcyc7XHJcbmV4cG9ydCB7IE1hdGVyaWFsTG9hZGVyIH0gZnJvbSAnLi9sb2FkZXJzL01hdGVyaWFsTG9hZGVyLmpzJztcclxuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnlMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQnVmZmVyR2VvbWV0cnlMb2FkZXIuanMnO1xyXG5leHBvcnQgeyBEZWZhdWx0TG9hZGluZ01hbmFnZXIsIExvYWRpbmdNYW5hZ2VyIH0gZnJvbSAnLi9sb2FkZXJzL0xvYWRpbmdNYW5hZ2VyLmpzJztcclxuZXhwb3J0IHsgSW1hZ2VMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvSW1hZ2VMb2FkZXIuanMnO1xyXG5leHBvcnQgeyBJbWFnZUJpdG1hcExvYWRlciB9IGZyb20gJy4vbG9hZGVycy9JbWFnZUJpdG1hcExvYWRlci5qcyc7XHJcbmV4cG9ydCB7IEZpbGVMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvRmlsZUxvYWRlci5qcyc7XHJcbmV4cG9ydCB7IExvYWRlciB9IGZyb20gJy4vbG9hZGVycy9Mb2FkZXIuanMnO1xyXG5leHBvcnQgeyBMb2FkZXJVdGlscyB9IGZyb20gJy4vbG9hZGVycy9Mb2FkZXJVdGlscy5qcyc7XHJcbmV4cG9ydCB7IENhY2hlIH0gZnJvbSAnLi9sb2FkZXJzL0NhY2hlLmpzJztcclxuZXhwb3J0IHsgQXVkaW9Mb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQXVkaW9Mb2FkZXIuanMnO1xyXG5leHBvcnQgeyBTcG90TGlnaHQgfSBmcm9tICcuL2xpZ2h0cy9TcG90TGlnaHQuanMnO1xyXG5leHBvcnQgeyBQb2ludExpZ2h0IH0gZnJvbSAnLi9saWdodHMvUG9pbnRMaWdodC5qcyc7XHJcbmV4cG9ydCB7IFJlY3RBcmVhTGlnaHQgfSBmcm9tICcuL2xpZ2h0cy9SZWN0QXJlYUxpZ2h0LmpzJztcclxuZXhwb3J0IHsgSGVtaXNwaGVyZUxpZ2h0IH0gZnJvbSAnLi9saWdodHMvSGVtaXNwaGVyZUxpZ2h0LmpzJztcclxuZXhwb3J0IHsgRGlyZWN0aW9uYWxMaWdodCB9IGZyb20gJy4vbGlnaHRzL0RpcmVjdGlvbmFsTGlnaHQuanMnO1xyXG5leHBvcnQgeyBBbWJpZW50TGlnaHQgfSBmcm9tICcuL2xpZ2h0cy9BbWJpZW50TGlnaHQuanMnO1xyXG5leHBvcnQgeyBMaWdodCB9IGZyb20gJy4vbGlnaHRzL0xpZ2h0LmpzJztcclxuZXhwb3J0IHsgTGlnaHRQcm9iZSB9IGZyb20gJy4vbGlnaHRzL0xpZ2h0UHJvYmUuanMnO1xyXG5leHBvcnQgeyBTdGVyZW9DYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvU3RlcmVvQ2FtZXJhLmpzJztcclxuZXhwb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMnO1xyXG5leHBvcnQgeyBPcnRob2dyYXBoaWNDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvT3J0aG9ncmFwaGljQ2FtZXJhLmpzJztcclxuZXhwb3J0IHsgQ3ViZUNhbWVyYSB9IGZyb20gJy4vY2FtZXJhcy9DdWJlQ2FtZXJhLmpzJztcclxuZXhwb3J0IHsgQXJyYXlDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvQXJyYXlDYW1lcmEuanMnO1xyXG5leHBvcnQgeyBDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvQ2FtZXJhLmpzJztcclxuZXhwb3J0IHsgQXVkaW9MaXN0ZW5lciB9IGZyb20gJy4vYXVkaW8vQXVkaW9MaXN0ZW5lci5qcyc7XHJcbmV4cG9ydCB7IFBvc2l0aW9uYWxBdWRpbyB9IGZyb20gJy4vYXVkaW8vUG9zaXRpb25hbEF1ZGlvLmpzJztcclxuZXhwb3J0IHsgQXVkaW9Db250ZXh0IH0gZnJvbSAnLi9hdWRpby9BdWRpb0NvbnRleHQuanMnO1xyXG5leHBvcnQgeyBBdWRpb0FuYWx5c2VyIH0gZnJvbSAnLi9hdWRpby9BdWRpb0FuYWx5c2VyLmpzJztcclxuZXhwb3J0IHsgQXVkaW8gfSBmcm9tICcuL2F1ZGlvL0F1ZGlvLmpzJztcclxuZXhwb3J0IHsgVmVjdG9yS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vYW5pbWF0aW9uL3RyYWNrcy9WZWN0b3JLZXlmcmFtZVRyYWNrLmpzJztcclxuZXhwb3J0IHsgU3RyaW5nS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vYW5pbWF0aW9uL3RyYWNrcy9TdHJpbmdLZXlmcmFtZVRyYWNrLmpzJztcclxuZXhwb3J0IHsgUXVhdGVybmlvbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvUXVhdGVybmlvbktleWZyYW1lVHJhY2suanMnO1xyXG5leHBvcnQgeyBOdW1iZXJLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi9hbmltYXRpb24vdHJhY2tzL051bWJlcktleWZyYW1lVHJhY2suanMnO1xyXG5leHBvcnQgeyBDb2xvcktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvQ29sb3JLZXlmcmFtZVRyYWNrLmpzJztcclxuZXhwb3J0IHsgQm9vbGVhbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvQm9vbGVhbktleWZyYW1lVHJhY2suanMnO1xyXG5leHBvcnQgeyBQcm9wZXJ0eU1peGVyIH0gZnJvbSAnLi9hbmltYXRpb24vUHJvcGVydHlNaXhlci5qcyc7XHJcbmV4cG9ydCB7IFByb3BlcnR5QmluZGluZyB9IGZyb20gJy4vYW5pbWF0aW9uL1Byb3BlcnR5QmluZGluZy5qcyc7XHJcbmV4cG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi9LZXlmcmFtZVRyYWNrLmpzJztcclxuZXhwb3J0IHsgQW5pbWF0aW9uVXRpbHMgfSBmcm9tICcuL2FuaW1hdGlvbi9BbmltYXRpb25VdGlscy5qcyc7XHJcbmV4cG9ydCB7IEFuaW1hdGlvbk9iamVjdEdyb3VwIH0gZnJvbSAnLi9hbmltYXRpb24vQW5pbWF0aW9uT2JqZWN0R3JvdXAuanMnO1xyXG5leHBvcnQgeyBBbmltYXRpb25NaXhlciB9IGZyb20gJy4vYW5pbWF0aW9uL0FuaW1hdGlvbk1peGVyLmpzJztcclxuZXhwb3J0IHsgQW5pbWF0aW9uQ2xpcCB9IGZyb20gJy4vYW5pbWF0aW9uL0FuaW1hdGlvbkNsaXAuanMnO1xyXG5leHBvcnQgeyBBbmltYXRpb25BY3Rpb24gfSBmcm9tICcuL2FuaW1hdGlvbi9BbmltYXRpb25BY3Rpb24uanMnO1xyXG5leHBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcclxuZXhwb3J0IHsgUmVuZGVyVGFyZ2V0M0QgfSBmcm9tICcuL2NvcmUvUmVuZGVyVGFyZ2V0M0QuanMnO1xyXG5leHBvcnQgeyBSZW5kZXJUYXJnZXRBcnJheSB9IGZyb20gJy4vY29yZS9SZW5kZXJUYXJnZXRBcnJheS5qcyc7XHJcbmV4cG9ydCB7IFVuaWZvcm0gfSBmcm9tICcuL2NvcmUvVW5pZm9ybS5qcyc7XHJcbmV4cG9ydCB7IFVuaWZvcm1zR3JvdXAgfSBmcm9tICcuL2NvcmUvVW5pZm9ybXNHcm91cC5qcyc7XHJcbmV4cG9ydCB7IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi9jb3JlL0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LmpzJztcclxuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xyXG5leHBvcnQgeyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4vY29yZS9JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XHJcbmV4cG9ydCB7IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIH0gZnJvbSAnLi9jb3JlL0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLmpzJztcclxuZXhwb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuL2NvcmUvSW50ZXJsZWF2ZWRCdWZmZXIuanMnO1xyXG5leHBvcnQgeyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuL2NvcmUvSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLmpzJztcclxuZXhwb3J0IHsgR0xCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuL2NvcmUvR0xCdWZmZXJBdHRyaWJ1dGUuanMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcclxuZXhwb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuL2NvcmUvT2JqZWN0M0QuanMnO1xyXG5leHBvcnQgeyBSYXljYXN0ZXIgfSBmcm9tICcuL2NvcmUvUmF5Y2FzdGVyLmpzJztcclxuZXhwb3J0IHsgTGF5ZXJzIH0gZnJvbSAnLi9jb3JlL0xheWVycy5qcyc7XHJcbmV4cG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4vY29yZS9FdmVudERpc3BhdGNoZXIuanMnO1xyXG5leHBvcnQgeyBDbG9jayB9IGZyb20gJy4vY29yZS9DbG9jay5qcyc7XHJcbmV4cG9ydCB7IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4vbWF0aC9pbnRlcnBvbGFudHMvUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LmpzJztcclxuZXhwb3J0IHsgTGluZWFySW50ZXJwb2xhbnQgfSBmcm9tICcuL21hdGgvaW50ZXJwb2xhbnRzL0xpbmVhckludGVycG9sYW50LmpzJztcclxuZXhwb3J0IHsgRGlzY3JldGVJbnRlcnBvbGFudCB9IGZyb20gJy4vbWF0aC9pbnRlcnBvbGFudHMvRGlzY3JldGVJbnRlcnBvbGFudC5qcyc7XHJcbmV4cG9ydCB7IEN1YmljSW50ZXJwb2xhbnQgfSBmcm9tICcuL21hdGgvaW50ZXJwb2xhbnRzL0N1YmljSW50ZXJwb2xhbnQuanMnO1xyXG5leHBvcnQgeyBJbnRlcnBvbGFudCB9IGZyb20gJy4vbWF0aC9JbnRlcnBvbGFudC5qcyc7XHJcbmV4cG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi9tYXRoL1RyaWFuZ2xlLmpzJztcclxuZXhwb3J0IHsgTWF0aFV0aWxzIH0gZnJvbSAnLi9tYXRoL01hdGhVdGlscy5qcyc7XHJcbmV4cG9ydCB7IFNwaGVyaWNhbCB9IGZyb20gJy4vbWF0aC9TcGhlcmljYWwuanMnO1xyXG5leHBvcnQgeyBDeWxpbmRyaWNhbCB9IGZyb20gJy4vbWF0aC9DeWxpbmRyaWNhbC5qcyc7XHJcbmV4cG9ydCB7IFBsYW5lIH0gZnJvbSAnLi9tYXRoL1BsYW5lLmpzJztcclxuZXhwb3J0IHsgRnJ1c3R1bSB9IGZyb20gJy4vbWF0aC9GcnVzdHVtLmpzJztcclxuZXhwb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi9tYXRoL1NwaGVyZS5qcyc7XHJcbmV4cG9ydCB7IFJheSB9IGZyb20gJy4vbWF0aC9SYXkuanMnO1xyXG5leHBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi9tYXRoL01hdHJpeDQuanMnO1xyXG5leHBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi9tYXRoL01hdHJpeDMuanMnO1xyXG5leHBvcnQgeyBNYXRyaXgyIH0gZnJvbSAnLi9tYXRoL01hdHJpeDIuanMnO1xyXG5leHBvcnQgeyBCb3gzIH0gZnJvbSAnLi9tYXRoL0JveDMuanMnO1xyXG5leHBvcnQgeyBCb3gyIH0gZnJvbSAnLi9tYXRoL0JveDIuanMnO1xyXG5leHBvcnQgeyBMaW5lMyB9IGZyb20gJy4vbWF0aC9MaW5lMy5qcyc7XHJcbmV4cG9ydCB7IEV1bGVyIH0gZnJvbSAnLi9tYXRoL0V1bGVyLmpzJztcclxuZXhwb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4vbWF0aC9WZWN0b3I0LmpzJztcclxuZXhwb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vbWF0aC9WZWN0b3IzLmpzJztcclxuZXhwb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vbWF0aC9WZWN0b3IyLmpzJztcclxuZXhwb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vbWF0aC9RdWF0ZXJuaW9uLmpzJztcclxuZXhwb3J0IHsgQ29sb3IgfSBmcm9tICcuL21hdGgvQ29sb3IuanMnO1xyXG5leHBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcclxuZXhwb3J0IHsgU3BoZXJpY2FsSGFybW9uaWNzMyB9IGZyb20gJy4vbWF0aC9TcGhlcmljYWxIYXJtb25pY3MzLmpzJztcclxuZXhwb3J0IHsgU3BvdExpZ2h0SGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL1Nwb3RMaWdodEhlbHBlci5qcyc7XHJcbmV4cG9ydCB7IFNrZWxldG9uSGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL1NrZWxldG9uSGVscGVyLmpzJztcclxuZXhwb3J0IHsgUG9pbnRMaWdodEhlbHBlciB9IGZyb20gJy4vaGVscGVycy9Qb2ludExpZ2h0SGVscGVyLmpzJztcclxuZXhwb3J0IHsgSGVtaXNwaGVyZUxpZ2h0SGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL0hlbWlzcGhlcmVMaWdodEhlbHBlci5qcyc7XHJcbmV4cG9ydCB7IEdyaWRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvR3JpZEhlbHBlci5qcyc7XHJcbmV4cG9ydCB7IFBvbGFyR3JpZEhlbHBlciB9IGZyb20gJy4vaGVscGVycy9Qb2xhckdyaWRIZWxwZXIuanMnO1xyXG5leHBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0SGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL0RpcmVjdGlvbmFsTGlnaHRIZWxwZXIuanMnO1xyXG5leHBvcnQgeyBDYW1lcmFIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvQ2FtZXJhSGVscGVyLmpzJztcclxuZXhwb3J0IHsgQm94SGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL0JveEhlbHBlci5qcyc7XHJcbmV4cG9ydCB7IEJveDNIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvQm94M0hlbHBlci5qcyc7XHJcbmV4cG9ydCB7IFBsYW5lSGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL1BsYW5lSGVscGVyLmpzJztcclxuZXhwb3J0IHsgQXJyb3dIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvQXJyb3dIZWxwZXIuanMnO1xyXG5leHBvcnQgeyBBeGVzSGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL0F4ZXNIZWxwZXIuanMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2V4dHJhcy9jdXJ2ZXMvQ3VydmVzLmpzJztcclxuZXhwb3J0IHsgU2hhcGUgfSBmcm9tICcuL2V4dHJhcy9jb3JlL1NoYXBlLmpzJztcclxuZXhwb3J0IHsgUGF0aCB9IGZyb20gJy4vZXh0cmFzL2NvcmUvUGF0aC5qcyc7XHJcbmV4cG9ydCB7IFNoYXBlUGF0aCB9IGZyb20gJy4vZXh0cmFzL2NvcmUvU2hhcGVQYXRoLmpzJztcclxuZXhwb3J0IHsgQ3VydmVQYXRoIH0gZnJvbSAnLi9leHRyYXMvY29yZS9DdXJ2ZVBhdGguanMnO1xyXG5leHBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4vZXh0cmFzL2NvcmUvQ3VydmUuanMnO1xyXG5leHBvcnQgeyBDb250cm9scyB9IGZyb20gJy4vZXh0cmFzL0NvbnRyb2xzLmpzJztcclxuZXhwb3J0IHsgRGF0YVV0aWxzIH0gZnJvbSAnLi9leHRyYXMvRGF0YVV0aWxzLmpzJztcclxuZXhwb3J0IHsgSW1hZ2VVdGlscyB9IGZyb20gJy4vZXh0cmFzL0ltYWdlVXRpbHMuanMnO1xyXG5leHBvcnQgeyBTaGFwZVV0aWxzIH0gZnJvbSAnLi9leHRyYXMvU2hhcGVVdGlscy5qcyc7XHJcbmV4cG9ydCB7IFRleHR1cmVVdGlscyB9IGZyb20gJy4vZXh0cmFzL1RleHR1cmVVdGlscy5qcyc7XHJcbmV4cG9ydCB7IGNyZWF0ZUNhbnZhc0VsZW1lbnQgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuanMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1RocmVlLkxlZ2FjeS5qcyc7XHJcblxyXG5pZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xyXG5cclxuXHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAncmVnaXN0ZXInLCB7IGRldGFpbDoge1xyXG5cdFx0cmV2aXNpb246IFJFVklTSU9OLFxyXG5cdH0gfSApICk7XHJcblxyXG59XHJcblxyXG5pZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkge1xyXG5cclxuXHRpZiAoIHdpbmRvdy5fX1RIUkVFX18gKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogTXVsdGlwbGUgaW5zdGFuY2VzIG9mIFRocmVlLmpzIGJlaW5nIGltcG9ydGVkLicgKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR3aW5kb3cuX19USFJFRV9fID0gUkVWSVNJT047XHJcblxyXG5cdH1cclxuXHJcbn1cclxuIl0sIm5hbWVzIjpbIlJFVklTSU9OIiwiTU9VU0UiLCJMRUZUIiwiTUlERExFIiwiUklHSFQiLCJST1RBVEUiLCJET0xMWSIsIlBBTiIsIlRPVUNIIiwiRE9MTFlfUEFOIiwiRE9MTFlfUk9UQVRFIiwiQ3VsbEZhY2VOb25lIiwiQ3VsbEZhY2VCYWNrIiwiQ3VsbEZhY2VGcm9udCIsIkN1bGxGYWNlRnJvbnRCYWNrIiwiQmFzaWNTaGFkb3dNYXAiLCJQQ0ZTaGFkb3dNYXAiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiVlNNU2hhZG93TWFwIiwiRnJvbnRTaWRlIiwiQmFja1NpZGUiLCJEb3VibGVTaWRlIiwiTm9CbGVuZGluZyIsIk5vcm1hbEJsZW5kaW5nIiwiQWRkaXRpdmVCbGVuZGluZyIsIlN1YnRyYWN0aXZlQmxlbmRpbmciLCJNdWx0aXBseUJsZW5kaW5nIiwiQ3VzdG9tQmxlbmRpbmciLCJBZGRFcXVhdGlvbiIsIlN1YnRyYWN0RXF1YXRpb24iLCJSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiIsIk1pbkVxdWF0aW9uIiwiTWF4RXF1YXRpb24iLCJaZXJvRmFjdG9yIiwiT25lRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0NvbG9yRmFjdG9yIiwiU3JjQWxwaGFGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiRHN0QWxwaGFGYWN0b3IiLCJPbmVNaW51c0RzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciIsIkNvbnN0YW50Q29sb3JGYWN0b3IiLCJPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IiLCJDb25zdGFudEFscGhhRmFjdG9yIiwiT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJOb1RvbmVNYXBwaW5nIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJDdXN0b21Ub25lTWFwcGluZyIsIkFnWFRvbmVNYXBwaW5nIiwiTmV1dHJhbFRvbmVNYXBwaW5nIiwiQXR0YWNoZWRCaW5kTW9kZSIsIkRldGFjaGVkQmluZE1vZGUiLCJVVk1hcHBpbmciLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIiwiTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyIiwiVW5zaWduZWRCeXRlVHlwZSIsIkJ5dGVUeXBlIiwiU2hvcnRUeXBlIiwiVW5zaWduZWRTaG9ydFR5cGUiLCJJbnRUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiRmxvYXRUeXBlIiwiSGFsZkZsb2F0VHlwZSIsIlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSIsIlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIlVuc2lnbmVkSW50NTk5OVR5cGUiLCJBbHBoYUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQkFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJMdW1pbmFuY2VBbHBoYUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUmVkSW50ZWdlckZvcm1hdCIsIlJHRm9ybWF0IiwiUkdJbnRlZ2VyRm9ybWF0IiwiUkdCSW50ZWdlckZvcm1hdCIsIlJHQkFJbnRlZ2VyRm9ybWF0IiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCX0VUQzJfRm9ybWF0IiwiUkdCQV9FVEMyX0VBQ19Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTJfRm9ybWF0IiwiUkdCQV9CUFRDX0Zvcm1hdCIsIlJHQl9CUFRDX1NJR05FRF9Gb3JtYXQiLCJSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQiLCJSRURfUkdUQzFfRm9ybWF0IiwiU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQiLCJSRURfR1JFRU5fUkdUQzJfRm9ybWF0IiwiU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQiLCJMb29wT25jZSIsIkxvb3BSZXBlYXQiLCJMb29wUGluZ1BvbmciLCJJbnRlcnBvbGF0ZURpc2NyZXRlIiwiSW50ZXJwb2xhdGVMaW5lYXIiLCJJbnRlcnBvbGF0ZVNtb290aCIsIlplcm9DdXJ2YXR1cmVFbmRpbmciLCJaZXJvU2xvcGVFbmRpbmciLCJXcmFwQXJvdW5kRW5kaW5nIiwiTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlIiwiQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUiLCJUcmlhbmdsZXNEcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlRmFuRHJhd01vZGUiLCJCYXNpY0RlcHRoUGFja2luZyIsIlJHQkFEZXB0aFBhY2tpbmciLCJSR0JEZXB0aFBhY2tpbmciLCJSR0RlcHRoUGFja2luZyIsIlRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsIk9iamVjdFNwYWNlTm9ybWFsTWFwIiwiTm9Db2xvclNwYWNlIiwiU1JHQkNvbG9yU3BhY2UiLCJMaW5lYXJTUkdCQ29sb3JTcGFjZSIsIkxpbmVhclRyYW5zZmVyIiwiU1JHQlRyYW5zZmVyIiwiWmVyb1N0ZW5jaWxPcCIsIktlZXBTdGVuY2lsT3AiLCJSZXBsYWNlU3RlbmNpbE9wIiwiSW5jcmVtZW50U3RlbmNpbE9wIiwiRGVjcmVtZW50U3RlbmNpbE9wIiwiSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCIsIkRlY3JlbWVudFdyYXBTdGVuY2lsT3AiLCJJbnZlcnRTdGVuY2lsT3AiLCJOZXZlclN0ZW5jaWxGdW5jIiwiTGVzc1N0ZW5jaWxGdW5jIiwiRXF1YWxTdGVuY2lsRnVuYyIsIkxlc3NFcXVhbFN0ZW5jaWxGdW5jIiwiR3JlYXRlclN0ZW5jaWxGdW5jIiwiTm90RXF1YWxTdGVuY2lsRnVuYyIsIkdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jIiwiQWx3YXlzU3RlbmNpbEZ1bmMiLCJOZXZlckNvbXBhcmUiLCJMZXNzQ29tcGFyZSIsIkVxdWFsQ29tcGFyZSIsIkxlc3NFcXVhbENvbXBhcmUiLCJHcmVhdGVyQ29tcGFyZSIsIk5vdEVxdWFsQ29tcGFyZSIsIkdyZWF0ZXJFcXVhbENvbXBhcmUiLCJBbHdheXNDb21wYXJlIiwiU3RhdGljRHJhd1VzYWdlIiwiRHluYW1pY0RyYXdVc2FnZSIsIlN0cmVhbURyYXdVc2FnZSIsIlN0YXRpY1JlYWRVc2FnZSIsIkR5bmFtaWNSZWFkVXNhZ2UiLCJTdHJlYW1SZWFkVXNhZ2UiLCJTdGF0aWNDb3B5VXNhZ2UiLCJEeW5hbWljQ29weVVzYWdlIiwiU3RyZWFtQ29weVVzYWdlIiwiR0xTTDEiLCJHTFNMMyIsIldlYkdMQ29vcmRpbmF0ZVN5c3RlbSIsIldlYkdQVUNvb3JkaW5hdGVTeXN0ZW0iLCJUaW1lc3RhbXBRdWVyeSIsIkNPTVBVVEUiLCJSRU5ERVIiLCJFdmVudERpc3BhdGNoZXIiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImxpc3RlbmVyIiwidW5kZWZpbmVkIiwidGhpcyIsIl9saXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJpbmRleE9mIiwicHVzaCIsImhhc0V2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuZXJBcnJheSIsImluZGV4Iiwic3BsaWNlIiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50IiwidGFyZ2V0IiwiYXJyYXkiLCJzbGljZSIsImkiLCJsIiwibGVuZ3RoIiwiY2FsbCIsIl9sdXQiLCJfc2VlZCIsIkRFRzJSQUQiLCJNYXRoIiwiUEkiLCJSQUQyREVHIiwiZ2VuZXJhdGVVVUlEIiwiZDAiLCJyYW5kb20iLCJkMSIsImQyIiwiZDMiLCJ0b0xvd2VyQ2FzZSIsImNsYW1wIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJldWNsaWRlYW5Nb2R1bG8iLCJuIiwibSIsImxlcnAiLCJ4IiwieSIsInQiLCJkZW5vcm1hbGl6ZSIsImNvbnN0cnVjdG9yIiwiRmxvYXQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQ4QXJyYXkiLCJJbnQzMkFycmF5IiwiSW50MTZBcnJheSIsIkludDhBcnJheSIsIkVycm9yIiwibm9ybWFsaXplIiwicm91bmQiLCJNYXRoVXRpbHMiLCJtYXBMaW5lYXIiLCJhMSIsImEyIiwiYjEiLCJiMiIsImludmVyc2VMZXJwIiwiZGFtcCIsImxhbWJkYSIsImR0IiwiZXhwIiwicGluZ3BvbmciLCJhYnMiLCJzbW9vdGhzdGVwIiwic21vb3RoZXJzdGVwIiwicmFuZEludCIsImxvdyIsImhpZ2giLCJmbG9vciIsInJhbmRGbG9hdCIsInJhbmRGbG9hdFNwcmVhZCIsInJhbmdlIiwic2VlZGVkUmFuZG9tIiwicyIsImltdWwiLCJkZWdUb1JhZCIsImRlZ3JlZXMiLCJyYWRUb0RlZyIsInJhZGlhbnMiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsInBvdyIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyIiwicSIsImEiLCJiIiwiYyIsIm9yZGVyIiwiY29zIiwic2luIiwiYzIiLCJzMiIsImMxMyIsInMxMyIsImMxXzMiLCJzMV8zIiwiYzNfMSIsInMzXzEiLCJzZXQiLCJjb25zb2xlIiwid2FybiIsIlZlY3RvcjIiLCJwcm90b3R5cGUiLCJpc1ZlY3RvcjIiLCJ3aWR0aCIsImhlaWdodCIsInNldFNjYWxhciIsInNjYWxhciIsInNldFgiLCJzZXRZIiwic2V0Q29tcG9uZW50IiwiZ2V0Q29tcG9uZW50IiwiY2xvbmUiLCJjb3B5IiwidiIsImFkZCIsImFkZFNjYWxhciIsImFkZFZlY3RvcnMiLCJhZGRTY2FsZWRWZWN0b3IiLCJzdWIiLCJzdWJTY2FsYXIiLCJzdWJWZWN0b3JzIiwibXVsdGlwbHkiLCJtdWx0aXBseVNjYWxhciIsImRpdmlkZSIsImRpdmlkZVNjYWxhciIsImFwcGx5TWF0cml4MyIsImUiLCJlbGVtZW50cyIsImNsYW1wU2NhbGFyIiwibWluVmFsIiwibWF4VmFsIiwiY2xhbXBMZW5ndGgiLCJyb3VuZFRvWmVybyIsInRydW5jIiwibmVnYXRlIiwiZG90IiwiY3Jvc3MiLCJsZW5ndGhTcSIsInNxcnQiLCJtYW5oYXR0YW5MZW5ndGgiLCJhbmdsZSIsImF0YW4yIiwiYW5nbGVUbyIsImRlbm9taW5hdG9yIiwidGhldGEiLCJhY29zIiwiZGlzdGFuY2VUbyIsImRpc3RhbmNlVG9TcXVhcmVkIiwiZHgiLCJkeSIsIm1hbmhhdHRhbkRpc3RhbmNlVG8iLCJzZXRMZW5ndGgiLCJhbHBoYSIsImxlcnBWZWN0b3JzIiwidjEiLCJ2MiIsImVxdWFscyIsImZyb21BcnJheSIsIm9mZnNldCIsInRvQXJyYXkiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZ2V0WCIsImdldFkiLCJyb3RhdGVBcm91bmQiLCJjZW50ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk1hdHJpeDMiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJpc01hdHJpeDMiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4M0NvbHVtbiIsInNldEZyb21NYXRyaXg0IiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYWUiLCJiZSIsImExMSIsImExMiIsImExMyIsImEyMSIsImEyMiIsImEyMyIsImEzMSIsImEzMiIsImEzMyIsImIxMSIsImIxMiIsImIxMyIsImIyMSIsImIyMiIsImIyMyIsImIzMSIsImIzMiIsImIzMyIsImRldGVybWluYW50IiwiZCIsImYiLCJnIiwiaCIsImludmVydCIsInQxMSIsInQxMiIsInQxMyIsImRldCIsImRldEludiIsInRyYW5zcG9zZSIsInRtcCIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJyIiwic2V0VXZUcmFuc2Zvcm0iLCJ0eCIsInR5Iiwic3giLCJzeSIsInJvdGF0aW9uIiwiY3giLCJjeSIsInNjYWxlIiwiX20zIiwibWFrZVNjYWxlIiwicm90YXRlIiwibWFrZVJvdGF0aW9uIiwidHJhbnNsYXRlIiwibWFrZVRyYW5zbGF0aW9uIiwibWF0cml4IiwiYXJyYXlOZWVkc1VpbnQzMiIsIlRZUEVEX0FSUkFZUyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiRmxvYXQ2NEFycmF5IiwiZ2V0VHlwZWRBcnJheSIsImJ1ZmZlciIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUNhbnZhc0VsZW1lbnQiLCJjYW52YXMiLCJzdHlsZSIsImRpc3BsYXkiLCJfY2FjaGUiLCJ3YXJuT25jZSIsIm1lc3NhZ2UiLCJwcm9iZUFzeW5jIiwiZ2wiLCJzeW5jIiwiaW50ZXJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldFRpbWVvdXQiLCJwcm9iZSIsImNsaWVudFdhaXRTeW5jIiwiU1lOQ19GTFVTSF9DT01NQU5EU19CSVQiLCJXQUlUX0ZBSUxFRCIsIlRJTUVPVVRfRVhQSVJFRCIsInRvTm9ybWFsaXplZFByb2plY3Rpb25NYXRyaXgiLCJwcm9qZWN0aW9uTWF0cml4IiwidG9SZXZlcnNlZFByb2plY3Rpb25NYXRyaXgiLCJMSU5FQVJfUkVDNzA5X1RPX1hZWiIsIlhZWl9UT19MSU5FQVJfUkVDNzA5IiwiY3JlYXRlQ29sb3JNYW5hZ2VtZW50IiwiQ29sb3JNYW5hZ2VtZW50IiwiZW5hYmxlZCIsIndvcmtpbmdDb2xvclNwYWNlIiwic3BhY2VzIiwiY29udmVydCIsImNvbG9yIiwic291cmNlQ29sb3JTcGFjZSIsInRhcmdldENvbG9yU3BhY2UiLCJ0cmFuc2ZlciIsIlNSR0JUb0xpbmVhciIsInByaW1hcmllcyIsInRvWFlaIiwiZnJvbVhZWiIsIkxpbmVhclRvU1JHQiIsImZyb21Xb3JraW5nQ29sb3JTcGFjZSIsInRvV29ya2luZ0NvbG9yU3BhY2UiLCJnZXRQcmltYXJpZXMiLCJjb2xvclNwYWNlIiwiZ2V0VHJhbnNmZXIiLCJnZXRMdW1pbmFuY2VDb2VmZmljaWVudHMiLCJsdW1pbmFuY2VDb2VmZmljaWVudHMiLCJkZWZpbmUiLCJjb2xvclNwYWNlcyIsIk9iamVjdCIsImFzc2lnbiIsIl9nZXRNYXRyaXgiLCJ0YXJnZXRNYXRyaXgiLCJfZ2V0RHJhd2luZ0J1ZmZlckNvbG9yU3BhY2UiLCJvdXRwdXRDb2xvclNwYWNlQ29uZmlnIiwiZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2UiLCJfZ2V0VW5wYWNrQ29sb3JTcGFjZSIsIndvcmtpbmdDb2xvclNwYWNlQ29uZmlnIiwidW5wYWNrQ29sb3JTcGFjZSIsIlJFQzcwOV9QUklNQVJJRVMiLCJSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUyIsIkQ2NSIsIndoaXRlUG9pbnQiLCJfY2FudmFzIiwiSW1hZ2VVdGlscyIsImdldERhdGFVUkwiLCJpbWFnZSIsInRlc3QiLCJzcmMiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwic1JHQlRvTGluZWFyIiwiSFRNTEltYWdlRWxlbWVudCIsIkltYWdlQml0bWFwIiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiZGF0YSIsIl9zb3VyY2VJZCIsIlNvdXJjZSIsImlzU291cmNlIiwiZGVmaW5lUHJvcGVydHkiLCJ1dWlkIiwiZGF0YVJlYWR5IiwidmVyc2lvbiIsIm5lZWRzVXBkYXRlIiwidG9KU09OIiwibWV0YSIsImlzUm9vdE9iamVjdCIsImltYWdlcyIsIm91dHB1dCIsInVybCIsIkFycmF5IiwiaXNBcnJheSIsImlzRGF0YVRleHR1cmUiLCJzZXJpYWxpemVJbWFnZSIsImZyb20iLCJfdGV4dHVyZUlkIiwiVGV4dHVyZSIsIkRFRkFVTFRfSU1BR0UiLCJtYXBwaW5nIiwiREVGQVVMVF9NQVBQSU5HIiwid3JhcFMiLCJ3cmFwVCIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsImZvcm1hdCIsImFuaXNvdHJvcHkiLCJERUZBVUxUX0FOSVNPVFJPUFkiLCJzdXBlciIsImlzVGV4dHVyZSIsInNvdXJjZSIsIm1pcG1hcHMiLCJjaGFubmVsIiwiaW50ZXJuYWxGb3JtYXQiLCJyZXBlYXQiLCJtYXRyaXhBdXRvVXBkYXRlIiwiZ2VuZXJhdGVNaXBtYXBzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwidXNlckRhdGEiLCJvblVwZGF0ZSIsInJlbmRlclRhcmdldCIsImlzUmVuZGVyVGFyZ2V0VGV4dHVyZSIsInBtcmVtVmVyc2lvbiIsInVwZGF0ZU1hdHJpeCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInRleHR1cmVzIiwibWV0YWRhdGEiLCJnZW5lcmF0b3IiLCJ3cmFwIiwia2V5cyIsImRpc3Bvc2UiLCJ0cmFuc2Zvcm1VdiIsInV2IiwibmVlZHNQTVJFTVVwZGF0ZSIsIlZlY3RvcjQiLCJ6IiwidyIsImlzVmVjdG9yNCIsInNldFoiLCJzZXRXIiwiYXBwbHlNYXRyaXg0Iiwic2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24iLCJzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXgiLCJlcHNpbG9uIiwiZXBzaWxvbjIiLCJtMTEiLCJtMTIiLCJtMTMiLCJtMjEiLCJtMjIiLCJtMjMiLCJtMzEiLCJtMzIiLCJtMzMiLCJ4eCIsInl5IiwienoiLCJ4eSIsInh6IiwieXoiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJnZXRaIiwiZ2V0VyIsIlJlbmRlclRhcmdldCIsIm9wdGlvbnMiLCJpc1JlbmRlclRhcmdldCIsImRlcHRoIiwic2Npc3NvciIsInNjaXNzb3JUZXN0Iiwidmlld3BvcnQiLCJkZXB0aEJ1ZmZlciIsInN0ZW5jaWxCdWZmZXIiLCJyZXNvbHZlRGVwdGhCdWZmZXIiLCJyZXNvbHZlU3RlbmNpbEJ1ZmZlciIsImRlcHRoVGV4dHVyZSIsInNhbXBsZXMiLCJjb3VudCIsInRleHR1cmUiLCJfZGVwdGhUZXh0dXJlIiwiY3VycmVudCIsInNldFNpemUiLCJpbCIsIldlYkdMUmVuZGVyVGFyZ2V0IiwiaXNXZWJHTFJlbmRlclRhcmdldCIsIkRhdGFBcnJheVRleHR1cmUiLCJpc0RhdGFBcnJheVRleHR1cmUiLCJ3cmFwUiIsImxheWVyVXBkYXRlcyIsIlNldCIsImFkZExheWVyVXBkYXRlIiwibGF5ZXJJbmRleCIsImNsZWFyTGF5ZXJVcGRhdGVzIiwiY2xlYXIiLCJXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IiwiaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IiwiRGF0YTNEVGV4dHVyZSIsImlzRGF0YTNEVGV4dHVyZSIsIldlYkdMM0RSZW5kZXJUYXJnZXQiLCJpc1dlYkdMM0RSZW5kZXJUYXJnZXQiLCJRdWF0ZXJuaW9uIiwiaXNRdWF0ZXJuaW9uIiwiX3giLCJfeSIsIl96IiwiX3ciLCJzbGVycEZsYXQiLCJkc3QiLCJkc3RPZmZzZXQiLCJzcmMwIiwic3JjT2Zmc2V0MCIsInNyYzEiLCJzcmNPZmZzZXQxIiwieDAiLCJ5MCIsInowIiwidzAiLCJ4MSIsInkxIiwiejEiLCJ3MSIsImRpciIsInNxclNpbiIsIk51bWJlciIsIkVQU0lMT04iLCJsZW4iLCJ0RGlyIiwibXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQiLCJfb25DaGFuZ2VDYWxsYmFjayIsInF1YXRlcm5pb24iLCJzZXRGcm9tRXVsZXIiLCJldWxlciIsInVwZGF0ZSIsIl9vcmRlciIsImMxIiwiYzMiLCJzMSIsInMzIiwic2V0RnJvbUF4aXNBbmdsZSIsImF4aXMiLCJoYWxmQW5nbGUiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJ0cmFjZSIsInNldEZyb21Vbml0VmVjdG9ycyIsInZGcm9tIiwidlRvIiwicm90YXRlVG93YXJkcyIsInN0ZXAiLCJzbGVycCIsImNvbmp1Z2F0ZSIsIm11bHRpcGx5UXVhdGVybmlvbnMiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJxYiIsImNvc0hhbGZUaGV0YSIsInNxclNpbkhhbGZUaGV0YSIsInNpbkhhbGZUaGV0YSIsImhhbGZUaGV0YSIsInJhdGlvQSIsInJhdGlvQiIsInNsZXJwUXVhdGVybmlvbnMiLCJxYSIsInRoZXRhMSIsInRoZXRhMiIsInIxIiwicjIiLCJfb25DaGFuZ2UiLCJjYWxsYmFjayIsIlZlY3RvcjMiLCJpc1ZlY3RvcjMiLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiX3F1YXRlcm5pb24kNCIsImFwcGx5QXhpc0FuZ2xlIiwiYXBwbHlOb3JtYWxNYXRyaXgiLCJ2eCIsInZ5IiwidnoiLCJxeCIsInF5IiwicXoiLCJxdyIsInR6IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInVucHJvamVjdCIsInByb2plY3Rpb25NYXRyaXhJbnZlcnNlIiwibWF0cml4V29ybGQiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJjcm9zc1ZlY3RvcnMiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJwcm9qZWN0T25WZWN0b3IiLCJwcm9qZWN0T25QbGFuZSIsInBsYW5lTm9ybWFsIiwiX3ZlY3RvciRjIiwicmVmbGVjdCIsIm5vcm1hbCIsImR6Iiwic2V0RnJvbVNwaGVyaWNhbCIsInNldEZyb21TcGhlcmljYWxDb29yZHMiLCJyYWRpdXMiLCJwaGkiLCJzaW5QaGlSYWRpdXMiLCJzZXRGcm9tQ3lsaW5kcmljYWwiLCJzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMiLCJzZXRGcm9tTWF0cml4U2NhbGUiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwic3oiLCJzZXRGcm9tQ29sb3IiLCJyYW5kb21EaXJlY3Rpb24iLCJ1IiwiQm94MyIsIkluZmluaXR5IiwiaXNCb3gzIiwic2V0RnJvbUFycmF5IiwibWFrZUVtcHR5IiwiZXhwYW5kQnlQb2ludCIsIl92ZWN0b3IkYiIsInNldEZyb21CdWZmZXJBdHRyaWJ1dGUiLCJzZXRGcm9tUG9pbnRzIiwicG9pbnRzIiwic2V0RnJvbUNlbnRlckFuZFNpemUiLCJzaXplIiwiaGFsZlNpemUiLCJzZXRGcm9tT2JqZWN0Iiwib2JqZWN0IiwicHJlY2lzZSIsImV4cGFuZEJ5T2JqZWN0IiwiYm94IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwidmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsImdlb21ldHJ5IiwicG9zaXRpb25BdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZE1lc2giLCJpc01lc2giLCJnZXRWZXJ0ZXhQb3NpdGlvbiIsImJvdW5kaW5nQm94IiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiX2JveCQ0IiwidW5pb24iLCJjaGlsZHJlbiIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ0cmlhbmdsZSIsIl9jZW50ZXIiLCJfZXh0ZW50cyIsIl92MCQyIiwiX3YxJDciLCJfdjIkNCIsIl9mMCIsIl9mMSIsIl9mMiIsImF4ZXMiLCJzYXRGb3JBeGVzIiwiX3RyaWFuZ2xlTm9ybWFsIiwiZGlzdGFuY2VUb1BvaW50IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3QiLCJfcG9pbnRzIiwiX3Rlc3RBeGlzIiwidjAiLCJleHRlbnRzIiwiaiIsInAwIiwicDEiLCJwMiIsIl9ib3gkMyIsIl92MSQ2IiwiX3YyJDMiLCJTcGhlcmUiLCJpc1NwaGVyZSIsIm9wdGlvbmFsQ2VudGVyIiwibWF4UmFkaXVzU3EiLCJyYWRpdXNTdW0iLCJkZWx0YUxlbmd0aFNxIiwiZ2V0Qm91bmRpbmdCb3giLCJnZXRNYXhTY2FsZU9uQXhpcyIsImRlbHRhIiwiX3ZlY3RvciRhIiwiX3NlZ0NlbnRlciIsIl9zZWdEaXIiLCJfZGlmZiIsIl9lZGdlMSIsIl9lZGdlMiIsIl9ub3JtYWwkMSIsIlJheSIsIm9yaWdpbiIsImRpcmVjdGlvbiIsInJheSIsImF0IiwibG9va0F0IiwicmVjYXN0IiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsImRpcmVjdGlvbkRpc3RhbmNlIiwiZGlzdGFuY2VTcVRvUG9pbnQiLCJkaXN0YW5jZVNxVG9TZWdtZW50Iiwib3B0aW9uYWxQb2ludE9uUmF5Iiwib3B0aW9uYWxQb2ludE9uU2VnbWVudCIsInNlZ0V4dGVudCIsImEwMSIsImIwIiwiczAiLCJzcXJEaXN0IiwiZXh0RGV0IiwiaW52RGV0IiwiaW50ZXJzZWN0U3BoZXJlIiwidGNhIiwicmFkaXVzMiIsInRoYyIsInQwIiwidDEiLCJkaXN0YW5jZVRvUGxhbmUiLCJpbnRlcnNlY3RQbGFuZSIsImRpc3RUb1BvaW50IiwiaW50ZXJzZWN0Qm94IiwidG1pbiIsInRtYXgiLCJ0eW1pbiIsInR5bWF4IiwidHptaW4iLCJ0em1heCIsImludmRpcngiLCJpbnZkaXJ5IiwiaW52ZGlyeiIsImlzTmFOIiwiaW50ZXJzZWN0VHJpYW5nbGUiLCJiYWNrZmFjZUN1bGxpbmciLCJzaWduIiwiRGROIiwiRGRReEUyIiwiRGRFMXhRIiwiUWROIiwiTWF0cml4NCIsIm4xNCIsIm4yNCIsIm4zNCIsIm40MSIsIm40MiIsIm40MyIsIm40NCIsImlzTWF0cml4NCIsImNvcHlQb3NpdGlvbiIsInNldEZyb21NYXRyaXgzIiwibWFrZUJhc2lzIiwiZXh0cmFjdFJvdGF0aW9uIiwic2NhbGVYIiwiX3YxJDUiLCJzY2FsZVkiLCJzY2FsZVoiLCJtYWtlUm90YXRpb25Gcm9tRXVsZXIiLCJhZiIsImJmIiwiY2UiLCJjZiIsImRlIiwiZGYiLCJhYyIsImFkIiwiYmMiLCJiZCIsIm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwiY29tcG9zZSIsIl96ZXJvIiwiX29uZSIsImV5ZSIsInVwIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjE0IiwiYjI0IiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0Iiwic2V0UG9zaXRpb24iLCJ0MTQiLCJzY2FsZVhTcSIsInNjYWxlWVNxIiwic2NhbGVaU3EiLCJtYWtlUm90YXRpb25YIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwibWFrZVNoZWFyIiwieXgiLCJ6eCIsInp5IiwicG9zaXRpb24iLCJ4MiIsInkyIiwiejIiLCJ3eCIsInd5Iiwid3oiLCJkZWNvbXBvc2UiLCJfbTEkMiIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJjb29yZGluYXRlU3lzdGVtIiwibWFrZU9ydGhvZ3JhcGhpYyIsInAiLCJ6SW52IiwiX21hdHJpeCQyIiwiX3F1YXRlcm5pb24kMyIsIkV1bGVyIiwiREVGQVVMVF9PUkRFUiIsImlzRXVsZXIiLCJhc2luIiwic2V0RnJvbVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJlb3JkZXIiLCJuZXdPcmRlciIsIkxheWVycyIsIm1hc2siLCJlbmFibGUiLCJlbmFibGVBbGwiLCJ0b2dnbGUiLCJkaXNhYmxlIiwiZGlzYWJsZUFsbCIsImxheWVycyIsImlzRW5hYmxlZCIsIl9vYmplY3QzRElkIiwiX3YxJDQiLCJfcTEiLCJfbTEkMSIsIl90YXJnZXQiLCJfcG9zaXRpb24kMyIsIl9zY2FsZSQyIiwiX3F1YXRlcm5pb24kMiIsIl94QXhpcyIsIl95QXhpcyIsIl96QXhpcyIsIl9hZGRlZEV2ZW50IiwiX3JlbW92ZWRFdmVudCIsIl9jaGlsZGFkZGVkRXZlbnQiLCJjaGlsZCIsIl9jaGlsZHJlbW92ZWRFdmVudCIsIk9iamVjdDNEIiwiaXNPYmplY3QzRCIsInBhcmVudCIsIkRFRkFVTFRfVVAiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFIiwibWF0cml4V29ybGRBdXRvVXBkYXRlIiwiREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUiLCJtYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwidmlzaWJsZSIsImNhc3RTaGFkb3ciLCJyZWNlaXZlU2hhZG93IiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwiYW5pbWF0aW9ucyIsIm9uQmVmb3JlU2hhZG93Iiwib25BZnRlclNoYWRvdyIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsInNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSIsInNldFJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tTWF0cml4Iiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsInJvdGF0ZU9uQXhpcyIsInJvdGF0ZU9uV29ybGRBeGlzIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwidHJhbnNsYXRlT25BeGlzIiwiZGlzdGFuY2UiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJsb2NhbFRvV29ybGQiLCJ3b3JsZFRvTG9jYWwiLCJpc0NhbWVyYSIsImlzTGlnaHQiLCJhcmd1bWVudHMiLCJlcnJvciIsInJlbW92ZUZyb21QYXJlbnQiLCJyZW1vdmUiLCJhdHRhY2giLCJnZXRPYmplY3RCeUlkIiwiaWQiLCJnZXRPYmplY3RCeVByb3BlcnR5IiwiZ2V0T2JqZWN0QnlOYW1lIiwiZ2V0T2JqZWN0c0J5UHJvcGVydHkiLCJyZXN1bHQiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRTY2FsZSIsImdldFdvcmxkRGlyZWN0aW9uIiwicmF5Y2FzdCIsInRyYXZlcnNlIiwidHJhdmVyc2VWaXNpYmxlIiwidHJhdmVyc2VBbmNlc3RvcnMiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImZvcmNlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiZ2VvbWV0cmllcyIsIm1hdGVyaWFscyIsInNoYXBlcyIsInNrZWxldG9ucyIsIm5vZGVzIiwic2VyaWFsaXplIiwibGlicmFyeSIsImVsZW1lbnQiLCJpbnN0YW5jZU1hdHJpeCIsImluc3RhbmNlQ29sb3IiLCJpc0JhdGNoZWRNZXNoIiwicGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCIsInNvcnRPYmplY3RzIiwiZHJhd1JhbmdlcyIsIl9kcmF3UmFuZ2VzIiwicmVzZXJ2ZWRSYW5nZXMiLCJfcmVzZXJ2ZWRSYW5nZXMiLCJ2aXNpYmlsaXR5IiwiX3Zpc2liaWxpdHkiLCJhY3RpdmUiLCJfYWN0aXZlIiwiYm91bmRzIiwiX2JvdW5kcyIsIm1hcCIsImJvdW5kIiwiYm94SW5pdGlhbGl6ZWQiLCJib3hNaW4iLCJib3hNYXgiLCJzcGhlcmVJbml0aWFsaXplZCIsInNwaGVyZVJhZGl1cyIsInNwaGVyZUNlbnRlciIsIm1heEluc3RhbmNlQ291bnQiLCJfbWF4SW5zdGFuY2VDb3VudCIsIm1heFZlcnRleENvdW50IiwiX21heFZlcnRleENvdW50IiwibWF4SW5kZXhDb3VudCIsIl9tYXhJbmRleENvdW50IiwiZ2VvbWV0cnlJbml0aWFsaXplZCIsIl9nZW9tZXRyeUluaXRpYWxpemVkIiwiZ2VvbWV0cnlDb3VudCIsIl9nZW9tZXRyeUNvdW50IiwibWF0cmljZXNUZXh0dXJlIiwiX21hdHJpY2VzVGV4dHVyZSIsIl9jb2xvcnNUZXh0dXJlIiwiY29sb3JzVGV4dHVyZSIsImJvdW5kaW5nU3BoZXJlIiwiaXNTY2VuZSIsImJhY2tncm91bmQiLCJpc0NvbG9yIiwiZW52aXJvbm1lbnQiLCJpc0xpbmUiLCJpc1BvaW50cyIsInBhcmFtZXRlcnMiLCJzaGFwZSIsImlzU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJza2VsZXRvbiIsIm1hdGVyaWFsIiwidXVpZHMiLCJhbmltYXRpb24iLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJrZXkiLCJyZWN1cnNpdmUiLCJfdjAkMSIsIl92MSQzIiwiX3YyJDIiLCJfdjMkMiIsIl92YWIiLCJfdmFjIiwiX3ZiYyIsIl92YXAiLCJfdmJwIiwiX3ZjcCIsIl92NDAiLCJfdjQxIiwiX3Y0MiIsIlRyaWFuZ2xlIiwiZ2V0Tm9ybWFsIiwidGFyZ2V0TGVuZ3RoU3EiLCJnZXRCYXJ5Y29vcmQiLCJkb3QwMCIsImRvdDAxIiwiZG90MDIiLCJkb3QxMSIsImRvdDEyIiwiZGVub20iLCJpbnZEZW5vbSIsImdldEludGVycG9sYXRpb24iLCJwMyIsInYzIiwiZ2V0SW50ZXJwb2xhdGVkQXR0cmlidXRlIiwiYXR0ciIsImkxIiwiaTIiLCJpMyIsImJhcnljb29yZCIsImlzRnJvbnRGYWNpbmciLCJzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyIsImkwIiwic2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMiLCJnZXRBcmVhIiwiZ2V0TWlkcG9pbnQiLCJnZXRQbGFuZSIsInNldEZyb21Db3BsYW5hclBvaW50cyIsImQ0IiwidmMiLCJkNSIsImQ2IiwidmIiLCJ2YSIsIl9jb2xvcktleXdvcmRzIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJfaHNsQSIsIl9oc2xCIiwiaHVlMnJnYiIsIkNvbG9yIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJzZXRSR0IiLCJoZXgiLCJzZXRIU0wiLCJoYW5kbGVBbHBoYSIsInN0cmluZyIsInBhcnNlRmxvYXQiLCJleGVjIiwiY29tcG9uZW50cyIsInBhcnNlSW50IiwiY2hhckF0Iiwic2V0Q29sb3JOYW1lIiwiY29weVNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiY29udmVydExpbmVhclRvU1JHQiIsImdldEhleCIsIl9jb2xvciIsImdldEhleFN0cmluZyIsInRvU3RyaW5nIiwiZ2V0SFNMIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImdldFJHQiIsImdldFN0eWxlIiwidG9GaXhlZCIsIm9mZnNldEhTTCIsImFkZENvbG9ycyIsImNvbG9yMSIsImNvbG9yMiIsImxlcnBDb2xvcnMiLCJsZXJwSFNMIiwiTkFNRVMiLCJfbWF0ZXJpYWxJZCIsIk1hdGVyaWFsIiwiaXNNYXRlcmlhbCIsImJsZW5kaW5nIiwic2lkZSIsInZlcnRleENvbG9ycyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImFscGhhSGFzaCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJibGVuZENvbG9yIiwiYmxlbmRBbHBoYSIsImRlcHRoRnVuYyIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJzdGVuY2lsV3JpdGVNYXNrIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsUmVmIiwic3RlbmNpbEZ1bmNNYXNrIiwic3RlbmNpbEZhaWwiLCJzdGVuY2lsWkZhaWwiLCJzdGVuY2lsWlBhc3MiLCJzdGVuY2lsV3JpdGUiLCJjbGlwcGluZ1BsYW5lcyIsImNsaXBJbnRlcnNlY3Rpb24iLCJjbGlwU2hhZG93cyIsInNoYWRvd1NpZGUiLCJjb2xvcldyaXRlIiwicHJlY2lzaW9uIiwicG9seWdvbk9mZnNldCIsInBvbHlnb25PZmZzZXRGYWN0b3IiLCJwb2x5Z29uT2Zmc2V0VW5pdHMiLCJkaXRoZXJpbmciLCJhbHBoYVRvQ292ZXJhZ2UiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJmb3JjZVNpbmdsZVBhc3MiLCJ0b25lTWFwcGVkIiwiX2FscGhhVGVzdCIsImFscGhhVGVzdCIsIm9uQmVmb3JlQ29tcGlsZSIsImN1c3RvbVByb2dyYW1DYWNoZUtleSIsInNldFZhbHVlcyIsIm5ld1ZhbHVlIiwiY3VycmVudFZhbHVlIiwicm91Z2huZXNzIiwibWV0YWxuZXNzIiwic2hlZW4iLCJzaGVlbkNvbG9yIiwic2hlZW5Sb3VnaG5lc3MiLCJlbWlzc2l2ZSIsImVtaXNzaXZlSW50ZW5zaXR5Iiwic3BlY3VsYXIiLCJzcGVjdWxhckludGVuc2l0eSIsInNwZWN1bGFyQ29sb3IiLCJzaGluaW5lc3MiLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRSb3VnaG5lc3MiLCJjbGVhcmNvYXRNYXAiLCJjbGVhcmNvYXRSb3VnaG5lc3NNYXAiLCJjbGVhcmNvYXROb3JtYWxNYXAiLCJjbGVhcmNvYXROb3JtYWxTY2FsZSIsImRpc3BlcnNpb24iLCJpcmlkZXNjZW5jZSIsImlyaWRlc2NlbmNlSU9SIiwiaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSIsImlyaWRlc2NlbmNlTWFwIiwiaXJpZGVzY2VuY2VUaGlja25lc3NNYXAiLCJhbmlzb3Ryb3B5Um90YXRpb24iLCJhbmlzb3Ryb3B5TWFwIiwibWF0Y2FwIiwiYWxwaGFNYXAiLCJsaWdodE1hcCIsImxpZ2h0TWFwSW50ZW5zaXR5IiwiYW9NYXAiLCJhb01hcEludGVuc2l0eSIsImJ1bXBNYXAiLCJidW1wU2NhbGUiLCJub3JtYWxNYXAiLCJub3JtYWxNYXBUeXBlIiwibm9ybWFsU2NhbGUiLCJkaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZW1lbnRTY2FsZSIsImRpc3BsYWNlbWVudEJpYXMiLCJyb3VnaG5lc3NNYXAiLCJtZXRhbG5lc3NNYXAiLCJlbWlzc2l2ZU1hcCIsInNwZWN1bGFyTWFwIiwic3BlY3VsYXJJbnRlbnNpdHlNYXAiLCJzcGVjdWxhckNvbG9yTWFwIiwiZW52TWFwIiwiY29tYmluZSIsImVudk1hcFJvdGF0aW9uIiwiZW52TWFwSW50ZW5zaXR5IiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwiZ3JhZGllbnRNYXAiLCJ0cmFuc21pc3Npb24iLCJ0cmFuc21pc3Npb25NYXAiLCJ0aGlja25lc3MiLCJ0aGlja25lc3NNYXAiLCJhdHRlbnVhdGlvbkRpc3RhbmNlIiwiYXR0ZW51YXRpb25Db2xvciIsInNpemVBdHRlbnVhdGlvbiIsImxpbmV3aWR0aCIsImRhc2hTaXplIiwiZ2FwU2l6ZSIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsIndpcmVmcmFtZUxpbmVjYXAiLCJ3aXJlZnJhbWVMaW5lam9pbiIsImZsYXRTaGFkaW5nIiwiZm9nIiwic3JjUGxhbmVzIiwiZHN0UGxhbmVzIiwib25CdWlsZCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsIl90YWJsZXMiLCJfZ2VuZXJhdGVUYWJsZXMiLCJBcnJheUJ1ZmZlciIsImZsb2F0VmlldyIsInVpbnQzMlZpZXciLCJiYXNlVGFibGUiLCJzaGlmdFRhYmxlIiwibWFudGlzc2FUYWJsZSIsImV4cG9uZW50VGFibGUiLCJvZmZzZXRUYWJsZSIsInRvSGFsZkZsb2F0IiwidmFsIiwiZnJvbUhhbGZGbG9hdCIsIkRhdGFVdGlscyIsIl92ZWN0b3IkOSIsIl92ZWN0b3IyJDEiLCJfaWQkMiIsIkJ1ZmZlckF0dHJpYnV0ZSIsIml0ZW1TaXplIiwibm9ybWFsaXplZCIsIlR5cGVFcnJvciIsImlzQnVmZmVyQXR0cmlidXRlIiwidXNhZ2UiLCJ1cGRhdGVSYW5nZXMiLCJncHVUeXBlIiwib25VcGxvYWRDYWxsYmFjayIsInNldFVzYWdlIiwiYWRkVXBkYXRlUmFuZ2UiLCJzdGFydCIsImNsZWFyVXBkYXRlUmFuZ2VzIiwiY29weUF0IiwiaW5kZXgxIiwiaW5kZXgyIiwiY29weUFycmF5Iiwic2V0WFkiLCJzZXRYWVoiLCJjb21wb25lbnQiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJJbnQ4QnVmZmVyQXR0cmlidXRlIiwiVWludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUiLCJJbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkludDMyQnVmZmVyQXR0cmlidXRlIiwiVWludDMyQnVmZmVyQXR0cmlidXRlIiwiRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSIsImlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJfaWQkMSIsIl9tMSIsIl9vYmoiLCJfb2Zmc2V0IiwiX2JveCQyIiwiX2JveE1vcnBoVGFyZ2V0cyIsIl92ZWN0b3IkOCIsIkJ1ZmZlckdlb21ldHJ5IiwiaXNCdWZmZXJHZW9tZXRyeSIsImluZGlyZWN0IiwiYXR0cmlidXRlcyIsIm1vcnBoQXR0cmlidXRlcyIsIm1vcnBoVGFyZ2V0c1JlbGF0aXZlIiwiZ3JvdXBzIiwiZHJhd1JhbmdlIiwiZ2V0SW5kZXgiLCJzZXRJbmRleCIsInNldEluZGlyZWN0IiwiZ2V0SW5kaXJlY3QiLCJzZXRBdHRyaWJ1dGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJhZGRHcm91cCIsIm1hdGVyaWFsSW5kZXgiLCJjbGVhckdyb3VwcyIsInNldERyYXdSYW5nZSIsInRhbmdlbnQiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiIsImlzR0xCdWZmZXJBdHRyaWJ1dGUiLCJtb3JwaEF0dHJpYnV0ZSIsImpsIiwiY29tcHV0ZVRhbmdlbnRzIiwibm9ybWFsQXR0cmlidXRlIiwidXZBdHRyaWJ1dGUiLCJ0YW5nZW50QXR0cmlidXRlIiwidGFuMSIsInRhbjIiLCJ2QSIsInZCIiwidkMiLCJ1dkEiLCJ1dkIiLCJ1dkMiLCJzZGlyIiwidGRpciIsImhhbmRsZVRyaWFuZ2xlIiwiaXNGaW5pdGUiLCJncm91cCIsInRtcDIiLCJuMiIsImhhbmRsZVZlcnRleCIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwicEEiLCJwQiIsInBDIiwibkEiLCJuQiIsIm5DIiwiY2IiLCJhYiIsIm5vcm1hbGl6ZU5vcm1hbHMiLCJub3JtYWxzIiwidG9Ob25JbmRleGVkIiwiY29udmVydEJ1ZmZlckF0dHJpYnV0ZSIsImluZGljZXMiLCJhcnJheTIiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwic3RyaWRlIiwiZ2VvbWV0cnkyIiwibmV3QXR0cmlidXRlIiwibW9ycGhBcnJheSIsImhhc01vcnBoQXR0cmlidXRlcyIsImF0dHJpYnV0ZUFycmF5IiwiX2ludmVyc2VNYXRyaXgkMyIsIl9yYXkkMyIsIl9zcGhlcmUkNiIsIl9zcGhlcmVIaXRBdCIsIl92QSQxIiwiX3ZCJDEiLCJfdkMkMSIsIl90ZW1wQSIsIl9tb3JwaEEiLCJfaW50ZXJzZWN0aW9uUG9pbnQiLCJfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsIk1lc2giLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJtb3JwaFRhcmdldEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldERpY3Rpb25hcnkiLCJtbCIsIlN0cmluZyIsIm1vcnBoUG9zaXRpb24iLCJtb3JwaEluZmx1ZW5jZXMiLCJpbmZsdWVuY2UiLCJyYXljYXN0ZXIiLCJpbnRlcnNlY3RzIiwiX2NvbXB1dGVJbnRlcnNlY3Rpb25zIiwicmF5TG9jYWxTcGFjZSIsImludGVyc2VjdGlvbiIsInV2MSIsImdyb3VwTWF0ZXJpYWwiLCJjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uIiwiZmFjZUluZGV4IiwiZmFjZSIsImNoZWNrSW50ZXJzZWN0aW9uJDEiLCJCb3hHZW9tZXRyeSIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImRlcHRoU2VnbWVudHMiLCJzY29wZSIsInZlcnRpY2VzIiwidXZzIiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsIml5IiwiaXgiLCJmcm9tSlNPTiIsImNsb25lVW5pZm9ybXMiLCJwcm9wZXJ0eSIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsImdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UiLCJyZW5kZXJlciIsImN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRSZW5kZXJUYXJnZXQiLCJvdXRwdXRDb2xvclNwYWNlIiwiaXNYUlJlbmRlclRhcmdldCIsIlVuaWZvcm1zVXRpbHMiLCJtZXJnZSIsIlNoYWRlck1hdGVyaWFsIiwiaXNTaGFkZXJNYXRlcmlhbCIsImRlZmluZXMiLCJ1bmlmb3Jtc0dyb3VwcyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibGlnaHRzIiwiY2xpcHBpbmciLCJleHRlbnNpb25zIiwiY2xpcEN1bGxEaXN0YW5jZSIsIm11bHRpRHJhdyIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJpbmRleDBBdHRyaWJ1dGVOYW1lIiwidW5pZm9ybXNOZWVkVXBkYXRlIiwiZ2xzbFZlcnNpb24iLCJjbG9uZVVuaWZvcm1zR3JvdXBzIiwiQ2FtZXJhIiwiX3YzJDEiLCJfbWluVGFyZ2V0IiwiX21heFRhcmdldCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiZm92IiwiYXNwZWN0IiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwiZ2V0Vmlld0JvdW5kcyIsIm1pblRhcmdldCIsIm1heFRhcmdldCIsImdldFZpZXdTaXplIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInNrZXciLCJDdWJlQ2FtZXJhIiwiYWN0aXZlTWlwbWFwTGV2ZWwiLCJjYW1lcmFQWCIsImNhbWVyYU5YIiwiY2FtZXJhUFkiLCJjYW1lcmFOWSIsImNhbWVyYVBaIiwiY2FtZXJhTloiLCJ1cGRhdGVDb29yZGluYXRlU3lzdGVtIiwiY2FtZXJhcyIsImNvbmNhdCIsInNjZW5lIiwiY3VycmVudEFjdGl2ZUN1YmVGYWNlIiwiZ2V0QWN0aXZlQ3ViZUZhY2UiLCJjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJnZXRBY3RpdmVNaXBtYXBMZXZlbCIsImN1cnJlbnRYckVuYWJsZWQiLCJ4ciIsInNldFJlbmRlclRhcmdldCIsInJlbmRlciIsIkN1YmVUZXh0dXJlIiwiaXNDdWJlVGV4dHVyZSIsIldlYkdMQ3ViZVJlbmRlclRhcmdldCIsImlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IiwiZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUiLCJzaGFkZXIiLCJ0RXF1aXJlY3QiLCJtZXNoIiwiY3VycmVudE1pbkZpbHRlciIsInN0ZW5jaWwiLCJHcm91cCIsImlzR3JvdXAiLCJfbW92ZUV2ZW50IiwiV2ViWFJDb250cm9sbGVyIiwiX3RhcmdldFJheSIsIl9ncmlwIiwiX2hhbmQiLCJnZXRIYW5kU3BhY2UiLCJqb2ludHMiLCJpbnB1dFN0YXRlIiwicGluY2hpbmciLCJnZXRUYXJnZXRSYXlTcGFjZSIsImhhc0xpbmVhclZlbG9jaXR5IiwibGluZWFyVmVsb2NpdHkiLCJoYXNBbmd1bGFyVmVsb2NpdHkiLCJhbmd1bGFyVmVsb2NpdHkiLCJnZXRHcmlwU3BhY2UiLCJjb25uZWN0IiwiaW5wdXRTb3VyY2UiLCJoYW5kIiwiaW5wdXRqb2ludCIsIl9nZXRIYW5kSm9pbnQiLCJkaXNjb25uZWN0IiwiZnJhbWUiLCJyZWZlcmVuY2VTcGFjZSIsImlucHV0UG9zZSIsImdyaXBQb3NlIiwiaGFuZFBvc2UiLCJ0YXJnZXRSYXkiLCJncmlwIiwic2Vzc2lvbiIsInZpc2liaWxpdHlTdGF0ZSIsImpvaW50UG9zZSIsImdldEpvaW50UG9zZSIsImpvaW50IiwidHJhbnNmb3JtIiwiam9pbnRSYWRpdXMiLCJpbmRleFRpcCIsInRodW1iVGlwIiwiZGlzdGFuY2VUb1BpbmNoIiwidGhyZXNob2xkIiwiaGFuZGVkbmVzcyIsImdyaXBTcGFjZSIsImdldFBvc2UiLCJ0YXJnZXRSYXlTcGFjZSIsImpvaW50TmFtZSIsIkZvZ0V4cDIiLCJkZW5zaXR5IiwiaXNGb2dFeHAyIiwiRm9nIiwiaXNGb2ciLCJTY2VuZSIsImJhY2tncm91bmRCbHVycmluZXNzIiwiYmFja2dyb3VuZEludGVuc2l0eSIsImJhY2tncm91bmRSb3RhdGlvbiIsImVudmlyb25tZW50SW50ZW5zaXR5IiwiZW52aXJvbm1lbnRSb3RhdGlvbiIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsIkludGVybGVhdmVkQnVmZmVyIiwiaXNJbnRlcmxlYXZlZEJ1ZmZlciIsImFycmF5QnVmZmVycyIsIl91dWlkIiwiaWIiLCJfdmVjdG9yJDciLCJJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsImludGVybGVhdmVkQnVmZmVyIiwiaW50ZXJsZWF2ZWRCdWZmZXJzIiwiU3ByaXRlTWF0ZXJpYWwiLCJpc1Nwcml0ZU1hdGVyaWFsIiwiX2dlb21ldHJ5IiwiX2ludGVyc2VjdFBvaW50IiwiX3dvcmxkU2NhbGUiLCJfbXZQb3NpdGlvbiIsIl9hbGlnbmVkUG9zaXRpb24iLCJfcm90YXRlZFBvc2l0aW9uIiwiX3ZpZXdXb3JsZE1hdHJpeCIsIl92QSIsIl92QiIsIl92QyIsIl91dkEiLCJfdXZCIiwiX3V2QyIsIlNwcml0ZSIsImlzU3ByaXRlIiwiZmxvYXQzMkFycmF5IiwidHJhbnNmb3JtVmVydGV4IiwidmVydGV4UG9zaXRpb24iLCJtdlBvc2l0aW9uIiwiX3YxJDIiLCJfdjIkMSIsIkxPRCIsIl9jdXJyZW50TGV2ZWwiLCJsZXZlbHMiLCJpc0xPRCIsImF1dG9VcGRhdGUiLCJsZXZlbCIsImFkZExldmVsIiwiaHlzdGVyZXNpcyIsInJlbW92ZUxldmVsIiwicmVtb3ZlZEVsZW1lbnRzIiwiZ2V0Q3VycmVudExldmVsIiwiZ2V0T2JqZWN0Rm9yRGlzdGFuY2UiLCJsZXZlbERpc3RhbmNlIiwiX2Jhc2VQb3NpdGlvbiIsIl9za2luSW5kZXgiLCJfc2tpbldlaWdodCIsIl92ZWN0b3IzIiwiX21hdHJpeDQiLCJfdmVydGV4IiwiX3NwaGVyZSQ1IiwiX2ludmVyc2VNYXRyaXgkMiIsIl9yYXkkMiIsIlNraW5uZWRNZXNoIiwiYmluZE1hdHJpeEludmVyc2UiLCJhcHBseUJvbmVUcmFuc2Zvcm0iLCJiaW5kIiwiY2FsY3VsYXRlSW52ZXJzZXMiLCJwb3NlIiwibm9ybWFsaXplU2tpbldlaWdodHMiLCJza2luV2VpZ2h0Iiwic2tpbkluZGV4Iiwid2VpZ2h0IiwiYm9uZUluZGV4IiwiYm9uZXMiLCJib25lSW52ZXJzZXMiLCJCb25lIiwiaXNCb25lIiwiRGF0YVRleHR1cmUiLCJfb2Zmc2V0TWF0cml4IiwiX2lkZW50aXR5TWF0cml4IiwiU2tlbGV0b24iLCJib25lTWF0cmljZXMiLCJib25lVGV4dHVyZSIsImluaXQiLCJpbnZlcnNlIiwiYm9uZSIsImNvbXB1dGVCb25lVGV4dHVyZSIsImdldEJvbmVCeU5hbWUiLCJqc29uIiwiYm9uZUludmVyc2UiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJtZXNoUGVyQXR0cmlidXRlIiwiaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJfaW5zdGFuY2VMb2NhbE1hdHJpeCIsIl9pbnN0YW5jZVdvcmxkTWF0cml4IiwiX2luc3RhbmNlSW50ZXJzZWN0cyIsIl9ib3gzIiwiX2lkZW50aXR5IiwiX21lc2gkMSIsIl9zcGhlcmUkNCIsIkluc3RhbmNlZE1lc2giLCJtb3JwaFRleHR1cmUiLCJzZXRNYXRyaXhBdCIsImdldE1hdHJpeEF0IiwiZ2V0Q29sb3JBdCIsImdldE1vcnBoQXQiLCJvYmplY3RJbmZsdWVuY2VzIiwiZGF0YUluZGV4IiwicmF5Y2FzdFRpbWVzIiwiaW5zdGFuY2VJZCIsInNldENvbG9yQXQiLCJmaWxsIiwic2V0TW9ycGhBdCIsIm1vcnBoSW5mbHVlbmNlc1N1bSIsIm1vcnBoQmFzZUluZmx1ZW5jZSIsIl92ZWN0b3IxIiwiX3ZlY3RvcjIiLCJfbm9ybWFsTWF0cml4IiwiUGxhbmUiLCJpc1BsYW5lIiwic2V0Q29tcG9uZW50cyIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50IiwiaW52ZXJzZU5vcm1hbExlbmd0aCIsImRpc3RhbmNlVG9TcGhlcmUiLCJwcm9qZWN0UG9pbnQiLCJpbnRlcnNlY3RMaW5lIiwibGluZSIsImludGVyc2VjdHNMaW5lIiwic3RhcnRTaWduIiwiZW5kU2lnbiIsImVuZCIsImNvcGxhbmFyUG9pbnQiLCJvcHRpb25hbE5vcm1hbE1hdHJpeCIsInJlZmVyZW5jZVBvaW50IiwiX3NwaGVyZSQzIiwiX3ZlY3RvciQ2IiwiRnJ1c3R1bSIsInA0IiwicDUiLCJwbGFuZXMiLCJmcnVzdHVtIiwic2V0RnJvbVByb2plY3Rpb25NYXRyaXgiLCJtZTAiLCJtZTEiLCJtZTIiLCJtZTMiLCJtZTQiLCJtZTUiLCJtZTYiLCJtZTciLCJtZTgiLCJtZTkiLCJtZTEwIiwibWUxMSIsIm1lMTIiLCJtZTEzIiwibWUxNCIsIm1lMTUiLCJpbnRlcnNlY3RzT2JqZWN0IiwiaW50ZXJzZWN0c1Nwcml0ZSIsInNwcml0ZSIsIm5lZ1JhZGl1cyIsImFzY0lkU29ydCIsInNvcnRPcGFxdWUiLCJzb3J0VHJhbnNwYXJlbnQiLCJNdWx0aURyYXdSZW5kZXJMaXN0IiwicG9vbCIsImxpc3QiLCJpdGVtIiwicmVzZXQiLCJfbWF0cml4JDEiLCJfd2hpdGVDb2xvciIsIl9mcnVzdHVtIiwiX2JveCQxIiwiX3NwaGVyZSQyIiwiX3ZlY3RvciQ1IiwiX2ZvcndhcmQiLCJfdGVtcCIsIl9yZW5kZXJMaXN0IiwiX21lc2giLCJfYmF0Y2hJbnRlcnNlY3RzIiwiY29weUF0dHJpYnV0ZURhdGEiLCJ0YXJnZXRPZmZzZXQiLCJ2ZXJ0ZXhDb3VudCIsImNvcHlBcnJheUNvbnRlbnRzIiwiQmF0Y2hlZE1lc2giLCJpbnN0YW5jZUNvdW50IiwiX2luc3RhbmNlSW5mbyIsIl9hdmFpbGFibGVJbnN0YW5jZUlkcyIsInVudXNlZFZlcnRleENvdW50IiwiX25leHRWZXJ0ZXhTdGFydCIsInVudXNlZEluZGV4Q291bnQiLCJfbmV4dEluZGV4U3RhcnQiLCJjdXN0b21Tb3J0IiwiX2dlb21ldHJ5SW5mbyIsIl9hdmFpbGFibGVHZW9tZXRyeUlkcyIsIl92aXNpYmlsaXR5Q2hhbmdlZCIsIl9tdWx0aURyYXdDb3VudHMiLCJfbXVsdGlEcmF3U3RhcnRzIiwiX211bHRpRHJhd0NvdW50IiwiX211bHRpRHJhd0luc3RhbmNlcyIsIl9pbmRpcmVjdFRleHR1cmUiLCJfaW5pdE1hdHJpY2VzVGV4dHVyZSIsIl9pbml0SW5kaXJlY3RUZXh0dXJlIiwibWF0cmljZXNBcnJheSIsImluZGlyZWN0QXJyYXkiLCJpbmRpcmVjdFRleHR1cmUiLCJfaW5pdENvbG9yc1RleHR1cmUiLCJjb2xvcnNBcnJheSIsIl9pbml0aWFsaXplR2VvbWV0cnkiLCJyZWZlcmVuY2UiLCJhdHRyaWJ1dGVOYW1lIiwic3JjQXR0cmlidXRlIiwiZHN0QXJyYXkiLCJkc3RBdHRyaWJ1dGUiLCJpbmRleEFycmF5IiwiX3ZhbGlkYXRlR2VvbWV0cnkiLCJiYXRjaEdlb21ldHJ5IiwiQm9vbGVhbiIsInZhbGlkYXRlSW5zdGFuY2VJZCIsImluc3RhbmNlSW5mbyIsInZhbGlkYXRlR2VvbWV0cnlJZCIsImdlb21ldHJ5SWQiLCJnZW9tZXRyeUluZm9MaXN0Iiwic2V0Q3VzdG9tU29ydCIsImZ1bmMiLCJnZW9tZXRyeUluZGV4IiwiZ2V0Qm91bmRpbmdCb3hBdCIsImdldEJvdW5kaW5nU3BoZXJlQXQiLCJhZGRJbnN0YW5jZSIsImRyYXdJZCIsInNvcnQiLCJzaGlmdCIsImFkZEdlb21ldHJ5IiwicmVzZXJ2ZWRWZXJ0ZXhDb3VudCIsInJlc2VydmVkSW5kZXhDb3VudCIsImdlb21ldHJ5SW5mbyIsInZlcnRleFN0YXJ0IiwiaW5kZXhTdGFydCIsImluZGV4Q291bnQiLCJzZXRHZW9tZXRyeUF0IiwiaGFzSW5kZXgiLCJkc3RJbmRleCIsInNyY0luZGV4IiwiZGVsZXRlR2VvbWV0cnkiLCJkZWxldGVJbnN0YW5jZSIsIm9wdGltaXplIiwibmV4dFZlcnRleFN0YXJ0IiwibmV4dEluZGV4U3RhcnQiLCJlbGVtZW50RGVsdGEiLCJjb3B5V2l0aGluIiwiaXYiLCJzZXRWaXNpYmxlQXQiLCJnZXRWaXNpYmxlQXQiLCJzZXRHZW9tZXRyeUlkQXQiLCJnZXRHZW9tZXRyeUlkQXQiLCJnZXRHZW9tZXRyeVJhbmdlQXQiLCJzZXRJbnN0YW5jZUNvdW50IiwiYXZhaWxhYmxlSW5zdGFuY2VJZHMiLCJwb3AiLCJtdWx0aURyYXdDb3VudHMiLCJtdWx0aURyYXdTdGFydHMiLCJzZXRHZW9tZXRyeVNpemUiLCJ2YWxpZFJhbmdlcyIsImZpbHRlciIsImluZm8iLCJvbGRHZW9tZXRyeSIsImJhdGNoSWQiLCJieXRlc1BlckVsZW1lbnQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIm11bHRpRHJhd0NvdW50IiwiY3VsbGVkIiwic2hhZG93Q2FtZXJhIiwiZGVwdGhNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsImxpbmVjYXAiLCJsaW5lam9pbiIsIl92U3RhcnQiLCJfdkVuZCIsIl9pbnZlcnNlTWF0cml4JDEiLCJfcmF5JDEiLCJfc3BoZXJlJDEiLCJfaW50ZXJzZWN0UG9pbnRPblJheSIsIl9pbnRlcnNlY3RQb2ludE9uU2VnbWVudCIsIkxpbmUiLCJjb21wdXRlTGluZURpc3RhbmNlcyIsImxpbmVEaXN0YW5jZXMiLCJwYXJhbXMiLCJsb2NhbFRocmVzaG9sZCIsImxvY2FsVGhyZXNob2xkU3EiLCJpc0xpbmVTZWdtZW50cyIsImNoZWNrSW50ZXJzZWN0aW9uIiwiaXNMaW5lTG9vcCIsInRocmVzaG9sZFNxIiwiX3N0YXJ0IiwiX2VuZCIsIkxpbmVTZWdtZW50cyIsIkxpbmVMb29wIiwiUG9pbnRzTWF0ZXJpYWwiLCJpc1BvaW50c01hdGVyaWFsIiwiX2ludmVyc2VNYXRyaXgiLCJfcmF5IiwiX3NwaGVyZSIsIl9wb3NpdGlvbiQyIiwiUG9pbnRzIiwidGVzdFBvaW50IiwicmF5UG9pbnREaXN0YW5jZVNxIiwiaW50ZXJzZWN0UG9pbnQiLCJkaXN0YW5jZVRvUmF5IiwiVmlkZW9UZXh0dXJlIiwidmlkZW8iLCJpc1ZpZGVvVGV4dHVyZSIsInJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2siLCJ1cGRhdGVWaWRlbyIsInJlYWR5U3RhdGUiLCJIQVZFX0NVUlJFTlRfREFUQSIsIlZpZGVvRnJhbWVUZXh0dXJlIiwiaXNWaWRlb0ZyYW1lVGV4dHVyZSIsInNldEZyYW1lIiwiRnJhbWVidWZmZXJUZXh0dXJlIiwiaXNGcmFtZWJ1ZmZlclRleHR1cmUiLCJDb21wcmVzc2VkVGV4dHVyZSIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJDb21wcmVzc2VkQXJyYXlUZXh0dXJlIiwiaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlIiwiQ29tcHJlc3NlZEN1YmVUZXh0dXJlIiwiaXNDb21wcmVzc2VkQ3ViZVRleHR1cmUiLCJDYW52YXNUZXh0dXJlIiwiaXNDYW52YXNUZXh0dXJlIiwiRGVwdGhUZXh0dXJlIiwiaXNEZXB0aFRleHR1cmUiLCJjb21wYXJlRnVuY3Rpb24iLCJDdXJ2ZSIsImFyY0xlbmd0aERpdmlzaW9ucyIsImdldFBvaW50IiwiZ2V0UG9pbnRBdCIsIm9wdGlvbmFsVGFyZ2V0IiwiZ2V0VXRvVG1hcHBpbmciLCJnZXRQb2ludHMiLCJkaXZpc2lvbnMiLCJnZXRTcGFjZWRQb2ludHMiLCJnZXRMZW5ndGgiLCJsZW5ndGhzIiwiZ2V0TGVuZ3RocyIsImNhY2hlQXJjTGVuZ3RocyIsImxhc3QiLCJzdW0iLCJ1cGRhdGVBcmNMZW5ndGhzIiwiYXJjTGVuZ3RocyIsInRhcmdldEFyY0xlbmd0aCIsImNvbXBhcmlzb24iLCJsZW5ndGhCZWZvcmUiLCJnZXRUYW5nZW50IiwidDIiLCJwdDEiLCJwdDIiLCJnZXRUYW5nZW50QXQiLCJjb21wdXRlRnJlbmV0RnJhbWVzIiwic2VnbWVudHMiLCJjbG9zZWQiLCJ0YW5nZW50cyIsImJpbm9ybWFscyIsInZlYyIsIm1hdCIsIk1BWF9WQUxVRSIsIkVsbGlwc2VDdXJ2ZSIsImFYIiwiYVkiLCJ4UmFkaXVzIiwieVJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwiYUNsb2Nrd2lzZSIsImFSb3RhdGlvbiIsImlzRWxsaXBzZUN1cnZlIiwidHdvUGkiLCJkZWx0YUFuZ2xlIiwic2FtZVBvaW50cyIsIkFyY0N1cnZlIiwiYVJhZGl1cyIsImlzQXJjQ3VydmUiLCJDdWJpY1BvbHkiLCJjMCIsImluaXRDYXRtdWxsUm9tIiwieDMiLCJ0ZW5zaW9uIiwiaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tIiwiZHQwIiwiZHQxIiwiZHQyIiwiY2FsYyIsInB4IiwicHkiLCJweiIsIkNhdG11bGxSb21DdXJ2ZTMiLCJjdXJ2ZVR5cGUiLCJpc0NhdG11bGxSb21DdXJ2ZTMiLCJpbnRQb2ludCIsIkNhdG11bGxSb20iLCJRdWFkcmF0aWNCZXppZXIiLCJrIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsImlzQ3ViaWNCZXppZXJDdXJ2ZSIsIkN1YmljQmV6aWVyQ3VydmUzIiwiaXNDdWJpY0JlemllckN1cnZlMyIsIkxpbmVDdXJ2ZSIsImlzTGluZUN1cnZlIiwiTGluZUN1cnZlMyIsImlzTGluZUN1cnZlMyIsIlF1YWRyYXRpY0JlemllckN1cnZlIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiU3BsaW5lQ3VydmUiLCJpc1NwbGluZUN1cnZlIiwiQ3VydmVQYXRoIiwiY3VydmVzIiwiYXV0b0Nsb3NlIiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJsaW5lVHlwZSIsIkN1cnZlcyIsImN1cnZlTGVuZ3RocyIsImdldEN1cnZlTGVuZ3RocyIsImRpZmYiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJyZXNvbHV0aW9uIiwicHRzIiwiUGF0aCIsImN1cnJlbnRQb2ludCIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJhQ1B4IiwiYUNQeSIsImJlemllckN1cnZlVG8iLCJhQ1AxeCIsImFDUDF5IiwiYUNQMngiLCJhQ1AyeSIsInNwbGluZVRocnUiLCJucHRzIiwiYXJjIiwiYWJzYXJjIiwiYWJzZWxsaXBzZSIsImVsbGlwc2UiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwiTGF0aGVHZW9tZXRyeSIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwiaW5pdE5vcm1hbHMiLCJpbnZlcnNlU2VnbWVudHMiLCJ2ZXJ0ZXgiLCJjdXJOb3JtYWwiLCJwcmV2Tm9ybWFsIiwiYmFzZSIsIkNhcHN1bGVHZW9tZXRyeSIsImNhcFNlZ21lbnRzIiwicmFkaWFsU2VnbWVudHMiLCJwYXRoIiwiQ2lyY2xlR2VvbWV0cnkiLCJ0aGV0YVN0YXJ0IiwidGhldGFMZW5ndGgiLCJzZWdtZW50IiwiQ3lsaW5kZXJHZW9tZXRyeSIsInJhZGl1c1RvcCIsInJhZGl1c0JvdHRvbSIsIm9wZW5FbmRlZCIsImhhbGZIZWlnaHQiLCJnZW5lcmF0ZUNhcCIsImNlbnRlckluZGV4U3RhcnQiLCJjZW50ZXJJbmRleEVuZCIsImNvc1RoZXRhIiwic2luVGhldGEiLCJzbG9wZSIsImluZGV4Um93IiwiZ2VuZXJhdGVUb3JzbyIsIkNvbmVHZW9tZXRyeSIsIlBvbHloZWRyb25HZW9tZXRyeSIsInZlcnRleEJ1ZmZlciIsInV2QnVmZmVyIiwic3ViZGl2aWRlRmFjZSIsImNvbHMiLCJhaiIsImJqIiwicm93cyIsInB1c2hWZXJ0ZXgiLCJnZXRWZXJ0ZXhCeUluZGV4IiwiY29ycmVjdFVWIiwiYXppbXV0aCIsInN1YmRpdmlkZSIsImFwcGx5UmFkaXVzIiwiY2VudHJvaWQiLCJhemkiLCJjb3JyZWN0VVZzIiwiY29ycmVjdFNlYW0iLCJnZW5lcmF0ZVVWcyIsImRldGFpbHMiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsIl92MCIsIl92MSQxIiwiX25vcm1hbCIsIl90cmlhbmdsZSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInByZWNpc2lvblBvaW50cyIsInRocmVzaG9sZERvdCIsImluZGV4QXR0ciIsInBvc2l0aW9uQXR0ciIsImluZGV4QXJyIiwidmVydEtleXMiLCJoYXNoZXMiLCJlZGdlRGF0YSIsImpOZXh0IiwidmVjSGFzaDAiLCJ2ZWNIYXNoMSIsImhhc2giLCJyZXZlcnNlSGFzaCIsImluZGV4MCIsIlNoYXBlIiwiaG9sZXMiLCJnZXRQb2ludHNIb2xlcyIsImhvbGVzUHRzIiwiZXh0cmFjdFBvaW50cyIsImhvbGUiLCJFYXJjdXQiLCJob2xlSW5kaWNlcyIsImRpbSIsImhhc0hvbGVzIiwib3V0ZXJMZW4iLCJvdXRlck5vZGUiLCJsaW5rZWRMaXN0IiwidHJpYW5nbGVzIiwibmV4dCIsInByZXYiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiaW52U2l6ZSIsInF1ZXVlIiwic3RlaW5lciIsImdldExlZnRtb3N0IiwiY29tcGFyZVgiLCJlbGltaW5hdGVIb2xlIiwiZWxpbWluYXRlSG9sZXMiLCJlYXJjdXRMaW5rZWQiLCJjbG9ja3dpc2UiLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsInJlbW92ZU5vZGUiLCJmaWx0ZXJQb2ludHMiLCJhZ2FpbiIsImFyZWEiLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJzdG9wIiwiaXNFYXJIYXNoZWQiLCJpc0VhciIsImN1cmVMb2NhbEludGVyc2VjdGlvbnMiLCJzcGxpdEVhcmN1dCIsInBvaW50SW5UcmlhbmdsZSIsIm1pbloiLCJtYXhaIiwibG9jYWxseUluc2lkZSIsImlzVmFsaWREaWFnb25hbCIsInNwbGl0UG9seWdvbiIsImJyaWRnZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwic2VjdG9yQ29udGFpbnNTZWN0b3IiLCJmaW5kSG9sZUJyaWRnZSIsImJyaWRnZVJldmVyc2UiLCJsZWZ0bW9zdCIsImludGVyc2VjdHNQb2x5Z29uIiwiaW5zaWRlIiwibWlkZGxlSW5zaWRlIiwicTEiLCJxMiIsIm8xIiwibzIiLCJvMyIsIm80Iiwib25TZWdtZW50IiwibnVtIiwiTm9kZSIsImFuIiwiYnAiLCJTaGFwZVV0aWxzIiwiY29udG91ciIsImlzQ2xvY2tXaXNlIiwidHJpYW5ndWxhdGVTaGFwZSIsImZhY2VzIiwicmVtb3ZlRHVwRW5kUHRzIiwiYWRkQ29udG91ciIsImhvbGVJbmRleCIsImZvckVhY2giLCJFeHRydWRlR2VvbWV0cnkiLCJ2ZXJ0aWNlc0FycmF5IiwidXZBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsT2Zmc2V0IiwiYmV2ZWxTZWdtZW50cyIsImV4dHJ1ZGVQYXRoIiwidXZnZW4iLCJVVkdlbmVyYXRvciIsIldvcmxkVVZHZW5lcmF0b3IiLCJleHRydWRlUHRzIiwic3BsaW5lVHViZSIsImJpbm9ybWFsIiwicG9zaXRpb24yIiwiZXh0cnVkZUJ5UGF0aCIsInNoYXBlUG9pbnRzIiwicmV2ZXJzZSIsImhsIiwiYWhvbGUiLCJzY2FsZVB0MiIsInB0IiwidmxlbiIsImZsZW4iLCJnZXRCZXZlbFZlYyIsImluUHQiLCJpblByZXYiLCJpbk5leHQiLCJ2X3RyYW5zX3giLCJ2X3RyYW5zX3kiLCJzaHJpbmtfYnkiLCJ2X3ByZXZfeCIsInZfcHJldl95Iiwidl9uZXh0X3giLCJ2X25leHRfeSIsInZfcHJldl9sZW5zcSIsImNvbGxpbmVhcjAiLCJ2X3ByZXZfbGVuIiwidl9uZXh0X2xlbiIsInB0UHJldlNoaWZ0X3giLCJwdFByZXZTaGlmdF95Iiwic2YiLCJ2X3RyYW5zX2xlbnNxIiwiZGlyZWN0aW9uX2VxIiwiY29udG91ck1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsInZlcnRpY2VzTW92ZW1lbnRzIiwiYnMiLCJ2ZXJ0Iiwic2lkZXdhbGxzIiwibGF5ZXJvZmZzZXQiLCJzbCIsInNsZW4xIiwic2xlbjIiLCJmNCIsImYzIiwiYWRkVmVydGV4IiwibmV4dEluZGV4IiwiZ2VuZXJhdGVUb3BVViIsImFkZFVWIiwiZ2VuZXJhdGVTaWRlV2FsbFVWIiwidmVjdG9yMiIsImxheWVyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwidG9KU09OJDEiLCJnZW9tZXRyeVNoYXBlcyIsImluZGV4QSIsImluZGV4QiIsImluZGV4QyIsImFfeCIsImFfeSIsImJfeCIsImJfeSIsImNfeCIsImNfeSIsImluZGV4RCIsImFfeiIsImJfeiIsImNfeiIsImRfeCIsImRfeSIsImRfeiIsIkljb3NhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJQbGFuZUdlb21ldHJ5Iiwid2lkdGhfaGFsZiIsImhlaWdodF9oYWxmIiwic2VnbWVudF93aWR0aCIsInNlZ21lbnRfaGVpZ2h0IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsInJhZGl1c1N0ZXAiLCJ0aGV0YVNlZ21lbnRMZXZlbCIsIlNoYXBlR2VvbWV0cnkiLCJpbmRleE9mZnNldCIsInNoYXBlVmVydGljZXMiLCJzaGFwZUhvbGVzIiwic2hhcGVIb2xlIiwiU3BoZXJlR2VvbWV0cnkiLCJ0aGV0YUVuZCIsImdyaWQiLCJ2ZXJ0aWNlc1JvdyIsInVPZmZzZXQiLCJUZXRyYWhlZHJvbkdlb21ldHJ5IiwiVG9ydXNHZW9tZXRyeSIsInR1YmUiLCJ0dWJ1bGFyU2VnbWVudHMiLCJUb3J1c0tub3RHZW9tZXRyeSIsIlAxIiwiUDIiLCJCIiwiVCIsIk4iLCJjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUiLCJjdSIsInN1IiwicXVPdmVyUCIsImNzIiwiVHViZUdlb21ldHJ5IiwiZnJhbWVzIiwiUCIsImdlbmVyYXRlU2VnbWVudCIsImdlbmVyYXRlSW5kaWNlcyIsImdlbmVyYXRlQnVmZmVyRGF0YSIsIldpcmVmcmFtZUdlb21ldHJ5IiwiZWRnZXMiLCJvIiwib2wiLCJpc1VuaXF1ZUVkZ2UiLCJoYXNoMSIsImhhc2gyIiwiaGFzIiwiU2hhZG93TWF0ZXJpYWwiLCJpc1NoYWRvd01hdGVyaWFsIiwiUmF3U2hhZGVyTWF0ZXJpYWwiLCJpc1Jhd1NoYWRlck1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwiU1RBTkRBUkQiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsImlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJQSFlTSUNBTCIsImlvciIsImdldCIsInNoZWVuQ29sb3JNYXAiLCJzaGVlblJvdWdobmVzc01hcCIsIl9hbmlzb3Ryb3B5IiwiX2NsZWFyY29hdCIsIl9kaXNwZXJzaW9uIiwiX2lyaWRlc2NlbmNlIiwiX3NoZWVuIiwiX3RyYW5zbWlzc2lvbiIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiaXNNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJpc01lc2hUb29uTWF0ZXJpYWwiLCJUT09OIiwiTWVzaE5vcm1hbE1hdGVyaWFsIiwiaXNNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJpc01lc2hEZXB0aE1hdGVyaWFsIiwiZGVwdGhQYWNraW5nIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJpc01lc2hEaXN0YW5jZU1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiaXNNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJNQVRDQVAiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsImNvbnZlcnRBcnJheSIsImZvcmNlQ2xvbmUiLCJpc1R5cGVkQXJyYXkiLCJpc1ZpZXciLCJEYXRhVmlldyIsImdldEtleWZyYW1lT3JkZXIiLCJ0aW1lcyIsInNvcnRlZEFycmF5IiwiblZhbHVlcyIsInNyY09mZnNldCIsImZsYXR0ZW5KU09OIiwianNvbktleXMiLCJ2YWx1ZVByb3BlcnR5TmFtZSIsInRpbWUiLCJhcHBseSIsIkFuaW1hdGlvblV0aWxzIiwic3ViY2xpcCIsInNvdXJjZUNsaXAiLCJzdGFydEZyYW1lIiwiZW5kRnJhbWUiLCJmcHMiLCJjbGlwIiwidHJhY2tzIiwidHJhY2siLCJ2YWx1ZVNpemUiLCJnZXRWYWx1ZVNpemUiLCJtaW5TdGFydFRpbWUiLCJyZXNldER1cmF0aW9uIiwibWFrZUNsaXBBZGRpdGl2ZSIsInRhcmdldENsaXAiLCJyZWZlcmVuY2VGcmFtZSIsInJlZmVyZW5jZUNsaXAiLCJudW1UcmFja3MiLCJyZWZlcmVuY2VUaW1lIiwicmVmZXJlbmNlVHJhY2siLCJyZWZlcmVuY2VUcmFja1R5cGUiLCJWYWx1ZVR5cGVOYW1lIiwidGFyZ2V0VHJhY2siLCJmaW5kIiwicmVmZXJlbmNlT2Zmc2V0IiwicmVmZXJlbmNlVmFsdWVTaXplIiwiY3JlYXRlSW50ZXJwb2xhbnQiLCJpc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSIsInRhcmdldFZhbHVlU2l6ZSIsImxhc3RJbmRleCIsInJlZmVyZW5jZVZhbHVlIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiaW50ZXJwb2xhbnQiLCJldmFsdWF0ZSIsInJlc3VsdEJ1ZmZlciIsIm51bVRpbWVzIiwidmFsdWVTdGFydCIsInZhbHVlRW5kIiwiYmxlbmRNb2RlIiwiSW50ZXJwb2xhbnQiLCJwYXJhbWV0ZXJQb3NpdGlvbnMiLCJzYW1wbGVWYWx1ZXMiLCJzYW1wbGVTaXplIiwiX2NhY2hlZEluZGV4Iiwic2V0dGluZ3MiLCJEZWZhdWx0U2V0dGluZ3NfIiwicHAiLCJ2YWxpZGF0ZV9pbnRlcnZhbCIsInNlZWsiLCJsaW5lYXJfc2NhbiIsImZvcndhcmRfc2NhbiIsImdpdmVVcEF0IiwiY29weVNhbXBsZVZhbHVlXyIsInQxZ2xvYmFsIiwibWlkIiwiaW50ZXJ2YWxDaGFuZ2VkXyIsImludGVycG9sYXRlXyIsImdldFNldHRpbmdzXyIsIkN1YmljSW50ZXJwb2xhbnQiLCJfd2VpZ2h0UHJldiIsIl9vZmZzZXRQcmV2IiwiX3dlaWdodE5leHQiLCJfb2Zmc2V0TmV4dCIsImVuZGluZ1N0YXJ0IiwiZW5kaW5nRW5kIiwiaVByZXYiLCJpTmV4dCIsInRQcmV2IiwidE5leHQiLCJoYWxmRHQiLCJvMCIsIm9QIiwib04iLCJ3UCIsIndOIiwicHBwIiwic1AiLCJzTiIsIkxpbmVhckludGVycG9sYW50Iiwib2Zmc2V0MSIsIm9mZnNldDAiLCJ3ZWlnaHQxIiwid2VpZ2h0MCIsIkRpc2NyZXRlSW50ZXJwb2xhbnQiLCJLZXlmcmFtZVRyYWNrIiwiaW50ZXJwb2xhdGlvbiIsIlRpbWVCdWZmZXJUeXBlIiwiVmFsdWVCdWZmZXJUeXBlIiwic2V0SW50ZXJwb2xhdGlvbiIsIkRlZmF1bHRJbnRlcnBvbGF0aW9uIiwidHJhY2tUeXBlIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJmYWN0b3J5TWV0aG9kIiwidGltZU9mZnNldCIsInRpbWVTY2FsZSIsInRyaW0iLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibktleXMiLCJ0byIsInZhbGlkYXRlIiwidmFsaWQiLCJwcmV2VGltZSIsImN1cnJUaW1lIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJUeXBlZEtleWZyYW1lVHJhY2siLCJCb29sZWFuS2V5ZnJhbWVUcmFjayIsIkNvbG9yS2V5ZnJhbWVUcmFjayIsIk51bWJlcktleWZyYW1lVHJhY2siLCJRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQiLCJRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayIsIlN0cmluZ0tleWZyYW1lVHJhY2siLCJWZWN0b3JLZXlmcmFtZVRyYWNrIiwiQW5pbWF0aW9uQ2xpcCIsImR1cmF0aW9uIiwianNvblRyYWNrcyIsImZyYW1lVGltZSIsInBhcnNlS2V5ZnJhbWVUcmFjayIsImNsaXBUcmFja3MiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJmaW5kQnlOYW1lIiwib2JqZWN0T3JDbGlwQXJyYXkiLCJjbGlwQXJyYXkiLCJDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyIsIm1vcnBoVGFyZ2V0cyIsImFuaW1hdGlvblRvTW9ycGhUYXJnZXRzIiwicGF0dGVybiIsIm1vcnBoVGFyZ2V0IiwicGFydHMiLCJtYXRjaCIsImFuaW1hdGlvbk1vcnBoVGFyZ2V0cyIsImNsaXBzIiwicGFyc2VBbmltYXRpb24iLCJhZGROb25lbXB0eVRyYWNrIiwidHJhY2tOYW1lIiwiYW5pbWF0aW9uS2V5cyIsInByb3BlcnR5TmFtZSIsImRlc3RUcmFja3MiLCJjbGlwTmFtZSIsImhpZXJhcmNoeVRyYWNrcyIsImhpZXJhcmNoeSIsIm1vcnBoVGFyZ2V0TmFtZXMiLCJtb3JwaFRhcmdldE5hbWUiLCJhbmltYXRpb25LZXkiLCJib25lTmFtZSIsInR5cGVOYW1lIiwiZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSIsIkNhY2hlIiwiZmlsZXMiLCJmaWxlIiwiTG9hZGluZ01hbmFnZXIiLCJvbkxvYWQiLCJvblByb2dyZXNzIiwib25FcnJvciIsInVybE1vZGlmaWVyIiwiaXNMb2FkaW5nIiwiaXRlbXNMb2FkZWQiLCJpdGVtc1RvdGFsIiwiaGFuZGxlcnMiLCJvblN0YXJ0IiwiaXRlbVN0YXJ0IiwiaXRlbUVuZCIsIml0ZW1FcnJvciIsInJlc29sdmVVUkwiLCJzZXRVUkxNb2RpZmllciIsImFkZEhhbmRsZXIiLCJyZWdleCIsImxvYWRlciIsInJlbW92ZUhhbmRsZXIiLCJnZXRIYW5kbGVyIiwiZ2xvYmFsIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwiTG9hZGVyIiwibWFuYWdlciIsImNyb3NzT3JpZ2luIiwid2l0aENyZWRlbnRpYWxzIiwicmVzb3VyY2VQYXRoIiwicmVxdWVzdEhlYWRlciIsImxvYWQiLCJsb2FkQXN5bmMiLCJzZXRDcm9zc09yaWdpbiIsInNldFdpdGhDcmVkZW50aWFscyIsInNldFBhdGgiLCJzZXRSZXNvdXJjZVBhdGgiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiREVGQVVMVF9NQVRFUklBTF9OQU1FIiwibG9hZGluZyIsIkh0dHBFcnJvciIsInJlc3BvbnNlIiwiRmlsZUxvYWRlciIsImNhY2hlZCIsInJlcSIsIlJlcXVlc3QiLCJoZWFkZXJzIiwiSGVhZGVycyIsImNyZWRlbnRpYWxzIiwibWltZVR5cGUiLCJyZXNwb25zZVR5cGUiLCJmZXRjaCIsInRoZW4iLCJzdGF0dXMiLCJSZWFkYWJsZVN0cmVhbSIsImJvZHkiLCJnZXRSZWFkZXIiLCJjYWxsYmFja3MiLCJyZWFkZXIiLCJjb250ZW50TGVuZ3RoIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwic3RyZWFtIiwiY29udHJvbGxlciIsInJlYWREYXRhIiwicmVhZCIsImRvbmUiLCJjbG9zZSIsImJ5dGVMZW5ndGgiLCJQcm9ncmVzc0V2ZW50IiwiZW5xdWV1ZSIsIlJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImFycmF5QnVmZmVyIiwiYmxvYiIsInRleHQiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJsYWJlbCIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImNhdGNoIiwiZXJyIiwiZmluYWxseSIsInNldFJlc3BvbnNlVHlwZSIsInNldE1pbWVUeXBlIiwiQW5pbWF0aW9uTG9hZGVyIiwiQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJJbWFnZUxvYWRlciIsIm9uSW1hZ2VMb2FkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJvbkltYWdlRXJyb3IiLCJDdWJlVGV4dHVyZUxvYWRlciIsInVybHMiLCJEYXRhVGV4dHVyZUxvYWRlciIsInRleERhdGEiLCJUZXh0dXJlTG9hZGVyIiwiTGlnaHQiLCJpbnRlbnNpdHkiLCJncm91bmRDb2xvciIsImRlY2F5IiwicGVudW1icmEiLCJzaGFkb3ciLCJIZW1pc3BoZXJlTGlnaHQiLCJza3lDb2xvciIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiX3Byb2pTY3JlZW5NYXRyaXgkMSIsIl9saWdodFBvc2l0aW9uV29ybGQkMSIsIl9sb29rVGFyZ2V0JDEiLCJMaWdodFNoYWRvdyIsImJpYXMiLCJub3JtYWxCaWFzIiwiYmx1clNhbXBsZXMiLCJtYXBTaXplIiwibWFwUGFzcyIsIl9mcmFtZUV4dGVudHMiLCJfdmlld3BvcnRDb3VudCIsIl92aWV3cG9ydHMiLCJnZXRWaWV3cG9ydENvdW50IiwiZ2V0RnJ1c3R1bSIsInVwZGF0ZU1hdHJpY2VzIiwibGlnaHQiLCJzaGFkb3dNYXRyaXgiLCJnZXRWaWV3cG9ydCIsInZpZXdwb3J0SW5kZXgiLCJnZXRGcmFtZUV4dGVudHMiLCJTcG90TGlnaHRTaGFkb3ciLCJpc1Nwb3RMaWdodFNoYWRvdyIsIlNwb3RMaWdodCIsImlzU3BvdExpZ2h0IiwicG93ZXIiLCJfcHJvalNjcmVlbk1hdHJpeCIsIl9saWdodFBvc2l0aW9uV29ybGQiLCJfbG9va1RhcmdldCIsIlBvaW50TGlnaHRTaGFkb3ciLCJpc1BvaW50TGlnaHRTaGFkb3ciLCJfY3ViZURpcmVjdGlvbnMiLCJfY3ViZVVwcyIsIlBvaW50TGlnaHQiLCJpc1BvaW50TGlnaHQiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsInNjYWxlVyIsInNjYWxlSCIsIkRpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJpc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJEaXJlY3Rpb25hbExpZ2h0IiwiaXNEaXJlY3Rpb25hbExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiaXNBbWJpZW50TGlnaHQiLCJSZWN0QXJlYUxpZ2h0IiwiaXNSZWN0QXJlYUxpZ2h0IiwiU3BoZXJpY2FsSGFybW9uaWNzMyIsImlzU3BoZXJpY2FsSGFybW9uaWNzMyIsImNvZWZmaWNpZW50cyIsInplcm8iLCJnZXRBdCIsImNvZWZmIiwiZ2V0SXJyYWRpYW5jZUF0Iiwic2giLCJhZGRTY2FsZWRTSCIsImdldEJhc2lzQXQiLCJzaEJhc2lzIiwiTGlnaHRQcm9iZSIsImlzTGlnaHRQcm9iZSIsIk1hdGVyaWFsTG9hZGVyIiwiZ2V0VGV4dHVyZSIsImNyZWF0ZU1hdGVyaWFsRnJvbVR5cGUiLCJ1bmlmb3JtIiwic2V0VGV4dHVyZXMiLCJMb2FkZXJVdGlscyIsImRlY29kZVRleHQiLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJleHRyYWN0VXJsQmFzZSIsImxhc3RJbmRleE9mIiwicmVwbGFjZSIsIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwiaW50ZXJsZWF2ZWRCdWZmZXJNYXAiLCJhcnJheUJ1ZmZlck1hcCIsImdldEludGVybGVhdmVkQnVmZmVyIiwiZ2V0QXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYnVmZmVyQXR0cmlidXRlIiwiZHJhd2NhbGxzIiwib2Zmc2V0cyIsIk9iamVjdExvYWRlciIsInBhcnNlQXN5bmMiLCJwYXJzZUFuaW1hdGlvbnMiLCJwYXJzZVNoYXBlcyIsInBhcnNlR2VvbWV0cmllcyIsInBhcnNlSW1hZ2VzIiwicGFyc2VUZXh0dXJlcyIsInBhcnNlTWF0ZXJpYWxzIiwicGFyc2VPYmplY3QiLCJwYXJzZVNrZWxldG9ucyIsImJpbmRTa2VsZXRvbnMiLCJiaW5kTGlnaHRUYXJnZXRzIiwiaGFzSW1hZ2VzIiwicGFyc2VJbWFnZXNBc3luYyIsImJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwiR2VvbWV0cmllcyIsImRlc2VyaWFsaXplSW1hZ2UiLCJsb2FkSW1hZ2UiLCJpbWFnZUFycmF5IiwiZGVzZXJpYWxpemVkSW1hZ2UiLCJhc3luYyIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsImlzSW50ZWdlciIsIm9iamVjdEFuaW1hdGlvbnMiLCJJbWFnZUJpdG1hcExvYWRlciIsImlzSW1hZ2VCaXRtYXBMb2FkZXIiLCJjcmVhdGVJbWFnZUJpdG1hcCIsInNldE9wdGlvbnMiLCJpbWFnZUJpdG1hcCIsImZldGNoT3B0aW9ucyIsInByb21pc2UiLCJyZXMiLCJjb2xvclNwYWNlQ29udmVyc2lvbiIsIl9jb250ZXh0IiwiQXVkaW9Db250ZXh0Iiwid2luZG93Iiwid2Via2l0QXVkaW9Db250ZXh0Iiwic2V0Q29udGV4dCIsIkF1ZGlvTG9hZGVyIiwiaGFuZGxlRXJyb3IiLCJidWZmZXJDb3B5IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJfZXllUmlnaHQiLCJfZXllTGVmdCIsIl9wcm9qZWN0aW9uTWF0cml4IiwiU3RlcmVvQ2FtZXJhIiwiZXllU2VwIiwiY2FtZXJhTCIsImNhbWVyYVIiLCJleWVTZXBIYWxmIiwiZXllU2VwT25Qcm9qZWN0aW9uIiwieW1heCIsInhtaW4iLCJ4bWF4IiwiQXJyYXlDYW1lcmEiLCJpc0FycmF5Q2FtZXJhIiwiQ2xvY2siLCJhdXRvU3RhcnQiLCJvbGRUaW1lIiwiZWxhcHNlZFRpbWUiLCJydW5uaW5nIiwibm93IiwiZ2V0RWxhcHNlZFRpbWUiLCJnZXREZWx0YSIsIm5ld1RpbWUiLCJwZXJmb3JtYW5jZSIsIl9wb3NpdGlvbiQxIiwiX3F1YXRlcm5pb24kMSIsIl9zY2FsZSQxIiwiX29yaWVudGF0aW9uJDEiLCJBdWRpb0xpc3RlbmVyIiwiZ2FpbiIsImNyZWF0ZUdhaW4iLCJkZXN0aW5hdGlvbiIsInRpbWVEZWx0YSIsIl9jbG9jayIsImdldElucHV0IiwicmVtb3ZlRmlsdGVyIiwiZ2V0RmlsdGVyIiwic2V0RmlsdGVyIiwiZ2V0TWFzdGVyVm9sdW1lIiwic2V0TWFzdGVyVm9sdW1lIiwic2V0VGFyZ2V0QXRUaW1lIiwiY3VycmVudFRpbWUiLCJwb3NpdGlvblgiLCJsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZSIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsImZvcndhcmRYIiwiZm9yd2FyZFkiLCJmb3J3YXJkWiIsInVwWCIsInVwWSIsInVwWiIsInNldE9yaWVudGF0aW9uIiwiQXVkaW8iLCJhdXRvcGxheSIsImRldHVuZSIsImxvb3AiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwicGxheWJhY2tSYXRlIiwiaXNQbGF5aW5nIiwiaGFzUGxheWJhY2tDb250cm9sIiwic291cmNlVHlwZSIsIl9zdGFydGVkQXQiLCJfcHJvZ3Jlc3MiLCJfY29ubmVjdGVkIiwiZmlsdGVycyIsImdldE91dHB1dCIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRNZWRpYVN0cmVhbVNvdXJjZSIsIm1lZGlhU3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiZGVsYXkiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJvbmVuZGVkIiwib25FbmRlZCIsInNldERldHVuZSIsInNldFBsYXliYWNrUmF0ZSIsInBhdXNlIiwiZ2V0RmlsdGVycyIsInNldEZpbHRlcnMiLCJnZXREZXR1bmUiLCJnZXRQbGF5YmFja1JhdGUiLCJnZXRMb29wIiwic2V0TG9vcCIsInNldExvb3BTdGFydCIsInNldExvb3BFbmQiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfcG9zaXRpb24iLCJfcXVhdGVybmlvbiIsIl9zY2FsZSIsIl9vcmllbnRhdGlvbiIsIlBvc2l0aW9uYWxBdWRpbyIsInBhbm5lciIsImNyZWF0ZVBhbm5lciIsInBhbm5pbmdNb2RlbCIsImdldFJlZkRpc3RhbmNlIiwicmVmRGlzdGFuY2UiLCJzZXRSZWZEaXN0YW5jZSIsImdldFJvbGxvZmZGYWN0b3IiLCJyb2xsb2ZmRmFjdG9yIiwic2V0Um9sbG9mZkZhY3RvciIsImdldERpc3RhbmNlTW9kZWwiLCJkaXN0YW5jZU1vZGVsIiwic2V0RGlzdGFuY2VNb2RlbCIsImdldE1heERpc3RhbmNlIiwibWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsInNldERpcmVjdGlvbmFsQ29uZSIsImNvbmVJbm5lckFuZ2xlIiwiY29uZU91dGVyQW5nbGUiLCJjb25lT3V0ZXJHYWluIiwib3JpZW50YXRpb25YIiwib3JpZW50YXRpb25ZIiwib3JpZW50YXRpb25aIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJQcm9wZXJ0eU1peGVyIiwiYmluZGluZyIsIm1peEZ1bmN0aW9uIiwibWl4RnVuY3Rpb25BZGRpdGl2ZSIsInNldElkZW50aXR5IiwiX3NsZXJwIiwiX3NsZXJwQWRkaXRpdmUiLCJfc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb24iLCJfd29ya0luZGV4IiwiX3NlbGVjdCIsIl9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXIiLCJfbGVycCIsIl9sZXJwQWRkaXRpdmUiLCJfc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMiLCJfbWl4QnVmZmVyUmVnaW9uIiwiX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlIiwiX3NldElkZW50aXR5IiwiX29yaWdJbmRleCIsIl9hZGRJbmRleCIsImN1bXVsYXRpdmVXZWlnaHQiLCJjdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUiLCJ1c2VDb3VudCIsInJlZmVyZW5jZUNvdW50IiwiYWNjdW11bGF0ZSIsImFjY3VJbmRleCIsImN1cnJlbnRXZWlnaHQiLCJtaXgiLCJhY2N1bXVsYXRlQWRkaXRpdmUiLCJ3ZWlnaHRBZGRpdGl2ZSIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzZXRWYWx1ZSIsInNhdmVPcmlnaW5hbFN0YXRlIiwiZ2V0VmFsdWUiLCJyZXN0b3JlT3JpZ2luYWxTdGF0ZSIsInRhcmdldEluZGV4Iiwid29ya09mZnNldCIsIl9SRVNFUlZFRF9DSEFSU19SRSIsIl9yZXNlcnZlZFJlIiwiUmVnRXhwIiwiX3dvcmRDaGFyIiwiX3dvcmRDaGFyT3JEb3QiLCJfdHJhY2tSZSIsIl9zdXBwb3J0ZWRPYmplY3ROYW1lcyIsIlByb3BlcnR5QmluZGluZyIsInJvb3ROb2RlIiwicGFyc2VkUGF0aCIsInBhcnNlVHJhY2tOYW1lIiwibm9kZSIsImZpbmROb2RlIiwibm9kZU5hbWUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsIl9zZXRWYWx1ZV91bmJvdW5kIiwiY3JlYXRlIiwicm9vdCIsImlzQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJDb21wb3NpdGUiLCJzYW5pdGl6ZU5vZGVOYW1lIiwibWF0Y2hlcyIsInJlc3VsdHMiLCJvYmplY3ROYW1lIiwib2JqZWN0SW5kZXgiLCJwcm9wZXJ0eUluZGV4IiwibGFzdERvdCIsInN1YnN0cmluZyIsInNlYXJjaE5vZGVTdWJ0cmVlIiwiY2hpbGROb2RlIiwic3ViVHJlZU5vZGUiLCJfZ2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfc2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfZ2V0VmFsdWVfZGlyZWN0IiwidGFyZ2V0T2JqZWN0IiwiX2dldFZhbHVlX2FycmF5IiwicmVzb2x2ZWRQcm9wZXJ0eSIsIl9nZXRWYWx1ZV9hcnJheUVsZW1lbnQiLCJfZ2V0VmFsdWVfdG9BcnJheSIsIl9zZXRWYWx1ZV9kaXJlY3QiLCJfc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5IiwiZGVzdCIsIl9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5RWxlbWVudCIsIl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfZnJvbUFycmF5IiwiX3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInRhcmdldEFycmF5Iiwic291cmNlQXJyYXkiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJiaW5kaW5nVHlwZSIsIkJpbmRpbmdUeXBlIiwiRGlyZWN0IiwiQXJyYXlFbGVtZW50IiwiSGFzRnJvbVRvQXJyYXkiLCJFbnRpcmVBcnJheSIsIkdldHRlckJ5QmluZGluZ1R5cGUiLCJTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZyIsInVuYmluZCIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsImZpcnN0VmFsaWRJbmRleCIsIm5DYWNoZWRPYmplY3RzXyIsImJpbmRpbmdzIiwiQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJfb2JqZWN0cyIsIl9pbmRpY2VzQnlVVUlEIiwiX3BhdGhzIiwiX3BhcnNlZFBhdGhzIiwiX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCIsInN0YXRzIiwib2JqZWN0cyIsImluVXNlIiwiYmluZGluZ3NQZXJPYmplY3QiLCJpbmRpY2VzQnlVVUlEIiwicGF0aHMiLCJwYXJzZWRQYXRocyIsIm5CaW5kaW5ncyIsImtub3duT2JqZWN0Iiwibk9iamVjdHMiLCJuQ2FjaGVkT2JqZWN0cyIsImZpcnN0QWN0aXZlSW5kZXgiLCJsYXN0Q2FjaGVkT2JqZWN0IiwiYmluZGluZ3NGb3JQYXRoIiwibGFzdENhY2hlZCIsImxhc3RDYWNoZWRJbmRleCIsImZpcnN0QWN0aXZlT2JqZWN0IiwiZmlyc3RBY3RpdmUiLCJ1bmNhY2hlIiwibGFzdE9iamVjdCIsImluZGljZXNCeVBhdGgiLCJ1bnN1YnNjcmliZV8iLCJsYXN0QmluZGluZ3NJbmRleCIsImxhc3RCaW5kaW5ncyIsIkFuaW1hdGlvbkFjdGlvbiIsIm1peGVyIiwibG9jYWxSb290IiwiX21peGVyIiwiX2NsaXAiLCJfbG9jYWxSb290IiwiblRyYWNrcyIsImludGVycG9sYW50cyIsImludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRTZXR0aW5ncyIsIl9pbnRlcnBvbGFudHMiLCJfcHJvcGVydHlCaW5kaW5ncyIsIl9jYWNoZUluZGV4IiwiX2J5Q2xpcENhY2hlSW5kZXgiLCJfdGltZVNjYWxlSW50ZXJwb2xhbnQiLCJfd2VpZ2h0SW50ZXJwb2xhbnQiLCJfbG9vcENvdW50IiwiX3N0YXJ0VGltZSIsIl9lZmZlY3RpdmVUaW1lU2NhbGUiLCJfZWZmZWN0aXZlV2VpZ2h0IiwicmVwZXRpdGlvbnMiLCJwYXVzZWQiLCJjbGFtcFdoZW5GaW5pc2hlZCIsInplcm9TbG9wZUF0U3RhcnQiLCJ6ZXJvU2xvcGVBdEVuZCIsIl9hY3RpdmF0ZUFjdGlvbiIsIl9kZWFjdGl2YXRlQWN0aW9uIiwic3RvcEZhZGluZyIsInN0b3BXYXJwaW5nIiwiaXNSdW5uaW5nIiwiX2lzQWN0aXZlQWN0aW9uIiwiaXNTY2hlZHVsZWQiLCJzdGFydEF0IiwibW9kZSIsInNldEVmZmVjdGl2ZVdlaWdodCIsImdldEVmZmVjdGl2ZVdlaWdodCIsImZhZGVJbiIsIl9zY2hlZHVsZUZhZGluZyIsImZhZGVPdXQiLCJjcm9zc0ZhZGVGcm9tIiwiZmFkZU91dEFjdGlvbiIsIndhcnAiLCJmYWRlSW5EdXJhdGlvbiIsImZhZGVPdXREdXJhdGlvbiIsInN0YXJ0RW5kUmF0aW8iLCJlbmRTdGFydFJhdGlvIiwiY3Jvc3NGYWRlVG8iLCJmYWRlSW5BY3Rpb24iLCJ3ZWlnaHRJbnRlcnBvbGFudCIsIl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCIsInNldEVmZmVjdGl2ZVRpbWVTY2FsZSIsImdldEVmZmVjdGl2ZVRpbWVTY2FsZSIsInNldER1cmF0aW9uIiwic3luY1dpdGgiLCJhY3Rpb24iLCJoYWx0Iiwic3RhcnRUaW1lU2NhbGUiLCJlbmRUaW1lU2NhbGUiLCJfbGVuZENvbnRyb2xJbnRlcnBvbGFudCIsInRpbWVTY2FsZUludGVycG9sYW50IiwiZ2V0TWl4ZXIiLCJnZXRDbGlwIiwiZ2V0Um9vdCIsIl9yb290IiwiX3VwZGF0ZSIsImRlbHRhVGltZSIsInRpbWVEaXJlY3Rpb24iLCJfdXBkYXRlV2VpZ2h0IiwidGltZVJ1bm5pbmciLCJfdXBkYXRlVGltZVNjYWxlIiwiY2xpcFRpbWUiLCJfdXBkYXRlVGltZSIsInByb3BlcnR5TWl4ZXJzIiwiaW50ZXJwb2xhbnRWYWx1ZSIsImxvb3BDb3VudCIsInBpbmdQb25nIiwiX3NldEVuZGluZ3MiLCJoYW5kbGVfc3RvcCIsImxvb3BEZWx0YSIsInBlbmRpbmciLCJhdFN0YXJ0IiwiYXRFbmQiLCJ3ZWlnaHROb3ciLCJ3ZWlnaHRUaGVuIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJBbmltYXRpb25NaXhlciIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zIiwiY29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnNCeUNsaXAiLCJhY3Rpb25CeVJvb3QiLCJfcmVtb3ZlSW5hY3RpdmVBY3Rpb24iLCJsYXN0SW5hY3RpdmVBY3Rpb24iLCJjYWNoZUluZGV4Iiwia25vd25BY3Rpb25zRm9yQ2xpcCIsImxhc3RLbm93bkFjdGlvbiIsImJ5Q2xpcENhY2hlSW5kZXgiLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmciLCJwcmV2SW5kZXgiLCJsYXN0QWN0aXZlSW5kZXgiLCJmaXJzdEluYWN0aXZlQWN0aW9uIiwiZmlyc3RJbmFjdGl2ZUluZGV4IiwibGFzdEFjdGl2ZUFjdGlvbiIsImJpbmRpbmdCeU5hbWUiLCJwcm9wQmluZGluZyIsImxhc3RJbmFjdGl2ZUJpbmRpbmciLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInNldFRpbWUiLCJ0aW1lSW5TZWNvbmRzIiwidW5jYWNoZUNsaXAiLCJhY3Rpb25zVG9SZW1vdmUiLCJ1bmNhY2hlUm9vdCIsInVuY2FjaGVBY3Rpb24iLCJSZW5kZXJUYXJnZXQzRCIsImlzUmVuZGVyVGFyZ2V0M0QiLCJSZW5kZXJUYXJnZXRBcnJheSIsImlzUmVuZGVyVGFyZ2V0QXJyYXkiLCJVbmlmb3JtIiwiX2lkIiwiVW5pZm9ybXNHcm91cCIsImlzVW5pZm9ybXNHcm91cCIsInNldE5hbWUiLCJ1bmlmb3Jtc1NvdXJjZSIsIkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwiaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciIsIkdMQnVmZmVyQXR0cmlidXRlIiwiZWxlbWVudFNpemUiLCJzZXRUeXBlIiwic2V0SXRlbVNpemUiLCJzZXRDb3VudCIsIl9tYXRyaXgiLCJSYXljYXN0ZXIiLCJzZXRGcm9tQ2FtZXJhIiwiY29vcmRzIiwic2V0RnJvbVhSQ29udHJvbGxlciIsImludGVyc2VjdE9iamVjdCIsImFzY1NvcnQiLCJpbnRlcnNlY3RPYmplY3RzIiwicHJvcGFnYXRlIiwiU3BoZXJpY2FsIiwib3RoZXIiLCJtYWtlU2FmZSIsIkVQUyIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJDeWxpbmRyaWNhbCIsIk1hdHJpeDIiLCJpc01hdHJpeDIiLCJfdmVjdG9yJDQiLCJCb3gyIiwiaXNCb3gyIiwiX3N0YXJ0UCIsIl9zdGFydEVuZCIsIkxpbmUzIiwiZGlzdGFuY2VTcSIsImNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIiLCJjbGFtcFRvTGluZSIsInN0YXJ0RW5kMiIsIl92ZWN0b3IkMyIsIlNwb3RMaWdodEhlbHBlciIsInBvc2l0aW9ucyIsImNvbmUiLCJjb25lTGVuZ3RoIiwiY29uZVdpZHRoIiwiX3ZlY3RvciQyIiwiX2JvbmVNYXRyaXgiLCJfbWF0cml4V29ybGRJbnYiLCJTa2VsZXRvbkhlbHBlciIsImdldEJvbmVMaXN0IiwiY29sb3JzIiwiaXNTa2VsZXRvbkhlbHBlciIsImJvbmVMaXN0IiwiUG9pbnRMaWdodEhlbHBlciIsInNwaGVyZVNpemUiLCJfdmVjdG9yJDEiLCJfY29sb3IxIiwiX2NvbG9yMiIsIkhlbWlzcGhlcmVMaWdodEhlbHBlciIsIkdyaWRIZWxwZXIiLCJQb2xhckdyaWRIZWxwZXIiLCJzZWN0b3JzIiwicmluZ3MiLCJfdjEiLCJfdjIiLCJfdjMiLCJEaXJlY3Rpb25hbExpZ2h0SGVscGVyIiwibGlnaHRQbGFuZSIsInRhcmdldExpbmUiLCJfdmVjdG9yIiwiX2NhbWVyYSIsIkNhbWVyYUhlbHBlciIsInBvaW50TWFwIiwiYWRkTGluZSIsImFkZFBvaW50IiwiY29sb3JGcnVzdHVtIiwiY29sb3JDb25lIiwiY29sb3JVcCIsImNvbG9yVGFyZ2V0IiwiY29sb3JDcm9zcyIsInNldENvbG9ycyIsImNvbG9yQXR0cmlidXRlIiwibmVhcloiLCJzZXRQb2ludCIsIl9ib3giLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJfYXhpcyIsIl9saW5lR2VvbWV0cnkiLCJfY29uZUdlb21ldHJ5IiwiQXJyb3dIZWxwZXIiLCJoZWFkTGVuZ3RoIiwiaGVhZFdpZHRoIiwic2V0RGlyZWN0aW9uIiwic2V0Q29sb3IiLCJBeGVzSGVscGVyIiwieEF4aXNDb2xvciIsInlBeGlzQ29sb3IiLCJ6QXhpc0NvbG9yIiwiU2hhcGVQYXRoIiwic3ViUGF0aHMiLCJjdXJyZW50UGF0aCIsInRvU2hhcGVzIiwiaXNDQ1ciLCJpc1BvaW50SW5zaWRlUG9seWdvbiIsImluUG9seWdvbiIsInBvbHlMZW4iLCJlZGdlTG93UHQiLCJlZGdlSGlnaFB0IiwiZWRnZUR4IiwiZWRnZUR5IiwicGVycEVkZ2UiLCJzb2xpZCIsInRtcFBhdGgiLCJ0bXBTaGFwZSIsImhvbGVzRmlyc3QiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJuZXdTaGFwZUhvbGVzIiwibWFpbklkeCIsImluU3VicGF0aHMiLCJ0b1NoYXBlc05vSG9sZXMiLCJhbWJpZ3VvdXMiLCJ0b0NoYW5nZSIsInNJZHgiLCJzTGVuIiwic2hvIiwiaElkeCIsImhvIiwiaG9sZV91bmFzc2lnbmVkIiwiczJJZHgiLCJDb250cm9scyIsImRvbUVsZW1lbnQiLCJzdGF0ZSIsIm1vdXNlQnV0dG9ucyIsInRvdWNoZXMiLCJPTkUiLCJUV08iLCJnZXRCeXRlTGVuZ3RoIiwidHlwZUJ5dGVMZW5ndGgiLCJnZXRUZXh0dXJlVHlwZUJ5dGVMZW5ndGgiLCJUZXh0dXJlVXRpbHMiLCJjb250YWluIiwiaW1hZ2VBc3BlY3QiLCJjb3ZlciIsInJldmlzaW9uIiwiX19USFJFRV9fIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFZLE1BQUFBLEVBQUEsU0FFQUMsRUFBQSxDQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsTUFBQSxFQUFBQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsSUFBQSxHQUNBQyxFQUFBLENBQUFILE9BQUEsRUFBQUUsSUFBQSxFQUFBRSxVQUFBLEVBQUFDLGFBQUEsR0FDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsV0FDQUMsR0FBQSxXQUVBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLE1BQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FFQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUdBQyxHQUFBLEdBQ0FDLEdBQUEsT0FDQUMsR0FBQSxjQUVBQyxHQUFBLFNBQ0FDLEdBQUEsT0FFQUMsR0FBQSxFQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLEtBRUFDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUVBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFFQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFFQUMsR0FBQSxNQUNBQyxHQUFBLFNBRUFDLEdBQUEsSUFDQUMsR0FBQSxLQUVBQyxHQUFBLENBQ1pDLFFBQUEsVUFDQUMsT0FBQSxVQ2xOQSxNQUFBQyxHQUVBLGdCQUFBQyxDQUFBQyxFQUFBQyxRQUVBQyxJQUFBQyxLQUFBQyxhQUFBRCxLQUFBQyxXQUFBLENBQUEsR0FFQSxNQUFBQyxFQUFBRixLQUFBQyxnQkFFQUYsSUFBQUcsRUFBQUwsS0FFQUssRUFBQUwsR0FBQSxLQUlBLElBQUFLLEVBQUFMLEdBQUFNLFFBQUFMLElBRUFJLEVBQUFMLEdBQUFPLEtBQUFOLEVBSUEsQ0FFQSxnQkFBQU8sQ0FBQVIsRUFBQUMsR0FFQSxNQUFBSSxFQUFBRixLQUFBQyxXQUVBLFlBQUFGLElBQUFHLFNBRUFILElBQUFHLEVBQUFMLEtBQUEsSUFBQUssRUFBQUwsR0FBQU0sUUFBQUwsR0FFQSxDQUVBLG1CQUFBUSxDQUFBVCxFQUFBQyxHQUVBLE1BQUFJLEVBQUFGLEtBQUFDLFdBRUEsUUFBQUYsSUFBQUcsRUFBQSxPQUVBLE1BQUFLLEVBQUFMLEVBQUFMLEdBRUEsUUFBQUUsSUFBQVEsRUFBQSxDQUVBLE1BQUFDLEVBQUFELEVBQUFKLFFBQUFMLElBRUEsSUFBQVUsR0FFQUQsRUFBQUUsT0FBQUQsRUFBQSxFQUlBLENBRUEsQ0FFQSxhQUFBRSxDQUFBQyxHQUVBLE1BQUFULEVBQUFGLEtBQUFDLFdBRUEsUUFBQUYsSUFBQUcsRUFBQSxPQUVBLE1BQUFLLEVBQUFMLEVBQUFTLEVBQUFkLE1BRUEsUUFBQUUsSUFBQVEsRUFBQSxDQUVBSSxFQUFBQyxPQUFBWixLQUdBLE1BQUFhLEVBQUFOLEVBQUFPLE1BQUEsR0FFQSxJQUFBLElBQUFDLEVBQUEsRUFBQUMsRUFBQUgsRUFBQUksT0FBQUYsRUFBQUMsRUFBQUQsSUFFQUYsRUFBQUUsR0FBQUcsS0FBQWxCLEtBQUFXLEdBSUFBLEVBQUFDLE9BQUEsSUFFQSxDQUVBLEVDbkZBLE1BQUFPLEdBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxNQUVBLElBQUFDLEdBQUEsUUFHQSxNQUFBQyxHQUFBQyxLQUFBQyxHQUFBLElBQ0tDLEdBQUEsSUFBQUYsS0FBQUMsR0FHTCxTQUFBRSxLQUVBLE1BQUFDLEVBQUEsV0FBQUosS0FBQUssU0FBQSxFQUNBQyxFQUFBLFdBQUFOLEtBQUFLLFNBQUEsRUFDQUUsRUFBQSxXQUFBUCxLQUFBSyxTQUFBLEVBQ0FH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QSxRQUFBQyxTQUFBLFNBQUFDLFFBQUEsU0FBQUMsS0FBQSxNQUFBQyxTQUFBLElBQUFDLFNBQUEsTUFDQUMsY0FBQSxTQUFBQyxTQUFBLFNBQUFDLFVBQUEsTUFBQUMsU0FBQSxTQUFBQyxVQUFBLFNBQUFDLFlBQUEsUUFDQUMsZUFBQSxRQUFBQyxXQUFBLFNBQUFDLFdBQUEsU0FBQUMsUUFBQSxRQUFBQyxXQUFBLFNBQUFDLGFBQUEsUUFDQUMsY0FBQSxRQUFBQyxjQUFBLFFBQUFDLGNBQUEsUUFBQUMsY0FBQSxNQUFBQyxXQUFBLFFBQ0FDLFNBQUEsU0FBQUMsWUFBQSxNQUFBQyxRQUFBLFFBQUFDLFFBQUEsUUFBQUMsV0FBQSxRQUFBQyxVQUFBLFNBQ0FDLFlBQUEsU0FBQUMsWUFBQSxRQUFBQyxRQUFBLFNBQUFDLFVBQUEsU0FBQUMsV0FBQSxTQUFBQyxLQUFBLFNBQ0FDLFVBQUEsU0FBQUMsS0FBQSxRQUFBQyxNQUFBLE1BQUFDLFlBQUEsU0FBQUMsS0FBQSxRQUFBQyxTQUFBLFNBQUFDLFFBQUEsU0FDQUMsVUFBQSxTQUFBQyxPQUFBLFFBQUFDLE1BQUEsU0FBQUMsTUFBQSxTQUFBQyxTQUFBLFNBQUFDLGNBQUEsU0FBQUMsVUFBQSxRQUNBQyxhQUFBLFNBQUFDLFVBQUEsU0FBQUMsV0FBQSxTQUFBQyxVQUFBLFNBQUFDLHFCQUFBLFNBQUFDLFVBQUEsU0FDQUMsV0FBQSxRQUFBQyxVQUFBLFNBQUFDLFVBQUEsU0FBQUMsWUFBQSxTQUFBQyxjQUFBLFFBQUFDLGFBQUEsUUFDQUMsZUFBQSxRQUFBQyxlQUFBLFFBQUFDLGVBQUEsU0FBQUMsWUFBQSxTQUFBQyxLQUFBLE1BQUFDLFVBQUEsUUFDQUMsTUFBQSxTQUFBQyxRQUFBLFNBQUFDLE9BQUEsUUFBQUMsaUJBQUEsUUFBQUMsV0FBQSxJQUFBQyxhQUFBLFNBQ0FDLGFBQUEsUUFBQUMsZUFBQSxRQUFBQyxnQkFBQSxRQUFBQyxrQkFBQSxNQUFBQyxnQkFBQSxRQUNBQyxnQkFBQSxTQUFBQyxhQUFBLFFBQUFDLFVBQUEsU0FBQUMsVUFBQSxT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
