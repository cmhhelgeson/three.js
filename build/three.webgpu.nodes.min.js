/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
<<<<<<< HEAD
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix3 as i,Matrix4 as n,EventDispatcher as o,MathUtils as a,ColorManagement as u,SRGBTransfer as l,NoToneMapping as d,StaticDrawUsage as c,InterleavedBuffer as h,DynamicDrawUsage as p,InterleavedBufferAttribute as g,NoColorSpace as m,UnsignedIntType as f,IntType as y,WebGLCoordinateSystem as b,BackSide as x,CubeReflectionMapping as T,CubeRefractionMapping as _,WebGPUCoordinateSystem as v,TangentSpaceNormalMap as N,ObjectSpaceNormalMap as S,InstancedInterleavedBuffer as A,InstancedBufferAttribute as R,DataArrayTexture as C,FloatType as E,FramebufferTexture as w,LinearMipmapLinearFilter as M,DepthTexture as B,Material as U,NormalBlending as F,PointsMaterial as I,LineBasicMaterial as P,LineDashedMaterial as L,MeshNormalMaterial as D,WebGLCubeRenderTarget as V,BoxGeometry as O,NoBlending as G,Mesh as k,Scene as z,LinearFilter as $,CubeCamera as W,CubeTexture as H,EquirectangularReflectionMapping as j,EquirectangularRefractionMapping as q,AddOperation as K,MixOperation as X,MultiplyOperation as Y,MeshBasicMaterial as Q,MeshLambertMaterial as Z,MeshPhongMaterial as J,Texture as ee,MeshStandardMaterial as te,MeshPhysicalMaterial as re,MeshToonMaterial as se,MeshMatcapMaterial as ie,SpriteMaterial as ne,ShadowMaterial as oe,Uint32BufferAttribute as ae,Uint16BufferAttribute as ue,DoubleSide as le,DepthStencilFormat as de,DepthFormat as ce,UnsignedInt248Type as he,UnsignedByteType as pe,RenderTarget as ge,Plane as me,Object3D as fe,HalfFloatType as ye,LinearMipMapLinearFilter as be,OrthographicCamera as xe,BufferGeometry as Te,Float32BufferAttribute as _e,BufferAttribute as ve,UVMapping as Ne,Euler as Se,LinearSRGBColorSpace as Ae,LessCompare as Re,VSMShadowMap as Ce,RGFormat as Ee,BasicShadowMap as we,SphereGeometry as Me,CubeUVReflectionMapping as Be,PerspectiveCamera as Ue,RGBAFormat as Fe,LinearMipmapNearestFilter as Ie,NearestMipmapLinearFilter as Pe,Float16BufferAttribute as Le,REVISION as De,SRGBColorSpace as Ve,PCFShadowMap as Oe,FrontSide as Ge,Frustum as ke,DataTexture as ze,RedIntegerFormat as $e,RedFormat as We,RGIntegerFormat as He,RGBIntegerFormat as je,RGBFormat as qe,RGBAIntegerFormat as Ke,UnsignedShortType as Xe,ByteType as Ye,ShortType as Qe,createCanvasElement as Ze,AddEquation as Je,SubtractEquation as et,ReverseSubtractEquation as tt,ZeroFactor as rt,OneFactor as st,SrcColorFactor as it,SrcAlphaFactor as nt,SrcAlphaSaturateFactor as ot,DstColorFactor as at,DstAlphaFactor as ut,OneMinusSrcColorFactor as lt,OneMinusSrcAlphaFactor as dt,OneMinusDstColorFactor as ct,OneMinusDstAlphaFactor as ht,CullFaceNone as pt,CullFaceBack as gt,CullFaceFront as mt,CustomBlending as ft,MultiplyBlending as yt,SubtractiveBlending as bt,AdditiveBlending as xt,NotEqualDepth as Tt,GreaterDepth as _t,GreaterEqualDepth as vt,EqualDepth as Nt,LessEqualDepth as St,LessDepth as At,AlwaysDepth as Rt,NeverDepth as Ct,UnsignedShort4444Type as Et,UnsignedShort5551Type as wt,UnsignedInt5999Type as Mt,AlphaFormat as Bt,LuminanceFormat as Ut,LuminanceAlphaFormat as Ft,RGB_S3TC_DXT1_Format as It,RGBA_S3TC_DXT1_Format as Pt,RGBA_S3TC_DXT3_Format as Lt,RGBA_S3TC_DXT5_Format as Dt,RGB_PVRTC_4BPPV1_Format as Vt,RGB_PVRTC_2BPPV1_Format as Ot,RGBA_PVRTC_4BPPV1_Format as Gt,RGBA_PVRTC_2BPPV1_Format as kt,RGB_ETC1_Format as zt,RGB_ETC2_Format as $t,RGBA_ETC2_EAC_Format as Wt,RGBA_ASTC_4x4_Format as Ht,RGBA_ASTC_5x4_Format as jt,RGBA_ASTC_5x5_Format as qt,RGBA_ASTC_6x5_Format as Kt,RGBA_ASTC_6x6_Format as Xt,RGBA_ASTC_8x5_Format as Yt,RGBA_ASTC_8x6_Format as Qt,RGBA_ASTC_8x8_Format as Zt,RGBA_ASTC_10x5_Format as Jt,RGBA_ASTC_10x6_Format as er,RGBA_ASTC_10x8_Format as tr,RGBA_ASTC_10x10_Format as rr,RGBA_ASTC_12x10_Format as sr,RGBA_ASTC_12x12_Format as ir,RGBA_BPTC_Format as nr,RED_RGTC1_Format as or,SIGNED_RED_RGTC1_Format as ar,RED_GREEN_RGTC2_Format as ur,SIGNED_RED_GREEN_RGTC2_Format as lr,RepeatWrapping as dr,ClampToEdgeWrapping as cr,MirroredRepeatWrapping as hr,NearestFilter as pr,NearestMipmapNearestFilter as gr,NeverCompare as mr,AlwaysCompare as fr,LessEqualCompare as yr,EqualCompare as br,GreaterEqualCompare as xr,GreaterCompare as Tr,NotEqualCompare as _r,warnOnce as vr,NotEqualStencilFunc as Nr,GreaterStencilFunc as Sr,GreaterEqualStencilFunc as Ar,EqualStencilFunc as Rr,LessEqualStencilFunc as Cr,LessStencilFunc as Er,AlwaysStencilFunc as wr,NeverStencilFunc as Mr,DecrementWrapStencilOp as Br,IncrementWrapStencilOp as Ur,DecrementStencilOp as Fr,IncrementStencilOp as Ir,InvertStencilOp as Pr,ReplaceStencilOp as Lr,ZeroStencilOp as Dr,KeepStencilOp as Vr,MaxEquation as Or,MinEquation as Gr,SpotLight as kr,PointLight as zr,DirectionalLight as $r,RectAreaLight as Wr,AmbientLight as Hr,HemisphereLight as jr,LightProbe as qr,LinearToneMapping as Kr,ReinhardToneMapping as Xr,CineonToneMapping as Yr,ACESFilmicToneMapping as Qr,AgXToneMapping as Zr,NeutralToneMapping as Jr,Group as es,Loader as ts,FileLoader as rs,MaterialLoader as ss,ObjectLoader as is}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,Camera,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,Matrix2,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneGeometry,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLMultipleRenderTargets,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const ns=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class os{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=ns,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const o=i.geometry,a=s.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],r=a[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==s.drawRange.start||o.drawRange.count!==s.drawRange.count)return o.drawRange.start=s.drawRange.start,o.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function as(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const us=e=>as(e),ls=e=>as(e),ds=(...e)=>as(e);function cs(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of hs(e))r.push(r,as(s.slice(0,-4)),i.getCacheKey(t));return as(r)}function*hs(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const ps=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]);function gs(e){return ps.get(e)}function ms(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function fs(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function ys(o,...a){const u=o?o.slice(-4):void 0;return 1===a.length&&("vec2"===u?a=[a[0],a[0]]:"vec3"===u?a=[a[0],a[0],a[0]]:"vec4"===u&&(a=[a[0],a[0],a[0],a[0]])),"color"===o?new e(...a):"vec2"===u?new t(...a):"vec3"===u?new r(...a):"vec4"===u?new s(...a):"mat3"===u?new i(...a):"mat4"===u?new n(...a):"bool"===o?a[0]||!1:"float"===o||"int"===o||"uint"===o?a[0]||0:"string"===o?a[0]||"":"ArrayBuffer"===o?xs(a[0]):null}function bs(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function xs(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var Ts=Object.freeze({__proto__:null,arrayBufferToBase64:bs,base64ToArrayBuffer:xs,getCacheKey:cs,getLengthFromType:ms,getNodeChildren:hs,getTypeFromLength:gs,getValueFromType:ys,getValueType:fs,hash:ds,hashArray:ls,hashString:us});const _s={VERTEX:"vertex",FRAGMENT:"fragment"},vs={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Ns={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Ss={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},As=["fragment","vertex"],Rs=["setup","analyze","generate"],Cs=[...As,"compute"],Es=["x","y","z","w"];let ws=0;class Ms extends o{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=vs.NONE,this.updateBeforeType=vs.NONE,this.updateAfterType=vs.NONE,this.uuid=a.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:ws++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,vs.FRAME)}onRenderUpdate(e){return this.onUpdate(e,vs.RENDER)}onObjectUpdate(e){return this.onUpdate(e,vs.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of hs(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=cs(this,e),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){e.stack.nodes.length;t.initialized=!0,t.outputNode=this.setup(e),null!==t.outputNode&&e.stack.nodes.length;for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?(s=this.generate(e)||"",i.snippet=s):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return hs(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class Bs extends Ms{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class Us extends Ms{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class Fs extends Ms{static get type(){return"TempNode"}constructor(e){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),o=e.getPropertyName(n);return e.addLineFlowCode(`${o} = ${i}`,this),s.snippet=i,s.propertyName=o,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class Is extends Fs{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=this.nodes,i=e.getComponentType(r),n=[];for(const t of s){let r=t.build(e);const s=e.getComponentType(t.getNodeType(e));s!==i&&(r=e.format(r,s,i)),n.push(r)}const o=`${e.getType(r)}( ${n.join(", ")} )`;return e.format(o,r,t)}}const Ps=Es.join("");class Ls extends Ms{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(Es.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=r.build(e,n);i=this.components.length===s&&this.components===Ps.slice(0,this.components.length)?e.format(o,n,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Ds extends Fs{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getTypeFromLength(r.length,s.getNodeType(e)),o=s.build(e,n),a=t.build(e,i),u=e.getTypeLength(i),l=[];for(let e=0;e<u;e++){const t=Es[e];t===r[0]?(l.push(o),e+=r.length-1):l.push(a+"."+t)}return`${e.getType(i)}( ${l.join(", ")} )`}}class Vs extends Fs{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),o=e.getPropertyName(n);e.addLineFlowCode(o+" = "+i,this);const a=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<a;e++){const r=Es[e];r===t[l]?(u.push("1.0 - "+o+"."+r),l++):u.push(o+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Os extends Ms{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?fs(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=fs(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=bs(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?ys(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}class Gs extends Os{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return e.format(this.generateConst(e),r,t)}}let ks=null;const zs=new Map;function $s(e,t){if(zs.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);zs.set(e,t)}}const Ws=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Hs=e=>Ws(e).split("").sort().join(""),js={setup(e,t){const r=t.shift();return e(yi(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(ks.assign(r,...e),r);if(zs.has(t)){const s=zs.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&zs.has(t.slice(0,t.length-6))){const s=zs.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=Ws(t),fi(new Ls(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Hs(t.slice(3).toLowerCase()),r=>fi(new Ds(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Hs(t.slice(4).toLowerCase()),()=>fi(new Vs(fi(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),fi(new Ls(e,t));if(!0===/^\d+$/.test(t))return fi(new Bs(r,new Gs(Number(t),"uint")))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},qs=new WeakMap,Ks=new WeakMap,Xs=function(e,t=null){for(const r in e)e[r]=fi(e[r],t);return e},Ys=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=fi(e[s],t);return e},Qs=function(e,t=null,r=null,s=null){const i=e=>fi(null!==s?Object.assign(e,s):e);return null===t?(...t)=>i(new e(...bi(t))):null!==r?(r=fi(r),(...s)=>i(new e(t,...bi(s),r))):(...r)=>i(new e(t,...bi(r)))},Zs=function(e,...t){return fi(new e(...bi(t)))};class Js extends Ms{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=Ks.get(e.constructor);void 0===s&&(s=new WeakMap,Ks.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=fi(e.buildFunctionNode(t)),s.set(t,n)),null!==e.currentFunctionNode&&e.currentFunctionNode.includes.push(n),i=fi(n.call(r))}else{const s=t.jsFunc,n=null!==r?s(r,e):s(e);i=fi(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class ei extends Ms{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return yi(e),fi(new Js(this,e))}setup(){return this.call()}}const ti=[!1,!0],ri=[0,1,2,3],si=[-1,-2],ii=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],ni=new Map;for(const e of ti)ni.set(e,new Gs(e));const oi=new Map;for(const e of ri)oi.set(e,new Gs(e,"uint"));const ai=new Map([...oi].map((e=>new Gs(e.value,"int"))));for(const e of si)ai.set(e,new Gs(e,"int"));const ui=new Map([...ai].map((e=>new Gs(e.value))));for(const e of ii)ui.set(e,new Gs(e));for(const e of ii)ui.set(-e,new Gs(-e));const li={bool:ni,uint:oi,ints:ai,float:ui},di=new Map([...ni,...ui]),ci=(e,t)=>di.has(e)?di.get(e):!0===e.isNode?e:new Gs(e,t),hi=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[ys(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return fi(t.get(r[0]));if(1===r.length){const t=ci(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?fi(t):fi(new Us(t,e))}const s=r.map((e=>ci(e)));return fi(new Is(s,e))}},pi=e=>"object"==typeof e&&null!==e?e.value:e,gi=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function mi(e,t){return new Proxy(new ei(e,t),js)}const fi=(e,t=null)=>function(e,t=null){const r=fs(e);if("node"===r){let t=qs.get(e);return void 0===t&&(t=new Proxy(e,js),qs.set(e,t),qs.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?fi(ci(e,t)):"shader"===r?_i(e):e}(e,t),yi=(e,t=null)=>new Xs(e,t),bi=(e,t=null)=>new Ys(e,t),xi=(...e)=>new Qs(...e),Ti=(...e)=>new Zs(...e),_i=(e,t)=>{const r=new mi(e,t),s=(...e)=>{let t;return yi(e),t=e[0]&&e[0].isNode?[...e]:e[0],r.call(t)};return s.shaderNode=r,s.setLayout=e=>(r.setLayout(e),s),s.once=()=>(r.once=!0,s),s};$s("toGlobal",(e=>(e.global=!0,e)));const vi=e=>{ks=e},Ni=()=>ks,Si=(...e)=>ks.If(...e);function Ai(e){return ks&&ks.add(e),e}$s("append",Ai);const Ri=new hi("color"),Ci=new hi("float",li.float),Ei=new hi("int",li.ints),wi=new hi("uint",li.uint),Mi=new hi("bool",li.bool),Bi=new hi("vec2"),Ui=new hi("ivec2"),Fi=new hi("uvec2"),Ii=new hi("bvec2"),Pi=new hi("vec3"),Li=new hi("ivec3"),Di=new hi("uvec3"),Vi=new hi("bvec3"),Oi=new hi("vec4"),Gi=new hi("ivec4"),ki=new hi("uvec4"),zi=new hi("bvec4"),$i=new hi("mat2"),Wi=new hi("mat3"),Hi=new hi("mat4");$s("toColor",Ri),$s("toFloat",Ci),$s("toInt",Ei),$s("toUint",wi),$s("toBool",Mi),$s("toVec2",Bi),$s("toIVec2",Ui),$s("toUVec2",Fi),$s("toBVec2",Ii),$s("toVec3",Pi),$s("toIVec3",Li),$s("toUVec3",Di),$s("toBVec3",Vi),$s("toVec4",Oi),$s("toIVec4",Gi),$s("toUVec4",ki),$s("toBVec4",zi),$s("toMat2",$i),$s("toMat3",Wi),$s("toMat4",Hi);const ji=xi(Bs),qi=(e,t)=>fi(new Us(fi(e),t));$s("element",ji),$s("convert",qi);class Ki extends Ms{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.version=0,this.shared=t,this.order=r,this.isUniformGroup=!0}set needsUpdate(e){!0===e&&this.version++}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const Xi=e=>new Ki(e),Yi=(e,t=0)=>new Ki(e,!0,t),Qi=Yi("frame"),Zi=Yi("render"),Ji=Xi("object");class en extends Os{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=Ji}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),o=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,r,t)}}const tn=(e,t)=>{const r=gi(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return fi(new en(s,r))};class rn extends Ms{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const sn=(e,t)=>fi(new rn(e,t)),nn=(e,t)=>fi(new rn(e,t,!0)),on=Ti(rn,"vec4","DiffuseColor"),an=Ti(rn,"vec3","EmissiveColor"),un=Ti(rn,"float","Roughness"),ln=Ti(rn,"float","Metalness"),dn=Ti(rn,"float","Clearcoat"),cn=Ti(rn,"float","ClearcoatRoughness"),hn=Ti(rn,"vec3","Sheen"),pn=Ti(rn,"float","SheenRoughness"),gn=Ti(rn,"float","Iridescence"),mn=Ti(rn,"float","IridescenceIOR"),fn=Ti(rn,"float","IridescenceThickness"),yn=Ti(rn,"float","AlphaT"),bn=Ti(rn,"float","Anisotropy"),xn=Ti(rn,"vec3","AnisotropyT"),Tn=Ti(rn,"vec3","AnisotropyB"),_n=Ti(rn,"color","SpecularColor"),vn=Ti(rn,"float","SpecularF90"),Nn=Ti(rn,"float","Shininess"),Sn=Ti(rn,"vec4","Output"),An=Ti(rn,"float","dashSize"),Rn=Ti(rn,"float","gapSize"),Cn=Ti(rn,"float","pointWidth"),En=Ti(rn,"float","IOR"),wn=Ti(rn,"float","Transmission"),Mn=Ti(rn,"float","Thickness"),Bn=Ti(rn,"float","AttenuationDistance"),Un=Ti(rn,"color","AttenuationColor"),Fn=Ti(rn,"float","Dispersion");class In extends Fs{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return Es.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),o=r.context({assign:!0}).build(e),a=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${a}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,n,t)}}const Pn=xi(In);$s("assign",Pn);class Ln extends Fs{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i))for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]));else for(const e of s){const r=i[e.name];if(void 0===r)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(n(r,e))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const Dn=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?bi(t):yi(t[0]),fi(new Ln(fi(e),t)));$s("call",Dn);class Vn extends Fs{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new Vn(e,t,r);for(let t=0;t<s.length-1;t++)i=new Vn(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r}getNodeType(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===r)return n;if("~"===r||"&"===r||"|"===r||"^"===r||">>"===r||"<<"===r)return e.getIntegerType(n);if("!"===r||"=="===r||"&&"===r||"||"===r||"^^"===r)return"bool";if("<"===r||">"===r||"<="===r||">="===r){const r=t?e.getTypeLength(t):Math.max(e.getTypeLength(n),e.getTypeLength(o));return r>1?`bvec${r}`:"bool"}return"float"===n&&e.isMatrix(o)?o:e.isMatrix(n)&&e.isVector(o)?e.getVectorFromMatrix(n):e.isVector(n)&&e.isMatrix(o)?e.getVectorFromMatrix(o):e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e,t);let o=null,a=null;"void"!==n?(o=s.getNodeType(e),a=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===r||"<<"===r?(o=n,a=e.changeComponentType(a,"uint")):e.isMatrix(o)&&e.isVector(a)?a=e.getVectorFromMatrix(o):o=e.isVector(o)&&e.isMatrix(a)?e.getVectorFromMatrix(a):a=n):o=a=n;const u=s.build(e,o),l=void 0!==i?i.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(r);return"void"!==t?"<"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} < ${l} )`,n,t):"<="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} <= ${l} )`,n,t):">"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} > ${l} )`,n,t):">="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} >= ${l} )`,n,t):"!"===r||"~"===r?e.format(`(${r}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,n,t):e.format(`( ${u} ${r} ${l} )`,n,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,n,t):e.format(`${u} ${r} ${l}`,n,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const On=xi(Vn,"+"),Gn=xi(Vn,"-"),kn=xi(Vn,"*"),zn=xi(Vn,"/"),$n=xi(Vn,"%"),Wn=xi(Vn,"=="),Hn=xi(Vn,"!="),jn=xi(Vn,"<"),qn=xi(Vn,">"),Kn=xi(Vn,"<="),Xn=xi(Vn,">="),Yn=xi(Vn,"&&"),Qn=xi(Vn,"||"),Zn=xi(Vn,"!"),Jn=xi(Vn,"^^"),eo=xi(Vn,"&"),to=xi(Vn,"~"),ro=xi(Vn,"|"),so=xi(Vn,"^"),io=xi(Vn,"<<"),no=xi(Vn,">>");$s("add",On),$s("sub",Gn),$s("mul",kn),$s("div",zn),$s("modInt",$n),$s("equal",Wn),$s("notEqual",Hn),$s("lessThan",jn),$s("greaterThan",qn),$s("lessThanEqual",Kn),$s("greaterThanEqual",Xn),$s("and",Yn),$s("or",Qn),$s("not",Zn),$s("xor",Jn),$s("bitAnd",eo),$s("bitNot",to),$s("bitOr",ro),$s("bitXor",so),$s("shiftLeft",io),$s("shiftRight",no);const oo=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),$n(...e));$s("remainder",oo);class ao extends Fs{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){super(),this.method=e,this.aNode=t,this.bNode=r,this.cNode=s}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),o=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>o?t:n>o?r:o>i?s:t}getNodeType(e){const t=this.method;return t===ao.LENGTH||t===ao.DISTANCE||t===ao.DOT?"float":t===ao.CROSS?"vec3":t===ao.ALL?"bool":t===ao.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===ao.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){const r=this.method,s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,o=this.bNode,a=this.cNode,u=!0===e.renderer.isWebGLRenderer;if(r===ao.TRANSFORM_DIRECTION){let r=n,s=o;e.isMatrix(r.getNodeType(e))?s=Oi(Pi(s),0):r=Oi(Pi(r),0);const i=kn(r,s).xyz;return Ro(i).build(e,t)}if(r===ao.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===ao.ONE_MINUS)return Gn(1,n).build(e,t);if(r===ao.RECIPROCAL)return zn(1,n).build(e,t);if(r===ao.DIFFERENCE)return Io(Gn(n,o)).build(e,t);{const l=[];return r===ao.CROSS||r===ao.MOD?l.push(n.build(e,s),o.build(e,s)):u&&r===ao.STEP?l.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),o.build(e,i)):u&&(r===ao.MIN||r===ao.MAX)||r===ao.MOD?l.push(n.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):r===ao.REFRACT?l.push(n.build(e,i),o.build(e,i),a.build(e,"float")):r===ao.MIX?l.push(n.build(e,i),o.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)):(l.push(n.build(e,i)),null!==o&&l.push(o.build(e,i)),null!==a&&l.push(a.build(e,i))),e.format(`${e.getMethod(r,s)}( ${l.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}ao.ALL="all",ao.ANY="any",ao.EQUALS="equals",ao.RADIANS="radians",ao.DEGREES="degrees",ao.EXP="exp",ao.EXP2="exp2",ao.LOG="log",ao.LOG2="log2",ao.SQRT="sqrt",ao.INVERSE_SQRT="inversesqrt",ao.FLOOR="floor",ao.CEIL="ceil",ao.NORMALIZE="normalize",ao.FRACT="fract",ao.SIN="sin",ao.COS="cos",ao.TAN="tan",ao.ASIN="asin",ao.ACOS="acos",ao.ATAN="atan",ao.ABS="abs",ao.SIGN="sign",ao.LENGTH="length",ao.NEGATE="negate",ao.ONE_MINUS="oneMinus",ao.DFDX="dFdx",ao.DFDY="dFdy",ao.ROUND="round",ao.RECIPROCAL="reciprocal",ao.TRUNC="trunc",ao.FWIDTH="fwidth",ao.BITCAST="bitcast",ao.TRANSPOSE="transpose",ao.ATAN2="atan2",ao.MIN="min",ao.MAX="max",ao.MOD="mod",ao.STEP="step",ao.REFLECT="reflect",ao.DISTANCE="distance",ao.DIFFERENCE="difference",ao.DOT="dot",ao.CROSS="cross",ao.POW="pow",ao.TRANSFORM_DIRECTION="transformDirection",ao.MIX="mix",ao.CLAMP="clamp",ao.REFRACT="refract",ao.SMOOTHSTEP="smoothstep",ao.FACEFORWARD="faceforward";const uo=Ci(1e-6),lo=Ci(1e6),co=Ci(Math.PI),ho=Ci(2*Math.PI),po=xi(ao,ao.ALL),go=xi(ao,ao.ANY),mo=xi(ao,ao.EQUALS),fo=xi(ao,ao.RADIANS),yo=xi(ao,ao.DEGREES),bo=xi(ao,ao.EXP),xo=xi(ao,ao.EXP2),To=xi(ao,ao.LOG),_o=xi(ao,ao.LOG2),vo=xi(ao,ao.SQRT),No=xi(ao,ao.INVERSE_SQRT),So=xi(ao,ao.FLOOR),Ao=xi(ao,ao.CEIL),Ro=xi(ao,ao.NORMALIZE),Co=xi(ao,ao.FRACT),Eo=xi(ao,ao.SIN),wo=xi(ao,ao.COS),Mo=xi(ao,ao.TAN),Bo=xi(ao,ao.ASIN),Uo=xi(ao,ao.ACOS),Fo=xi(ao,ao.ATAN),Io=xi(ao,ao.ABS),Po=xi(ao,ao.SIGN),Lo=xi(ao,ao.LENGTH),Do=xi(ao,ao.NEGATE),Vo=xi(ao,ao.ONE_MINUS),Oo=xi(ao,ao.DFDX),Go=xi(ao,ao.DFDY),ko=xi(ao,ao.ROUND),zo=xi(ao,ao.RECIPROCAL),$o=xi(ao,ao.TRUNC),Wo=xi(ao,ao.FWIDTH),Ho=xi(ao,ao.BITCAST),jo=xi(ao,ao.TRANSPOSE),qo=xi(ao,ao.ATAN2),Ko=xi(ao,ao.MIN),Xo=xi(ao,ao.MAX),Yo=xi(ao,ao.MOD),Qo=xi(ao,ao.STEP),Zo=xi(ao,ao.REFLECT),Jo=xi(ao,ao.DISTANCE),ea=xi(ao,ao.DIFFERENCE),ta=xi(ao,ao.DOT),ra=xi(ao,ao.CROSS),sa=xi(ao,ao.POW),ia=xi(ao,ao.POW,2),na=xi(ao,ao.POW,3),oa=xi(ao,ao.POW,4),aa=xi(ao,ao.TRANSFORM_DIRECTION),ua=e=>kn(Po(e),sa(Io(e),1/3)),la=e=>ta(e,e),da=xi(ao,ao.MIX),ca=(e,t=0,r=1)=>fi(new ao(ao.CLAMP,fi(e),fi(t),fi(r))),ha=e=>ca(e),pa=xi(ao,ao.REFRACT),ga=xi(ao,ao.SMOOTHSTEP),ma=xi(ao,ao.FACEFORWARD),fa=_i((([e])=>{const t=ta(e.xy,Bi(12.9898,78.233)),r=Yo(t,co);return Co(Eo(r).mul(43758.5453))})),ya=(e,t,r)=>da(t,r,e),ba=(e,t,r)=>ga(t,r,e);$s("all",po),$s("any",go),$s("equals",mo),$s("radians",fo),$s("degrees",yo),$s("exp",bo),$s("exp2",xo),$s("log",To),$s("log2",_o),$s("sqrt",vo),$s("inverseSqrt",No),$s("floor",So),$s("ceil",Ao),$s("normalize",Ro),$s("fract",Co),$s("sin",Eo),$s("cos",wo),$s("tan",Mo),$s("asin",Bo),$s("acos",Uo),$s("atan",Fo),$s("abs",Io),$s("sign",Po),$s("length",Lo),$s("lengthSq",la),$s("negate",Do),$s("oneMinus",Vo),$s("dFdx",Oo),$s("dFdy",Go),$s("round",ko),$s("reciprocal",zo),$s("trunc",$o),$s("fwidth",Wo),$s("atan2",qo),$s("min",Ko),$s("max",Xo),$s("mod",Yo),$s("step",Qo),$s("reflect",Zo),$s("distance",Jo),$s("dot",ta),$s("cross",ra),$s("pow",sa),$s("pow2",ia),$s("pow3",na),$s("pow4",oa),$s("transformDirection",aa),$s("mix",ya),$s("clamp",ca),$s("refract",pa),$s("smoothstep",ba),$s("faceForward",ma),$s("difference",ea),$s("saturate",ha),$s("cbrt",ua),$s("transpose",jo),$s("rand",fa);class xa extends Ms{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const t=this.ifNode.getNodeType(e);if(null!==this.elseNode){const r=this.elseNode.getNodeType(e);if(e.getTypeLength(r)>e.getTypeLength(t))return r}return t}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?sn(r).build(e):"";s.nodeProperty=u;const l=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=n.build(e,r);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,r);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const Ta=xi(xa);$s("select",Ta);const _a=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Ta(...e));$s("cond",_a);class va extends Ms{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const Na=xi(va),Sa=(e,t)=>Na(e,{label:t});$s("context",Na),$s("label",Sa);class Aa extends Ms{static get type(){return"VarNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r}=this,s=e.getVarFromNode(this,r,e.getVectorType(this.getNodeType(e))),i=e.getPropertyName(s),n=t.build(e,s.type);return e.addLineFlowCode(`${i} = ${n}`,this),i}}const Ra=xi(Aa);$s("toVar",((...e)=>Ra(...e).append()));const Ca=e=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),Ra(e));$s("temp",Ca);class Ea extends Ms{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e);t.varying=r=e.getVaryingFromNode(this,s,i),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e);if(void 0===t.propertyName){const s=this.getNodeType(e),i=e.getPropertyName(r,_s.VERTEX);e.flowNodeFromShaderStage(_s.VERTEX,this.node,s,i),t.propertyName=i}return e.getPropertyName(r)}}const wa=xi(Ea);$s("varying",wa);const Ma=_i((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return da(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ba=_i((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return da(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ua="WorkingColorSpace",Fa="OutputColorSpace";class Ia extends Fs{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===Ua?u.workingColorSpace:t===Fa?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let n=t;return!1!==u.enabled&&r!==s&&r&&s?(u.getTransfer(r)===l&&(n=Oi(Ma(n.rgb),n.a)),u.getPrimaries(r)!==u.getPrimaries(s)&&(n=Oi(Wi(u._getMatrix(new i,r,s)).mul(n.rgb),n.a)),u.getTransfer(s)===l&&(n=Oi(Ba(n.rgb),n.a)),n):n}}const Pa=e=>fi(new Ia(fi(e),Ua,Fa)),La=e=>fi(new Ia(fi(e),Fa,Ua)),Da=(e,t)=>fi(new Ia(fi(e),Ua,t)),Va=(e,t)=>fi(new Ia(fi(e),t,Ua));$s("toOutputColorSpace",Pa),$s("toWorkingColorSpace",La),$s("workingToColorSpace",Da),$s("colorSpaceToWorking",Va);let Oa=class extends Bs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class Ga extends Ms{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=vs.OBJECT}setGroup(e){return this.group=e,this}element(e){return fi(new Oa(this,fi(e)))}setNodeType(e){const t=tn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class ka extends Ga{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(Zi)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const za=(e,t,r)=>fi(new ka(e,t,r));class $a extends Fs{static get type(){return"ToneMappingNode"}constructor(e,t=Ha,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}getCacheKey(){return ds(super.getCacheKey(),this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===d)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=Oi(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const Wa=(e,t,r)=>fi(new $a(e,fi(t),fi(r))),Ha=za("toneMappingExposure","float");$s("toneMapping",((e,t,r)=>Wa(t,r,e)));class ja extends Os{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=c,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,o=!0===r.isInterleavedBuffer?r:new h(r,i),a=new g(o,s,n);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=wa(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const qa=(e,t,r,s)=>fi(new ja(e,t,r,s)),Ka=(e,t,r,s)=>qa(e,t,r,s).setUsage(p),Xa=(e,t,r,s)=>qa(e,t,r,s).setInstanced(!0),Ya=(e,t,r,s)=>Ka(e,t,r,s).setInstanced(!0);$s("toAttribute",(e=>qa(e.value)));class Qa extends Ms{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.updateBeforeType=vs.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const Za=(e,t,r)=>fi(new Qa(fi(e),t,r));$s("compute",Za);class Ja extends Ms{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){return this.node.getNodeType(e)}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const eu=(e,...t)=>fi(new Ja(fi(e),...t));$s("cache",eu);class tu extends Ms{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const ru=xi(tu);$s("bypass",ru);class su extends Ms{static get type(){return"RemapNode"}constructor(e,t,r,s=Ci(0),i=Ci(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let o=e.sub(t).div(r.sub(t));return!0===n&&(o=o.clamp()),o.mul(i.sub(s)).add(s)}}const iu=xi(su,null,null,{doClamp:!1}),nu=xi(su);$s("remap",iu),$s("remapClamp",nu);class ou extends Ms{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(`( ${s} )`,r,t);e.addLineFlowCode(s,this)}}const au=xi(ou),uu=e=>(e?Ta(e,au("discard")):au("discard")).append();$s("discard",uu);class lu extends Fs{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutput=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||d,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||m;return r!==d&&(t=t.toneMapping(r)),s!==m&&s!==u.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const du=(e,t=null,r=null)=>fi(new lu(fi(e),t,r));$s("renderOutput",du);class cu extends Ms{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return wa(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const hu=(e,t)=>fi(new cu(e,t)),pu=e=>hu("uv"+(e>0?e:""),"vec2");class gu extends Ms{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const mu=xi(gu);class fu extends en{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=vs.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const yu=xi(fu);class bu extends en{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=vs.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===f?"uvec4":this.value.type===y?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return pu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=tn(this.value.matrix)),this._matrixUniform.mul(Pi(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?vs.FRAME:vs.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Ei(mu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;let r=this.uvNode;null!==r&&!0!==e.context.forceUVContext||!e.context.getUV||(r=e.context.getUV(this)),r||(r=this.getDefaultUV()),!0===this.updateMatrix&&(r=this.getTransformedUV(r)),r=this.setupUV(e,r);let s=this.levelNode;null===s&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),t.uvNode=r,t.levelNode=s,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,o,a){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):a?e.generateTextureGrad(u,t,r,a,n):o?e.generateTextureCompare(u,t,r,o,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=e.getNodeProperties(this),s=this.value;if(!s||!0!==s.isTexture)throw new Error("TextureNode: Need a three.js texture.");const i=super.generate(e,"property");if("sampler"===t)return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let o=n.propertyName;if(void 0===o){const{uvNode:t,levelNode:s,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=r,c=this.generateUV(e,t),h=s?s.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const b=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${b}`,this),n.snippet=b,n.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(s)&&(a=Va(au(a,u),s.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){const t=this.clone();return t.uvNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}blur(e){const t=this.clone();return t.biasNode=fi(e).mul(yu(t)),t.referenceNode=this.getSelf(),fi(t)}level(e){const t=this.clone();return t.levelNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}size(e){return mu(this,e)}bias(e){const t=this.clone();return t.biasNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}compare(e){const t=this.clone();return t.compareNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}grad(e,t){const r=this.clone();return r.gradNode=[fi(e),fi(t)],r.referenceNode=this.getSelf(),fi(r)}depth(e){const t=this.clone();return t.depthNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const xu=xi(bu),Tu=(...e)=>xu(...e).setSampler(!1),_u=tn("float").label("cameraNear").setGroup(Zi).onRenderUpdate((({camera:e})=>e.near)),vu=tn("float").label("cameraFar").setGroup(Zi).onRenderUpdate((({camera:e})=>e.far)),Nu=tn("mat4").label("cameraProjectionMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.projectionMatrix)),Su=tn("mat4").label("cameraProjectionMatrixInverse").setGroup(Zi).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Au=tn("mat4").label("cameraViewMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.matrixWorldInverse)),Ru=tn("mat4").label("cameraWorldMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.matrixWorld)),Cu=tn("mat3").label("cameraNormalMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.normalMatrix)),Eu=tn(new r).label("cameraPosition").setGroup(Zi).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld)));class wu extends Ms{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=vs.OBJECT,this._uniformNode=new en(null)}getNodeType(){const e=this.scope;return e===wu.WORLD_MATRIX?"mat4":e===wu.POSITION||e===wu.VIEW_POSITION||e===wu.DIRECTION||e===wu.SCALE?"vec3":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===wu.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===wu.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===wu.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===wu.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===wu.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}}generate(e){const t=this.scope;return t===wu.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t!==wu.POSITION&&t!==wu.VIEW_POSITION&&t!==wu.DIRECTION&&t!==wu.SCALE||(this._uniformNode.nodeType="vec3"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}wu.WORLD_MATRIX="worldMatrix",wu.POSITION="position",wu.SCALE="scale",wu.VIEW_POSITION="viewPosition",wu.DIRECTION="direction";const Mu=xi(wu,wu.DIRECTION),Bu=xi(wu,wu.WORLD_MATRIX),Uu=xi(wu,wu.POSITION),Fu=xi(wu,wu.SCALE),Iu=xi(wu,wu.VIEW_POSITION);class Pu extends wu{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const Lu=Ti(Pu,Pu.DIRECTION),Du=Ti(Pu,Pu.WORLD_MATRIX),Vu=Ti(Pu,Pu.POSITION),Ou=Ti(Pu,Pu.SCALE),Gu=Ti(Pu,Pu.VIEW_POSITION),ku=tn(new i).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),zu=tn(new n).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),$u=Au.mul(Du).toVar("modelViewMatrix"),Wu=_i((e=>(e.context.isHighPrecisionModelViewMatrix=!0,tn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highPrecisionModelViewMatrix"),Hu=_i((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return tn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highPrecisionModelNormalMatrix"),ju=hu("position","vec3"),qu=ju.varying("positionLocal"),Ku=ju.varying("positionPrevious"),Xu=Du.mul(qu).xyz.varying("v_positionWorld"),Yu=qu.transformDirection(Du).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),Qu=$u.mul(qu).xyz.varying("v_positionView"),Zu=Qu.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Ju extends Ms{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===b&&r.side===x?"false":e.getFrontFacing()}}const el=Ti(Ju),tl=Ci(el).mul(2).sub(1),rl=hu("normal","vec3"),sl=_i((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),Pi(0,1,0)):rl),"vec3").once()().toVar("normalLocal"),il=Qu.dFdx().cross(Qu.dFdy()).normalize().toVar("normalFlat"),nl=_i((e=>{let t;return t=!0===e.material.flatShading?il:wa(cl(sl),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),ol=wa(nl.transformDirection(Au),"v_normalWorld").normalize().toVar("normalWorld"),al=_i((e=>e.context.setupNormal()),"vec3").once()().mul(tl).toVar("transformedNormalView"),ul=al.transformDirection(Au).toVar("transformedNormalWorld"),ll=_i((e=>e.context.setupClearcoatNormal()),"vec3").once()().mul(tl).toVar("transformedClearcoatNormalView"),dl=_i((([e,t=Du])=>{const r=Wi(t),s=e.div(Pi(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),cl=_i((([e],t)=>{const r=t.renderer.nodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=ku.mul(e);return Au.transformDirection(s)})),hl=tn(0).onReference((({material:e})=>e)).onRenderUpdate((({material:e})=>e.refractionRatio)),pl=Zu.negate().reflect(al),gl=Zu.negate().refract(al,hl),ml=pl.transformDirection(Au).toVar("reflectVector"),fl=gl.transformDirection(Au).toVar("reflectVector");class yl extends bu{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===T?ml:e.mapping===_?fl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),Pi(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==v&&r.isRenderTargetTexture?t:Pi(t.x.negate(),t.yz)}generateUV(e,t){return t.build(e,"vec3")}}const bl=xi(yl);class xl extends en{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const Tl=(e,t,r)=>fi(new xl(e,t,r));class _l extends Bs{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType();return e.format(t,"vec4",r)}}class vl extends xl{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null,"vec4"),this.array=e,this.elementType=t,this._elementType=null,this._elementLength=0,this.updateType=vs.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:e,value:t}=this,r=this.getElementLength(),s=this.getElementType();if(1===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===s)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length;this._elementType=null===this.elementType?fs(this.array[0]):this.elementType,this._elementLength=e.getTypeLength(this._elementType);let r=Float32Array;return"i"===this._elementType.charAt(0)?r=Int32Array:"u"===this._elementType.charAt(0)&&(r=Uint32Array),this.value=new r(4*t),this.bufferCount=t,this.bufferType=e.changeComponentType("vec4",e.getComponentType(this._elementType)),super.setup(e)}element(e){return fi(new _l(this,fi(e)))}}const Nl=(e,t)=>fi(new vl(e,t));class Sl extends Bs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class Al extends Ms{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=vs.OBJECT}element(e){return fi(new Sl(this,fi(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?Tl(null,e,this.count):Array.isArray(this.getValueFromReference())?Nl(null,e):"texture"===e?xu(null):"cubeTexture"===e?bl(null):tn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const Rl=(e,t,r)=>fi(new Al(e,t,r)),Cl=(e,t,r,s)=>fi(new Al(e,t,s,r));class El extends Al{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const wl=(e,t,r)=>fi(new El(e,t,r)),Ml=_i((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),hu("tangent","vec4"))))(),Bl=Ml.xyz.toVar("tangentLocal"),Ul=$u.mul(Oi(Bl,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),Fl=Ul.transformDirection(Au).varying("v_tangentWorld").normalize().toVar("tangentWorld"),Il=Ul.toVar("transformedTangentView"),Pl=Il.transformDirection(Au).normalize().toVar("transformedTangentWorld"),Ll=e=>e.mul(Ml.w).xyz,Dl=wa(Ll(rl.cross(Ml)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),Vl=wa(Ll(sl.cross(Bl)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),Ol=wa(Ll(nl.cross(Ul)),"v_bitangentView").normalize().toVar("bitangentView"),Gl=wa(Ll(ol.cross(Fl)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),kl=Ll(al.cross(Il)).normalize().toVar("transformedBitangentView"),zl=kl.transformDirection(Au).normalize().toVar("transformedBitangentWorld"),$l=Wi(Ul,Ol,nl),Wl=Zu.mul($l),Hl=(()=>{let e=Tn.cross(Zu);return e=e.cross(Tn).normalize(),e=da(e,al,bn.mul(un.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),jl=_i((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),o=t.dFdy(),a=i.dFdx(),u=i.dFdy(),l=r,d=o.cross(l),c=l.cross(n),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=tl.mul(g.inverseSqrt());return On(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class ql extends Fs{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=N}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=Pi(s.xy.mul(r),s.z));let i=null;if(t===S)i=cl(s);else if(t===N){i=!0===e.hasGeometryAttribute("tangent")?$l.mul(s).normalize():jl({eye_pos:Qu,surf_norm:nl,mapN:s,uv:pu()})}return i}}const Kl=xi(ql),Xl=_i((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||pu()),forceUVContext:!0}),s=Ci(r((e=>e)));return Bi(Ci(r((e=>e.add(e.dFdx())))).sub(s),Ci(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),Yl=_i((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,o=t.dFdy().normalize().cross(n),a=n.cross(i),u=i.dot(o).mul(tl),l=u.sign().mul(s.x.mul(o).add(s.y.mul(a)));return u.abs().mul(r).sub(l).normalize()}));class Ql extends Fs{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=Xl({textureNode:this.textureNode,bumpScale:e});return Yl({surf_pos:Qu,surf_norm:nl,dHdxy:t})}}const Zl=xi(Ql),Jl=new Map;class ed extends Ms{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=Jl.get(e);return void 0===r&&(r=wl(e,t),Jl.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===ed.COLOR){const e=void 0!==t.color?this.getColor(r):Pi();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===ed.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===ed.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Ci(1);else if(r===ed.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularMap?e.mul(this.getTexture(r).a):e}else if(r===ed.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===ed.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===ed.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===ed.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===ed.NORMAL)t.normalMap?(s=Kl(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?Zl(this.getTexture("bump").r,this.getFloat("bumpScale")):nl;else if(r===ed.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===ed.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===ed.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?Kl(this.getTexture(r),this.getCache(r+"Scale","vec2")):nl;else if(r===ed.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===ed.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===ed.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=$i(Vd.x,Vd.y,Vd.y.negate(),Vd.x).mul(e.rg.mul(2).sub(Bi(1)).normalize().mul(e.b))}else s=Vd;else if(r===ed.IRIDESCENCE_THICKNESS){const e=Rl("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=Rl("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===ed.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===ed.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===ed.IOR)s=this.getFloat(r);else if(r===ed.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===ed.AO_MAP)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}ed.ALPHA_TEST="alphaTest",ed.COLOR="color",ed.OPACITY="opacity",ed.SHININESS="shininess",ed.SPECULAR="specular",ed.SPECULAR_STRENGTH="specularStrength",ed.SPECULAR_INTENSITY="specularIntensity",ed.SPECULAR_COLOR="specularColor",ed.REFLECTIVITY="reflectivity",ed.ROUGHNESS="roughness",ed.METALNESS="metalness",ed.NORMAL="normal",ed.CLEARCOAT="clearcoat",ed.CLEARCOAT_ROUGHNESS="clearcoatRoughness",ed.CLEARCOAT_NORMAL="clearcoatNormal",ed.EMISSIVE="emissive",ed.ROTATION="rotation",ed.SHEEN="sheen",ed.SHEEN_ROUGHNESS="sheenRoughness",ed.ANISOTROPY="anisotropy",ed.IRIDESCENCE="iridescence",ed.IRIDESCENCE_IOR="iridescenceIOR",ed.IRIDESCENCE_THICKNESS="iridescenceThickness",ed.IOR="ior",ed.TRANSMISSION="transmission",ed.THICKNESS="thickness",ed.ATTENUATION_DISTANCE="attenuationDistance",ed.ATTENUATION_COLOR="attenuationColor",ed.LINE_SCALE="scale",ed.LINE_DASH_SIZE="dashSize",ed.LINE_GAP_SIZE="gapSize",ed.LINE_WIDTH="linewidth",ed.LINE_DASH_OFFSET="dashOffset",ed.POINT_WIDTH="pointWidth",ed.DISPERSION="dispersion",ed.LIGHT_MAP="light",ed.AO_MAP="ao";const td=Ti(ed,ed.ALPHA_TEST),rd=Ti(ed,ed.COLOR),sd=Ti(ed,ed.SHININESS),id=Ti(ed,ed.EMISSIVE),nd=Ti(ed,ed.OPACITY),od=Ti(ed,ed.SPECULAR),ad=Ti(ed,ed.SPECULAR_INTENSITY),ud=Ti(ed,ed.SPECULAR_COLOR),ld=Ti(ed,ed.SPECULAR_STRENGTH),dd=Ti(ed,ed.REFLECTIVITY),cd=Ti(ed,ed.ROUGHNESS),hd=Ti(ed,ed.METALNESS),pd=Ti(ed,ed.NORMAL).context({getUV:null}),gd=Ti(ed,ed.CLEARCOAT),md=Ti(ed,ed.CLEARCOAT_ROUGHNESS),fd=Ti(ed,ed.CLEARCOAT_NORMAL).context({getUV:null}),yd=Ti(ed,ed.ROTATION),bd=Ti(ed,ed.SHEEN),xd=Ti(ed,ed.SHEEN_ROUGHNESS),Td=Ti(ed,ed.ANISOTROPY),_d=Ti(ed,ed.IRIDESCENCE),vd=Ti(ed,ed.IRIDESCENCE_IOR),Nd=Ti(ed,ed.IRIDESCENCE_THICKNESS),Sd=Ti(ed,ed.TRANSMISSION),Ad=Ti(ed,ed.THICKNESS),Rd=Ti(ed,ed.IOR),Cd=Ti(ed,ed.ATTENUATION_DISTANCE),Ed=Ti(ed,ed.ATTENUATION_COLOR),wd=Ti(ed,ed.LINE_SCALE),Md=Ti(ed,ed.LINE_DASH_SIZE),Bd=Ti(ed,ed.LINE_GAP_SIZE),Ud=Ti(ed,ed.LINE_WIDTH),Fd=Ti(ed,ed.LINE_DASH_OFFSET),Id=Ti(ed,ed.POINT_WIDTH),Pd=Ti(ed,ed.DISPERSION),Ld=Ti(ed,ed.LIGHT_MAP),Dd=Ti(ed,ed.AO_MAP),Vd=tn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))}));class Od extends Fs{static get type(){return"ModelViewProjectionNode"}constructor(e=null){super("vec4"),this.positionNode=e}setup(e){if("fragment"===e.shaderStage)return wa(e.context.mvp);const t=this.positionNode||qu,r=e.renderer.nodes.modelViewMatrix||$u;return Nu.mul(r).mul(t)}}const Gd=xi(Od);class kd extends Ms{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isInstanceIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===kd.VERTEX)s=e.getVertexIndex();else if(r===kd.INSTANCE)s=e.getInstanceIndex();else if(r===kd.DRAW)s=e.getDrawIndex();else if(r===kd.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===kd.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==kd.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=wa(this).build(e,t)}return i}}kd.VERTEX="vertex",kd.INSTANCE="instance",kd.SUBGROUP="subgroup",kd.INVOCATION_LOCAL="invocationLocal",kd.INVOCATION_SUBGROUP="invocationSubgroup",kd.DRAW="draw";const zd=Ti(kd,kd.VERTEX),$d=Ti(kd,kd.INSTANCE),Wd=Ti(kd,kd.SUBGROUP),Hd=Ti(kd,kd.INVOCATION_SUBGROUP),jd=Ti(kd,kd.INVOCATION_LOCAL),qd=Ti(kd,kd.DRAW);class Kd extends Ms{static get type(){return"InstanceNode"}constructor(e,t,r){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=vs.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=Tl(r.array,"mat4",Math.max(t,1)).element($d);else{const e=new A(r.array,16,1);this.buffer=e;const t=r.usage===p?Ya:Xa,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=Hi(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new R(s.array,3),t=s.usage===p?Ya:Xa;this.bufferColor=e,n=Pi(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=i.mul(qu).xyz;if(qu.assign(o),e.hasGeometryAttribute("normal")){const e=dl(sl,i);sl.assign(e)}null!==this.instanceColorNode&&nn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==p&&null!=this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==p&&null!=this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const Xd=xi(Kd);class Yd extends Kd{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instanceMesh=e}}const Qd=xi(Yd);class Zd extends Ms{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=$d:this.batchingIdNode=qd);const t=_i((([e])=>{const t=mu(Tu(this.batchMesh._indirectTexture),0),r=Ei(e).modInt(Ei(t)),s=Ei(e).div(Ei(t));return Tu(this.batchMesh._indirectTexture,Ui(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Ei(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=mu(Tu(s),0),n=Ci(r).mul(4).toInt().toVar(),o=n.modInt(i),a=n.div(Ei(i)),u=Hi(Tu(s,Ui(o,a)),Tu(s,Ui(o.add(1),a)),Tu(s,Ui(o.add(2),a)),Tu(s,Ui(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=_i((([e])=>{const t=mu(Tu(l),0).x,r=e,s=r.modInt(t),i=r.div(t);return Tu(l,Ui(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);nn("vec3","vBatchColor").assign(t)}const d=Wi(u);qu.assign(u.mul(qu));const c=sl.div(Pi(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;sl.assign(h),e.hasGeometryAttribute("tangent")&&Bl.mulAssign(d)}}const Jd=xi(Zd),ec=new WeakMap;class tc extends Ms{static get type(){return"SkinningNode"}constructor(e,t=!1){let r,s,i;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=vs.OBJECT,this.skinIndexNode=hu("skinIndex","uvec4"),this.skinWeightNode=hu("skinWeight","vec4"),t?(r=Rl("bindMatrix","mat4"),s=Rl("bindMatrixInverse","mat4"),i=Cl("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(r=tn(e.bindMatrix,"mat4"),s=tn(e.bindMatrixInverse,"mat4"),i=Tl(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=r,this.bindMatrixInverseNode=s,this.boneMatricesNode=i,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=qu){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=On(o.mul(s.x).mul(d),a.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=sl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=On(s.x.mul(o),s.y.mul(a),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=Cl("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Ku)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")}setup(e){this.needsPreviousBoneMatrices(e)&&Ku.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(qu.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();sl.assign(t),e.hasGeometryAttribute("tangent")&&Bl.assign(t)}}generate(e,t){if("void"!==t)return qu.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;ec.get(t)!==e.frameId&&(ec.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const rc=e=>fi(new tc(e,!0));class sc extends Ms{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt()+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=au(s,i)}const s=e.addStack();return t.returnsNode=this.params[this.params.length-1](r,s,e),t.stackNode=s,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let t=0,s=r.length-1;t<s;t++){const s=r[t];let i=null,n=null,o=null,a=null,u=null,l=null;s.isNode?(a="int",o=this.getVarName(t),i="0",n=s.build(e,a),u="<"):(a=s.type||"int",o=s.name||this.getVarName(t),i=s.start,n=s.end,u=s.condition,l=s.update,"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),void 0!==i&&void 0===n?(i+=" - 1",n="0",u=">="):void 0!==n&&void 0===i&&(i="0",u="<"),void 0===u&&(u=Number(i)>Number(n)?">=":"<"));const d={start:i,end:n,condition:u},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const ic=(...e)=>fi(new sc(bi(e,"int"))).append(),nc=()=>au("break").append(),oc=new WeakMap,ac=new s,uc=_i((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const o=Ei(zd).mul(r).add(n),a=o.div(s),u=o.sub(a.mul(s));return Tu(e,Ui(u,a)).depth(i).mul(t)}));class lc extends Ms{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=tn(1),this.updateType=vs.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,o=void 0!==n?n.length:0,{texture:a,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let a=oc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new C(m,h,p,o);f.type=E,f.needsUpdate=!0;const y=4*c;for(let x=0;x<o;x++){const T=u[x],_=l[x],v=d[x],N=h*p*4*x;for(let S=0;S<T.count;S++){const A=S*y;!0===r&&(ac.fromBufferAttribute(T,S),m[N+A+0]=ac.x,m[N+A+1]=ac.y,m[N+A+2]=ac.z,m[N+A+3]=0),!0===s&&(ac.fromBufferAttribute(_,S),m[N+A+4]=ac.x,m[N+A+5]=ac.y,m[N+A+6]=ac.z,m[N+A+7]=0),!0===i&&(ac.fromBufferAttribute(v,S),m[N+A+8]=ac.x,m[N+A+9]=ac.y,m[N+A+10]=ac.z,m[N+A+11]=4===v.itemSize?ac.w:1)}}function b(){f.dispose(),oc.delete(e),e.removeEventListener("dispose",b)}a={count:o,texture:f,stride:c,size:new t(h,p)},oc.set(e,a),e.addEventListener("dispose",b)}return a}(r);!0===s&&qu.mulAssign(this.morphBaseInfluence),!0===i&&sl.mulAssign(this.morphBaseInfluence);const d=Ei(l.width);ic(o,(({i:e})=>{const t=Ci(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Tu(this.mesh.morphTexture,Ui(Ei(e).add(1),Ei($d))).r):t.assign(Rl("morphTargetInfluences","float").element(e).toVar()),!0===s&&qu.addAssign(uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Ei(0)})),!0===i&&sl.addAssign(uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Ei(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const dc=xi(lc);class cc extends Ms{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}generate(){console.warn("Abstract function.")}}class hc extends cc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class pc extends va{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:Pi().toVar("directDiffuse"),directSpecular:Pi().toVar("directSpecular"),indirectDiffuse:Pi().toVar("indirectDiffuse"),indirectSpecular:Pi().toVar("indirectSpecular")};return{radiance:Pi().toVar("radiance"),irradiance:Pi().toVar("irradiance"),iblIrradiance:Pi().toVar("iblIrradiance"),ambientOcclusion:Ci(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const gc=xi(pc);class mc extends cc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let fc,yc;class bc extends Ms{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===bc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=vs.NONE;return this.scope!==bc.SIZE&&this.scope!==bc.VIEWPORT||(e=vs.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===bc.VIEWPORT?null!==t?yc.copy(t.viewport):(e.getViewport(yc),yc.multiplyScalar(e.getPixelRatio())):null!==t?(fc.width=t.width,fc.height=t.height):e.getDrawingBufferSize(fc)}setup(){const e=this.scope;let r=null;return r=e===bc.SIZE?tn(fc||(fc=new t)):e===bc.VIEWPORT?tn(yc||(yc=new s)):Bi(_c.div(Tc)),r}generate(e){if(this.scope===bc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(Tc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}bc.COORDINATE="coordinate",bc.VIEWPORT="viewport",bc.SIZE="size",bc.UV="uv";const xc=Ti(bc,bc.UV),Tc=Ti(bc,bc.SIZE),_c=Ti(bc,bc.COORDINATE),vc=Ti(bc,bc.VIEWPORT),Nc=vc.zw,Sc=_c.sub(vc.xy),Ac=Sc.div(Nc),Rc=_i((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),Tc)),"vec2").once()(),Cc=_i((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),xc)),"vec2").once()(),Ec=_i((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),xc.flipY())),"vec2").once()(),wc=new t;class Mc extends bu{static get type(){return"ViewportTextureNode"}constructor(e=xc,t=null,r=null){null===r&&((r=new w).minFilter=M),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=vs.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(wc);const r=this.value;r.image.width===wc.width&&r.image.height===wc.height||(r.image.width=wc.width,r.image.height=wc.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const Bc=xi(Mc),Uc=xi(Mc,null,null,{generateMipmaps:!0});let Fc=null;class Ic extends Mc{static get type(){return"ViewportDepthTextureNode"}constructor(e=xc,t=null){null===Fc&&(Fc=new B),super(e,t,Fc)}}const Pc=xi(Ic);class Lc extends Ms{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===Lc.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===Lc.DEPTH_BASE)null!==r&&(s=kc().assign(r));else if(t===Lc.DEPTH)s=e.isPerspectiveCamera?Vc(Qu.z,_u,vu):Dc(Qu.z,_u,vu);else if(t===Lc.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=Oc(r,_u,vu);s=Dc(e,_u,vu)}else s=r;else s=Dc(Qu.z,_u,vu);return s}}Lc.DEPTH_BASE="depthBase",Lc.DEPTH="depth",Lc.LINEAR_DEPTH="linearDepth";const Dc=(e,t,r)=>e.add(t).div(t.sub(r)),Vc=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),Oc=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),Gc=(e,t,r)=>{t=t.max(1e-6).toVar();const s=_o(e.negate().div(t)),i=_o(r.div(t));return s.div(i)},kc=xi(Lc,Lc.DEPTH_BASE),zc=Ti(Lc,Lc.DEPTH),$c=xi(Lc,Lc.LINEAR_DEPTH),Wc=$c(Pc());zc.assign=e=>kc(e);const Hc=xi(class extends Ms{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class jc extends Ms{static get type(){return"ClippingNode"}constructor(e=jc.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===jc.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===jc.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return _i((()=>{const r=Ci().toVar("distanceToPlane"),s=Ci().toVar("distanceToGradient"),i=Ci(1).toVar("clipOpacity"),n=t.length;if(!this.hardwareClipping&&n>0){const e=Nl(t);ic(n,(({i:t})=>{const n=e.element(t);r.assign(Qu.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(ga(s.negate(),s,r))}))}const o=e.length;if(o>0){const t=Nl(e),n=Ci(1).toVar("intersectionClipOpacity");ic(o,(({i:e})=>{const i=t.element(e);r.assign(Qu.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(ga(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}on.a.mulAssign(i),on.a.equal(0).discard()}))()}setupDefault(e,t){return _i((()=>{const r=t.length;if(!this.hardwareClipping&&r>0){const e=Nl(t);ic(r,(({i:t})=>{const r=e.element(t);Qu.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=Nl(e),r=Mi(!0).toVar("clipped");ic(s,(({i:e})=>{const s=t.element(e);r.assign(Qu.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),_i((()=>{const s=Nl(e),i=Hc(t.getClipDistance());ic(r,(({i:e})=>{const t=s.element(e),r=Qu.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}jc.ALPHA_TO_COVERAGE="alphaToCoverage",jc.DEFAULT="default",jc.HARDWARE="hardware";const qc=_i((([e])=>Co(kn(1e4,Eo(kn(17,e.x).add(kn(.1,e.y)))).mul(On(.1,Io(Eo(kn(13,e.y).add(e.x)))))))),Kc=_i((([e])=>qc(Bi(qc(e.xy),e.z)))),Xc=_i((([e])=>{const t=Xo(Lo(Oo(e.xyz)),Lo(Go(e.xyz))).toVar("maxDeriv"),r=Ci(1).div(Ci(.05).mul(t)).toVar("pixScale"),s=Bi(xo(So(_o(r))),xo(Ao(_o(r)))).toVar("pixScales"),i=Bi(Kc(So(s.x.mul(e.xyz))),Kc(So(s.y.mul(e.xyz)))).toVar("alpha"),n=Co(_o(r)).toVar("lerpFactor"),o=On(kn(n.oneMinus(),i.x),kn(n,i.y)).toVar("x"),a=Ko(n,n.oneMinus()).toVar("a"),u=Pi(o.mul(o).div(kn(2,a).mul(Gn(1,a))),o.sub(kn(.5,a)).div(Gn(1,a)),Gn(1,Gn(1,o).mul(Gn(1,o)).div(kn(2,a).mul(Gn(1,a))))).toVar("cases"),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return ca(l,1e-6,1)}));class Yc extends U{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+cs(this)}build(e){this.setup(e)}setupObserver(e){return new os(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e);const t=e.renderer,r=t.getRenderTarget();let s;e.addStack(),e.stack.outputNode=this.vertexNode||this.setupPosition(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const i=this.setupClipping(e);if(!0===this.depthWrite&&(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const n=this.setupLighting(e);null!==i&&e.stack.add(i);const o=Oi(n,on.a).max(0);if(s=this.setupOutput(e,o),Sn.assign(s),null!==this.outputNode&&(s=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(s=e,null!==r&&(s=e.merge(r))):null!==r&&(s=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=Oi(t)),s=this.setupOutput(e,t)}e.stack.outputNode=s,e.addFlow("fragment",e.removeStack()),e.monitor=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=fi(new jc(jc.ALPHA_TO_COVERAGE)):e.stack.add(fi(new jc))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(fi(new jc(jc.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?Gc(Qu.z,_u,vu):Dc(Qu.z,_u,vu))}null!==s&&zc.assign(s).append()}setupPosition(e){const{object:t}=e,r=t.geometry;if(e.addStack(),(r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&dc(t).append(),!0===t.isSkinnedMesh&&rc(t).append(),this.displacementMap){const e=wl("displacementMap","texture"),t=wl("displacementScale","float"),r=wl("displacementBias","float");qu.addAssign(sl.normalize().mul(e.x.mul(t).add(r)))}t.isBatchedMesh&&Jd(t).append(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&Qd(t).append(),null!==this.positionNode&&qu.assign(this.positionNode),this.setupHardwareClipping(e);const s=Gd();return e.context.vertex=e.removeStack(),e.context.mvp=s,s}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?Oi(this.colorNode):rd;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=Oi(r.xyz.mul(hu("color","vec3")),r.a)),e.instanceColor){r=nn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=nn("vec3","vBatchColor").mul(r)}on.assign(r);const s=this.opacityNode?Ci(this.opacityNode):nd;if(on.a.assign(on.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Ci(this.alphaTestNode):td;on.a.lessThanEqual(e).discard()}!0===this.alphaHash&&on.a.lessThan(Xc(qu)).discard(),!1===this.transparent&&this.blending===F&&!1===this.alphaToCoverage&&on.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?Pi(0):on.rgb}setupNormal(){return this.normalNode?Pi(this.normalNode):pd}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?wl("envMap","cubeTexture"):wl("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new mc(Ld)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:Dd;t.push(new hc(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e);o=gc(n,t,r,s)}else null!==r&&(o=Pi(null!==s?da(o,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(an.assign(Pi(i||id)),o=o.add(an)),o}setupOutput(e,t){if(!0===this.fog){const r=e.fogNode;r&&(t=Oi(r.mix(t.rgb,r.colorNode),t.a))}return t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=U.prototype.toJSON.call(this,e),s=hs(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const Qc=new I;class Zc extends Yc{static get type(){return"InstancedPointsNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.pointWidth=1,this.pointColorNode=null,this.pointWidthNode=null,this.setDefaultValues(Qc),this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,r=this.useColor;this.vertexNode=_i((()=>{const e=hu("instancePosition").xyz,t=Oi($u.mul(Oi(e,1))),r=vc.z.div(vc.w),s=Nu.mul(t),i=ju.xy.toVar();return i.mulAssign(this.pointWidthNode?this.pointWidthNode:Id),i.assign(i.div(vc.z)),i.y.assign(i.y.mul(r)),i.assign(i.mul(s.w)),s.addAssign(Oi(i,0,0)),s}))(),this.fragmentNode=_i((()=>{const s=Ci(1).toVar(),i=la(pu().mul(2).sub(1));if(t&&e.samples>1){const e=Ci(i.fwidth()).toVar();s.assign(ga(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();let n;if(this.pointColorNode)n=this.pointColorNode;else if(r){n=hu("instanceColor").mul(rd)}else n=rd;return s.mulAssign(nd),Oi(n,s)}))()}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const Jc=new P;class eh extends Yc{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.lights=!1,this.setDefaultValues(Jc),this.setValues(e)}}const th=new L;class rh extends Yc{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.lights=!1,this.setDefaultValues(th),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Ci(this.offsetNodeNode):Fd,t=this.dashScaleNode?Ci(this.dashScaleNode):wd,r=this.dashSizeNode?Ci(this.dashSizeNode):Md,s=this.dashSizeNode?Ci(this.dashGapNode):Bd;An.assign(r),Rn.assign(s);const i=wa(hu("lineDistance").mul(t));(e?i.add(e):i).mod(An.add(Rn)).greaterThan(An).discard()}}const sh=new L;class ih extends Yc{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.lights=!1,this.setDefaultValues(sh),this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.useDash=e.dashed,this.useWorldUnits=!1,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,r=this.useColor,s=this.dashed,i=this.worldUnits,n=_i((({start:e,end:t})=>{const r=Nu.element(2).element(2),s=Nu.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return Oi(da(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=_i((()=>{const e=hu("instanceStart"),t=hu("instanceEnd"),r=Oi($u.mul(Oi(e,1))).toVar("start"),o=Oi($u.mul(Oi(t,1))).toVar("end");if(s){const e=this.dashScaleNode?Ci(this.dashScaleNode):wd,t=this.offsetNode?Ci(this.offsetNodeNode):Fd,r=hu("instanceDistanceStart"),s=hu("instanceDistanceEnd");let i=ju.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),nn("float","lineDistance").assign(i)}i&&(nn("vec3","worldStart").assign(r.xyz),nn("vec3","worldEnd").assign(o.xyz));const a=vc.z.div(vc.w),u=Nu.element(2).element(3).equal(-1);Si(u,(()=>{Si(r.z.lessThan(0).and(o.z.greaterThan(0)),(()=>{o.assign(n({start:r,end:o}))})).ElseIf(o.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(n({start:o,end:r}))}))}));const l=Nu.mul(r),d=Nu.mul(o),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=Oi().toVar();if(i){const e=o.xyz.sub(r.xyz).normalize(),t=da(r.xyz,o.xyz,.5).normalize(),i=e.cross(t).normalize(),n=e.cross(i),a=nn("vec4","worldPos");a.assign(ju.y.lessThan(.5).select(r,o));const u=Ud.mul(.5);a.addAssign(Oi(ju.x.lessThan(0).select(i.mul(u),i.mul(u).negate()),0)),s||(a.addAssign(Oi(ju.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(Oi(n.mul(u),0)),Si(ju.y.greaterThan(1).or(ju.y.lessThan(0)),(()=>{a.subAssign(Oi(n.mul(2).mul(u),0))}))),g.assign(Nu.mul(a));const l=Pi().toVar();l.assign(ju.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=Bi(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(ju.x.lessThan(0).select(e.negate(),e)),Si(ju.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(ju.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(Ud)),e.assign(e.div(vc.w)),g.assign(ju.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(Oi(e,0,0)))}return g}))();const o=_i((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),o=t.sub(e),a=i.dot(n),u=n.dot(o),l=i.dot(o),d=n.dot(n),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return Bi(h,p)}));this.fragmentNode=_i((()=>{const n=pu();if(s){const e=this.dashSizeNode?Ci(this.dashSizeNode):Md,t=this.dashSizeNode?Ci(this.dashGapNode):Bd;An.assign(e),Rn.assign(t);const r=nn("float","lineDistance");n.y.lessThan(-1).or(n.y.greaterThan(1)).discard(),r.mod(An.add(Rn)).greaterThan(An).discard()}const a=Ci(1).toVar("alpha");if(i){const r=nn("vec3","worldStart"),i=nn("vec3","worldEnd"),n=nn("vec4","worldPos").xyz.normalize().mul(1e5),u=i.sub(r),l=o({p1:r,p2:i,p3:Pi(0,0,0),p4:n}),d=r.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(Ud);if(!s)if(t&&e.samples>1){const e=h.fwidth();a.assign(ga(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(t&&e.samples>1){const e=n.x,t=n.y.greaterThan(0).select(n.y.sub(1),n.y.add(1)),r=e.mul(e).add(t.mul(t)),s=Ci(r.fwidth()).toVar("dlen");Si(n.y.abs().greaterThan(1),(()=>{a.assign(ga(s.oneMinus(),s.add(1),r).oneMinus())}))}else Si(n.y.abs().greaterThan(1),(()=>{const e=n.x,t=n.y.greaterThan(0).select(n.y.sub(1),n.y.add(1));e.mul(e).add(t.mul(t)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(r){const e=hu("instanceColorStart"),t=hu("instanceColorEnd");u=ju.y.lessThan(.5).select(e,t).mul(rd)}else u=rd;return Oi(u,a)}))()}get worldUnits(){return this.useWorldUnits}set worldUnits(e){this.useWorldUnits!==e&&(this.useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this.useDash}set dashed(e){this.useDash!==e&&(this.useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const nh=e=>fi(e).mul(.5).add(.5),oh=new D;class ah extends Yc{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(oh),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Ci(this.opacityNode):nd;on.assign(Oi(nh(al),e))}}class uh extends Fs{static get type(){return"EquirectUVNode"}constructor(e=Yu){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan2(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return Bi(t,r)}}const lh=xi(uh);class dh extends V{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new O(5,5,5),n=lh(Yu),o=new Yc;o.colorNode=xu(t,n,0),o.side=x,o.blending=G;const a=new k(i,o),u=new z;u.add(a),t.minFilter===M&&(t.minFilter=$);const l=new W(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,a.geometry.dispose(),a.material.dispose(),this}}const ch=new WeakMap;class hh extends Fs{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=bl();const t=new H;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=vs.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===j||r===q){if(ch.has(e)){const t=ch.get(e);gh(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new dh(r.height);s.fromEquirectangularTexture(t,e),gh(s.texture,e.mapping),this._cubeTexture=s.texture,ch.set(e,s.texture),e.addEventListener("dispose",ph)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function ph(e){const t=e.target;t.removeEventListener("dispose",ph);const r=ch.get(t);void 0!==r&&(ch.delete(t),r.dispose())}function gh(e,t){t===j?e.mapping=T:t===q&&(e.mapping=_)}const mh=xi(hh);class fh extends cc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=mh(this.envNode)}}class yh extends cc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Ci(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class bh{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class xh extends bh{constructor(){super()}indirect(e,t,r){const s=e.ambientOcclusion,i=e.reflectedLight,n=r.context.irradianceLightMap;i.indirectDiffuse.assign(Oi(0)),n?i.indirectDiffuse.addAssign(n):i.indirectDiffuse.addAssign(Oi(1,1,1,0)),i.indirectDiffuse.mulAssign(s),i.indirectDiffuse.mulAssign(on.rgb)}finish(e,t,r){const s=r.material,i=e.outgoingLight,n=r.context.environment;if(n)switch(s.combine){case Y:i.rgb.assign(da(i.rgb,i.rgb.mul(n.rgb),ld.mul(dd)));break;case X:i.rgb.assign(da(i.rgb,n.rgb,ld.mul(dd)));break;case K:i.rgb.addAssign(n.rgb.mul(ld.mul(dd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",s.combine)}}}const Th=new Q;class _h extends Yc{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Th),this.setValues(e)}setupNormal(){return nl}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new fh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new yh(Ld)),t}setupOutgoingLight(){return on.rgb}setupLightingModel(){return new xh}}const vh=_i((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),Nh=_i((e=>e.diffuseColor.mul(1/Math.PI))),Sh=_i((({dotNH:e})=>Nn.mul(Ci(.5)).add(1).mul(Ci(1/Math.PI)).mul(e.pow(Nn)))),Ah=_i((({lightDirection:e})=>{const t=e.add(Zu).normalize(),r=al.dot(t).clamp(),s=Zu.dot(t).clamp(),i=vh({f0:_n,f90:1,dotVH:s}),n=Ci(.25),o=Sh({dotNH:r});return i.mul(n).mul(o)}));class Rh extends xh{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=al.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul(Nh({diffuseColor:on.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(Ah({lightDirection:e})).mul(ld))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul(Nh({diffuseColor:on}))),r.indirectDiffuse.mulAssign(e)}}const Ch=new Z;class Eh extends Yc{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Ch),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new fh(t):null}setupLightingModel(){return new Rh(!1)}}const wh=new J;class Mh extends Yc{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(wh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new fh(t):null}setupLightingModel(){return new Rh}setupVariants(){const e=(this.shininessNode?Ci(this.shininessNode):sd).max(1e-4);Nn.assign(e);const t=this.specularNode||od;_n.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const Bh=_i((e=>{if(!1===e.geometry.hasAttribute("normal"))return Ci(0);const t=nl.dFdx().abs().max(nl.dFdy().abs());return t.x.max(t.y).max(t.z)})),Uh=_i((e=>{const{roughness:t}=e,r=Bh();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),Fh=_i((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return zn(.5,i.add(n).max(uo))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),Ih=_i((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:o,dotNL:a})=>{const u=a.mul(Pi(e.mul(r),t.mul(s),o).length()),l=o.mul(Pi(e.mul(i),t.mul(n),a).length());return zn(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),Ph=_i((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),Lh=Ci(1/Math.PI),Dh=_i((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),o=Pi(t.mul(s),e.mul(i),n.mul(r)),a=o.dot(o),u=n.div(a);return Lh.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),Vh=_i((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||al,l=i.pow2(),d=t.add(Zu).normalize(),c=u.dot(t).clamp(),h=u.dot(Zu).clamp(),p=u.dot(d).clamp(),g=Zu.dot(d).clamp();let m,f,y=vh({f0:r,f90:s,dotVH:g});if(pi(o)&&(y=gn.mix(y,n)),pi(a)){const e=xn.dot(t),r=xn.dot(Zu),s=xn.dot(d),i=Tn.dot(t),n=Tn.dot(Zu),o=Tn.dot(d);m=Ih({alphaT:yn,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=Dh({alphaT:yn,alphaB:l,dotNH:p,dotTH:s,dotBH:o})}else m=Fh({alpha:l,dotNL:c,dotNV:h}),f=Ph({alpha:l,dotNH:p});return y.mul(m).mul(f)})),Oh=_i((({roughness:e,dotNV:t})=>{const r=Oi(-1,-.0275,-.572,.022),s=Oi(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return Bi(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),Gh=_i((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=Oh({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),kh=_i((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(Pi(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),zh=_i((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=Ci(1).div(r),i=t.pow2().oneMinus().max(.0078125);return Ci(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),$h=_i((({dotNV:e,dotNL:t})=>Ci(1).div(Ci(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),Wh=_i((({lightDirection:e})=>{const t=e.add(Zu).normalize(),r=al.dot(e).clamp(),s=al.dot(Zu).clamp(),i=al.dot(t).clamp(),n=zh({roughness:pn,dotNH:i}),o=$h({dotNV:s,dotNL:r});return hn.mul(n).mul(o)})),Hh=_i((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=Bi(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),jh=_i((({f:e})=>{const t=e.length();return Xo(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),qh=_i((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),o=i.div(n),a=r.greaterThan(0).select(o,Xo(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),Kh=_i((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:o,p3:a})=>{const u=n.sub(i).toVar(),l=a.sub(i).toVar(),d=u.cross(l),c=Pi().toVar();return Si(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(Wi(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(a.sub(r)).normalize().toVar(),f=Pi(0).toVar();f.addAssign(qh({v1:h,v2:p})),f.addAssign(qh({v1:p,v2:g})),f.addAssign(qh({v1:g,v2:m})),f.addAssign(qh({v1:m,v2:h})),c.assign(Pi(jh({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Xh=1/6,Yh=e=>kn(Xh,kn(e,kn(e,e.negate().add(3)).sub(3)).add(1)),Qh=e=>kn(Xh,kn(e,kn(e,kn(3,e).sub(6))).add(4)),Zh=e=>kn(Xh,kn(e,kn(e,kn(-3,e).add(3)).add(3)).add(1)),Jh=e=>kn(Xh,sa(e,3)),ep=e=>Yh(e).add(Qh(e)),tp=e=>Zh(e).add(Jh(e)),rp=e=>On(-1,Qh(e).div(Yh(e).add(Qh(e)))),sp=e=>On(1,Jh(e).div(Zh(e).add(Jh(e)))),ip=(e,t,r)=>{const s=e.uvNode,i=kn(s,t.zw).add(.5),n=So(i),o=Co(i),a=ep(o.x),u=tp(o.x),l=rp(o.x),d=sp(o.x),c=rp(o.y),h=sp(o.y),p=Bi(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=Bi(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=Bi(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=Bi(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=ep(o.y).mul(On(a.mul(e.uv(p).level(r)),u.mul(e.uv(g).level(r)))),b=tp(o.y).mul(On(a.mul(e.uv(m).level(r)),u.mul(e.uv(f).level(r))));return y.add(b)},np=_i((([e,t=Ci(3)])=>{const r=Bi(e.size(Ei(t))),s=Bi(e.size(Ei(t.add(1)))),i=zn(1,r),n=zn(1,s),o=ip(e,Oi(i,r),So(t)),a=ip(e,Oi(n,s),Ao(t));return Co(t).mix(o,a)})),op=_i((([e,t,r,s,i])=>{const n=Pi(pa(t.negate(),Ro(e),zn(1,s))),o=Pi(Lo(i[0].xyz),Lo(i[1].xyz),Lo(i[2].xyz));return Ro(n).mul(r.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),ap=_i((([e,t])=>e.mul(ca(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),up=Uc(),lp=Uc(),dp=_i((([e,t,r],{material:s})=>{const i=(s.side==x?up:lp).uv(e),n=_o(Tc.x).mul(ap(t,r));return np(i,n)})),cp=_i((([e,t,r])=>(Si(r.notEqual(0),(()=>{const s=To(t).negate().div(r);return bo(s.negate().mul(e))})),Pi(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),hp=_i((([e,t,r,s,i,n,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=Oi().toVar(),f=Pi().toVar();const i=d.sub(1).mul(g.mul(.025)),n=Pi(d.sub(i),d,d.add(i));ic({start:0,end:3},(({i:i})=>{const d=n.element(i),g=op(e,t,c,d,a),y=o.add(g),b=l.mul(u.mul(Oi(y,1))),x=Bi(b.xy.div(b.w)).toVar();x.addAssign(1),x.divAssign(2),x.assign(Bi(x.x,x.y.oneMinus()));const T=dp(x,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(cp(Lo(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=op(e,t,c,d,a),n=o.add(i),g=l.mul(u.mul(Oi(n,1))),y=Bi(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(Bi(y.x,y.y.oneMinus())),m=dp(y,r,d),f=s.mul(cp(Lo(i),h,p))}const y=f.rgb.mul(m.rgb),b=e.dot(t).clamp(),x=Pi(Gh({dotNV:b,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return Oi(x.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),pp=Wi(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),gp=(e,t)=>e.sub(t).div(e.add(t)).pow2(),mp=_i((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=da(e,t,ga(0,.03,s)),o=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Si(o.lessThan(0),(()=>Pi(1)));const a=o.sqrt(),u=gp(n,e),l=vh({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=Ci(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return Pi(1).add(t).div(Pi(1).sub(t))})(i.clamp(0,.9999)),g=gp(p,n.toVec3()),m=vh({f0:g,f90:1,dotVH:a}),f=Pi(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,a,2),b=Pi(h).add(f),x=l.mul(m).clamp(1e-5,.9999),T=x.sqrt(),_=d.pow2().mul(m).div(Pi(1).sub(x)),v=l.add(_).toVar(),N=_.sub(d).toVar();return ic({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=Pi(54856e-17,44201e-17,52481e-17),i=Pi(1681e3,1795300,2208400),n=Pi(43278e5,93046e5,66121e5),o=Ci(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return a=Pi(a.x.add(o),a.y,a.z).div(1.0685e-7),pp.mul(a)})(Ci(e).mul(y),Ci(e).mul(b)).mul(2);v.addAssign(N.mul(t))})),v.max(Pi(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),fp=_i((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=Ta(r.lessThan(.25),Ci(-339.2).mul(i).add(Ci(161.4).mul(r)).sub(25.9),Ci(-8.48).mul(i).add(Ci(14.3).mul(r)).sub(9.95)),o=Ta(r.lessThan(.25),Ci(44).mul(i).sub(Ci(23.7).mul(r)).add(3.26),Ci(1.97).mul(i).sub(Ci(3.27).mul(r)).add(.72));return Ta(r.lessThan(.25),0,Ci(.1).mul(r).sub(.025)).add(n.mul(s).add(o).exp()).mul(1/Math.PI).saturate()})),yp=Pi(.04),bp=Ci(1);class xp extends bh{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=Pi().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Pi().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Pi().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=Pi().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Pi().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=al.dot(Zu).clamp();this.iridescenceFresnel=mp({outsideIOR:Ci(1),eta2:mn,cosTheta1:e,thinFilmThickness:fn,baseF0:_n}),this.iridescenceF0=kh({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Xu,r=Eu.sub(Xu).normalize(),s=ul;e.backdrop=hp(s,r,un,on,_n,vn,t,Du,Au,Nu,En,Mn,Un,Bn,this.dispersion?Fn:null),e.backdropAlpha=wn,on.a.mulAssign(da(1,e.backdrop.a,wn))}}computeMultiscattering(e,t,r){const s=al.dot(Zu).clamp(),i=Oh({roughness:un,dotNV:s}),n=(this.iridescenceF0?gn.mix(_n,this.iridescenceF0):_n).mul(i.x).add(r.mul(i.y)),o=i.x.add(i.y).oneMinus(),a=_n.add(_n.oneMinus().mul(.047619)),u=n.mul(a).div(o.mul(a).oneMinus());e.addAssign(n),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=al.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(Wh({lightDirection:e}))),!0===this.clearcoat){const r=ll.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(Vh({lightDirection:e,f0:yp,f90:bp,roughness:cn,normalView:ll})))}r.directDiffuse.addAssign(s.mul(Nh({diffuseColor:on.rgb}))),r.directSpecular.addAssign(s.mul(Vh({lightDirection:e,f0:_n,f90:1,roughness:un,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:o}){const a=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=al,h=Zu,p=Qu.toVar(),g=Hh({N:c,V:h,roughness:un}),m=n.uv(g).toVar(),f=o.uv(g).toVar(),y=Wi(Pi(m.x,0,m.y),Pi(0,1,0),Pi(m.z,0,m.w)).toVar(),b=_n.mul(f.x).add(_n.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(b).mul(Kh({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(on).mul(Kh({N:c,V:h,P:p,mInv:Wi(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e,t,r){this.indirectDiffuse(e,t,r),this.indirectSpecular(e,t,r),this.ambientOcclusion(e,t,r)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.addAssign(e.mul(Nh({diffuseColor:on})))}indirectSpecular({radiance:e,iblIrradiance:t,reflectedLight:r}){if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(t.mul(hn,fp({normal:al,viewDir:Zu,roughness:pn}))),!0===this.clearcoat){const e=ll.dot(Zu).clamp(),t=Gh({dotNV:e,specularColor:yp,specularF90:bp,roughness:cn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const s=Pi().toVar("singleScattering"),i=Pi().toVar("multiScattering"),n=t.mul(1/Math.PI);this.computeMultiscattering(s,i,vn);const o=s.add(i),a=on.mul(o.r.max(o.g).max(o.b).oneMinus());r.indirectSpecular.addAssign(e.mul(s)),r.indirectSpecular.addAssign(i.mul(n)),r.indirectDiffuse.addAssign(a.mul(n))}ambientOcclusion({ambientOcclusion:e,reflectedLight:t}){const r=al.dot(Zu).clamp().add(e),s=un.mul(-16).oneMinus().negate().exp2(),i=e.sub(r.pow(s).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(e),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(e),t.indirectDiffuse.mulAssign(e),t.indirectSpecular.mulAssign(i)}finish(e){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=ll.dot(Zu).clamp(),r=vh({dotVH:e,f0:yp,f90:bp}),s=t.mul(dn.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(dn));t.assign(s)}if(!0===this.sheen){const e=hn.r.max(hn.g).max(hn.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const Tp=Ci(1),_p=Ci(-2),vp=Ci(.8),Np=Ci(-1),Sp=Ci(.4),Ap=Ci(2),Rp=Ci(.305),Cp=Ci(3),Ep=Ci(.21),wp=Ci(4),Mp=Ci(4),Bp=Ci(16),Up=_i((([e])=>{const t=Pi(Io(e)).toVar(),r=Ci(-1).toVar();return Si(t.x.greaterThan(t.z),(()=>{Si(t.x.greaterThan(t.y),(()=>{r.assign(Ta(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(Ta(e.y.greaterThan(0),1,4))}))})).Else((()=>{Si(t.z.greaterThan(t.y),(()=>{r.assign(Ta(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(Ta(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),Fp=_i((([e,t])=>{const r=Bi().toVar();return Si(t.equal(0),(()=>{r.assign(Bi(e.z,e.y).div(Io(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(Bi(e.x.negate(),e.z.negate()).div(Io(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(Bi(e.x.negate(),e.y).div(Io(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(Bi(e.z.negate(),e.y).div(Io(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(Bi(e.x.negate(),e.z).div(Io(e.y)))})).Else((()=>{r.assign(Bi(e.x,e.y).div(Io(e.z)))})),kn(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),Ip=_i((([e])=>{const t=Ci(0).toVar();return Si(e.greaterThanEqual(vp),(()=>{t.assign(Tp.sub(e).mul(Np.sub(_p)).div(Tp.sub(vp)).add(_p))})).ElseIf(e.greaterThanEqual(Sp),(()=>{t.assign(vp.sub(e).mul(Ap.sub(Np)).div(vp.sub(Sp)).add(Np))})).ElseIf(e.greaterThanEqual(Rp),(()=>{t.assign(Sp.sub(e).mul(Cp.sub(Ap)).div(Sp.sub(Rp)).add(Ap))})).ElseIf(e.greaterThanEqual(Ep),(()=>{t.assign(Rp.sub(e).mul(wp.sub(Cp)).div(Rp.sub(Ep)).add(Cp))})).Else((()=>{t.assign(Ci(-2).mul(_o(kn(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),Pp=_i((([e,t])=>{const r=e.toVar();r.assign(kn(2,r).sub(1));const s=Pi(r,1).toVar();return Si(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),Lp=_i((([e,t,r,s,i,n])=>{const o=Ci(r),a=Pi(t),u=ca(Ip(o),_p,n),l=Co(u),d=So(u),c=Pi(Dp(e,a,d,s,i,n)).toVar();return Si(l.notEqual(0),(()=>{const t=Pi(Dp(e,a,d.add(1),s,i,n)).toVar();c.assign(da(c,t,l))})),c})),Dp=_i((([e,t,r,s,i,n])=>{const o=Ci(r).toVar(),a=Pi(t),u=Ci(Up(a)).toVar(),l=Ci(Xo(Mp.sub(o),0)).toVar();o.assign(Xo(o,Mp));const d=Ci(xo(o)).toVar(),c=Bi(Fp(a,u).mul(d.sub(2)).add(1)).toVar();return Si(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(kn(3,Bp))),c.y.addAssign(kn(4,xo(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.uv(c).grad(Bi(),Bi())})),Vp=_i((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=wo(s),l=r.mul(u).add(i.cross(r).mul(Eo(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return Dp(e,l,t,n,o,a)})),Op=_i((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=Pi(Ta(t,r,ra(r,s))).toVar();Si(po(h.equals(Pi(0))),(()=>{h.assign(Pi(s.z,0,s.x.negate()))})),h.assign(Ro(h));const p=Pi().toVar();return p.addAssign(i.element(Ei(0)).mul(Vp({theta:0,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),ic({start:Ei(1),end:e},(({i:e})=>{Si(e.greaterThanEqual(n),(()=>{nc()}));const t=Ci(o.mul(Ci(e))).toVar();p.addAssign(i.element(e).mul(Vp({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(Vp({theta:t,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),Oi(p,1)}));let Gp=null;const kp=new WeakMap;function zp(e){let t=kp.get(e);if((void 0!==t?t.pmremVersion:-1)!==e.pmremVersion){const r=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(r))return null;t=Gp.fromCubemap(e,t)}else{if(!function(e){return null!=e&&e.height>0}(r))return null;t=Gp.fromEquirectangular(e,t)}t.pmremVersion=e.pmremVersion,kp.set(e,t)}return t.texture}class $p extends Fs{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new ee;s.isRenderTargetTexture=!0,this._texture=xu(s),this._width=tn(0),this._height=tn(0),this._maxMip=tn(0),this.updateBeforeType=vs.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(){let e=this._pmrem;const t=e?e.pmremVersion:-1,r=this._value;t!==r.pmremVersion&&(e=!0===r.isPMREMTexture?r:zp(r),null!==e&&(this._pmrem=e,this.updateFromTexture(e)))}setup(e){null===Gp&&(Gp=e.createPMREMGenerator()),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this));const r=this.value;e.renderer.coordinateSystem===b&&!0!==r.isPMREMTexture&&!0===r.isRenderTargetTexture&&(t=Pi(t.x.negate(),t.yz));let s=this.levelNode;return null===s&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),Lp(this._texture,t,s,this._width,this._height,this._maxMip)}}const Wp=xi($p),Hp=new WeakMap;class jp extends cc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=Hp.get(e);void 0===s&&(s=Wp(e),Hp.set(e,s)),r=s}const s=t.envMap?Rl("envMapIntensity","float",e.material):Rl("environmentIntensity","float",e.scene),i=!0===t.useAnisotropy||t.anisotropy>0?Hl:al,n=r.context(qp(un,i)).mul(s),o=r.context(Kp(ul)).mul(Math.PI).mul(s),a=eu(n),u=eu(o);e.context.radiance.addAssign(a),e.context.iblIrradiance.addAssign(u);const l=e.context.lightingModel.clearcoatRadiance;if(l){const e=r.context(qp(cn,ll)).mul(s),t=eu(e);l.addAssign(t)}}}const qp=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=Zu.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(Au)),r),getTextureLevel:()=>e}},Kp=e=>({getUV:()=>e,getTextureLevel:()=>Ci(1)}),Xp=new te;class Yp extends Yc{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(Xp),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new jp(t):null}setupLightingModel(){return new xp}setupSpecular(){const e=da(Pi(.04),on.rgb,ln);_n.assign(e),vn.assign(1)}setupVariants(){const e=this.metalnessNode?Ci(this.metalnessNode):hd;ln.assign(e);let t=this.roughnessNode?Ci(this.roughnessNode):cd;t=Uh({roughness:t}),un.assign(t),this.setupSpecular(),on.assign(Oi(on.rgb.mul(e.oneMinus()),on.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const Qp=new re;class Zp extends Yp{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(Qp),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Ci(this.iorNode):Rd;En.assign(e),_n.assign(da(Ko(ia(En.sub(1).div(En.add(1))).mul(ud),Pi(1)).mul(ad),on.rgb,ln)),vn.assign(da(ad,1,ln))}setupLightingModel(){return new xp(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Ci(this.clearcoatNode):gd,t=this.clearcoatRoughnessNode?Ci(this.clearcoatRoughnessNode):md;dn.assign(e),cn.assign(Uh({roughness:t}))}if(this.useSheen){const e=this.sheenNode?Pi(this.sheenNode):bd,t=this.sheenRoughnessNode?Ci(this.sheenRoughnessNode):xd;hn.assign(e),pn.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Ci(this.iridescenceNode):_d,t=this.iridescenceIORNode?Ci(this.iridescenceIORNode):vd,r=this.iridescenceThicknessNode?Ci(this.iridescenceThicknessNode):Nd;gn.assign(e),mn.assign(t),fn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?Bi(this.anisotropyNode):Td).toVar();bn.assign(e.length()),Si(bn.equal(0),(()=>{e.assign(Bi(1,0))})).Else((()=>{e.divAssign(Bi(bn)),bn.assign(bn.saturate())})),yn.assign(bn.pow2().mix(un.pow2(),1)),xn.assign($l[0].mul(e.x).add($l[1].mul(e.y))),Tn.assign($l[1].mul(e.x).sub($l[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Ci(this.transmissionNode):Sd,t=this.thicknessNode?Ci(this.thicknessNode):Ad,r=this.attenuationDistanceNode?Ci(this.attenuationDistanceNode):Cd,s=this.attenuationColorNode?Pi(this.attenuationColorNode):Ed;if(wn.assign(e),Mn.assign(t),Bn.assign(r),Un.assign(s),this.useDispersion){const e=this.dispersionNode?Ci(this.dispersionNode):Pd;Fn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Pi(this.clearcoatNormalNode):fd}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class Jp extends xp{constructor(e,t,r,s){super(e,t,r),this.useSSS=s}direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){if(!0===this.useSSS){const s=i.material,{thicknessColorNode:n,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=s,c=e.add(al.mul(o)).normalize(),h=Ci(Zu.dot(c.negate()).saturate().pow(l).mul(d)),p=Pi(h.add(a).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i)}}class eg extends Zp{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Ci(.1),this.thicknessAmbientNode=Ci(0),this.thicknessAttenuationNode=Ci(.1),this.thicknessPowerNode=Ci(2),this.thicknessScaleNode=Ci(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new Jp(this.useClearcoat,this.useSheen,this.useIridescence,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const tg=_i((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=Bi(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=wl("gradientMap","texture").context({getUV:()=>i});return Pi(e.r)}{const e=i.fwidth().mul(.5);return da(Pi(.7),Pi(1),ga(Ci(.7).sub(e.x),Ci(.7).add(e.x),i.x))}}));class rg extends bh{direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){const n=tg({normal:rl,lightDirection:e,builder:i}).mul(t);r.directDiffuse.addAssign(n.mul(Nh({diffuseColor:on.rgb})))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul(Nh({diffuseColor:on}))),r.indirectDiffuse.mulAssign(e)}}const sg=new se;class ig extends Yc{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(sg),this.setValues(e)}setupLightingModel(){return new rg}}class ng extends Fs{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=Pi(Zu.z,0,Zu.x.negate()).normalize(),t=Zu.cross(e);return Bi(e.dot(al),t.dot(al)).mul(.495).add(.5)}}const og=Ti(ng),ag=new ie;class ug extends Yc{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(ag),this.setValues(e)}setupVariants(e){const t=og;let r;r=e.material.matcap?wl("matcap","texture").context({getUV:()=>t}):Pi(da(.2,.8,t.y)),on.rgb.mulAssign(r.rgb)}}const lg=new I;class dg extends Yc{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.isPointsNodeMaterial=!0,this.lights=!1,this.transparent=!0,this.sizeNode=null,this.setDefaultValues(lg),this.setValues(e)}copy(e){return this.sizeNode=e.sizeNode,super.copy(e)}}class cg extends Fs{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return $i(e,s,s.negate(),e).mul(r)}{const e=t,s=Hi(Oi(1,0,0,0),Oi(0,wo(e.x),Eo(e.x).negate(),0),Oi(0,Eo(e.x),wo(e.x),0),Oi(0,0,0,1)),i=Hi(Oi(wo(e.y),0,Eo(e.y),0),Oi(0,1,0,0),Oi(Eo(e.y).negate(),0,wo(e.y),0),Oi(0,0,0,1)),n=Hi(Oi(wo(e.z),Eo(e.z).negate(),0,0),Oi(Eo(e.z),wo(e.z),0,0),Oi(0,0,1,0),Oi(0,0,0,1));return s.mul(i).mul(n).mul(Oi(r,1)).xyz}}}const hg=xi(cg),pg=new ne;class gg extends Yc{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(pg),this.setValues(e)}setupPosition({object:e,camera:t,context:r}){const s=this.sizeAttenuation,{positionNode:i,rotationNode:n,scaleNode:o}=this,a=qu;let u=$u.mul(Pi(i||0)),l=Bi(Du[0].xyz.length(),Du[1].xyz.length());if(null!==o&&(l=l.mul(o)),!s)if(t.isPerspectiveCamera)l=l.mul(u.z.negate());else{const e=Ci(2).div(Nu.element(1).element(1));l=l.mul(e.mul(2))}let d=a.xy;if(e.center&&!0===e.center.isVector2){const e=((e,t,r)=>fi(new Ga(e,t,r)))("center","vec2");d=d.sub(e.sub(.5))}d=d.mul(l);const c=Ci(n||yd),h=hg(d,c);u=Oi(u.xy.add(h),u.zw);const p=Nu.mul(u);return r.vertex=a,p}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}class mg extends bh{constructor(){super(),this.shadowNode=Ci(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){on.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(on.rgb)}}const fg=new oe;class yg extends Yc{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(fg),this.setValues(e)}setupLightingModel(){return new mg}}const bg=_i((({texture:e,uv:t})=>{const r=1e-4,s=Pi().toVar();return Si(t.x.lessThan(r),(()=>{s.assign(Pi(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(Pi(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(Pi(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(Pi(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(Pi(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(Pi(0,0,-1))})).Else((()=>{const r=.01,i=e.uv(t.add(Pi(-.01,0,0))).r.sub(e.uv(t.add(Pi(r,0,0))).r),n=e.uv(t.add(Pi(0,-.01,0))).r.sub(e.uv(t.add(Pi(0,r,0))).r),o=e.uv(t.add(Pi(0,0,-.01))).r.sub(e.uv(t.add(Pi(0,0,r))).r);s.assign(Pi(i,n,o))})),s.normalize()}));class xg extends bu{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return Pi(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){return t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return bg({texture:this,uv:e})}}const Tg=xi(xg);class _g extends Yc{static get type(){return"VolumeNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.isVolumeNodeMaterial=!0,this.testNode=null,this.setValues(e)}setup(e){const t=Tg(this.map,null,0),r=_i((({orig:e,dir:t})=>{const r=Pi(-.5),s=Pi(.5),i=t.reciprocal(),n=r.sub(e).mul(i),o=s.sub(e).mul(i),a=Ko(n,o),u=Xo(n,o),l=Xo(a.x,Xo(a.y,a.z)),d=Ko(u.x,Ko(u.y,u.z));return Bi(l,d)}));this.fragmentNode=_i((()=>{const e=wa(Pi(zu.mul(Oi(Eu,1)))),s=wa(ju.sub(e)).normalize(),i=Bi(r({orig:e,dir:s})).toVar();i.x.greaterThan(i.y).discard(),i.assign(Bi(Xo(i.x,0),i.y));const n=Pi(e.add(i.x.mul(s))).toVar(),o=Pi(s.abs().reciprocal()).toVar(),a=Ci(Ko(o.x,Ko(o.y,o.z))).toVar("delta");a.divAssign(wl("steps","float"));const u=Oi(wl("base","color"),0).toVar();return ic({type:"float",start:i.x,end:i.y,update:"+= delta"},(()=>{const e=sn("float","d").assign(t.uv(n.add(.5)).r);null!==this.testNode?this.testNode({map:t,mapValue:e,probe:n,finalColor:u}).append():(u.a.assign(1),nc()),n.addAssign(s.mul(a))})),u.a.equal(0).discard(),Oi(u)}))(),super.setup(e)}}class vg{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}setAnimationLoop(e){this._animationLoop=e}setContext(e){this._context=e}dispose(){this.stop()}}class Ng{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t)}delete(e){let t=this.weakMap;for(let r=0;r<e.length;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Sg=0;class Ag{constructor(e,t,r,s,i,n,o,a,u,l){this._nodes=e,this._geometries=t,this.id=Sg++,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=r.isInstancedBufferGeometry?r.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.morphTargetInfluences&&(r+=e.morphTargetInfluences.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",us(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(e+=1),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Rg=[];class Cg{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,o,a){const u=this.getChainMap(a);Rg[0]=e,Rg[1]=t,Rg[2]=n,Rg[3]=i;let l=u.get(Rg);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,o,a),u.set(Rg,l)):(l.updateClipping(o),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,o,a)):l.version=t.version)),l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Ng)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,o,a,u,l,d){const c=this.getChainMap(d),h=new Ag(e,t,r,s,i,n,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Eg{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const wg=1,Mg=2,Bg=3,Ug=4,Fg=16;class Ig extends Eg{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return void 0!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===wg?this.backend.createAttribute(e):t===Mg?this.backend.createIndexAttribute(e):t===Bg?this.backend.createStorageAttribute(e):t===Ug&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===p)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function Pg(e){return null!==e.index?e.index.version:e.attributes.position.version}function Lg(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(function(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}(t)?ae:ue)(t,1);return i.version=Pg(e),i}class Dg extends Eg{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Bg):this.updateAttribute(e,wg);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Mg);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,Ug)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=Lg(t),e.set(t,r)):r.version!==Pg(t)&&(this.attributes.delete(r),r=Lg(t),e.set(t,r)),s=r}return s}}class Vg{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(e,t){0===this[e].timestampCalls&&(this[e].timestamp=0),this[e].timestamp+=t,this[e].timestampCalls++,this[e].timestampCalls>=this[e].previousFrameCalls&&(this[e].timestampCalls=0)}reset(){const e=this.render.frameCalls;this.render.previousFrameCalls=e;const t=this.compute.frameCalls;this.compute.previousFrameCalls=t,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class Og{constructor(e){this.cacheKey=e,this.usedTimes=0}}class Gg extends Og{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class kg extends Og{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let zg=0;class $g{constructor(e,t,r=null,s=null){this.id=zg++,this.code=e,this.stage=t,this.transforms=r,this.attributes=s,this.usedTimes=0}}class Wg extends Eg{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let o=this.programs.compute.get(n.computeShader);void 0===o&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),o=new $g(n.computeShader,"compute",n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,o),r.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState();let o=this.programs.vertex.get(n.vertexShader);void 0===o&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),o=new $g(n.vertexShader,"vertex"),this.programs.vertex.set(n.vertexShader,o),r.createProgram(o));let a=this.programs.fragment.get(n.fragmentShader);void 0===a&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),a=new $g(n.fragmentShader,"fragment"),this.programs.fragment.set(n.fragmentShader,a),r.createProgram(a));const u=this._getRenderCacheKey(e,o,a);let l=this.caches.get(u);void 0===l?(i&&0===i.usedTimes&&this._releasePipeline(i),l=this._getRenderPipeline(e,o,a,u,t)):e.pipeline=l,l.usedTimes++,o.usedTimes++,a.usedTimes++,s.pipeline=l}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new kg(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new Gg(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class Hg extends Eg{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?Ug:Bg;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,o=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!this.nodes.updateGroup(t))continue}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const a=t.update(),u=t.texture;a&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,o+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,a,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,o)}}function jg(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function qg(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Kg(e){return(e.transmission>0||e.transmissionNode)&&e.side===le&&!1===e.forceSinglePass}class Xg{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=s,a.renderOrder=e.renderOrder,a.z=i,a.group=n,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(Kg(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===r.transparent||r.transmission>0?(Kg(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||jg),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||qg),this.transparent.length>1&&this.transparent.sort(t||qg)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}class Yg{constructor(e){this.lighting=e,this.lists=new Ng}get(e,t){const r=this.lists,s=[e,t];let i=r.get(s);return void 0===i&&(i=new Xg(this.lighting,e,t),r.set(s,i)),i}dispose(){this.lists=new Ng}}let Qg=0;class Zg{constructor(){this.id=Qg++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return Jg(this)}}function Jg(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return ls(s)}class em{constructor(){this.chainMaps={}}get(e,t,r=null){const s=[e,t];let i;if(null===r)i="default";else{const e=r.texture.format;i=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const n=this.getChainMap(i);let o=n.get(s);return void 0===o&&(o=new Zg,n.set(s,o)),null!==r&&(o.sampleCount=0===r.samples?1:r.samples),o}getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Ng)}dispose(){this.chainMaps={}}}const tm=new r;class rm extends Eg{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,o=this.getSize(n[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new B,l.format=e.stencilBuffer?de:ce,l.type=e.stencilBuffer?he:f,l.image.width=a,l.image.height=u,i[t]=l),r.width===o.width&&o.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),r.width=o.width,r.height=o.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};for(let e=0;e<n.length;e++){const t=n[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}if(l&&this.updateTexture(l,h),!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:pe}const{width:n,height:o,depth:a}=this.getSize(e);if(t.width=n,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,o):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=tm){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class sm extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class im extends rn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class nm extends Ms{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new mi(t);return this._currentCond=Ta(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new mi(t),s=Ta(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new mi(e),this}build(e,...t){const r=Ni();vi(this);for(const t of this.nodes)t.build(e,"void");return vi(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const om=xi(nm);class am extends Ms{static get type(){return"StructTypeNode"}constructor(e){super(),this.types=e,this.isStructTypeNode=!0}getMemberTypes(){return this.types}}class um extends Ms{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}setup(e){super.setup(e);const t=this.members,r=[];for(let s=0;s<t.length;s++)r.push(t[s].getNodeType(e));this.nodeType=e.getStructTypeFromNode(new am(r)).name}generate(e,t){const r=e.getOutputStructName(),s=this.members,i=""!==r?r+".":"";for(let r=0;r<s.length;r++){const n=s[r].build(e,t);e.addLineFlowCode(`${i}m${r} = ${n}`,this)}return r}}const lm=xi(um);function dm(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class cm extends um{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return hm(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[dm(s,e)]=Oi(t[e])}return this.members=r,super.setup(e)}}const hm=xi(cm),pm=_i((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),gm=(e,t)=>sa(kn(4,e.mul(Gn(1,e))),t),mm=_i((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),fm=_i((([e])=>Pi(mm(e.z.add(mm(e.y.mul(1)))),mm(e.z.add(mm(e.x.mul(1)))),mm(e.y.add(mm(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),ym=_i((([e,t,r])=>{const s=Pi(e).toVar(),i=Ci(1.4).toVar(),n=Ci(0).toVar(),o=Pi(s).toVar();return ic({start:Ci(0),end:Ci(3),type:"float",condition:"<="},(()=>{const e=Pi(fm(o.mul(2))).toVar();s.addAssign(e.add(r.mul(Ci(.1).mul(t)))),o.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const a=Ci(mm(s.z.add(mm(s.x.add(mm(s.y)))))).toVar();n.addAssign(a.div(i)),o.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"p",type:"vec3"},{name:"spd",type:"float"},{name:"time",type:"float"}]});class bm extends Ms{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=n.inputs;if(t.length===o.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=o[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const xm=xi(bm),Tm=e=>(...t)=>xm(e,...t),_m=tn(0).setGroup(Zi).onRenderUpdate((e=>e.time)),vm=tn(0).setGroup(Zi).onRenderUpdate((e=>e.deltaTime)),Nm=tn(0,"uint").setGroup(Zi).onRenderUpdate((e=>e.frameId)),Sm=_i((([e,t,r=Bi(.5)])=>hg(e.sub(r),t).add(r))),Am=_i((([e,t,r=Bi(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),Rm=_i((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=Du.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=Du;const i=Au.mul(s);return pi(t)&&(i[0][0]=Du[0].length(),i[0][1]=0,i[0][2]=0),pi(r)&&(i[1][0]=0,i[1][1]=Du[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,Nu.mul(i).mul(qu)})),Cm=_i((([e=null])=>{const t=$c();return $c(Pc(e)).sub(t).lessThan(0).select(xc,e)}));class Em extends Ms{static get type(){return"SpriteSheetUVNode"}constructor(e,t=pu(),r=Ci(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),o=n.mod(s),a=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=Bi(o,a);return t.add(l).mul(u)}}const wm=xi(Em);class Mm extends Ms{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=Ci(1),i=qu,n=sl){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let o=n.abs().normalize();o=o.div(o.dot(Pi(1)));const a=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=xu(d,a).mul(o.x),g=xu(c,u).mul(o.y),m=xu(h,l).mul(o.z);return On(p,g,m)}}const Bm=xi(Mm),Um=new me,Fm=new r,Im=new r,Pm=new r,Lm=new n,Dm=new r(0,0,-1),Vm=new s,Om=new r,Gm=new r,km=new s,zm=new t,$m=new ge,Wm=xc.flipX();$m.depthTexture=new B(1,1);let Hm=!1;class jm extends bu{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||$m.texture,Wm),this._reflectorBaseNode=e.reflector||new qm(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=fi(new jm({defaultTexture:$m.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class qm extends Ms{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new fe,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:o=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=o,this.updateBeforeType=n?vs.RENDER:vs.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(zm),e.setSize(Math.round(zm.width*r),Math.round(zm.height*r))}setup(e){return this._updateResolution($m,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ge(0,0,{type:ye}),!0===this.generateMipmaps&&(t.texture.minFilter=be,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new B),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&Hm)return;Hm=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,o=this.getVirtualCamera(r),a=this.getRenderTarget(o);if(s.getDrawingBufferSize(zm),this._updateResolution(a,s),Im.setFromMatrixPosition(n.matrixWorld),Pm.setFromMatrixPosition(r.matrixWorld),Lm.extractRotation(n.matrixWorld),Fm.set(0,0,1),Fm.applyMatrix4(Lm),Om.subVectors(Im,Pm),Om.dot(Fm)>0)return;Om.reflect(Fm).negate(),Om.add(Im),Lm.extractRotation(r.matrixWorld),Dm.set(0,0,-1),Dm.applyMatrix4(Lm),Dm.add(Pm),Gm.subVectors(Im,Dm),Gm.reflect(Fm).negate(),Gm.add(Im),o.coordinateSystem=r.coordinateSystem,o.position.copy(Om),o.up.set(0,1,0),o.up.applyMatrix4(Lm),o.up.reflect(Fm),o.lookAt(Gm),o.near=r.near,o.far=r.far,o.updateMatrixWorld(),o.projectionMatrix.copy(r.projectionMatrix),Um.setFromNormalAndCoplanarPoint(Fm,Im),Um.applyMatrix4(o.matrixWorldInverse),Vm.set(Um.normal.x,Um.normal.y,Um.normal.z,Um.constant);const u=o.projectionMatrix;km.x=(Math.sign(Vm.x)+u.elements[8])/u.elements[0],km.y=(Math.sign(Vm.y)+u.elements[9])/u.elements[5],km.z=-1,km.w=(1+u.elements[10])/u.elements[14],Vm.multiplyScalar(1/Vm.dot(km));u.elements[2]=Vm.x,u.elements[6]=Vm.y,u.elements[10]=s.coordinateSystem===v?Vm.z-0:Vm.z+1-0,u.elements[14]=Vm.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),i.visible=!1;const l=s.getRenderTarget(),d=s.getMRT();s.setMRT(null),s.setRenderTarget(a),s.render(t,o),s.setMRT(d),s.setRenderTarget(l),i.visible=!0,Hm=!1}}const Km=new xe(-1,1,1,-1,0,1);class Xm extends Te{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new _e([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new _e(t,2))}}const Ym=new Xm;class Qm extends k{constructor(e=null){super(Ym,e),this.camera=Km,this.isQuadMesh=!0}renderAsync(e){return e.renderAsync(this,Km)}render(e){e.render(this,Km)}}const Zm=new t;class Jm extends bu{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:ye}){const i=new ge(t,r,s);super(i.texture,pu()),this.node=e,this.width=t,this.height=r,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this.updateMap=new WeakMap,this._rttNode=null,this._quadMesh=new Qm(new Yc),this.updateBeforeType=vs.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(Zm);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new bu(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const ef=(e,...t)=>fi(new Jm(fi(e),...t)),tf=_i((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===v?(e=Bi(e.x,e.y.oneMinus()).mul(2).sub(1),i=Oi(Pi(e,t),1)):i=Oi(Pi(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=Oi(r.mul(i));return n.xyz.div(n.w)})),rf=_i((([e,t])=>{const r=t.mul(Oi(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return Bi(s.x,s.y.oneMinus())})),sf=_i((([e,t,r])=>{const s=mu(Tu(t)),i=Ui(e.mul(s)).toVar(),n=Tu(t,i).toVar(),o=Tu(t,i.sub(Ui(2,0))).toVar(),a=Tu(t,i.sub(Ui(1,0))).toVar(),u=Tu(t,i.add(Ui(1,0))).toVar(),l=Tu(t,i.add(Ui(2,0))).toVar(),d=Tu(t,i.add(Ui(0,2))).toVar(),c=Tu(t,i.add(Ui(0,1))).toVar(),h=Tu(t,i.sub(Ui(0,1))).toVar(),p=Tu(t,i.sub(Ui(0,2))).toVar(),g=Io(Gn(Ci(2).mul(a).sub(o),n)).toVar(),m=Io(Gn(Ci(2).mul(u).sub(l),n)).toVar(),f=Io(Gn(Ci(2).mul(c).sub(d),n)).toVar(),y=Io(Gn(Ci(2).mul(h).sub(p),n)).toVar(),b=tf(e,n,r).toVar(),x=g.lessThan(m).select(b.sub(tf(e.sub(Bi(Ci(1).div(s.x),0)),a,r)),b.negate().add(tf(e.add(Bi(Ci(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(b.sub(tf(e.add(Bi(0,Ci(1).div(s.y))),c,r)),b.negate().add(tf(e.sub(Bi(0,Ci(1).div(s.y))),h,r)));return Ro(ra(x,T))}));class nf extends R{constructor(e,t,r=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new r(e*t)),super(e,t),this.isStorageInstancedBufferAttribute=!0}}class of extends ve{constructor(e,t,r=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new r(e*t)),super(e,t),this.isStorageBufferAttribute=!0}}class af extends Bs{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.bufferObject&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0===this.node.bufferObject&&!0!==s?e.generatePBO(this):this.node.build(e):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const uf=xi(af);class lf extends xl{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t=gs(e.itemSize),r=e.count),super(e,t,r),this.isStorageBufferNode=!0,this.access=Ss.READ_WRITE,this.isAtomic=!1,this.bufferObject=!1,this.bufferCount=r,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return uf(this,e)}setBufferObject(e){return this.bufferObject=e,this}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Ss.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=qa(this.value),this._varying=wa(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const df=(e,t,r)=>fi(new lf(e,t,r));class cf extends cu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}class hf extends Ms{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const pf=Ti(hf),gf=new Se,mf=new n;class ff extends Ms{static get type(){return"SceneNode"}constructor(e=ff.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===ff.BACKGROUND_BLURRINESS?s=Rl("backgroundBlurriness","float",r):t===ff.BACKGROUND_INTENSITY?s=Rl("backgroundIntensity","float",r):t===ff.BACKGROUND_ROTATION?s=tn("mat4").label("backgroundRotation").setGroup(Zi).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==Ne?(gf.copy(r.backgroundRotation),gf.x*=-1,gf.y*=-1,gf.z*=-1,mf.makeRotationFromEuler(gf)):mf.identity(),mf})):console.error("THREE.SceneNode: Unknown scope:",t),s}}ff.BACKGROUND_BLURRINESS="backgroundBlurriness",ff.BACKGROUND_INTENSITY="backgroundIntensity",ff.BACKGROUND_ROTATION="backgroundRotation";const yf=Ti(ff,ff.BACKGROUND_BLURRINESS),bf=Ti(ff,ff.BACKGROUND_INTENSITY),xf=Ti(ff,ff.BACKGROUND_ROTATION);class Tf extends bu{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Ss.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Ss.READ_WRITE)}toReadOnly(){return this.setAccess(Ss.READ_ONLY)}toWriteOnly(){return this.setAccess(Ss.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),o=s.build(e,"vec4"),a=e.generateTextureStore(e,i,n,o);e.addLineFlowCode(a,this)}}const _f=xi(Tf);class vf extends Al{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Nf=new WeakMap;class Sf extends Fs{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=vs.OBJECT,this.updateAfterType=vs.OBJECT,this.previousModelWorldMatrix=tn(new n),this.previousProjectionMatrix=tn(new n).setGroup(Zi),this.previousCameraViewMatrix=tn(new n)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=Rf(r);this.previousModelWorldMatrix.value.copy(s);const i=Af(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new n,i.previousCameraViewMatrix=new n,i.currentProjectionMatrix=new n,i.currentCameraViewMatrix=new n,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){Rf(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?Nu:tn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul($u).mul(qu),s=this.previousProjectionMatrix.mul(t).mul(Ku),i=r.xy.div(r.w),n=s.xy.div(s.w);return Gn(i,n)}}function Af(e){let t=Nf.get(e);return void 0===t&&(t={},Nf.set(e,t)),t}function Rf(e,t=0){const r=Af(e);let s=r[t];return void 0===s&&(r[t]=s=new n),s}const Cf=Ti(Sf),Ef=_i((([e,t])=>Ko(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),wf=_i((([e,t])=>Ko(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Mf=_i((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Bf=_i((([e,t])=>da(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),Qo(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Uf=_i((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return Oi(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),Ff=_i((([e])=>Df(e.rgb))),If=_i((([e,t=Ci(1)])=>t.mix(Df(e.rgb),e.rgb))),Pf=_i((([e,t=Ci(1)])=>{const r=On(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return da(e.rgb,s,i)})),Lf=_i((([e,t=Ci(1)])=>{const r=Pi(.57735,.57735,.57735),s=t.cos();return Pi(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(ta(r,e.rgb).mul(s.oneMinus())))))})),Df=(e,t=Pi(u.getLuminanceCoefficients(new r)))=>ta(e,t),Vf=_i((([e,t=Pi(1),s=Pi(0),i=Pi(1),n=Ci(1),o=Pi(u.getLuminanceCoefficients(new r,Ae))])=>{const a=e.rgb.dot(Pi(o)),l=Xo(e.rgb.mul(t).add(s),0).toVar(),d=l.pow(i).toVar();return Si(l.r.greaterThan(0),(()=>{l.r.assign(d.r)})),Si(l.g.greaterThan(0),(()=>{l.g.assign(d.g)})),Si(l.b.greaterThan(0),(()=>{l.b.assign(d.b)})),l.assign(a.add(l.sub(a).mul(n))),Oi(l.rgb,e.a)}));class Of extends Fs{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const Gf=xi(Of);let kf=null;class zf extends Mc{static get type(){return"ViewportSharedTextureNode"}constructor(e=xc,t=null){null===kf&&(kf=new w),super(e,t,kf)}updateReference(){return this}}const $f=xi(zf),Wf=new t;class Hf extends bu{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class jf extends Hf{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class qf extends Fs{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new B;i.isRenderTargetTexture=!0,i.name="depth";const n=new ge(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ye,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this.updateBeforeType=vs.FRAME,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=tn(0),this._cameraFar=tn(0),this._mrt=null,this.isPassNode=!0}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.isRenderTargetTexture=!0,t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),t.isRenderTargetTexture=!0,this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=fi(new jf(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=fi(new jf(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=Oc(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=Dc(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===qf.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r,camera:s}=this;this._pixelRatio=t.getPixelRatio();const i=t.getSize(Wf);this.setSize(i.width,i.height);const n=t.getRenderTarget(),o=t.getMRT();this._cameraNear.value=s.near,this._cameraFar.value=s.far;for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(n),t.setMRT(o)}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio,s=this._height*this._pixelRatio;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}qf.COLOR="color",qf.DEPTH="depth";class Kf extends qf{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(qf.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,o,a,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,o,a,u)}t.renderObject(e,r,s,i,n,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new Yc;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=x;const t=sl.negate(),r=Nu.mul($u),s=Ci(1),i=r.mul(Oi(qu,1)),n=r.mul(Oi(qu.add(t),1)),o=Ro(i.sub(n));return e.vertexNode=i.add(o.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=Oi(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const Xf=_i((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Yf=_i((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Qf=_i((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Zf=_i((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),Jf=_i((([e,t])=>{const r=Wi(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=Wi(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=Zf(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),ey=Wi(Pi(1.6605,-.1246,-.0182),Pi(-.5876,1.1329,-.1006),Pi(-.0728,-.0083,1.1187)),ty=Wi(Pi(.6274,.0691,.0164),Pi(.3293,.9195,.088),Pi(.0433,.0113,.8956)),ry=_i((([e])=>{const t=Pi(e).toVar(),r=Pi(t.mul(t)).toVar(),s=Pi(r.mul(r)).toVar();return Ci(15.5).mul(s.mul(r)).sub(kn(40.14,s.mul(t))).add(kn(31.96,s).sub(kn(6.868,r.mul(t))).add(kn(.4298,r).add(kn(.1191,t).sub(.00232))))})),sy=_i((([e,t])=>{const r=Pi(e).toVar(),s=Wi(Pi(.856627153315983,.137318972929847,.11189821299995),Pi(.0951212405381588,.761241990602591,.0767994186031903),Pi(.0482516061458583,.101439036467562,.811302368396859)),i=Wi(Pi(1.1271005818144368,-.1413297634984383,-.14132976349843826),Pi(-.11060664309660323,1.157823702216272,-.11060664309660294),Pi(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=Ci(-12.47393),o=Ci(4.026069);return r.mulAssign(t),r.assign(ty.mul(r)),r.assign(s.mul(r)),r.assign(Xo(r,1e-10)),r.assign(_o(r)),r.assign(r.sub(n).div(o.sub(n))),r.assign(ca(r,0,1)),r.assign(ry(r)),r.assign(i.mul(r)),r.assign(sa(Xo(Pi(0),r),Pi(2.2))),r.assign(ey.mul(r)),r.assign(ca(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),iy=_i((([e,t])=>{const r=Ci(.76),s=Ci(.15);e=e.mul(t);const i=Ko(e.r,Ko(e.g,e.b)),n=Ta(i.lessThan(.08),i.sub(kn(6.25,i.mul(i))),.04);e.subAssign(n);const o=Xo(e.r,Xo(e.g,e.b));Si(o.lessThan(r),(()=>e));const a=Gn(1,r),u=Gn(1,a.mul(a).div(o.add(a.sub(r))));e.mulAssign(u.div(o));const l=Gn(1,zn(1,s.mul(o.sub(u)).add(1)));return da(e,Pi(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class ny extends Ms{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.language=r,this.includes=t}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const oy=xi(ny);class ay extends ny{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const o=e.getPropertyName(n),a=this.getNodeFunction(e).getCode(o);return n.code=a+"\n","property"===t?o:e.format(`${o}()`,i,t)}}const uy=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=fi(new ay(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class ly extends Ms{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outpuType=null,this.events=new o,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Ci()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=bs(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?xs(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const dy=xi(ly);class cy extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class hy{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const py=new cy;class gy extends Ms{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new cy,this._output=dy(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=dy(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=dy(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new hy(this),t=py.get("THREE"),r=py.get("TSL"),s=this.getMethod(this.codeNode),i=[e,this._local,py,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Ci()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[us(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return ls(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const my=xi(gy);class fy extends Ms{static get type(){return"FogNode"}constructor(e,t){super("float"),this.isFogNode=!0,this.colorNode=e,this.factorNode=t}getViewZNode(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||Qu.z).negate()}setup(){return this.factorNode}}const yy=xi(fy);class by extends fy{static get type(){return"FogRangeNode"}constructor(e,t,r){super(e),this.isFogRangeNode=!0,this.nearNode=t,this.farNode=r}setup(e){const t=this.getViewZNode(e);return ga(this.nearNode,this.farNode,t)}}const xy=xi(by);class Ty extends fy{static get type(){return"FogExp2Node"}constructor(e,t){super(e),this.isFogExp2Node=!0,this.densityNode=t}setup(e){const t=this.getViewZNode(e),r=this.densityNode;return r.mul(r,t,t).negate().exp().oneMinus()}}const _y=xi(Ty);let vy=null,Ny=null;class Sy extends Ms{static get type(){return"RangeNode"}constructor(e=Ci(),t=Ci()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(fs(this.minNode.value)),r=e.getTypeLength(fs(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(fs(i)),u=e.getTypeLength(fs(n));vy=vy||new s,Ny=Ny||new s,vy.setScalar(0),Ny.setScalar(0),1===o?vy.setScalar(i):i.isColor?vy.set(i.r,i.g,i.b):vy.set(i.x,i.y,i.z||0,i.w||0),1===u?Ny.setScalar(n):n.isColor?Ny.set(n.r,n.g,n.b):Ny.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=vy.getComponent(t),s=Ny.getComponent(t);c[e]=a.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=Tl(c,"vec4",t.count).element($d).convert(h);else{const t=new R(c,4);e.geometry.setAttribute("__range"+this.id,t),r=Xa(t).convert(h)}}else r=Ci(0);return r}}const Ay=xi(Sy);class Ry extends Ms{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Cy=(e,t)=>fi(new Ry(e,t)),Ey=Cy("numWorkgroups","uvec3"),wy=Cy("workgroupId","uvec3"),My=Cy("localId","uvec3"),By=Cy("subgroupSize","uint");const Uy=xi(class extends Ms{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class Fy extends Bs{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class Iy extends Ms{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.scope=e}label(e){return this.name=e,this}getHash(){return this.uuid}setScope(e){return this.scope=e,this}getInputType(){return`${this.scope}Array`}element(e){return fi(new Fy(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class Py extends Fs{static get type(){return"AtomicFunctionNode"}constructor(e,t,r,s=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.storeNode=s}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,r=this.getNodeType(e),s=this.getInputType(e),i=this.pointerNode,n=this.valueNode,o=[];o.push(`&${i.build(e,s)}`),o.push(n.build(e,s));const a=`${e.getMethod(t,r)}( ${o.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(e,s);e.addLineFlowCode(`${t} = ${a}`,this)}else e.addLineFlowCode(a,this)}}Py.ATOMIC_LOAD="atomicLoad",Py.ATOMIC_STORE="atomicStore",Py.ATOMIC_ADD="atomicAdd",Py.ATOMIC_SUB="atomicSub",Py.ATOMIC_MAX="atomicMax",Py.ATOMIC_MIN="atomicMin",Py.ATOMIC_AND="atomicAnd",Py.ATOMIC_OR="atomicOr",Py.ATOMIC_XOR="atomicXor";const Ly=xi(Py),Dy=(e,t,r,s)=>{const i=Ly(e,t,r,s);return i.append(),i};let Vy;function Oy(e){Vy=Vy||new WeakMap;let t=Vy.get(e);return void 0===t&&Vy.set(e,t={}),t}function Gy(e){const t=Oy(e);return t.position||(t.position=tn(new r).setGroup(Zi).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function ky(e){const t=Oy(e);return t.targetPosition||(t.targetPosition=tn(new r).setGroup(Zi).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function zy(e){const t=Oy(e);return t.viewPosition||(t.viewPosition=tn(new r).setGroup(Zi).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const $y=e=>Au.transformDirection(Gy(e).sub(ky(e))),Wy=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},Hy=new WeakMap;class jy extends Ms{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Pi().toVar("totalDiffuse"),this.totalSpecularNode=Pi().toVar("totalSpecular"),this.outgoingLightNode=Pi().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(fi(e));else{let s=null;if(null!==r&&(s=Wy(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;Hy.has(e)?s=Hy.get(e):(s=fi(new r(e)),Hy.set(e,s)),t.push(s)}}this._lightNodes=t}setupLights(e,t){for(const r of t)r.build(e)}setup(e){null===this._lightNodes&&this.setupLightsNode(e);const t=e.context,r=t.lightingModel;let s=this.outgoingLightNode;if(r){const{_lightNodes:i,totalDiffuseNode:n,totalSpecularNode:o}=this;t.outgoingLight=s;const a=e.addStack();e.getDataFromNode(this).nodes=a.nodes,r.start(t,a,e),this.setupLights(e,i),r.indirect(t,a,e);const{backdrop:u,backdropAlpha:l}=t,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=t.reflectedLight;let g=d.add(h);null!==u&&(g=Pi(null!==l?l.mix(g,u):u),t.material.transparent=!0),n.assign(g),o.assign(c.add(p)),s.assign(n.add(o)),r.finish(t,a,e),s=s.bypass(e.removeStack())}return s}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const qy=Pi().toVar("shadowWorldPosition"),Ky=_i((([e,t,r])=>{let s=Xu.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),Xy=_i((({depthTexture:e,shadowCoord:t})=>xu(e,t.xy).compare(t.z))),Yy=_i((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>xu(e,t).compare(r),i=Rl("mapSize","vec2",r).setGroup(Zi),n=Rl("radius","float",r).setGroup(Zi),o=Bi(1).div(i),a=o.x.negate().mul(n),u=o.y.negate().mul(n),l=o.x.mul(n),d=o.y.mul(n),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return On(s(t.xy.add(Bi(a,u)),t.z),s(t.xy.add(Bi(0,u)),t.z),s(t.xy.add(Bi(l,u)),t.z),s(t.xy.add(Bi(c,h)),t.z),s(t.xy.add(Bi(0,h)),t.z),s(t.xy.add(Bi(p,h)),t.z),s(t.xy.add(Bi(a,0)),t.z),s(t.xy.add(Bi(c,0)),t.z),s(t.xy,t.z),s(t.xy.add(Bi(p,0)),t.z),s(t.xy.add(Bi(l,0)),t.z),s(t.xy.add(Bi(c,g)),t.z),s(t.xy.add(Bi(0,g)),t.z),s(t.xy.add(Bi(p,g)),t.z),s(t.xy.add(Bi(a,d)),t.z),s(t.xy.add(Bi(0,d)),t.z),s(t.xy.add(Bi(l,d)),t.z)).mul(1/17)})),Qy=_i((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>xu(e,t).compare(r),i=Rl("mapSize","vec2",r).setGroup(Zi),n=Bi(1).div(i),o=n.x,a=n.y,u=t.xy,l=Co(u.mul(i).add(.5));return u.subAssign(l.mul(n)),On(s(u,t.z),s(u.add(Bi(o,0)),t.z),s(u.add(Bi(0,a)),t.z),s(u.add(n),t.z),da(s(u.add(Bi(o.negate(),0)),t.z),s(u.add(Bi(o.mul(2),0)),t.z),l.x),da(s(u.add(Bi(o.negate(),a)),t.z),s(u.add(Bi(o.mul(2),a)),t.z),l.x),da(s(u.add(Bi(0,a.negate())),t.z),s(u.add(Bi(0,a.mul(2))),t.z),l.y),da(s(u.add(Bi(o,a.negate())),t.z),s(u.add(Bi(o,a.mul(2))),t.z),l.y),da(da(s(u.add(Bi(o.negate(),a.negate())),t.z),s(u.add(Bi(o.mul(2),a.negate())),t.z),l.x),da(s(u.add(Bi(o.negate(),a.mul(2))),t.z),s(u.add(Bi(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),Zy=_i((({depthTexture:e,shadowCoord:t})=>{const r=Ci(1).toVar(),s=xu(e).uv(t.xy).rg,i=Qo(t.z,s.x);return Si(i.notEqual(Ci(1)),(()=>{const e=t.z.sub(s.x),n=Xo(0,s.y.mul(s.y));let o=n.div(n.add(e.mul(e)));o=ca(Gn(o,.3).div(.95-.3)),r.assign(ca(Xo(i,o)))})),r})),Jy=_i((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Ci(0).toVar(),n=Ci(0).toVar(),o=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(2).div(e.sub(1))),a=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(-1));ic({start:Ei(0),end:Ei(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Ci(e).mul(o)),l=s.uv(On(_c.xy,Bi(0,u).mul(t)).div(r)).x;i.addAssign(l),n.addAssign(l.mul(l))})),i.divAssign(e),n.divAssign(e);const u=vo(n.sub(i.mul(i)));return Bi(i,u)})),eb=_i((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Ci(0).toVar(),n=Ci(0).toVar(),o=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(2).div(e.sub(1))),a=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(-1));ic({start:Ei(0),end:Ei(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Ci(e).mul(o)),l=s.uv(On(_c.xy,Bi(u,0).mul(t)).div(r));i.addAssign(l.x),n.addAssign(On(l.y.mul(l.y),l.x.mul(l.x)))})),i.divAssign(e),n.divAssign(e);const u=vo(n.sub(i.mul(i)));return Bi(i,u)})),tb=[Xy,Yy,Qy,Zy];let rb=null;const sb=new Qm;class ib extends Ms{static get type(){return"ShadowNode"}constructor(e,t=null){super(),this.light=e,this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this.updateBeforeType=vs.RENDER,this._node=null,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i}){const n=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i});return n.select(o,Ci(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=Rl("bias","float",r).setGroup(Zi);let n,o=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)o=o.xyz.div(o.w),n=o.z,s.coordinateSystem===v&&(n=n.mul(2).sub(1));else{const e=o.w;o=o.xy.div(e);const t=Rl("near","float",r.camera).setGroup(Zi),s=Rl("far","float",r.camera).setGroup(Zi);n=Gc(e.negate(),t,s)}return o=Pi(o.x,o.y.oneMinus(),n.add(i)),o}getShadowFilterFn(e){return tb[e]}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type;if(null===rb){const e=r.isPointLight?(e=>{const t=e.shadow.camera,r=Rl("near","float",t).setGroup(Zi),s=Rl("far","float",t).setGroup(Zi),i=Uu(e);return Ky(i,r,s)})(r):null;rb=new Yc,rb.fragmentNode=Oi(0,0,0,1),rb.depthNode=e,rb.isShadowNodeMaterial=!0,rb.name="ShadowMaterial"}const n=new B(s.mapSize.width,s.mapSize.height);n.compareFunction=Re;const o=e.createRenderTarget(s.mapSize.width,s.mapSize.height);if(o.depthTexture=n,s.camera.updateProjectionMatrix(),i===Ce){n.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ee,type:ye}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ee,type:ye});const t=xu(n),r=xu(this.vsmShadowMapVertical.texture),i=Rl("blurSamples","float",s).setGroup(Zi),o=Rl("radius","float",s).setGroup(Zi),a=Rl("mapSize","vec2",s).setGroup(Zi);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Yc);u.fragmentNode=Jy({samples:i,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Yc),u.fragmentNode=eb({samples:i,radius:o,size:a,shadowPass:r}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=Rl("intensity","float",s).setGroup(Zi),u=Rl("normalBias","float",s).setGroup(Zi),l=tn(s.matrix).setGroup(Zi).mul(qy.add(ul.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===Ce?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:o.texture,depthTexture:h,shadowCoord:d,shadow:s}),g=xu(o.texture,d),m=da(1,p.rgb.mix(g,1),a.mul(g.a)).toVar();return this.shadowMap=o,this.shadow.map=o,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return _i((({material:t})=>{qy.assign(t.shadowPositionNode||Xu);let r=this._node;return null===r&&(this._node=r=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(r=e.material.receivedShadowNode(r)),r}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:o}=e,a=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u;const l=n.overrideMaterial;n.overrideMaterial=rb,s.camera.layers.mask=o.layers.mask;const d=i.getRenderTarget(),c=i.getRenderObjectFunction();i.setRenderObjectFunction(((e,...t)=>{(!0===e.castShadow||e.receiveShadow&&a===Ce)&&i.renderObject(e,...t)})),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(c),!0!==r.isPointLight&&a===Ce&&this.vsmPass(i),i.setRenderTarget(d),n.overrideMaterial=l}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),sb.material=this.vsmMaterialVertical,sb.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),sb.material=this.vsmMaterialHorizontal,sb.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),this.updateBeforeType=vs.NONE}updateBefore(e){const{shadow:t}=this;(t.needsUpdate||t.autoUpdate)&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const nb=(e,t)=>fi(new ib(e,t));class ob extends cc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.updateType=vs.FRAME,this.light=t,this.color=new e,this.colorNode=tn(this.color).setGroup(Zi),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0}getCacheKey(){return ds(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadowNode(){return nb(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const t=this.light.shadow.shadowNode;let s;s=void 0!==t?fi(t):this.setupShadowNode(e),this.shadowNode=s,this.shadowColorNode=r=this.colorNode.mul(s),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const ab=_i((e=>{const{lightDistance:t,cutoffDistance:r,decayExponent:s}=e,i=t.pow(s).max(.01).reciprocal();return r.greaterThan(0).select(i.mul(t.div(r).pow4().oneMinus().clamp().pow2()),i)})),ub=new e,lb=_i((([e,t])=>{const r=e.toVar(),s=Io(r),i=zn(1,Xo(s.x,Xo(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=Bi(r.xy).toVar(),o=t.mul(1.5).oneMinus();return Si(s.z.greaterThanEqual(o),(()=>{Si(r.z.greaterThan(0),(()=>{n.x.assign(Gn(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(o),(()=>{const e=Po(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(o),(()=>{const e=Po(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),Bi(.125,.25).mul(n).add(Bi(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),db=_i((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>xu(e,lb(t,s.y)).compare(r))),cb=_i((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=Rl("radius","float",i).setGroup(Zi),o=Bi(-1,1).mul(n).mul(s.y);return xu(e,lb(t.add(o.xyy),s.y)).compare(r).add(xu(e,lb(t.add(o.yyy),s.y)).compare(r)).add(xu(e,lb(t.add(o.xyx),s.y)).compare(r)).add(xu(e,lb(t.add(o.yyx),s.y)).compare(r)).add(xu(e,lb(t,s.y)).compare(r)).add(xu(e,lb(t.add(o.xxy),s.y)).compare(r)).add(xu(e,lb(t.add(o.yxy),s.y)).compare(r)).add(xu(e,lb(t.add(o.xxx),s.y)).compare(r)).add(xu(e,lb(t.add(o.yxx),s.y)).compare(r)).mul(1/9)})),hb=_i((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),o=tn("float").onRenderUpdate((()=>s.camera.near)),a=tn("float").onRenderUpdate((()=>s.camera.far)),u=Rl("bias","float",s).setGroup(Zi),l=tn(s.mapSize).setGroup(Zi),d=Ci(1).toVar();return Si(n.sub(a).lessThanEqual(0).and(n.sub(o).greaterThanEqual(0)),(()=>{const r=n.sub(o).div(a.sub(o)).toVar();r.addAssign(u);const c=i.normalize(),h=Bi(1).div(l.mul(Bi(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),pb=new s,gb=new t,mb=new t;class fb extends ib{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===we?db:cb}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return hb({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,o=t.getFrameExtents();mb.copy(t.mapSize),mb.multiply(o),r.setSize(mb.width,mb.height),gb.copy(t.mapSize);const a=i.autoClear,u=i.getClearColor(ub),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const o=t.getViewport(e),a=gb.x*o.x,u=mb.y-gb.y-gb.y*o.y;pb.set(a,u,gb.x*o.z,gb.y*o.w),r.viewport.copy(pb),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=a,i.setClearColor(u,l)}}const yb=_i((({color:e,lightViewPosition:t,cutoffDistance:r,decayExponent:s},i)=>{const n=i.context.lightingModel,o=t.sub(Qu),a=o.normalize(),u=o.length(),l=ab({lightDistance:u,cutoffDistance:r,decayExponent:s}),d=e.mul(l),c=i.context.reflectedLight;n.direct({lightDirection:a,lightColor:d,reflectedLight:c},i.stack,i)}));class bb extends ob{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=tn(0).setGroup(Zi),this.decayExponentNode=tn(0).setGroup(Zi)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return((e,t)=>fi(new fb(e,t)))(this.light)}setup(e){super.setup(e),yb({color:this.colorNode,lightViewPosition:zy(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const xb=_i((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),Tb=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=Mi(e).toVar();return Ta(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),_b=_i((([e,t])=>{const r=Mi(t).toVar(),s=Ci(e).toVar();return Ta(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),vb=_i((([e])=>{const t=Ci(e).toVar();return Ei(So(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),Nb=_i((([e,t])=>{const r=Ci(e).toVar();return t.assign(vb(r)),r.sub(Ci(t))})),Sb=Tm([_i((([e,t,r,s,i,n])=>{const o=Ci(n).toVar(),a=Ci(i).toVar(),u=Ci(s).toVar(),l=Ci(r).toVar(),d=Ci(t).toVar(),c=Ci(e).toVar(),h=Ci(Gn(1,a)).toVar();return Gn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),_i((([e,t,r,s,i,n])=>{const o=Ci(n).toVar(),a=Ci(i).toVar(),u=Pi(s).toVar(),l=Pi(r).toVar(),d=Pi(t).toVar(),c=Pi(e).toVar(),h=Ci(Gn(1,a)).toVar();return Gn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),Ab=Tm([_i((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Ci(d).toVar(),h=Ci(l).toVar(),p=Ci(u).toVar(),g=Ci(a).toVar(),m=Ci(o).toVar(),f=Ci(n).toVar(),y=Ci(i).toVar(),b=Ci(s).toVar(),x=Ci(r).toVar(),T=Ci(t).toVar(),_=Ci(e).toVar(),v=Ci(Gn(1,p)).toVar(),N=Ci(Gn(1,h)).toVar();return Ci(Gn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(x.mul(v).add(b.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),_i((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Ci(d).toVar(),h=Ci(l).toVar(),p=Ci(u).toVar(),g=Pi(a).toVar(),m=Pi(o).toVar(),f=Pi(n).toVar(),y=Pi(i).toVar(),b=Pi(s).toVar(),x=Pi(r).toVar(),T=Pi(t).toVar(),_=Pi(e).toVar(),v=Ci(Gn(1,p)).toVar(),N=Ci(Gn(1,h)).toVar();return Ci(Gn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(x.mul(v).add(b.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),Rb=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=wi(e).toVar(),o=wi(n.bitAnd(wi(7))).toVar(),a=Ci(Tb(o.lessThan(wi(4)),i,s)).toVar(),u=Ci(kn(2,Tb(o.lessThan(wi(4)),s,i))).toVar();return _b(a,Mi(o.bitAnd(wi(1)))).add(_b(u,Mi(o.bitAnd(wi(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),Cb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ci(t).toVar(),a=wi(e).toVar(),u=wi(a.bitAnd(wi(15))).toVar(),l=Ci(Tb(u.lessThan(wi(8)),o,n)).toVar(),d=Ci(Tb(u.lessThan(wi(4)),n,Tb(u.equal(wi(12)).or(u.equal(wi(14))),o,i))).toVar();return _b(l,Mi(u.bitAnd(wi(1)))).add(_b(d,Mi(u.bitAnd(wi(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Eb=Tm([Rb,Cb]),wb=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=Di(e).toVar();return Pi(Eb(n.x,i,s),Eb(n.y,i,s),Eb(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),Mb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ci(t).toVar(),a=Di(e).toVar();return Pi(Eb(a.x,o,n,i),Eb(a.y,o,n,i),Eb(a.z,o,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Bb=Tm([wb,Mb]),Ub=_i((([e])=>{const t=Ci(e).toVar();return kn(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Fb=_i((([e])=>{const t=Ci(e).toVar();return kn(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Ib=Tm([Ub,_i((([e])=>{const t=Pi(e).toVar();return kn(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Pb=Tm([Fb,_i((([e])=>{const t=Pi(e).toVar();return kn(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Lb=_i((([e,t])=>{const r=Ei(t).toVar(),s=wi(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Ei(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),Db=_i((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(Lb(r,Ei(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Lb(e,Ei(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Lb(t,Ei(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(Lb(r,Ei(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Lb(e,Ei(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Lb(t,Ei(4))),t.addAssign(e)})),Vb=_i((([e,t,r])=>{const s=wi(r).toVar(),i=wi(t).toVar(),n=wi(e).toVar();return s.bitXorAssign(i),s.subAssign(Lb(i,Ei(14))),n.bitXorAssign(s),n.subAssign(Lb(s,Ei(11))),i.bitXorAssign(n),i.subAssign(Lb(n,Ei(25))),s.bitXorAssign(i),s.subAssign(Lb(i,Ei(16))),n.bitXorAssign(s),n.subAssign(Lb(s,Ei(4))),i.bitXorAssign(n),i.subAssign(Lb(n,Ei(14))),s.bitXorAssign(i),s.subAssign(Lb(i,Ei(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),Ob=_i((([e])=>{const t=wi(e).toVar();return Ci(t).div(Ci(wi(Ei(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),Gb=_i((([e])=>{const t=Ci(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),kb=Tm([_i((([e])=>{const t=Ei(e).toVar(),r=wi(wi(1)).toVar(),s=wi(wi(Ei(3735928559)).add(r.shiftLeft(wi(2))).add(wi(13))).toVar();return Vb(s.add(wi(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),_i((([e,t])=>{const r=Ei(t).toVar(),s=Ei(e).toVar(),i=wi(wi(2)).toVar(),n=wi().toVar(),o=wi().toVar(),a=wi().toVar();return n.assign(o.assign(a.assign(wi(Ei(3735928559)).add(i.shiftLeft(wi(2))).add(wi(13))))),n.addAssign(wi(s)),o.addAssign(wi(r)),Vb(n,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ei(t).toVar(),n=Ei(e).toVar(),o=wi(wi(3)).toVar(),a=wi().toVar(),u=wi().toVar(),l=wi().toVar();return a.assign(u.assign(l.assign(wi(Ei(3735928559)).add(o.shiftLeft(wi(2))).add(wi(13))))),a.addAssign(wi(n)),u.addAssign(wi(i)),l.addAssign(wi(s)),Vb(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),_i((([e,t,r,s])=>{const i=Ei(s).toVar(),n=Ei(r).toVar(),o=Ei(t).toVar(),a=Ei(e).toVar(),u=wi(wi(4)).toVar(),l=wi().toVar(),d=wi().toVar(),c=wi().toVar();return l.assign(d.assign(c.assign(wi(Ei(3735928559)).add(u.shiftLeft(wi(2))).add(wi(13))))),l.addAssign(wi(a)),d.addAssign(wi(o)),c.addAssign(wi(n)),Db(l,d,c),l.addAssign(wi(i)),Vb(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),_i((([e,t,r,s,i])=>{const n=Ei(i).toVar(),o=Ei(s).toVar(),a=Ei(r).toVar(),u=Ei(t).toVar(),l=Ei(e).toVar(),d=wi(wi(5)).toVar(),c=wi().toVar(),h=wi().toVar(),p=wi().toVar();return c.assign(h.assign(p.assign(wi(Ei(3735928559)).add(d.shiftLeft(wi(2))).add(wi(13))))),c.addAssign(wi(l)),h.addAssign(wi(u)),p.addAssign(wi(a)),Db(c,h,p),c.addAssign(wi(o)),h.addAssign(wi(n)),Vb(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),zb=Tm([_i((([e,t])=>{const r=Ei(t).toVar(),s=Ei(e).toVar(),i=wi(kb(s,r)).toVar(),n=Di().toVar();return n.x.assign(i.bitAnd(Ei(255))),n.y.assign(i.shiftRight(Ei(8)).bitAnd(Ei(255))),n.z.assign(i.shiftRight(Ei(16)).bitAnd(Ei(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ei(t).toVar(),n=Ei(e).toVar(),o=wi(kb(n,i,s)).toVar(),a=Di().toVar();return a.x.assign(o.bitAnd(Ei(255))),a.y.assign(o.shiftRight(Ei(8)).bitAnd(Ei(255))),a.z.assign(o.shiftRight(Ei(16)).bitAnd(Ei(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),$b=Tm([_i((([e])=>{const t=Bi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ci(Nb(t.x,r)).toVar(),n=Ci(Nb(t.y,s)).toVar(),o=Ci(Gb(i)).toVar(),a=Ci(Gb(n)).toVar(),u=Ci(Sb(Eb(kb(r,s),i,n),Eb(kb(r.add(Ei(1)),s),i.sub(1),n),Eb(kb(r,s.add(Ei(1))),i,n.sub(1)),Eb(kb(r.add(Ei(1)),s.add(Ei(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Ib(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Pi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ei().toVar(),n=Ci(Nb(t.x,r)).toVar(),o=Ci(Nb(t.y,s)).toVar(),a=Ci(Nb(t.z,i)).toVar(),u=Ci(Gb(n)).toVar(),l=Ci(Gb(o)).toVar(),d=Ci(Gb(a)).toVar(),c=Ci(Ab(Eb(kb(r,s,i),n,o,a),Eb(kb(r.add(Ei(1)),s,i),n.sub(1),o,a),Eb(kb(r,s.add(Ei(1)),i),n,o.sub(1),a),Eb(kb(r.add(Ei(1)),s.add(Ei(1)),i),n.sub(1),o.sub(1),a),Eb(kb(r,s,i.add(Ei(1))),n,o,a.sub(1)),Eb(kb(r.add(Ei(1)),s,i.add(Ei(1))),n.sub(1),o,a.sub(1)),Eb(kb(r,s.add(Ei(1)),i.add(Ei(1))),n,o.sub(1),a.sub(1)),Eb(kb(r.add(Ei(1)),s.add(Ei(1)),i.add(Ei(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Pb(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),Wb=Tm([_i((([e])=>{const t=Bi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ci(Nb(t.x,r)).toVar(),n=Ci(Nb(t.y,s)).toVar(),o=Ci(Gb(i)).toVar(),a=Ci(Gb(n)).toVar(),u=Pi(Sb(Bb(zb(r,s),i,n),Bb(zb(r.add(Ei(1)),s),i.sub(1),n),Bb(zb(r,s.add(Ei(1))),i,n.sub(1)),Bb(zb(r.add(Ei(1)),s.add(Ei(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Ib(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Pi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ei().toVar(),n=Ci(Nb(t.x,r)).toVar(),o=Ci(Nb(t.y,s)).toVar(),a=Ci(Nb(t.z,i)).toVar(),u=Ci(Gb(n)).toVar(),l=Ci(Gb(o)).toVar(),d=Ci(Gb(a)).toVar(),c=Pi(Ab(Bb(zb(r,s,i),n,o,a),Bb(zb(r.add(Ei(1)),s,i),n.sub(1),o,a),Bb(zb(r,s.add(Ei(1)),i),n,o.sub(1),a),Bb(zb(r.add(Ei(1)),s.add(Ei(1)),i),n.sub(1),o.sub(1),a),Bb(zb(r,s,i.add(Ei(1))),n,o,a.sub(1)),Bb(zb(r.add(Ei(1)),s,i.add(Ei(1))),n.sub(1),o,a.sub(1)),Bb(zb(r,s.add(Ei(1)),i.add(Ei(1))),n,o.sub(1),a.sub(1)),Bb(zb(r.add(Ei(1)),s.add(Ei(1)),i.add(Ei(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Pb(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),Hb=Tm([_i((([e])=>{const t=Ci(e).toVar(),r=Ei(vb(t)).toVar();return Ob(kb(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),_i((([e])=>{const t=Bi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar();return Ob(kb(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Pi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar(),i=Ei(vb(t.z)).toVar();return Ob(kb(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),_i((([e])=>{const t=Oi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar(),i=Ei(vb(t.z)).toVar(),n=Ei(vb(t.w)).toVar();return Ob(kb(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),jb=Tm([_i((([e])=>{const t=Ci(e).toVar(),r=Ei(vb(t)).toVar();return Pi(Ob(kb(r,Ei(0))),Ob(kb(r,Ei(1))),Ob(kb(r,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),_i((([e])=>{const t=Bi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar();return Pi(Ob(kb(r,s,Ei(0))),Ob(kb(r,s,Ei(1))),Ob(kb(r,s,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Pi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar(),i=Ei(vb(t.z)).toVar();return Pi(Ob(kb(r,s,i,Ei(0))),Ob(kb(r,s,i,Ei(1))),Ob(kb(r,s,i,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),_i((([e])=>{const t=Oi(e).toVar(),r=Ei(vb(t.x)).toVar(),s=Ei(vb(t.y)).toVar(),i=Ei(vb(t.z)).toVar(),n=Ei(vb(t.w)).toVar();return Pi(Ob(kb(r,s,i,n,Ei(0))),Ob(kb(r,s,i,n,Ei(1))),Ob(kb(r,s,i,n,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),qb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Pi(e).toVar(),u=Ci(0).toVar(),l=Ci(1).toVar();return ic(o,(()=>{u.addAssign(l.mul($b(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Kb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Pi(e).toVar(),u=Pi(0).toVar(),l=Ci(1).toVar();return ic(o,(()=>{u.addAssign(l.mul(Wb(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Xb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Pi(e).toVar();return Bi(qb(a,o,n,i),qb(a.add(Pi(Ei(19),Ei(193),Ei(17))),o,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Yb=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Pi(e).toVar(),u=Pi(Kb(a,o,n,i)).toVar(),l=Ci(qb(a.add(Pi(Ei(19),Ei(193),Ei(17))),o,n,i)).toVar();return Oi(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Qb=Tm([_i((([e,t,r,s,i,n,o])=>{const a=Ei(o).toVar(),u=Ci(n).toVar(),l=Ei(i).toVar(),d=Ei(s).toVar(),c=Ei(r).toVar(),h=Ei(t).toVar(),p=Bi(e).toVar(),g=Pi(jb(Bi(h.add(d),c.add(l)))).toVar(),m=Bi(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=Bi(Bi(Ci(h),Ci(c)).add(m)).toVar(),y=Bi(f.sub(p)).toVar();return Si(a.equal(Ei(2)),(()=>Io(y.x).add(Io(y.y)))),Si(a.equal(Ei(3)),(()=>Xo(Io(y.x),Io(y.y)))),ta(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),_i((([e,t,r,s,i,n,o,a,u])=>{const l=Ei(u).toVar(),d=Ci(a).toVar(),c=Ei(o).toVar(),h=Ei(n).toVar(),p=Ei(i).toVar(),g=Ei(s).toVar(),m=Ei(r).toVar(),f=Ei(t).toVar(),y=Pi(e).toVar(),b=Pi(jb(Pi(f.add(p),m.add(h),g.add(c)))).toVar();b.subAssign(.5),b.mulAssign(d),b.addAssign(.5);const x=Pi(Pi(Ci(f),Ci(m),Ci(g)).add(b)).toVar(),T=Pi(x.sub(y)).toVar();return Si(l.equal(Ei(2)),(()=>Io(T.x).add(Io(T.y)).add(Io(T.z)))),Si(l.equal(Ei(3)),(()=>Xo(Xo(Io(T.x),Io(T.y)),Io(T.z)))),ta(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),Zb=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Nb(n.x,o),Nb(n.y,a)).toVar(),l=Ci(1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Qb(u,e,t,o,a,i,s)).toVar();l.assign(Ko(l,r))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Jb=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Nb(n.x,o),Nb(n.y,a)).toVar(),l=Bi(1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Qb(u,e,t,o,a,i,s)).toVar();Si(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),ex=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Nb(n.x,o),Nb(n.y,a)).toVar(),l=Pi(1e6,1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Qb(u,e,t,o,a,i,s)).toVar();Si(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),tx=Tm([Zb,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Pi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Pi(Nb(n.x,o),Nb(n.y,a),Nb(n.z,u)).toVar(),d=Ci(1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Qb(l,e,t,r,o,a,u,i,s)).toVar();d.assign(Ko(d,n))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),rx=Tm([Jb,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Pi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Pi(Nb(n.x,o),Nb(n.y,a),Nb(n.z,u)).toVar(),d=Bi(1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Qb(l,e,t,r,o,a,u,i,s)).toVar();Si(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),sx=Tm([ex,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Pi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Pi(Nb(n.x,o),Nb(n.y,a),Nb(n.z,u)).toVar(),d=Pi(1e6,1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Qb(l,e,t,r,o,a,u,i,s)).toVar();Si(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),ix=_i((([e])=>{const t=e.y,r=e.z,s=Pi().toVar();return Si(t.lessThan(1e-4),(()=>{s.assign(Pi(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(So(i)).mul(6).toVar();const n=Ei($o(i)),o=i.sub(Ci(n)),a=r.mul(t.oneMinus()),u=r.mul(t.mul(o).oneMinus()),l=r.mul(t.mul(o.oneMinus()).oneMinus());Si(n.equal(Ei(0)),(()=>{s.assign(Pi(r,l,a))})).ElseIf(n.equal(Ei(1)),(()=>{s.assign(Pi(u,r,a))})).ElseIf(n.equal(Ei(2)),(()=>{s.assign(Pi(a,r,l))})).ElseIf(n.equal(Ei(3)),(()=>{s.assign(Pi(a,u,r))})).ElseIf(n.equal(Ei(4)),(()=>{s.assign(Pi(l,a,r))})).Else((()=>{s.assign(Pi(r,a,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),nx=_i((([e])=>{const t=Pi(e).toVar(),r=Ci(t.x).toVar(),s=Ci(t.y).toVar(),i=Ci(t.z).toVar(),n=Ci(Ko(r,Ko(s,i))).toVar(),o=Ci(Xo(r,Xo(s,i))).toVar(),a=Ci(o.sub(n)).toVar(),u=Ci().toVar(),l=Ci().toVar(),d=Ci().toVar();return d.assign(o),Si(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),Si(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Si(r.greaterThanEqual(o),(()=>{u.assign(s.sub(i).div(a))})).ElseIf(s.greaterThanEqual(o),(()=>{u.assign(On(2,i.sub(r).div(a)))})).Else((()=>{u.assign(On(4,r.sub(s).div(a)))})),u.mulAssign(1/6),Si(u.lessThan(0),(()=>{u.addAssign(1)}))})),Pi(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),ox=_i((([e])=>{const t=Pi(e).toVar(),r=Vi(qn(t,Pi(.04045))).toVar(),s=Pi(t.div(12.92)).toVar(),i=Pi(sa(Xo(t.add(Pi(.055)),Pi(0)).div(1.055),Pi(2.4))).toVar();return da(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),ax=(e,t)=>{e=Ci(e),t=Ci(t);const r=Bi(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return ga(e.sub(r),e.add(r),t)},ux=(e,t,r,s)=>da(e,t,r[s].clamp()),lx=(e,t,r,s,i)=>da(e,t,ax(r,s[i])),dx=_i((([e,t,r])=>{const s=Ro(e).toVar("nDir"),i=Gn(Ci(.5).mul(t.sub(r)),Xu).div(s).toVar("rbmax"),n=Gn(Ci(-.5).mul(t.sub(r)),Xu).div(s).toVar("rbmin"),o=Pi().toVar("rbminmax");o.x=s.x.greaterThan(Ci(0)).select(i.x,n.x),o.y=s.y.greaterThan(Ci(0)).select(i.y,n.y),o.z=s.z.greaterThan(Ci(0)).select(i.z,n.z);const a=Ko(Ko(o.x,o.y),o.z).toVar("correction");return Xu.add(s.mul(a)).toVar("boxIntersection").sub(r)})),cx=_i((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(kn(r,r).sub(kn(s,s)))),n}));var hx=Object.freeze({__proto__:null,BRDF_GGX:Vh,BRDF_Lambert:Nh,BasicShadowFilter:Xy,Break:nc,Continue:()=>au("continue").append(),DFGApprox:Oh,D_GGX:Ph,Discard:uu,EPSILON:uo,F_Schlick:vh,Fn:_i,INFINITY:lo,If:Si,Loop:ic,NodeAccess:Ss,NodeShaderStage:_s,NodeType:Ns,NodeUpdateType:vs,PCFShadowFilter:Yy,PCFSoftShadowFilter:Qy,PI:co,PI2:ho,Return:()=>au("return").append(),Schlick_to_F0:kh,ScriptableNodeResources:py,ShaderNode:mi,TBNViewMatrix:$l,VSMShadowFilter:Zy,V_GGX_SmithCorrelated:Fh,abs:Io,acesFilmicToneMapping:Jf,acos:Uo,add:On,addMethodChaining:$s,addNodeElement:function(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:sy,all:po,alphaT:yn,and:Yn,anisotropy:bn,anisotropyB:Tn,anisotropyT:xn,any:go,append:Ai,arrayBuffer:e=>fi(new Gs(e,"ArrayBuffer")),asin:Bo,assign:Pn,atan:Fo,atan2:qo,atomicAdd:(e,t,r=null)=>Dy(Py.ATOMIC_ADD,e,t,r),atomicAnd:(e,t,r=null)=>Dy(Py.ATOMIC_AND,e,t,r),atomicFunc:Dy,atomicMax:(e,t,r=null)=>Dy(Py.ATOMIC_MAX,e,t,r),atomicMin:(e,t,r=null)=>Dy(Py.ATOMIC_MIN,e,t,r),atomicOr:(e,t,r=null)=>Dy(Py.ATOMIC_OR,e,t,r),atomicStore:(e,t,r=null)=>Dy(Py.ATOMIC_STORE,e,t,r),atomicSub:(e,t,r=null)=>Dy(Py.ATOMIC_SUB,e,t,r),atomicXor:(e,t,r=null)=>Dy(Py.ATOMIC_XOR,e,t,r),attenuationColor:Un,attenuationDistance:Bn,attribute:hu,attributeArray:(e,t="float")=>{const r=ms(t),s=new of(e,r);return df(s,t,e)},backgroundBlurriness:yf,backgroundIntensity:bf,backgroundRotation:xf,batch:Jd,billboarding:Rm,bitAnd:eo,bitNot:to,bitOr:ro,bitXor:so,bitangentGeometry:Dl,bitangentLocal:Vl,bitangentView:Ol,bitangentWorld:Gl,bitcast:Ho,blendBurn:Ef,blendColor:Uf,blendDodge:wf,blendOverlay:Bf,blendScreen:Mf,blur:Op,bool:Mi,buffer:Tl,bufferAttribute:qa,bumpMap:Zl,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),Ef(e)),bvec2:Ii,bvec3:Vi,bvec4:zi,bypass:ru,cache:eu,call:Dn,cameraFar:vu,cameraNear:_u,cameraNormalMatrix:Cu,cameraPosition:Eu,cameraProjectionMatrix:Nu,cameraProjectionMatrixInverse:Su,cameraViewMatrix:Au,cameraWorldMatrix:Ru,cbrt:ua,cdl:Vf,ceil:Ao,checker:xb,cineonToneMapping:Qf,clamp:ca,clearcoat:dn,clearcoatRoughness:cn,code:oy,color:Ri,colorSpaceToWorking:Va,colorToDirection:e=>fi(e).mul(2).sub(1),compute:Za,cond:_a,context:Na,convert:qi,convertColorSpace:(e,t,r)=>fi(new Ia(fi(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:ef(e,...t),cos:wo,cross:ra,cubeTexture:bl,dFdx:Oo,dFdy:Go,dashSize:An,defaultBuildStages:Rs,defaultShaderStages:As,defined:pi,degrees:yo,deltaTime:vm,densityFog:_y,depth:zc,depthPass:(e,t)=>fi(new qf(qf.DEPTH,e,t)),difference:ea,diffuseColor:on,directPointLight:yb,directionToColor:nh,dispersion:Fn,distance:Jo,div:zn,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),wf(e)),dot:ta,drawIndex:qd,dynamicBufferAttribute:Ka,element:ji,emissive:an,equal:Wn,equals:mo,equirectUV:lh,exp:bo,exp2:xo,expression:au,faceDirection:tl,faceForward:ma,float:Ci,floor:So,fog:yy,fract:Co,frameGroup:Qi,frameId:Nm,frontFacing:el,fwidth:Wo,gain:(e,t)=>e.lessThan(.5)?gm(e.mul(2),t).div(2):Gn(1,gm(kn(Gn(1,e),2),t).div(2)),gapSize:Rn,getConstNodeType:gi,getCurrentStack:Ni,getDirection:Pp,getDistanceAttenuation:ab,getGeometryRoughness:Bh,getNormalFromDepth:sf,getParallaxCorrectNormal:dx,getRoughness:Uh,getScreenPosition:rf,getShIrradianceAt:cx,getTextureIndex:dm,getViewPosition:tf,glsl:(e,t)=>oy(e,t,"glsl"),glslFn:(e,t)=>uy(e,t,"glsl"),grayscale:Ff,greaterThan:qn,greaterThanEqual:Xn,hash:pm,highPrecisionModelNormalViewMatrix:Hu,highPrecisionModelViewMatrix:Wu,hue:Lf,instance:Xd,instanceIndex:$d,instancedArray:(e,t="float")=>{const r=ms(t),s=new nf(e,r);return df(s,t,e)},instancedBufferAttribute:Xa,instancedDynamicBufferAttribute:Ya,instancedMesh:Qd,int:Ei,inverseSqrt:No,invocationLocalIndex:jd,invocationSubgroupIndex:Hd,ior:En,iridescence:gn,iridescenceIOR:mn,iridescenceThickness:fn,ivec2:Ui,ivec3:Li,ivec4:Gi,js:(e,t)=>oy(e,t,"js"),label:Sa,length:Lo,lengthSq:la,lessThan:jn,lessThanEqual:Kn,lightPosition:Gy,lightTargetDirection:$y,lightTargetPosition:ky,lightViewPosition:zy,lightingContext:gc,lights:(e=[])=>fi(new jy).setLights(e),linearDepth:$c,linearToneMapping:Xf,localId:My,log:To,log2:_o,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul(To(r.div(t)));return Ci(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),ic(...e)),luminance:Df,mat2:$i,mat3:Wi,mat4:Hi,matcapUV:og,materialAOMap:Dd,materialAlphaTest:td,materialAnisotropy:Td,materialAnisotropyVector:Vd,materialAttenuationColor:Ed,materialAttenuationDistance:Cd,materialClearcoat:gd,materialClearcoatNormal:fd,materialClearcoatRoughness:md,materialColor:rd,materialDispersion:Pd,materialEmissive:id,materialIOR:Rd,materialIridescence:_d,materialIridescenceIOR:vd,materialIridescenceThickness:Nd,materialLightMap:Ld,materialLineDashOffset:Fd,materialLineDashSize:Md,materialLineGapSize:Bd,materialLineScale:wd,materialLineWidth:Ud,materialMetalness:hd,materialNormal:pd,materialOpacity:nd,materialPointWidth:Id,materialReference:wl,materialReflectivity:dd,materialRefractionRatio:hl,materialRotation:yd,materialRoughness:cd,materialSheen:bd,materialSheenRoughness:xd,materialShininess:sd,materialSpecular:od,materialSpecularColor:ud,materialSpecularIntensity:ad,materialSpecularStrength:ld,materialThickness:Ad,materialTransmission:Sd,max:Xo,maxMipLevel:yu,metalness:ln,min:Ko,mix:da,mixElement:ya,mod:Yo,modInt:$n,modelDirection:Lu,modelNormalMatrix:ku,modelPosition:Vu,modelScale:Ou,modelViewMatrix:$u,modelViewPosition:Gu,modelViewProjection:Gd,modelWorldMatrix:Du,modelWorldMatrixInverse:zu,morphReference:dc,mrt:hm,mul:kn,mx_aastep:ax,mx_cell_noise_float:(e=pu())=>Hb(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>Ci(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=pu(),t=3,r=2,s=.5,i=1)=>qb(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec2:(e=pu(),t=3,r=2,s=.5,i=1)=>Xb(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec3:(e=pu(),t=3,r=2,s=.5,i=1)=>Kb(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec4:(e=pu(),t=3,r=2,s=.5,i=1)=>Yb(e,Ei(t),r,s).mul(i),mx_hsvtorgb:ix,mx_noise_float:(e=pu(),t=1,r=0)=>$b(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=pu(),t=1,r=0)=>Wb(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=pu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return Oi(Wb(e),$b(e.add(Bi(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=pu())=>ux(e,t,r,"x"),mx_ramptb:(e,t,r=pu())=>ux(e,t,r,"y"),mx_rgbtohsv:nx,mx_safepower:(e,t=1)=>(e=Ci(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=pu())=>lx(e,t,r,s,"x"),mx_splittb:(e,t,r,s=pu())=>lx(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:ox,mx_transform_uv:(e=1,t=0,r=pu())=>r.mul(e).add(t),mx_worley_noise_float:(e=pu(),t=1)=>tx(e.convert("vec2|vec3"),t,Ei(1)),mx_worley_noise_vec2:(e=pu(),t=1)=>rx(e.convert("vec2|vec3"),t,Ei(1)),mx_worley_noise_vec3:(e=pu(),t=1)=>sx(e.convert("vec2|vec3"),t,Ei(1)),negate:Do,neutralToneMapping:iy,nodeArray:bi,nodeImmutable:Ti,nodeObject:fi,nodeObjects:yi,nodeProxy:xi,normalFlat:il,normalGeometry:rl,normalLocal:sl,normalMap:Kl,normalView:nl,normalWorld:ol,normalize:Ro,not:Zn,notEqual:Hn,numWorkgroups:Ey,objectDirection:Mu,objectGroup:Ji,objectPosition:Uu,objectScale:Fu,objectViewPosition:Iu,objectWorldMatrix:Bu,oneMinus:Vo,or:Qn,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=_m)=>e.fract(),oscSine:(e=_m)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=_m)=>e.fract().round(),oscTriangle:(e=_m)=>e.add(.5).fract().mul(2).sub(1).abs(),output:Sn,outputStruct:lm,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),Bf(e)),overloadingFn:Tm,parabola:gm,parallaxDirection:Wl,parallaxUV:(e,t)=>e.sub(Wl.mul(t)),parameter:(e,t)=>fi(new im(e,t)),pass:(e,t,r)=>fi(new qf(qf.COLOR,e,t,r)),passTexture:(e,t)=>fi(new Hf(e,t)),pcurve:(e,t,r)=>sa(zn(sa(e,t),On(sa(e,t),sa(Gn(1,e),r))),1/t),perspectiveDepthToViewZ:Oc,pmremTexture:Wp,pointUV:pf,pointWidth:Cn,positionGeometry:ju,positionLocal:qu,positionPrevious:Ku,positionView:Qu,positionViewDirection:Zu,positionWorld:Xu,positionWorldDirection:Yu,posterize:Gf,pow:sa,pow2:ia,pow3:na,pow4:oa,property:sn,radians:fo,rand:fa,range:Ay,rangeFog:xy,reciprocal:zo,reference:Rl,referenceBuffer:Cl,reflect:Zo,reflectVector:ml,reflectView:pl,reflector:e=>fi(new jm(e)),refract:pa,refractVector:fl,refractView:gl,reinhardToneMapping:Yf,remainder:oo,remap:iu,remapClamp:nu,renderGroup:Zi,renderOutput:du,rendererReference:za,rotate:hg,rotateUV:Sm,roughness:un,round:ko,rtt:ef,sRGBTransferEOTF:Ma,sRGBTransferOETF:Ba,sampler:e=>(!0===e.isNode?e:xu(e)).convert("sampler"),saturate:ha,saturation:If,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),Mf(e)),screenCoordinate:_c,screenSize:Tc,screenUV:xc,scriptable:my,scriptableValue:dy,select:Ta,setCurrentStack:vi,shaderStages:Cs,shadow:nb,sharedUniformGroup:Yi,sheen:hn,sheenRoughness:pn,shiftLeft:io,shiftRight:no,shininess:Nn,sign:Po,sin:Eo,sinc:(e,t)=>Eo(co.mul(t.mul(e).sub(1))).div(co.mul(t.mul(e).sub(1))),skinning:e=>fi(new tc(e)),skinningReference:rc,smoothstep:ga,smoothstepElement:ba,specularColor:_n,specularF90:vn,spherizeUV:Am,split:(e,t)=>fi(new Ls(fi(e),t)),spritesheetUV:wm,sqrt:vo,stack:om,step:Qo,storage:df,storageBarrier:()=>Uy("storage").append(),storageObject:(e,t,r)=>fi(new lf(e,t,r).setBufferObject(!0)),storageTexture:_f,string:(e="")=>fi(new Gs(e,"string")),sub:Gn,subgroupIndex:Wd,subgroupSize:By,tan:Mo,tangentGeometry:Ml,tangentLocal:Bl,tangentView:Ul,tangentWorld:Fl,temp:Ca,texture:xu,texture3D:Tg,textureBarrier:()=>Uy("texture").append(),textureBicubic:np,textureCubeUV:Lp,textureLoad:Tu,textureSize:mu,textureStore:(e,t,r)=>{const s=_f(e,t,r);return null!==r&&s.append(),s},thickness:Mn,threshold:(e,t)=>da(Pi(0),e,Df(e).sub(t).max(0)),time:_m,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),vm.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),_m.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),_m.mul(e)),toOutputColorSpace:Pa,toWorkingColorSpace:La,toneMapping:Wa,toneMappingExposure:Ha,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>fi(new Kf(t,r,fi(s),fi(i),fi(n))),transformDirection:aa,transformNormal:dl,transformNormalToView:cl,transformedBentNormalView:Hl,transformedBitangentView:kl,transformedBitangentWorld:zl,transformedClearcoatNormalView:ll,transformedNormalView:al,transformedNormalWorld:ul,transformedTangentView:Il,transformedTangentWorld:Pl,transmission:wn,transpose:jo,tri:mm,tri3:fm,triNoise3D:ym,triplanarTexture:(...e)=>Bm(...e),triplanarTextures:Bm,trunc:$o,tslFn:(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),_i(...e)),uint:wi,uniform:tn,uniformArray:Nl,uniformGroup:Xi,uniforms:(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),fi(new vl(e,t))),userData:(e,t,r)=>fi(new vf(e,t,r)),uv:pu,uvec2:Fi,uvec3:Di,uvec4:ki,varying:wa,varyingProperty:nn,vec2:Bi,vec3:Pi,vec4:Oi,vectorComponents:Es,velocity:Cf,vertexColor:(...e)=>fi(new cf(...e)),vertexIndex:zd,vibrance:Pf,viewZToLogarithmicDepth:Gc,viewZToOrthographicDepth:Dc,viewZToPerspectiveDepth:Vc,viewport:vc,viewportBottomLeft:Ec,viewportCoordinate:Sc,viewportDepthTexture:Pc,viewportLinearDepth:Wc,viewportMipTexture:Uc,viewportResolution:Rc,viewportSafeUV:Cm,viewportSharedTexture:$f,viewportSize:Nc,viewportTexture:Bc,viewportTopLeft:Cc,viewportUV:Ac,wgsl:(e,t)=>oy(e,t,"wgsl"),wgslFn:(e,t)=>uy(e,t,"wgsl"),workgroupArray:(e,t)=>fi(new Iy("Workgroup",e,t)),workgroupBarrier:()=>Uy("workgroup").append(),workgroupId:wy,workingToColorSpace:Da,xor:Jn});const px=new sm;class gx extends Eg{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(px,Ae),px.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(px,Ae),px.a=1,n=!0;else if(!0===i.isNode){const r=this.get(e),n=i;px.copy(s._clearColor);let o=r.backgroundMesh;if(void 0===o){const e=Na(Oi(n).mul(bf),{getUV:()=>xf.mul(ol),getTextureLevel:()=>yf});let t=Gd();t=t.setZ(t.w);const s=new Yc;s.name="Background.material",s.side=x,s.depthTest=!1,s.depthWrite=!1,s.fog=!1,s.lights=!1,s.vertexNode=t,s.colorNode=e,r.backgroundMeshNode=e,r.backgroundMesh=o=new k(new Me(1,32,32),s),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)}}const a=n.getCacheKey();r.backgroundCacheKey!==a&&(r.backgroundMeshNode.node=Oi(n).mul(bf),r.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,r.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);if(!0===s.autoClear||!0===n){const e=r.clearColorValue;e.r=px.r,e.g=px.g,e.b=px.b,e.a=px.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let mx=0;class fx{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=mx++}}class yx{constructor(e,t,r,s,i,n,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.monitor=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new fx(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class bx{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class xx{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class Tx{constructor(e,t){this.isNodeVar=!0,this.name=e,this.type=t}}class _x extends Tx{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class vx{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let Nx=0;class Sx{constructor(e=null){this.id=Nx++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class Ax{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class Rx extends Ax{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class Cx extends Ax{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class Ex extends Ax{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class wx extends Ax{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class Mx extends Ax{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class Bx extends Ax{constructor(e,t=new i){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class Ux extends Ax{constructor(e,t=new n){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class Fx extends Rx{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Ix extends Cx{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Px extends Ex{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Lx extends wx{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Dx extends Mx{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Vx extends Bx{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class Ox extends Ux{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}const Gx=[.125,.215,.35,.446,.526,.582],kx=20,zx=new xe(-1,1,1,-1,0,1),$x=new Ue(90,1),Wx=new e;let Hx=null,jx=0,qx=0;const Kx=(1+Math.sqrt(5))/2,Xx=1/Kx,Yx=[new r(-Kx,Xx,0),new r(Kx,Xx,0),new r(-Xx,0,Kx),new r(Xx,0,Kx),new r(0,Kx,-Xx),new r(0,Kx,Xx),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],Qx=[3,1,5,0,4,2],Zx=Pp(pu(),hu("faceIndex")).normalize(),Jx=Pi(Zx.x,Zx.y.negate(),Zx.z);class eT{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100){if(!1===this._hasInitialized)return console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead."),this.fromSceneAsync(e,t,r,s);Hx=this._renderer.getRenderTarget(),jx=this._renderer.getActiveCubeFace(),qx=this._renderer.getActiveMipmapLevel(),this._setSize(256);const i=this._allocateTargets();return i.depthBuffer=!0,this._sceneToCubeUV(e,r,s,i),t>0&&this._blur(i,0,0,t),this._applyPMREM(i),this._cleanup(i),i}async fromSceneAsync(e,t=0,r=.1,s=100){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s)}fromEquirectangular(e,t=null){return!1===this._hasInitialized?(console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this.fromEquirectangularAsync(e,t)):this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){return!1===this._hasInitialized?(console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this.fromCubemapAsync(e,t)):this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=iT(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=nT(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Hx,jx,qx),e.scissorTest=!1,rT(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===T||e.mapping===_?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Hx=this._renderer.getRenderTarget(),jx=this._renderer.getActiveCubeFace(),qx=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:$,minFilter:$,generateMipmaps:!1,type:ye,format:Fe,colorSpace:Ae},i=tT(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=tT(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const o=e-4+1+Gx.length;for(let a=0;a<o;a++){const o=Math.pow(2,n);r.push(o);let u=1/o;a>e-4?u=Gx[a-e+4-1]:0===a&&(u=0),s.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,b=new Float32Array(m*g*p),x=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=Qx[e];b.set(s,m*g*i),x.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new Te;_.setAttribute("position",new ve(b,m)),_.setAttribute("uv",new ve(x,f)),_.setAttribute("faceIndex",new ve(T,y)),t.push(_),i.push(new k(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=Nl(new Array(kx).fill(0)),n=tn(new r(0,1,0)),o=tn(0),a=Ci(kx),u=tn(0),l=tn(1),d=xu(null),c=tn(0),h=Ci(1/t),p=Ci(1/s),g=Ci(e),m={n:a,latitudinal:u,weights:i,poleAxis:n,outputDirection:Jx,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=sT("blur");return f.uniforms=m,f.fragmentNode=Op({...m,latitudinal:u.equal(1)}),f}(i,e,t)}return i}async _compileMaterial(e){const t=new k(this._lodPlanes[0],e);await this._renderer.compile(t,zx)}_sceneToCubeUV(e,t,r,s){const i=$x;i.near=t,i.far=r;const n=[-1,1,-1,-1,-1,-1],o=[1,1,1,-1,-1,-1],a=this._renderer,u=a.autoClear;a.getClearColor(Wx),a.autoClear=!1;let l=this._backgroundBox;if(null===l){const e=new Q({name:"PMREM.Background",side:x,depthWrite:!1,depthTest:!1});l=new k(new O,e)}let d=!1;const c=e.background;c?c.isColor&&(l.material.color.copy(c),e.background=null,d=!0):(l.material.color.copy(Wx),d=!0),a.setRenderTarget(s),a.clear(),d&&a.render(l,i);for(let t=0;t<6;t++){const r=t%3;0===r?(i.up.set(0,n[t],0),i.lookAt(o[t],0,0)):1===r?(i.up.set(0,0,n[t]),i.lookAt(0,o[t],0)):(i.up.set(0,n[t],0),i.lookAt(0,0,o[t]));const u=this._cubeSize;rT(s,r*u,t>2?u:0,u,u),a.render(e,i)}a.autoClear=u,e.background=c}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===T||e.mapping===_;s?null===this._cubemapMaterial&&(this._cubemapMaterial=iT(e)):null===this._equirectMaterial&&(this._equirectMaterial=nT(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const o=this._cubeSize;rT(t,0,0,3*o,2*o),r.setRenderTarget(t),r.render(n,zx)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=Yx[(s-t-1)%Yx.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=u.uniforms,c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):kx;g>kx&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<kx;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const b=this._sizeLods[s];rT(t,3*b*(s>y-4?s-y+4:0),4*(this._cubeSize-b),3*b,2*b),a.setRenderTarget(t),a.render(l,zx)}}function tT(e,t,r){const s=new ge(e,t,r);return s.texture.mapping=Be,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function rT(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function sT(e){const t=new Yc;return t.depthTest=!1,t.depthWrite=!1,t.blending=G,t.name=`PMREM_${e}`,t}function iT(e){const t=sT("cubemap");return t.fragmentNode=bl(e,Jx),t}function nT(e){const t=sT("equirect");return t.fragmentNode=xu(e,lh(Jx),0),t}const oT=new WeakMap,aT=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),uT=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class lT{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=om(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Sx,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=oT.get(this.renderer);return void 0===e&&(e=new Ng,oT.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new ge(e,t,r)}createCubeRenderTarget(e,t){return new dh(e,t)}createPMREMGenerator(){return new eT(this.renderer)}includes(e){return this.nodes.includes(e)}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new fx(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new fx(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Cs)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==vs.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==vs.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==vs.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===$||e.magFilter===Ie||e.magFilter===Pe||e.magFilter===M||e.minFilter===$||e.minFilter===Ie||e.minFilter===Pe||e.minFilter===M}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new Sx(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return uT(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${uT(n.r)}, ${uT(n.g)}, ${uT(n.b)} )`;const o=this.getTypeLength(i),a=this.getComponentType(i),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(o>4&&n&&(n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new bx(e,t);return r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===y)return"int";if(t===f)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;const r=gs(e);return("float"===t?"":t[0])+r}getTypeFromArray(e){return aT.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof Le||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=om(this.stack),this.stacks.push(Ni()||this.stack),vi(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,vi(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new bx("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t=this.shaderStage){const r=this.getDataFromNode(e,t);if(void 0===r.structType){const s=this.structs.index++;e.name=`StructType${s}`,this.structs[t].push(e),r.structType=e}return e}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const o=this.uniforms.index++;n=new xx(s||"nodeUniform"+o,t,e),this.uniforms[r].push(n),i.uniform=n}return n}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage){const i=this.getDataFromNode(e,s);let n=i.variable;if(void 0===n){const e=this.vars[s]||(this.vars[s]=[]);null===t&&(t="nodeVar"+e.length),n=new Tx(t,r),e.push(n),i.variable=n}return n}getVaryingFromNode(e,t=null,r=e.getNodeType(this)){const s=this.getDataFromNode(e,"any");let i=s.varying;if(void 0===i){const e=this.varyings,n=e.length;null===t&&(t="nodeVarying"+n),i=new _x(t,r),e.push(i),s.varying=i}return i}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new vx("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}buildFunctionNode(e){const t=new ay,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new im(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.cache,n=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new Sx,this.stack=om();for(const r of Rs)this.setBuildStage(r),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.cache=i,this.stack=o,this.setBuildStage(n),a}getFunctionOperator(){return null}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t){return`${this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new Yc),e.build(this)}else this.addFlow("compute",e);for(const e of Rs){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Cs){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new Fx(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new Ix(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new Px(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new Lx(e);if("color"===t)return new Dx(e);if("mat3"===t)return new Vx(e);if("mat4"===t)return new Ox(e);throw new Error(`Uniform "${t}" not declared.`)}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===s&&4===i?`${this.getType(r)}(${e}[0].xy, ${e}[1].xy)`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?this.format(`${e}.${"xyz".slice(0,i)}`,this.getTypeFromLength(i,this.getComponentType(t)),r):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${De} - Node System\n`}}class dT{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.startTime=null,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class cT{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}cT.isNodeFunctionInput=!0;class hT extends ob{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setup(e){super.setup(e);const t=e.context.lightingModel,r=this.colorNode,s=$y(this.light),i=e.context.reflectedLight;t.direct({lightDirection:s,lightColor:r,reflectedLight:i},e.stack,e)}}const pT=new n,gT=new n;let mT=null;class fT extends ob{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=tn(new r).setGroup(Zi),this.halfWidth=tn(new r).setGroup(Zi),this.updateType=vs.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;gT.identity(),pT.copy(t.matrixWorld),pT.premultiply(r),gT.extractRotation(pT),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(gT),this.halfHeight.value.applyMatrix4(gT)}setup(e){let t,r;super.setup(e),e.isAvailable("float32Filterable")?(t=xu(mT.LTC_FLOAT_1),r=xu(mT.LTC_FLOAT_2)):(t=xu(mT.LTC_HALF_1),r=xu(mT.LTC_HALF_2));const{colorNode:s,light:i}=this,n=e.context.lightingModel,o=zy(i),a=e.context.reflectedLight;n.directRectArea({lightColor:s,lightPosition:o,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:a,ltc_1:t,ltc_2:r},e.stack,e)}static setLTC(e){mT=e}}class yT extends ob{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=tn(0).setGroup(Zi),this.penumbraCosNode=tn(0).setGroup(Zi),this.cutoffDistanceNode=tn(0).setGroup(Zi),this.decayExponentNode=tn(0).setGroup(Zi)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return ga(t,r,e)}setup(e){super.setup(e);const t=e.context.lightingModel,{colorNode:r,cutoffDistanceNode:s,decayExponentNode:i,light:n}=this,o=zy(n).sub(Qu),a=o.normalize(),u=a.dot($y(n)),l=this.getSpotAttenuation(u),d=o.length(),c=ab({lightDistance:d,cutoffDistance:s,decayExponent:i}),h=r.mul(l).mul(c),p=e.context.reflectedLight;t.direct({lightDirection:a,lightColor:h,reflectedLight:p},e.stack,e)}}class bT extends yT{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=xu(t,Bi(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class xT extends ob{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class TT extends ob{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=Gy(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=tn(new e).setGroup(Zi)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=nl.dot(s).mul(.5).add(.5),n=da(r,t,i);e.context.irradiance.addAssign(n)}}class _T extends ob{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=Nl(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=cx(ol,this.lightProbe);e.context.irradiance.addAssign(t)}}class vT{parseFunction(){console.warn("Abstract function.")}}class NT{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}NT.isNodeFunction=!0;const ST=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,AT=/[a-z_0-9]+/gi,RT="#pragma main";class CT extends NT{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(RT),r=-1!==t?e.slice(t+12):e,s=r.match(ST);if(null!==s&&5===s.length){const i=s[4],n=[];let o=null;for(;null!==(o=AT.exec(i));)n.push(o);const a=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];a.push(new cT(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:a,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:o}=this;let a=`${s} ${e} ( ${i.trim()} )`;""!==o&&(a=`${o} ${a}`),t=n+a+r}else t="";return t}}class ET extends vT{parseFunction(e){return new CT(e)}}const wT=new WeakMap;class MT extends Eg{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new dT,this.nodeBuilderCache=new Map,this.callHashCache=new Ng,this.groupsData=new Ng}updateGroup(e){const t=e.groupNode,r=t.name;if(r===Ji.name)return!0;if(r===Zi.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===Qi.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}const s=[t,e];let i=this.groupsData.get(s);return void 0===i&&this.groupsData.set(s,i={}),i.version!==t.version&&(i.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new yx(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.monitor,e.transforms)}getEnvironmentNode(e){return e.environmentNode||this.get(e).environmentNode||null}getBackgroundNode(e){return e.backgroundNode||this.get(e).backgroundNode||null}getFogNode(e){return e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){const r=[e,t],s=this.renderer.info.calls;let i=this.callHashCache.get(r);if(void 0===i||i.callId!==s){const n=this.getEnvironmentNode(e),o=this.getFogNode(e),a=[];t&&a.push(t.getCacheKey(!0)),n&&a.push(n.getCacheKey()),o&&a.push(o.getCacheKey()),a.push(this.renderer.shadowMap.enabled?1:0),i={callId:s,cacheKey:ls(a)},this.callHashCache.set(r,i)}return i.cacheKey}updateScene(e){this.updateEnvironment(e),this.updateFog(e),this.updateBackground(e)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){let s=null;if(!0===r.isCubeTexture||r.mapping===j||r.mapping===q||r.mapping===Be)if(e.backgroundBlurriness>0||r.mapping===Be)s=Wp(r);else{let e;e=!0===r.isCubeTexture?bl(r):xu(r),s=mh(e)}else!0===r.isTexture?s=xu(r,xc.flipY()).setUpdateMatrix(!0):!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r);t.backgroundNode=s,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){let e=null;if(r.isFogExp2){const t=Rl("color","color",r).setGroup(Zi),s=Rl("density","float",r).setGroup(Zi);e=_y(t,s)}else if(r.isFog){const t=Rl("color","color",r).setGroup(Zi),s=Rl("near","float",r).setGroup(Zi),i=Rl("far","float",r).setGroup(Zi);e=xy(t,s,i)}else console.error("WebGPUNodes: Unsupported fog configuration.",r);t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){let e=null;!0===r.isCubeTexture?e=bl(r):!0===r.isTexture?e=xu(r):console.error("Nodes: Unsupported environment configuration.",r),t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return wT.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=xu(e,xc).renderOutput(t.toneMapping,t.currentColorSpace);return wT.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new dT,this.nodeBuilderCache=new Map}}const BT=new me;class UT{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",null===e?(this.intersectionPlanes=[],this.unionPlanes=[],this.viewNormalMatrix=new i,this.clippingGroupContexts=new WeakMap,this.shadowPass=!1):(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix),this.parentVersion=null}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){BT.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=BT.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=BT.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowNodeMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+n){o.length=a+n;for(let e=0;e<n;e++)o[a+e]=new s;r=!0}this.projectPlanes(i,o,a),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new UT(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class FT{constructor(e,t){this.scene=e,this.camera=t}clone(){return Object.assign(new this.constructor,this)}}class IT{constructor(){this.lists=new Ng}get(e,t){const r=this.lists,s=[e,t];let i=r.get(s);return void 0===i&&(i=new FT(e,t),r.set(s,i)),i}dispose(){this.lists=new Ng}}class PT{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const LT=new jy;class DT extends Ng{constructor(){super()}createNode(e=[]){return(new jy).setLights(e)}getNode(e,t){if(e.isQuadMesh)return LT;const r=[e,t];let s=this.get(r);return void 0===s&&(s=this.createNode(),this.set(r,s)),s}}const VT=new z,OT=new t,GT=new s,kT=new ke,zT=new n,$T=new s;class WT{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=Ve,this.toneMapping=d,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new Vg,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new PT,this.lighting=new DT,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new Qm(new Yc),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new sm(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:Oe},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,o=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new MT(this,r),this._animation=new vg(this._nodes,this.info),this._attributes=new Ig(r),this._background=new gx(this,this._nodes),this._geometries=new Dg(this._attributes,this.info),this._textures=new rm(this,r,this.info),this._pipelines=new Wg(r,this._nodes),this._bindings=new Hg(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new Cg(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new Yg(this.lighting),this._bundles=new IT,this._renderContexts=new em,this._animation.start(),this._initialized=!0,e()}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:VT;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new UT),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._nodes.updateScene(u),this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init();const r=this._renderScene(e,t);await this.backend.resolveTimestampAsync(r,"render")}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,o=this._currentRenderContext,a=this._bundles.get(s,i),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const e=n.opaque;!0===this.opaque&&e.length>0&&this._renderObjects(e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==d)&&!1===(t!==Ae))return null;const{width:r,height:s}=this.getDrawingBufferSize(OT),{depth:i,stencil:n}=this;let o=this._frameBufferTarget;return null===o&&(o=new ge(r,s,{depthBuffer:i,stencilBuffer:n,type:ye,format:Fe,colorSpace:Ae,generateMipmaps:!1,minFilter:$,magFilter:$,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=i,o.stencilBuffer=n,o.setSize(r,s),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:VT,l=this._renderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem;t.coordinateSystem!==g&&(t.coordinateSystem=g,t.updateProjectionMatrix()),!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld();let m=this._viewport,f=this._scissor,y=this._pixelRatio;null!==h&&(m=h.viewport,f=h.scissor,y=1),this.getDrawingBufferSize(OT),GT.set(0,0,OT.width,OT.height);const b=void 0===m.minDepth?0:m.minDepth,x=void 0===m.maxDepth?1:m.maxDepth;p.viewportValue.copy(m).multiplyScalar(y).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=x,p.viewport=!1===p.viewportValue.equals(GT),p.scissorValue.copy(f).multiplyScalar(y).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(GT),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new UT),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),zT.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),kT.setFromProjectionMatrix(zT,g);const T=this._renderLists.get(e,t);if(T.begin(),this._projectObject(e,t,0,T,p.clippingContext),T.finish(),!0===this.sortObjects&&T.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=T.occlusionQueryCount,this._nodes.updateScene(u),this._background.update(u,T,p),this.backend.beginRender(p);const{bundles:_,lightsNode:v,transparentDoublePass:N,transparent:S,opaque:A}=T;if(_.length>0&&this._renderBundles(_,u,v),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,v),!0===this.transparent&&S.length>0&&this._renderTransparents(S,N,t,u,v),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==s){this.setRenderTarget(l,d,c);const e=this._quad;this._nodes.hasOutputChange(h.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(h.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}return u.onAfterRender(this,e,t,h),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,r=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,r,s),o.minDepth=i,o.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s&&(this._textures.updateRenderTarget(s),i=this._textures.get(s)),this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget){const e=this._quad;this._nodes.hasOutputChange(s.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(s.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return null!==this._renderTarget?d:this.toneMapping}get currentColorSpace(){return null!==this._renderTarget?Ae:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this.isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of a){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),o.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}o.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),a=i.getForCompute(t,r);s.compute(e,t,r,a)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e),await this.backend.resolveTimestampAsync(e,"compute")}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){if(!1===this._initialized)return console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),!1;this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=$T.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=$T.copy(t).floor()}else t=$T.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i)}readRenderTargetPixelsAsync(e,t,r,s,i,n=0,o=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,o)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||kT.intersectsSprite(e)){!0===this.sortObjects&&$T.setFromMatrixPosition(e.matrixWorld).applyMatrix4(zT);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,$T.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||kT.intersectsObject(e))){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),$T.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(zT)),Array.isArray(n)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,$T.z,u,i)}}else n.visible&&s.push(e,t,n,r,$T.z,null,i)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,o=n.length;e<o;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=x;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=Ge;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=le}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,o=e.length;n<o;n++){const o=e[n],{object:a,geometry:u,material:l,group:d,clippingContext:c}=o;if(t.isArrayCamera){const e=t.cameras;for(let t=0,n=e.length;t<n;t++){const n=e[t];if(a.layers.test(n.layers)){const e=n.viewport,t=void 0===e.minDepth?0:e.minDepth,o=void 0===e.maxDepth?1:e.maxDepth,h=this._currentRenderContext.viewportValue;h.copy(e).multiplyScalar(this._pixelRatio).floor(),h.minDepth=t,h.maxDepth=o,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(a,r,n,u,l,d,s,c,i)}}}else this._currentRenderObjectFunction(a,r,t,u,l,d,s,c,i)}}renderObject(e,t,r,s,i,n,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.isShadowNodeMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.fragmentNode,e.fragmentNode=i.castShadowNode)),i=e}!0===i.transparent&&i.side===le&&!1===i.forceSinglePass?(i.side=x,this._handleObjectFunction(e,i,t,r,o,n,a,"backSide"),i.side=Ge,this._handleObjectFunction(e,i,t,r,o,n,a,u),i.side=le):this._handleObjectFunction(e,i,t,r,o,n,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.fragmentNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.scene}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,o){const a=this._objects.get(e,t,r,s,i,this._currentRenderContext,n,o);this._nodes.updateBefore(a),this._geometries.updateForRender(a),this._nodes.updateForRender(a),this._bindings.updateForRender(a),this._pipelines.getForRender(a,this._compilationPromises),this._nodes.updateAfter(a)}get compile(){return this.compileAsync}}class HT{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class jT extends HT{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Fg-e%Fg)%Fg;var e}get buffer(){return this._buffer}update(){return!0}}class qT extends jT{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let KT=0;class XT extends qT{constructor(e,t){super("UniformBuffer_"+KT++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class YT extends qT{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Fg;0!==n&&Fg-n-s<0?e+=Fg-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Fg)*Fg}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i]!==s){this.buffer[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this.buffer;e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this.buffer;e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this.buffer;e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}}let QT=0;class ZT extends YT{constructor(e,t){super(e),this.id=QT++,this.groupNode=t,this.isNodeUniformsGroup=!0}getNodes(){const e=[];for(const t of this.uniforms){const r=t.nodeUniform.node;if(!r)throw new Error("NodeUniformsGroup: Uniform has no node.");e.push(r)}return e}}let JT=0;class e_ extends HT{constructor(e,t){super(e),this.id=JT++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class t_ extends e_{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class r_ extends t_{constructor(e,t,r,s){super(e,t,r,s),this.isSampledCubeTexture=!0}}class s_ extends t_{constructor(e,t,r,s){super(e,t,r,s),this.isSampledTexture3D=!0}}const i_={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},n_={low:"lowp",medium:"mediump",high:"highp"},o_={swizzleAssign:!0,storageBuffer:!1},a_="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class u_ extends lT{constructor(e,t){super(e,t,new ET),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==m}getMethod(e){return i_[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?$e:We;2===s?n=i?He:Ee:3===s?n=i?je:qe:4===s&&(n=i?Ke:Fe);const o={Float32Array:E,Uint8Array:pe,Uint16Array:Xe,Uint32Array:f,Int8Array:Ye,Int16Array:Qe,Int32Array:y,Uint8ClampedArray:pe},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/a);a*u*s<r&&u++;const l=a*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new ze(t.array,a,u,n,o[t.array.constructor.name]||E);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new bu(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const o=r.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+Es.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===f?g="uvec4":s.pbo.type===y&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?`texture( ${t}, ${r} ).x`:(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type){const e=i.node.value;let r="";!0===e.isDataTexture&&(e.type===f?r="u":e.type===y&&(r="i")),t=e.compareFunction?`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("texture3D"===i.type)t=`sampler3D ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const o=i.node.precision;if(null!==o&&(t=n_[o]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==y){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[],r=e.getMemberTypes();for(let e=0;e<r.length;e++){const s=r[e];t.push(`layout( location = ${e} ) out ${s} m${e};`)}return t.join("\n")}getStructs(e){const t=[],r=this.structs[e];if(0===r.length)return"layout( location = 0 ) out vec4 fragColor;\n";for(let e=0,s=r.length;e<s;e++){const s=r[e];let i="\n";i+=this.getStructMembers(s),i+="\n",t.push(i)}return t.join("\n\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}${s.needsInterpolation?"out":"/*out*/"} ${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=o_[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}o_[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);t+=`${s.varyingName} = ${i};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions \n${e.extensions}\n\n// precision\n${a_}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${a_}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniformGPU;if(void 0===o){const s=e.groupNode,a=s.name,u=this.getBindGroupArray(a,r);if("texture"===t)o=new t_(i.name,i.node,s),u.push(o);else if("cubeTexture"===t)o=new r_(i.name,i.node,s),u.push(o);else if("texture3D"===t)o=new s_(i.name,i.node,s),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new XT(e,s);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new ZT(r+"_"+a,s),e[a]=n,u.push(n)),o=this.getNodeUniform(i,t),n.addUniform(o)}n.uniformGPU=o}return i}}let l_=null,d_=null,c_=null;class h_{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(e){this.renderer=e}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(e){const{object:t,geometry:r}=e;return r.isInstancedBufferGeometry?r.instanceCount:t.count>1?t.count:1}getDrawingBufferSize(){return l_=l_||new t,this.renderer.getDrawingBufferSize(l_)}getScissor(){return d_=d_||new s,this.renderer.getScissor(d_)}setScissorTest(){}getClearColor(){const e=this.renderer;return c_=c_||new sm,e.getClearColor(c_),c_.getRGB(c_,this.renderer.currentColorSpace),c_}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:Ze(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${De} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let p_=0;class g_{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class m_{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=r.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),a.bufferGPU=l,a.bufferType=t,a.version=o.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===y,id:p_++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new g_(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),o=n.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(o,n.bufferGPU),0===a.length)r.bufferSubData(o,0,s);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(o,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(o,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,o=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,o,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}let f_,y_,b_=!1;class x_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},!1===b_&&(this._init(this.gl),b_=!0)}_init(e){f_={[Je]:e.FUNC_ADD,[et]:e.FUNC_SUBTRACT,[tt]:e.FUNC_REVERSE_SUBTRACT},y_={[rt]:e.ZERO,[st]:e.ONE,[it]:e.SRC_COLOR,[nt]:e.SRC_ALPHA,[ot]:e.SRC_ALPHA_SATURATE,[at]:e.DST_COLOR,[ut]:e.DST_ALPHA,[lt]:e.ONE_MINUS_SRC_COLOR,[dt]:e.ONE_MINUS_SRC_ALPHA,[ct]:e.ONE_MINUS_DST_COLOR,[ht]:e.ONE_MINUS_DST_ALPHA}}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==pt?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===gt?t.cullFace(t.BACK):e===mt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,o,a){const{gl:u}=this;if(e!==G){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===ft)i=i||t,n=n||r,o=o||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(f_[t],f_[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(y_[r],y_[s],y_[n],y_[o]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===Je&&this.currentBlendEquationAlpha===Je||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=Je,this.currentBlendEquationAlpha=Je),a)switch(e){case F:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case xt:u.blendFunc(u.ONE,u.ONE);break;case bt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case yt:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case F:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case xt:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case bt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case yt:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Ct:t.depthFunc(t.NEVER);break;case Rt:t.depthFunc(t.ALWAYS);break;case At:t.depthFunc(t.LESS);break;case St:t.depthFunc(t.LEQUAL);break;case Nt:t.depthFunc(t.EQUAL);break;case vt:t.depthFunc(t.GEQUAL);break;case _t:t.depthFunc(t.GREATER);break;case Tt:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===le?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===x;t&&(i=!i),this.setFlipSided(i),e.blending===F&&!1===e.transparent?this.setBlending(G):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:o}=this;void 0===r&&(r=null===i?s.TEXTURE0+o-1:i);let a=n[r];void 0===a&&(a={type:void 0,texture:void 0},n[r]=a),a.type===e&&a.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class T_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=m){const{gl:r,extensions:s}=this;let i;if(e===pe)return r.UNSIGNED_BYTE;if(e===Et)return r.UNSIGNED_SHORT_4_4_4_4;if(e===wt)return r.UNSIGNED_SHORT_5_5_5_1;if(e===Mt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===Ye)return r.BYTE;if(e===Qe)return r.SHORT;if(e===Xe)return r.UNSIGNED_SHORT;if(e===y)return r.INT;if(e===f)return r.UNSIGNED_INT;if(e===E)return r.FLOAT;if(e===ye)return r.HALF_FLOAT;if(e===Bt)return r.ALPHA;if(e===qe)return r.RGB;if(e===Fe)return r.RGBA;if(e===Ut)return r.LUMINANCE;if(e===Ft)return r.LUMINANCE_ALPHA;if(e===ce)return r.DEPTH_COMPONENT;if(e===de)return r.DEPTH_STENCIL;if(e===We)return r.RED;if(e===$e)return r.RED_INTEGER;if(e===Ee)return r.RG;if(e===He)return r.RG_INTEGER;if(e===Ke)return r.RGBA_INTEGER;if(e===It||e===Pt||e===Lt||e===Dt)if(t===Ve){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===It)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===Pt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Lt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Dt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===It)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Pt)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Lt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Dt)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Vt||e===Ot||e===Gt||e===kt){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===Vt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Ot)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Gt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===kt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===zt||e===$t||e===Wt){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===zt||e===$t)return t===Ve?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===Wt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===Ht||e===jt||e===qt||e===Kt||e===Xt||e===Yt||e===Qt||e===Zt||e===Jt||e===er||e===tr||e===rr||e===sr||e===ir){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===Ht)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===jt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===qt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===Kt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===Xt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===Yt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===Qt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===Zt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===Jt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===er)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===tr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===rr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===sr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===ir)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===nr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===nr)return t===Ve?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===or||e===ar||e===ur||e===lr){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===nr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===ar)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===ur)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===lr)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===he?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let __,v_,N_,S_=!1;class A_{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===S_&&(this._init(this.gl),S_=!0)}_init(e){__={[dr]:e.REPEAT,[cr]:e.CLAMP_TO_EDGE,[hr]:e.MIRRORED_REPEAT},v_={[pr]:e.NEAREST,[gr]:e.NEAREST_MIPMAP_NEAREST,[Pe]:e.NEAREST_MIPMAP_LINEAR,[$]:e.LINEAR,[Ie]:e.LINEAR_MIPMAP_NEAREST,[M]:e.LINEAR_MIPMAP_LINEAR},N_={[mr]:e.NEVER,[fr]:e.ALWAYS,[Re]:e.LESS,[yr]:e.LEQUAL,[br]:e.EQUAL,[xr]:e.GEQUAL,[Tr]:e.GREATER,[_r]:e.NOTEQUAL}}filterFallback(e){const{gl:t}=this;return e===pr||e===gr||e===Pe?t.NEAREST:t.LINEAR}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:o}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===n.RED&&(r===n.FLOAT&&(a=n.R32F),r===n.HALF_FLOAT&&(a=n.R16F),r===n.UNSIGNED_BYTE&&(a=n.R8),r===n.UNSIGNED_SHORT&&(a=n.R16),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.R8UI),r===n.UNSIGNED_SHORT&&(a=n.R16UI),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RG&&(r===n.FLOAT&&(a=n.RG32F),r===n.HALF_FLOAT&&(a=n.RG16F),r===n.UNSIGNED_BYTE&&(a=n.RG8),r===n.UNSIGNED_SHORT&&(a=n.RG16),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RG8UI),r===n.UNSIGNED_SHORT&&(a=n.RG16UI),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(a=n.RGB32F),r===n.HALF_FLOAT&&(a=n.RGB16F),r===n.UNSIGNED_BYTE&&(a=n.RGB8),r===n.UNSIGNED_SHORT&&(a=n.RGB16),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I),r===n.UNSIGNED_BYTE&&(a=s===Ve&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(a=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(a=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGB8UI),r===n.UNSIGNED_SHORT&&(a=n.RGB16UI),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(a=n.RGBA32F),r===n.HALF_FLOAT&&(a=n.RGBA16F),r===n.UNSIGNED_BYTE&&(a=n.RGBA8),r===n.UNSIGNED_SHORT&&(a=n.RGBA16),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I),r===n.UNSIGNED_BYTE&&(a=s===Ve&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(a=n.RGBA16UI),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_INT&&(a=n.DEPTH24_STENCIL8),r===n.FLOAT&&(a=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(a=n.DEPTH24_STENCIL8),a!==n.R16F&&a!==n.R32F&&a!==n.RG16F&&a!==n.RG32F&&a!==n.RGBA16F&&a!==n.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,__[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,__[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||r.texParameteri(e,r.TEXTURE_WRAP_R,__[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,v_[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===$&&n?M:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,v_[o]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,N_[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===pr)return;if(t.minFilter!==Pe&&t.minFilter!==M)return;if(t.type===E&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:o,depth:a}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,o,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,o,a):e.isVideoTexture||r.texStorage2D(h,i,d,n,o),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:o,glType:a}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,o,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(o,n),this.setTextureParameters(o,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,u,n.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,a,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,a,u,n)}}else if(e.isDataArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);r.texSubImage2D(o,0,0,0,s,i,a,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){const{gl:n,backend:o}=this,{state:a}=this.backend,{textureGPU:u,glTextureType:l,glType:d,glFormat:c}=o.get(t);let h,p,g,m,f,y;null!==r?(h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.min.x,m=r.min.y):(h=e.image.width,p=e.image.height,g=0,m=0),null!==s?(f=s.x,y=s.y):(f=0,y=0),a.bindTexture(l,u),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment);const b=n.getParameter(n.UNPACK_ROW_LENGTH),x=n.getParameter(n.UNPACK_IMAGE_HEIGHT),T=n.getParameter(n.UNPACK_SKIP_PIXELS),_=n.getParameter(n.UNPACK_SKIP_ROWS),v=n.getParameter(n.UNPACK_SKIP_IMAGES),N=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n.pixelStorei(n.UNPACK_ROW_LENGTH,N.width),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,N.height),n.pixelStorei(n.UNPACK_SKIP_PIXELS,g),n.pixelStorei(n.UNPACK_SKIP_ROWS,m),e.isRenderTargetTexture||e.isDepthTexture){const r=o.get(e),s=o.get(t),i=o.get(r.renderTarget),u=o.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=u.framebuffers[s.cacheKey];a.bindFramebuffer(n.READ_FRAMEBUFFER,l),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,d);let c=n.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=n.DEPTH_BUFFER_BIT),n.blitFramebuffer(g,m,h,p,f,y,h,p,c,n.NEAREST),a.bindFramebuffer(n.READ_FRAMEBUFFER,null),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,null)}else e.isDataTexture?n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N.data):e.isCompressedTexture?n.compressedTexSubImage2D(n.TEXTURE_2D,i,f,y,N.width,N.height,c,N.data):n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N);n.pixelStorei(n.UNPACK_ROW_LENGTH,b),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,x),n.pixelStorei(n.UNPACK_SKIP_PIXELS,T),n.pixelStorei(n.UNPACK_SKIP_ROWS,_),n.pixelStorei(n.UNPACK_SKIP_IMAGES,v),0===i&&t.generateMipmaps&&n.generateMipmap(n.TEXTURE_2D),a.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:o,y:a,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(d){const r=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-a-l;s.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,c-l-a,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t){const{gl:r}=this,s=t.renderTarget,{samples:i,depthTexture:n,depthBuffer:o,stencilBuffer:a,width:u,height:l}=s;if(r.bindRenderbuffer(r.RENDERBUFFER,e),o&&!a){let t=r.DEPTH_COMPONENT24;i>0?(n&&n.isDepthTexture&&n.type===r.FLOAT&&(t=r.DEPTH_COMPONENT32F),r.renderbufferStorageMultisample(r.RENDERBUFFER,i,t,u,l)):r.renderbufferStorage(r.RENDERBUFFER,t,u,l),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,e)}else o&&a&&(i>0?r.renderbufferStorageMultisample(r.RENDERBUFFER,i,r.DEPTH24_STENCIL8,u,l):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,u,l),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+n:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,r,s,i,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class R_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class C_{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const E_={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class w_{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:o,index:a}=this;0!==a?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),o.update(i,t,s,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:o,object:a,info:u}=this;0!==r&&(0!==o?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(a,t,i,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:o}=this;if(0===r)return;const a=s.get("WEBGL_multi_draw");if(null===a)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?a.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];o.update(n,s,i,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:o,info:a}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];a.update(o,i,n,1)}}}class M_ extends h_{constructor(e={}){super(e),this.isWebGLBackend=!0}init(e){super.init(e);const t=this.parameters,r=void 0!==t.context?t.context:e.domElement.getContext("webgl2");function s(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=s,e.domElement.addEventListener("webglcontextlost",s,!1),this.gl=r,this.extensions=new R_(this),this.capabilities=new C_(this),this.attributeUtils=new m_(this),this.textureUtils=new A_(this),this.bufferRenderer=new w_(this),this.state=new x_(this),this.utils=new T_(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=!0===t.trackTimestamp,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._knownBindings=new WeakSet,this._currentContext=null}get coordinateSystem(){return b}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(this.queryRunning)return t.queryQueue||(t.queryQueue=[]),void t.queryQueue.push(e);t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.activeQuery=null),t.activeQuery=this.gl.createQuery(),null!==t.activeQuery&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,t.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.gpuQueries||(t.gpuQueries=[]),t.gpuQueries.push({query:t.activeQuery}),t.activeQuery=null,this.queryRunning=!1,t.queryQueue&&t.queryQueue.length>0)){const e=t.queryQueue.shift();this.initTimestampQuery(e)}}async resolveTimestampAsync(e,t="render"){if(!this.disjoint||!this.trackTimestamp)return;const r=this.get(e);r.gpuQueries||(r.gpuQueries=[]);for(let e=0;e<r.gpuQueries.length;e++){const s=r.gpuQueries[e],i=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT_AVAILABLE),n=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(i&&!n){const i=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT),n=Number(i)/1e6;this.gl.deleteQuery(s.query),r.gpuQueries.splice(e,1),e--,this.renderer.info.updateTimestamp(t,n)}}}getContext(){return this.gl}beginRender(e){const{gl:t}=this,r=this.get(e);if(this.initTimestampQuery(e),r.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1),e.viewport?this.updateViewport(e):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}const s=e.occlusionQueryCount;s>0&&(r.currentOcclusionQueries=r.occlusionQueries,r.currentOcclusionQueryObjects=r.occlusionQueryObjects,r.lastOcclusionObject=null,r.occlusionQueries=new Array(s),r.occlusionQueryObjects=new Array(s),r.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext,n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,o=s.msaaFrameBuffer,a=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,o),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<a.length;r++)if(e.scissor){const{x:r,y:i,width:o,height:a}=e.scissorValue,u=e.height-a-i;t.blitFramebuffer(r,u,r+o,u+a,r,u,r+o,u+a,n,t.NEAREST),t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let o=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(i.getQueryParameter(n,i.QUERY_RESULT)>0&&e.add(s[t]),r[t]=null,i.deleteQuery(n),o++))}o<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const t=this.gl,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}clear(e,t,r,s=null,i=!0){const{gl:n}=this;if(null===s){const e=this.getClearColor();e.r*=e.a,e.g*=e.a,e.b*=e.a,s={textures:null,clearColorValue:e}}let o=0;if(e&&(o|=n.COLOR_BUFFER_BIT),t&&(o|=n.DEPTH_BUFFER_BIT),r&&(o|=n.STENCIL_BUFFER_BIT),0!==o){let a;if(s.clearColorValue?a=s.clearColorValue:(a=this.getClearColor(),a.r*=a.a,a.g*=a.a,a.b*=a.a),t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(a.r,a.g,a.b,a.a),n.clear(o);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)n.clearBufferfv(n.COLOR,e,[a.r,a.g,a.b,a.a]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,1,0):t?n.clearBufferfv(n.DEPTH,0,[1]):r&&n.clearBufferiv(n.STENCIL,0,[0])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;this.discard||(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(s),l=this._getVaoKey(null,u),d=this.vaoCache[l];void 0===d?this._createVao(null,u):n.bindVertexArray(d),i.useProgram(o),this._bindUniforms(r);const c=this._getTransformFeedback(a);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:o}=this.get(r),{gl:a,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(o);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getIndex(),e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getIndex(),e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}a.bindVertexArray(p);const g=e.getIndex(),m=l.lastOcclusionObject;if(m!==t&&void 0!==m){if(null!==m&&!0===m.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const f=this.bufferRenderer;t.isPoints?f.mode=a.POINTS:t.isLineSegments?f.mode=a.LINES:t.isLine?f.mode=a.LINE_STRIP:t.isLineLoop?f.mode=a.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),f.mode=a.LINES):f.mode=a.TRIANGLES;const{vertexCount:y,instanceCount:b}=d;let{firstVertex:x}=d;if(f.object=t,null!==g){x*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);f.index=g.count,f.type=e.type}else f.index=0;t.isBatchedMesh?null!==t._multiDrawInstances?f.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?f.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):vr("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):b>1?f.renderInstances(x,y,b):f.render(x,y),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new u_(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,o=r.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(o,a),r.attachShader(o,u),r.linkProgram(o),this.set(s,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(o,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),o=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+o)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:o,vertexShader:a}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,o,a),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,o=s.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(o,a),s.attachShader(o,u),s.transformFeedbackVaryings(o,d,s.SEPARATE_ATTRIBS),s.linkProgram(o),!1===s.getProgramParameter(o,s.LINK_STATUS)&&this._logProgramError(o,a,u),r.useProgram(o),this._setupBindings(t,o);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){}hasFeature(e){const t=Object.keys(E_).filter((t=>E_[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r,s,i){this.textureUtils.copyTextureToTexture(e,t,r,s,i)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:o,depthBuffer:a,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget;let d=n.msaaFrameBuffer,c=n.depthRenderbuffer;const h=Jg(e);let p;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),p=n.cubeFramebuffers[h]):(n.framebuffers||(n.framebuffers={}),p=n.framebuffers[h]),void 0===p){p=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,p);const s=e.textures;if(l){n.cubeFramebuffers[h]=p;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[h]=p;for(let r=0;r<s.length;r++){const i=s[r],n=this.get(i);n.renderTarget=e.renderTarget,n.cacheKey=h;const o=t.COLOR_ATTACHMENT0+r;t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,n.textureGPU,0)}r.drawBuffers(e,p)}if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.renderTarget=e.renderTarget,r.cacheKey=h,t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}if(o>0){if(void 0===d){const s=[];d=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,d);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=d,n.msaaRenderbuffers=i,void 0===c){c=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(c,e),n.depthRenderbuffer=c;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=p}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e,t){let r=[];if(null!==e){r+=":"+this.get(e).id}for(let e=0;e<t.length;e++){r+=":"+this.get(t[e]).id}return r}_createVao(e,t){const{gl:r}=this,s=r.createVertexArray();let i="",n=!0;if(r.bindVertexArray(s),null!==e){const t=this.get(e);r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.bufferGPU),i+=":"+t.id}for(let e=0;e<t.length;e++){const s=t[e],o=this.get(s);let a,u;i+=":"+o.id,r.bindBuffer(r.ARRAY_BUFFER,o.bufferGPU),r.enableVertexAttribArray(e),(s.isStorageBufferAttribute||s.isStorageInstancedBufferAttribute)&&(n=!1),!0===s.isInterleavedBufferAttribute?(a=s.data.stride*o.bytesPerElement,u=s.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?r.vertexAttribIPointer(e,s.itemSize,o.type,a,u):r.vertexAttribPointer(e,s.itemSize,o.type,s.normalized,a,u),s.isInstancedBufferAttribute&&!s.isInterleavedBufferAttribute?r.vertexAttribDivisor(e,s.meshPerAttribute):s.isInterleavedBufferAttribute&&s.data.isInstancedInterleavedBuffer&&r.vertexAttribDivisor(e,s.data.meshPerAttribute)}return r.bindBuffer(r.ARRAY_BUFFER,null),this.vaoCache[i]=s,{vaoGPU:s,staticVao:n}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}dispose(){this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const B_="point-list",U_="line-list",F_="line-strip",I_="triangle-list",P_="triangle-strip",L_="never",D_="less",V_="equal",O_="less-equal",G_="greater",k_="not-equal",z_="greater-equal",$_="always",W_="store",H_="load",j_="clear",q_="ccw",K_="none",X_="front",Y_="back",Q_="uint16",Z_="uint32",J_={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},ev="clamp-to-edge",tv="repeat",rv="mirror-repeat",sv="linear",iv="nearest",nv="zero",ov="one",av="src",uv="one-minus-src",lv="src-alpha",dv="one-minus-src-alpha",cv="dst",hv="one-minus-dst",pv="dst-alpha",gv="one-minus-dst-alpha",mv="src-alpha-saturated",fv="constant",yv="one-minus-constant",bv="add",xv="subtract",Tv="reverse-subtract",_v="min",vv="max",Nv=0,Sv=15,Av="keep",Rv="zero",Cv="replace",Ev="invert",wv="increment-clamp",Mv="decrement-clamp",Bv="increment-wrap",Uv="decrement-wrap",Fv="storage",Iv="read-only-storage",Pv="write-only",Lv="read-only",Dv="read-write",Vv="float",Ov="unfilterable-float",Gv="depth",kv="sint",zv="uint",$v="2d",Wv="3d",Hv="2d",jv="2d-array",qv="cube",Kv="3d",Xv="all",Yv="vertex",Qv="instance",Zv={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class Jv extends HT{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class eN extends Jv{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class tN extends jT{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let rN=0;class sN extends tN{constructor(e,t){super("StorageBuffer_"+rN++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Ss.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class iN extends Eg{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:sv}),this.flipYSampler=e.createSampler({minFilter:iv}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:P_,stripIndexFormat:Z_},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:P_,stripIndexFormat:Z_},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,o=this.getTransferPipeline(s),a=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Hv,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:Hv,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:j_,storeOp:W_,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Hv,baseArrayLayer:r});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:Hv,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:j_,storeOp:W_,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return o}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const nN={[mr]:"never",[Re]:"less",[br]:"equal",[yr]:"less-equal",[Tr]:"greater",[xr]:"greater-equal",[fr]:"always",[_r]:"not-equal"},oN=[0,1,3,2,4,5];class aN{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new B,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===sv&&i.minFilter===sv&&i.mipmapFilter===sv&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=nN[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=uN(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||uN(e,r.device);s.format=l;let d=void 0!==t.sampleCount?t.sampleCount:1;d=r.utils.getSampleCount(d);const c=e.isRenderTargetTexture&&!e.isMultisampleRenderTargetTexture?1:d;let h=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(h|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(h|=GPUTextureUsage.RENDER_ATTACHMENT);const p={label:e.name,size:{width:i,height:n,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:h};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);p.size.width=r.displayWidth,p.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);s.texture=r.device.createTexture(p)}if(e.isRenderTargetTexture&&d>1&&!e.isMultisampleRenderTargetTexture){const e=Object.assign({},p);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=p}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,o=r.get(n).texture;let a,u;if(t?(a=de,u=he):e&&(a=ce,u=f),void 0!==o){if(n.image.width===s&&n.image.height===i&&n.format===a&&n.type===u)return o;this.destroyTexture(n)}return n.name="depthBuffer",n.format=a,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{sampleCount:r.utils.getSampleCount(r.renderer.samples),width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new ee;r.minFilter=pr,r.magFilter=pr,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new H;r.minFilter=pr,r.magFilter=pr,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],o=!0===s?oN[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,o,s):this._copyImageToTexture(n,t,r,o,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new iN(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},a,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===J_.BC1RGBAUnorm||e===J_.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===J_.BC2RGBAUnorm||e===J_.BC2RGBAUnormSRGB||e===J_.BC3RGBAUnorm||e===J_.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===J_.BC4RUnorm||e===J_.BC4RSNorm?{byteLength:8,width:4,height:4}:e===J_.BC5RGUnorm||e===J_.BC5RGSnorm||e===J_.BC6HRGBUFloat||e===J_.BC6HRGBFloat||e===J_.BC7RGBAUnorm||e===J_.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===J_.ETC2RGB8Unorm||e===J_.ETC2RGB8UnormSRGB||e===J_.ETC2RGB8A1Unorm||e===J_.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===J_.ETC2RGBA8Unorm||e===J_.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===J_.EACR11Unorm||e===J_.EACR11Snorm?{byteLength:8,width:4,height:4}:e===J_.EACRG11Unorm||e===J_.EACRG11Snorm||e===J_.ASTC4x4Unorm||e===J_.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===J_.ASTC5x4Unorm||e===J_.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===J_.ASTC5x5Unorm||e===J_.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===J_.ASTC6x5Unorm||e===J_.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===J_.ASTC6x6Unorm||e===J_.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===J_.ASTC8x5Unorm||e===J_.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===J_.ASTC8x6Unorm||e===J_.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===J_.ASTC8x8Unorm||e===J_.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===J_.ASTC10x5Unorm||e===J_.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===J_.ASTC10x6Unorm||e===J_.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===J_.ASTC10x8Unorm||e===J_.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===J_.ASTC10x10Unorm||e===J_.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===J_.ASTC12x10Unorm||e===J_.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===J_.ASTC12x12Unorm||e===J_.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=ev;return e===dr?t=tv:e===hr&&(t=rv),t}_convertFilterMode(e){let t=sv;return e!==pr&&e!==gr&&e!==Pe||(t=iv),t}_getBytesPerTexel(e){return e===J_.R8Unorm||e===J_.R8Snorm||e===J_.R8Uint||e===J_.R8Sint?1:e===J_.R16Uint||e===J_.R16Sint||e===J_.R16Float||e===J_.RG8Unorm||e===J_.RG8Snorm||e===J_.RG8Uint||e===J_.RG8Sint?2:e===J_.R32Uint||e===J_.R32Sint||e===J_.R32Float||e===J_.RG16Uint||e===J_.RG16Sint||e===J_.RG16Float||e===J_.RGBA8Unorm||e===J_.RGBA8UnormSRGB||e===J_.RGBA8Snorm||e===J_.RGBA8Uint||e===J_.RGBA8Sint||e===J_.BGRA8Unorm||e===J_.BGRA8UnormSRGB||e===J_.RGB9E5UFloat||e===J_.RGB10A2Unorm||e===J_.RG11B10UFloat||e===J_.Depth32Float||e===J_.Depth24Plus||e===J_.Depth24PlusStencil8||e===J_.Depth32FloatStencil8?4:e===J_.RG32Uint||e===J_.RG32Sint||e===J_.RG32Float||e===J_.RGBA16Uint||e===J_.RGBA16Sint||e===J_.RGBA16Float?8:e===J_.RGBA32Uint||e===J_.RGBA32Sint||e===J_.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===J_.R8Uint?Uint8Array:e===J_.R8Sint?Int8Array:e===J_.R8Unorm?Uint8Array:e===J_.R8Snorm?Int8Array:e===J_.RG8Uint?Uint8Array:e===J_.RG8Sint?Int8Array:e===J_.RG8Unorm?Uint8Array:e===J_.RG8Snorm?Int8Array:e===J_.RGBA8Uint?Uint8Array:e===J_.RGBA8Sint?Int8Array:e===J_.RGBA8Unorm?Uint8Array:e===J_.RGBA8Snorm?Int8Array:e===J_.R16Uint?Uint16Array:e===J_.R16Sint?Int16Array:e===J_.RG16Uint?Uint16Array:e===J_.RG16Sint?Int16Array:e===J_.RGBA16Uint?Uint16Array:e===J_.RGBA16Sint?Int16Array:e===J_.R16Float||e===J_.RG16Float||e===J_.RGBA16Float?Uint16Array:e===J_.R32Uint?Uint32Array:e===J_.R32Sint?Int32Array:e===J_.R32Float?Float32Array:e===J_.RG32Uint?Uint32Array:e===J_.RG32Sint?Int32Array:e===J_.RG32Float?Float32Array:e===J_.RGBA32Uint?Uint32Array:e===J_.RGBA32Sint?Int32Array:e===J_.RGBA32Float?Float32Array:e===J_.BGRA8Unorm||e===J_.BGRA8UnormSRGB?Uint8Array:e===J_.RGB10A2Unorm||e===J_.RGB9E5UFloat||e===J_.RG11B10UFloat?Uint32Array:e===J_.Depth32Float?Float32Array:e===J_.Depth24Plus||e===J_.Depth24PlusStencil8?Uint32Array:e===J_.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?Wv:$v,t}}function uN(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case Pt:n=i===Ve?J_.BC1RGBAUnormSRGB:J_.BC1RGBAUnorm;break;case Lt:n=i===Ve?J_.BC2RGBAUnormSRGB:J_.BC2RGBAUnorm;break;case Dt:n=i===Ve?J_.BC3RGBAUnormSRGB:J_.BC3RGBAUnorm;break;case $t:n=i===Ve?J_.ETC2RGB8UnormSRGB:J_.ETC2RGB8Unorm;break;case Wt:n=i===Ve?J_.ETC2RGBA8UnormSRGB:J_.ETC2RGBA8Unorm;break;case Ht:n=i===Ve?J_.ASTC4x4UnormSRGB:J_.ASTC4x4Unorm;break;case jt:n=i===Ve?J_.ASTC5x4UnormSRGB:J_.ASTC5x4Unorm;break;case qt:n=i===Ve?J_.ASTC5x5UnormSRGB:J_.ASTC5x5Unorm;break;case Kt:n=i===Ve?J_.ASTC6x5UnormSRGB:J_.ASTC6x5Unorm;break;case Xt:n=i===Ve?J_.ASTC6x6UnormSRGB:J_.ASTC6x6Unorm;break;case Yt:n=i===Ve?J_.ASTC8x5UnormSRGB:J_.ASTC8x5Unorm;break;case Qt:n=i===Ve?J_.ASTC8x6UnormSRGB:J_.ASTC8x6Unorm;break;case Zt:n=i===Ve?J_.ASTC8x8UnormSRGB:J_.ASTC8x8Unorm;break;case Jt:n=i===Ve?J_.ASTC10x5UnormSRGB:J_.ASTC10x5Unorm;break;case er:n=i===Ve?J_.ASTC10x6UnormSRGB:J_.ASTC10x6Unorm;break;case tr:n=i===Ve?J_.ASTC10x8UnormSRGB:J_.ASTC10x8Unorm;break;case rr:n=i===Ve?J_.ASTC10x10UnormSRGB:J_.ASTC10x10Unorm;break;case sr:n=i===Ve?J_.ASTC12x10UnormSRGB:J_.ASTC12x10Unorm;break;case ir:n=i===Ve?J_.ASTC12x12UnormSRGB:J_.ASTC12x12Unorm;break;case Fe:n=i===Ve?J_.RGBA8UnormSRGB:J_.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case Fe:switch(s){case Ye:n=J_.RGBA8Snorm;break;case Qe:n=J_.RGBA16Sint;break;case Xe:n=J_.RGBA16Uint;break;case f:n=J_.RGBA32Uint;break;case y:n=J_.RGBA32Sint;break;case pe:n=i===Ve?J_.RGBA8UnormSRGB:J_.RGBA8Unorm;break;case ye:n=J_.RGBA16Float;break;case E:n=J_.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case qe:if(s===Mt)n=J_.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case We:switch(s){case Ye:n=J_.R8Snorm;break;case Qe:n=J_.R16Sint;break;case Xe:n=J_.R16Uint;break;case f:n=J_.R32Uint;break;case y:n=J_.R32Sint;break;case pe:n=J_.R8Unorm;break;case ye:n=J_.R16Float;break;case E:n=J_.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Ee:switch(s){case Ye:n=J_.RG8Snorm;break;case Qe:n=J_.RG16Sint;break;case Xe:n=J_.RG16Uint;break;case f:n=J_.RG32Uint;break;case y:n=J_.RG32Sint;break;case pe:n=J_.RG8Unorm;break;case ye:n=J_.RG16Float;break;case E:n=J_.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case ce:switch(s){case Xe:n=J_.Depth16Unorm;break;case f:n=J_.Depth24Plus;break;case E:n=J_.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case de:switch(s){case he:n=J_.Depth24PlusStencil8;break;case E:t&&!1===t.features.has(Zv.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=J_.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case $e:switch(s){case y:n=J_.R32Sint;break;case f:n=J_.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case He:switch(s){case y:n=J_.RG32Sint;break;case f:n=J_.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case Ke:switch(s){case y:n=J_.RGBA32Sint;break;case f:n=J_.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const lN=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,dN=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,cN={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class hN extends NT{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:o}=(e=>{const t=(e=e.trim()).match(lN);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=dN.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=cN[i]),n.push(new cT(i,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:cN[a]||a,inputs:n,name:u,inputsCode:r,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class pN extends vT{parseFunction(e){return new hN(e)}}const gN="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},mN={[Ss.READ_ONLY]:"read",[Ss.WRITE_ONLY]:"write",[Ss.READ_WRITE]:"read_write"},fN={[dr]:"repeat",[cr]:"clamp",[hr]:"mirror"},yN={vertex:gN?gN.VERTEX:1,fragment:gN?gN.FRAGMENT:2,compute:gN?gN.COMPUTE:4},bN={instance:!0,swizzleAssign:!1,storageBuffer:!0},xN={"^^":"tsl_xor"},TN={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},_N={},vN={tsl_xor:new ny("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new ny("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new ny("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new ny("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new ny("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new ny("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new ny("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new ny("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new ny("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new ny("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new ny("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new ny("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new ny("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},NN={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(vN.pow_float=new ny("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),vN.pow_vec2=new ny("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[vN.pow_float]),vN.pow_vec3=new ny("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[vN.pow_float]),vN.pow_vec4=new ny("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[vN.pow_float]),NN.pow_float="tsl_pow_float",NN.pow_vec2="tsl_pow_vec2",NN.pow_vec3="tsl_pow_vec3",NN.pow_vec4="tsl_pow_vec4");let SN="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(SN+="diagnostic( off, derivative_uniformity );\n");class AN extends lT{constructor(e,t){super(e,t,new pN),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==m}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"===n&&!1===this.isUnfilterable(e)?`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s)}generateWrapFunction(e){const t=`tsl_coord_${fN[e.wrapS]}S_${fN[e.wrapT]}T`;let r=_N[t];if(void 0===r){const s=[];let i=`fn ${t}( coord : vec2f ) -> vec2f {\n\n\treturn vec2f(\n`;const n=(e,t)=>{e===dr?(s.push(vN.repeatWrapping_float),i+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===cr?(s.push(vN.clampWrapping_float),i+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===hr?(s.push(vN.mirrorWrapping_float),i+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(i+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};n(e.wrapS,"x"),i+=",\n",n(e.wrapT,"y"),i+="\n\t);\n\n}\n",_N[t]=r=new ny(i,s)}return r.build(this),t}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n;n=!0===e.isMultisampleRenderTargetTexture?t:`${t}, u32( ${r} )`,i=new Aa(new ou(`textureDimensions( ${n} )`,"uvec2")),s.dimensionsSnippet[r]=i}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=`vec2u( ${this.generateWrapFunction(e)}( ${r} ) * vec2f( ${this.generateTextureDimension(e,t,i)} ) )`;return this.generateTextureLoad(e,t,n,s,i)}generateTextureLoad(e,t,r,s,i="0u"){return s?`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:`textureLoad( ${t}, ${r}, u32( ${i} ) )`}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===E||!1===this.isSampleCompare(e)&&e.minFilter===pr&&e.magFilter===pr||!0===e.isMultisampleRenderTargetTexture}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),o}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?`NodeBuffer_${e.id}.${t}`:e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}_getUniformGroupCount(e){return Object.keys(this.uniforms[e]).length}getFunctionOperator(e){const t=xN[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Ss.READ_ONLY:e.access}getStorageAccess(e,t){return mN[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let s;const o=e.groupNode,a=o.name,u=this.getBindGroupArray(a,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let n=null;const a=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?n=new t_(i.name,i.node,o,a):"cubeTexture"===t?n=new r_(i.name,i.node,o,a):"texture3D"===t&&(n=new s_(i.name,i.node,o,a)),n.store=!0===e.isStorageTextureNode,n.setVisibility(yN[r]),"fragment"===r&&!1===this.isUnfilterable(e.value)&&!1===n.store){const e=new eN(`${i.name}_sampler`,i.node,o);e.setVisibility(yN[r]),u.push(e,n),s=[e,n]}else u.push(n),s=[n]}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const i=new("buffer"===t?XT:sN)(e,o);i.setVisibility(yN[r]),u.push(i),s=i}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new ZT(a,o),n.setVisibility(yN[r]),e[a]=n,u.push(n)),s=this.getNodeUniform(i,t),n.addUniform(s)}n.uniformGPU=s}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[],r=e.getMemberTypes();for(let e=0;e<r.length;e++){const s=r[e];t.push(`\t@location( ${e} ) m${e} : ${s}<f32>`)}const s=this.getBuiltins("output");return s&&t.push("\t"+s),t.join(",\n")}getStructs(e){const t=[],r=this.structs[e];for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name;let n=`struct ${i} {\n`;n+=this.getStructMembers(s),n+="\n}",t.push(n),t.push(`\nvar<private> output : ${i};\n\n`)}return t.join("\n\n")}getVar(e,t){return`var ${t} : ${this.getType(e)}`}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,o=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"===e&&!1===this.isUnfilterable(t)&&!0!==i.node.isStorageTextureNode&&(this.isSampleCompare(t)?r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler;`));let n="";if(!0===t.isMultisampleRenderTargetTexture&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=`texture_depth${n}_2d`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${uN(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.bufferType),n=t.bufferCount,a=n>0&&"buffer"===i.type?", "+n:"",u=t.isAtomic?`atomic<${r}>`:`${r}`,l=`\t${i.name} : array< ${u}${a} >\n`,d=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";s.push(this._getWGSLStructBinding("NodeBuffer_"+t.id,l,d,o.binding++,o.group))}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=r.join("\n");return o+=s.join("\n"),o+=i.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],o=n.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n\t`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(a)r.returnType=o.nodeType,s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;\n\n",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return TN[e]||e}isAvailable(e){let t=bN[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),bN[e]=t),t}_getWGSLMethod(e){return void 0!==vN[e]&&this._include(e),NN[e]}_include(e){const t=vN[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${SN}\n\n// uniforms\n${e.uniforms}\n\n// structs\n${e.structs}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x + id.y * numWorkgroups.x * u32(${t}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class RN{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=J_.Depth24PlusStencil8:e.depth&&(t=J_.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?B_:e.isLineSegments||e.isMesh&&!0===t.wireframe?U_:e.isLine?F_:e.isMesh?I_:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?J_.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const CN=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),EN=new Map([[Le,["float16"]]]),wN=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class MN{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const o=s.device;let a=r.array;if(!1===e.normalized&&(a.constructor===Int16Array||a.constructor===Uint16Array)){const e=new Uint32Array(a.length);for(let t=0;t<a.length;t++)e[t]=a[t];a=e}if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a}const u=a.byteLength+(4-a.byteLength%4)%4;n=o.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(n.getMappedRange()).set(a),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t).buffer,n=t.array,o=t.updateRanges;if(0===o.length)s.queue.writeBuffer(i,0,n,0);else{for(let e=0,t=o.length;e<t;e++){const t=o[e];s.queue.writeBuffer(i,0,n,t.start*n.BYTES_PER_ELEMENT,t.count*n.BYTES_PER_ELEMENT)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let o=r.get(n);if(void 0===o){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?Qv:Yv):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?Qv:Yv),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},r.set(n,o)}const a=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:e.name,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=r.createCommandEncoder({});o.copyBufferToBuffer(s,0,n,0,i),n.unmap();const a=o.finish();r.queue.submit([a]),await n.mapAsync(GPUMapMode.READ);return n.getMappedRange()}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1==t)n=wN.get(s);else{const e=(EN.get(i)||CN.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class BN{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend.device,r=[];let s=0;for(const t of e.bindings){const e={binding:s++,visibility:t.visibility};if(t.isUniformBuffer||t.isStorageBuffer){const r={};t.isStorageBuffer&&(4&t.visibility&&(t.access===Ss.READ_WRITE||t.access===Ss.WRITE_ONLY)?r.type=Fv:r.type=Iv),e.buffer=r}else if(t.isSampler){const r={};t.texture.isDepthTexture&&null!==t.texture.compareFunction&&(r.type="comparison"),e.sampler=r}else if(t.isSampledTexture&&t.texture.isVideoTexture)e.externalTexture={};else if(t.isSampledTexture&&t.store){const r={};r.format=this.backend.get(t.texture).texture.format;const s=t.access;r.access=s===Ss.READ_WRITE?Dv:s===Ss.WRITE_ONLY?Pv:Lv,e.storageTexture=r}else if(t.isSampledTexture){const r={};if(!0===t.texture.isMultisampleRenderTargetTexture&&(r.multisampled=!0),t.texture.isDepthTexture)r.sampleType=Gv;else if(t.texture.isDataTexture||t.texture.isDataArrayTexture||t.texture.isData3DTexture){const e=t.texture.type;e===y?r.sampleType=kv:e===f?r.sampleType=zv:e===E&&(this.backend.hasFeature("float32-filterable")?r.sampleType=Vv:r.sampleType=Ov)}t.isSampledCubeTexture?r.viewDimension=qv:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?r.viewDimension=jv:t.isSampledTexture3D&&(r.viewDimension=Kv),e.texture=r}else console.error(`WebGPUBindingUtils: Unsupported binding "${t}".`);r.push(e)}return t.createBindGroupLayout({entries:r})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,o=i.get(e);let a,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===o.groups&&(o.groups=[],o.versions=[]),o.versions[r]===s&&(a=o.groups[r])),void 0===a&&(a=this.createBindGroup(e,u),r>0&&(o.groups[r]=a,o.versions[r]=s)),o.group=a,o.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let o;if(void 0!==e.externalTexture)o=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(o=e[s],void 0===o){const i=Xv;let n;n=t.isSampledCubeTexture?qv:t.isSampledTexture3D?Kv:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?jv:Hv,o=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:o})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class UN{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:o,fragmentProgram:a}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===s.transparent&&s.blending!==G&&(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const b=u.get(o).module,x=u.get(a).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},b,{buffers:p}),fragment:Object.assign({},x,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},A={},R=e.context.depth,C=e.context.stencil;if(!0!==R&&!0!==C||(!0===R&&(A.format=v,A.depthWriteEnabled=s.depthWrite,A.depthCompare=_),!0===C&&(A.stencilFront=m,A.stencilBack={},A.stencilReadMask=s.stencilFuncMask,A.stencilWriteMask=s.stencilWriteMask),S.depthStencil=A),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:r,device:s}=t,i=r.getCurrentDepthStencilFormat(e),n={label:"renderBundleEncoder",colorFormats:[r.getCurrentColorFormat(e)],depthStencilFormat:i,sampleCount:this._getSampleCount(e)};return s.createRenderBundleEncoder(n)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),o=[];for(const e of t){const t=r.get(e);o.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,o=e.blendEquation;if(s===ft){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,a=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(o)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:bv},r={srcFactor:i,dstFactor:n,operation:bv}};if(e.premultipliedAlpha)switch(s){case F:i(ov,dv,ov,dv);break;case xt:i(ov,ov,ov,ov);break;case bt:i(nv,uv,nv,ov);break;case yt:i(nv,av,nv,lv)}else switch(s){case F:i(lv,dv,ov,dv);break;case xt:i(lv,ov,lv,ov);break;case bt:i(nv,uv,nv,ov);break;case yt:i(nv,av,nv,av)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case rt:t=nv;break;case st:t=ov;break;case it:t=av;break;case lt:t=uv;break;case nt:t=lv;break;case dt:t=dv;break;case at:t=cv;break;case ct:t=hv;break;case ut:t=pv;break;case ht:t=gv;break;case ot:t=mv;break;case 211:t=fv;break;case 212:t=yv;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Mr:t=L_;break;case wr:t=$_;break;case Er:t=D_;break;case Cr:t=O_;break;case Rr:t=V_;break;case Ar:t=z_;break;case Sr:t=G_;break;case Nr:t=k_;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Vr:t=Av;break;case Dr:t=Rv;break;case Lr:t=Cv;break;case Pr:t=Ev;break;case Ir:t=wv;break;case Fr:t=Mv;break;case Ur:t=Bv;break;case Br:t=Uv;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Je:t=bv;break;case et:t=xv;break;case tt:t=Tv;break;case Gr:t=_v;break;case Or:t=vv;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?Q_:Z_),r.side){case Ge:s.frontFace=q_,s.cullMode=Y_;break;case x:s.frontFace=q_,s.cullMode=X_;break;case le:s.frontFace=q_,s.cullMode=K_;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?Sv:Nv}_getDepthCompare(e){let t;if(!1===e.depthTest)t=$_;else{const r=e.depthFunc;switch(r){case Ct:t=L_;break;case Rt:t=$_;break;case At:t=D_;break;case St:t=O_;break;case Nt:t=V_;break;case vt:t=z_;break;case _t:t=G_;break;case Tt:t=k_;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class FN extends h_{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.trackTimestamp=!0===e.trackTimestamp,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new RN(this),this.attributeUtils=new MN(this),this.bindingUtils=new BN(this),this.pipelineUtils=new UN(this),this.textureUtils=new aN(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(Zv),n=[];for(const e of i)s.features.has(e)&&n.push(e);const o={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(o)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(Zv.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return v}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e){const t=e.renderTarget,r=this.get(t);let s=r.descriptors;if(void 0===s||r.width!==t.width||r.height!==t.height||r.activeMipmapLevel!==t.activeMipmapLevel||r.samples!==t.samples){s={},r.descriptors=s;const e=()=>{t.removeEventListener("dispose",e),this.delete(t)};t.addEventListener("dispose",e)}const i=e.getCacheKey();let n=s[i];if(void 0===n){const o=e.textures,a=[];for(let t=0;t<o.length;t++){const r=this.get(o[t]),s=r.texture.createView({baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,dimension:Hv});let i,n;void 0!==r.msaaTexture?(i=r.msaaTexture.createView(),n=s):(i=s,n=void 0),a.push({view:i,resolveTarget:n,loadOp:H_,storeOp:W_})}if(n={colorAttachments:a},e.depth){const t={view:this.get(e.depthTexture).texture.createView()};n.depthStencilAttachment=t}s[i]=n,r.width=t.width,r.height=t.height,r.samples=t.samples,r.activeMipmapLevel=t.activeMipmapLevel}return n}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const o=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=j_,s.storeOp=W_):(s.loadOp=H_,s.storeOp=W_)}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=j_,t.storeOp=W_):(t.loadOp=H_,t.storeOp=W_)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=j_,o.depthStoreOp=W_):(o.depthLoadOp=H_,o.depthStoreOp=W_)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=j_,o.stencilStoreOp=W_):(o.stencilLoadOp=H_,o.stencilStoreOp=W_));const a=r.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(n);if(t.descriptor=n,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;u.setScissorRect(t,r,s,i)}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.prepareTimestampBuffer(e,t.encoder),this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]!==BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(r,s,i,n,o,a)}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();if(!0===this.renderer.alpha){const t=e.a;a={r:e.r*t,g:e.g*t,b:e.b*t,a:t}}else a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=j_,e.storeOp=W_}(u||l)&&(o=t.depthStencilAttachment)}else{if(u=s.depth,l=s.stencil,e)for(const e of s.textures){const t=this.get(e),r=t.texture.createView();let s,i;void 0!==t.msaaTexture?(s=t.msaaTexture.createView(),i=r):(s=r,i=void 0),d.push({view:s,resolveTarget:i,clearValue:a,loadOp:j_,storeOp:W_})}if(u||l){o={view:this.get(s.depthTexture).texture.createView()}}}u&&(t?(o.depthLoadOp=j_,o.depthClearValue=n.getClearDepth(),o.depthStoreOp=W_):(o.depthLoadOp=H_,o.depthStoreOp=W_)),l&&(r?(o.stencilLoadOp=j_,o.stencilClearValue=n.getClearStencil(),o.stencilStoreOp=W_):(o.stencilLoadOp=H_,o.stencilStoreOp=W_));const c=i.createCommandEncoder({});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder(),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.prepareTimestampBuffer(e,t.cmdEncoderGPU),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,context:s,pipeline:i}=e,n=e.getBindings(),o=this.get(s),a=this.get(i).pipeline,u=o.currentSets,l=o.currentPass,d=e.getDrawParameters();if(null===d)return;u.pipeline!==a&&(l.setPipeline(a),u.pipeline=a);const c=u.bindingGroups;for(let e=0,t=n.length;e<t;e++){const t=n[e],r=this.get(t);c[t.index]!==t.id&&(l.setBindGroup(t.index,r.group),c[t.index]=t.id)}const h=e.getIndex(),p=null!==h;if(!0===p&&u.index!==h){const e=this.get(h).buffer,t=h.array instanceof Uint16Array?Q_:Z_;l.setIndexBuffer(e,t),u.index=h}const g=e.getVertexBuffers();for(let e=0,t=g.length;e<t;e++){const t=g[e];if(u.attributes[e]!==t){const r=this.get(t).buffer;l.setVertexBuffer(e,r),u.attributes[e]=t}}if(void 0!==o.occlusionQuerySet){const e=o.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(l.endOcclusionQuery(),o.occlusionQueryIndex++),!0===r.occlusionTest&&(l.beginOcclusionQuery(o.occlusionQueryIndex),o.occlusionQueryObjects[o.occlusionQueryIndex]=r),o.lastOcclusionObject=r)}if(!0===r.isBatchedMesh){const e=r._multiDrawStarts,t=r._multiDrawCounts,s=r._multiDrawCount,i=r._multiDrawInstances,n=p?h.array.BYTES_PER_ELEMENT:1;for(let r=0;r<s;r++){const s=i?i[r]:1,o=s>1?0:r;l.drawIndexed(t[r],s,e[r]/n,0,o)}}else if(!0===p){const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndexedIndirect(e,0)}else l.drawIndexed(s,i,n,0,0);t.update(r,s,i)}else{const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndirect(e,0)}else l.draw(s,i,n,0);t.update(r,s,i)}}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),o=i.getCurrentColorSpace(e.context),a=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}async initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=this.get(e);if(!r.timeStampQuerySet){this.device.pushErrorScope("out-of-memory");const s=await this.device.createQuerySet({type:"timestamp",count:2,label:`timestamp_renderContext_${e.id}`});if(await this.device.popErrorScope())return r.attemptingTimeStampQuerySetFailed||(console.error(`[GPUOutOfMemoryError][renderContext_${e.id}]:\nFailed to create timestamp query set. This may be because timestamp queries are already running in other tabs.`),r.attemptingTimeStampQuerySetFailed=!0),void(r.timeStampQuerySet=null);const i={querySet:s,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1};Object.assign(t,{timestampWrites:i}),r.timeStampQuerySet=s}}prepareTimestampBuffer(e,t){if(!this.trackTimestamp)return;const r=this.get(e);if(!r.timeStampQuerySet)return;const s=2*BigInt64Array.BYTES_PER_ELEMENT;void 0===r.currentTimestampQueryBuffers&&(r.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),isMappingPending:!1});const{resolveBuffer:i,resultBuffer:n,isMappingPending:o}=r.currentTimestampQueryBuffers;!0!==o&&(t.resolveQuerySet(r.timeStampQuerySet,0,2,i,0),t.copyBufferToBuffer(i,0,n,0,s))}async resolveTimestampAsync(e,t="render"){if(!this.trackTimestamp)return;const r=this.get(e);if(!r.timeStampQuerySet)return;if(void 0===r.currentTimestampQueryBuffers)return;const{resultBuffer:s,isMappingPending:i}=r.currentTimestampQueryBuffers;!0!==i&&(r.currentTimestampQueryBuffers.isMappingPending=!0,s.mapAsync(GPUMapMode.READ).then((()=>{const e=new BigUint64Array(s.getMappedRange()),i=Number(e[1]-e[0])/1e6;this.renderer.info.updateTimestamp(t,i),s.unmap(),r.currentTimestampQueryBuffers.isMappingPending=!1})))}createNodeBuilder(e,t){return new AN(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){let n=0,o=0,a=0,u=0,l=0,d=0,c=e.image.width,h=e.image.height;null!==r&&(u=r.x,l=r.y,d=r.z||0,c=r.width,h=r.height),null!==s&&(n=s.x,o=s.y,a=s.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),g=this.get(e).texture,m=this.get(t).texture;p.copyTextureToTexture({texture:g,mipLevel:i,origin:{x:u,y:l,z:d}},{texture:m,mipLevel:i,origin:{x:n,y:o,z:a}},[c,h,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let o;if(s.currentPass?(s.currentPass.end(),o=s.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:i,origin:{x:r.x,y:r.y,z:0}},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=H_;t.depth&&(e.depthStencilAttachment.depthLoadOp=H_),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=H_),s.currentPass=o.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null}}else this.device.queue.submit([o.finish()])}}class IN extends kr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class PN extends PT{constructor(){super(),this.addLight(bb,zr),this.addLight(hT,$r),this.addLight(fT,Wr),this.addLight(yT,kr),this.addLight(xT,Hr),this.addLight(TT,jr),this.addLight(_T,qr),this.addLight(bT,IN),this.addToneMapping(Xf,Kr),this.addToneMapping(Yf,Xr),this.addToneMapping(Qf,Yr),this.addToneMapping(Jf,Qr),this.addToneMapping(sy,Zr),this.addToneMapping(iy,Jr)}}class LN extends WT{constructor(e={}){let t;e.forceWebGL?t=M_:(t=FN,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new M_(e)));super(new t(e),e),this.library=new PN,this.isWebGPURenderer=!0}}class DN extends es{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}const VN=new Yc,ON=new Qm(VN);class GN{constructor(e,t=Oi(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0,VN.name="PostProcessing"}render(){this.update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Ae,ON.render(e),e.toneMapping=t,e.outputColorSpace=r}update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;ON.material.fragmentNode=!0===this.outputColorTransform?du(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),ON.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this.update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Ae,await ON.renderAsync(e),e.toneMapping=t,e.outputColorSpace=r}}function kN(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function zN(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function $N(e,t,r={}){return(r=kN(e,r)).background=t.background,r.backgroundNode=t.backgroundNode,r.overrideMaterial=t.overrideMaterial,r}var WN=Object.freeze({__proto__:null,resetRendererAndSceneState:function(e,t,r){return r=$N(e,t,r),t.background=null,t.backgroundNode=null,t.overrideMaterial=null,r},resetRendererState:function(e,t){return t=kN(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t},restoreRendererAndSceneState:function(e,t,r){zN(e,r),t.background=r.background,t.backgroundNode=r.backgroundNode,t.overrideMaterial=r.overrideMaterial},restoreRendererState:zN,saveRendererAndSceneState:$N,saveRendererState:kN});class HN extends ee{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=$,this.minFilter=$,this.isStorageTexture=!0}}class jN extends of{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class qN extends ts{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new rs(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Ci()):fi(new this.nodes[e])}}class KN extends ss{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class XN extends is{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new qN;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new KN;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class YN extends es{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{Qr as ACESFilmicToneMapping,hc as AONode,Je as AddEquation,K as AddOperation,xt as AdditiveBlending,Zr as AgXToneMapping,Bt as AlphaFormat,fr as AlwaysCompare,Rt as AlwaysDepth,wr as AlwaysStencilFunc,Hr as AmbientLight,xT as AmbientLightNode,ob as AnalyticLightNode,Bs as ArrayElementNode,In as AssignNode,cu as AttributeNode,x as BackSide,fh as BasicEnvironmentNode,we as BasicShadowMap,Zd as BatchNode,O as BoxGeometry,ve as BufferAttribute,ja as BufferAttributeNode,Te as BufferGeometry,xl as BufferNode,Ql as BumpMapNode,DN as BundleGroup,tu as BypassNode,Ye as ByteType,Ja as CacheNode,Yr as CineonToneMapping,cr as ClampToEdgeWrapping,YN as ClippingGroup,ny as CodeNode,e as Color,u as ColorManagement,Ia as ColorSpaceNode,Qa as ComputeNode,Gs as ConstNode,va as ContextNode,Us as ConvertNode,W as CubeCamera,T as CubeReflectionMapping,_ as CubeRefractionMapping,H as CubeTexture,yl as CubeTextureNode,Be as CubeUVReflectionMapping,gt as CullFaceBack,mt as CullFaceFront,pt as CullFaceNone,ft as CustomBlending,C as DataArrayTexture,ze as DataTexture,Fr as DecrementStencilOp,Br as DecrementWrapStencilOp,ce as DepthFormat,de as DepthStencilFormat,B as DepthTexture,$r as DirectionalLight,hT as DirectionalLightNode,le as DoubleSide,ut as DstAlphaFactor,at as DstColorFactor,p as DynamicDrawUsage,jp as EnvironmentNode,br as EqualCompare,Nt as EqualDepth,Rr as EqualStencilFunc,uh as EquirectUVNode,j as EquirectangularReflectionMapping,q as EquirectangularRefractionMapping,Se as Euler,o as EventDispatcher,ou as ExpressionNode,rs as FileLoader,Le as Float16BufferAttribute,_e as Float32BufferAttribute,E as FloatType,Ty as FogExp2Node,fy as FogNode,by as FogRangeNode,w as FramebufferTexture,Ju as FrontFacingNode,Ge as FrontSide,ke as Frustum,Ln as FunctionCallNode,ay as FunctionNode,bm as FunctionOverloadingNode,ET as GLSLNodeParser,Tr as GreaterCompare,_t as GreaterDepth,xr as GreaterEqualCompare,vt as GreaterEqualDepth,Ar as GreaterEqualStencilFunc,Sr as GreaterStencilFunc,es as Group,ye as HalfFloatType,jr as HemisphereLight,TT as HemisphereLightNode,IN as IESSpotLight,bT as IESSpotLightNode,Ir as IncrementStencilOp,Ur as IncrementWrapStencilOp,kd as IndexNode,jN as IndirectStorageBufferAttribute,Kd as InstanceNode,R as InstancedBufferAttribute,A as InstancedInterleavedBuffer,Yd as InstancedMeshNode,Zc as InstancedPointsNodeMaterial,y as IntType,h as InterleavedBuffer,g as InterleavedBufferAttribute,Pr as InvertStencilOp,mc as IrradianceNode,Is as JoinNode,Vr as KeepStencilOp,Re as LessCompare,At as LessDepth,yr as LessEqualCompare,St as LessEqualDepth,Cr as LessEqualStencilFunc,Er as LessStencilFunc,qr as LightProbe,_T as LightProbeNode,DT as Lighting,pc as LightingContextNode,bh as LightingModel,cc as LightingNode,jy as LightsNode,ih as Line2NodeMaterial,P as LineBasicMaterial,eh as LineBasicNodeMaterial,L as LineDashedMaterial,rh as LineDashedNodeMaterial,$ as LinearFilter,be as LinearMipMapLinearFilter,M as LinearMipmapLinearFilter,Ie as LinearMipmapNearestFilter,Ae as LinearSRGBColorSpace,Kr as LinearToneMapping,ts as Loader,sc as LoopNode,Ft as LuminanceAlphaFormat,Ut as LuminanceFormat,cm as MRTNode,ng as MatcapUVNode,U as Material,ss as MaterialLoader,ed as MaterialNode,El as MaterialReferenceNode,a as MathUtils,i as Matrix3,n as Matrix4,Or as MaxEquation,fu as MaxMipLevelNode,k as Mesh,Q as MeshBasicMaterial,_h as MeshBasicNodeMaterial,Z as MeshLambertMaterial,Eh as MeshLambertNodeMaterial,ie as MeshMatcapMaterial,ug as MeshMatcapNodeMaterial,D as MeshNormalMaterial,ah as MeshNormalNodeMaterial,J as MeshPhongMaterial,Mh as MeshPhongNodeMaterial,re as MeshPhysicalMaterial,Zp as MeshPhysicalNodeMaterial,eg as MeshSSSNodeMaterial,te as MeshStandardMaterial,Yp as MeshStandardNodeMaterial,se as MeshToonMaterial,ig as MeshToonNodeMaterial,Gr as MinEquation,hr as MirroredRepeatWrapping,X as MixOperation,Pu as ModelNode,Od as ModelViewProjectionNode,lc as MorphNode,yt as MultiplyBlending,Y as MultiplyOperation,pr as NearestFilter,Pe as NearestMipmapLinearFilter,gr as NearestMipmapNearestFilter,Jr as NeutralToneMapping,mr as NeverCompare,Ct as NeverDepth,Mr as NeverStencilFunc,G as NoBlending,m as NoColorSpace,d as NoToneMapping,Ms as Node,Ss as NodeAccess,bx as NodeAttribute,lT as NodeBuilder,Sx as NodeCache,vx as NodeCode,dT as NodeFrame,cT as NodeFunctionInput,qN as NodeLoader,Yc as NodeMaterial,KN as NodeMaterialLoader,os as NodeMaterialObserver,XN as NodeObjectLoader,_s as NodeShaderStage,Ns as NodeType,xx as NodeUniform,vs as NodeUpdateType,Ts as NodeUtils,Tx as NodeVar,_x as NodeVarying,F as NormalBlending,ql as NormalMapNode,_r as NotEqualCompare,Tt as NotEqualDepth,Nr as NotEqualStencilFunc,fe as Object3D,wu as Object3DNode,is as ObjectLoader,S as ObjectSpaceNormalMap,st as OneFactor,ht as OneMinusDstAlphaFactor,ct as OneMinusDstColorFactor,dt as OneMinusSrcAlphaFactor,lt as OneMinusSrcColorFactor,xe as OrthographicCamera,um as OutputStructNode,Oe as PCFShadowMap,eT as PMREMGenerator,$p as PMREMNode,im as ParameterNode,qf as PassNode,Ue as PerspectiveCamera,Rh as PhongLightingModel,xp as PhysicalLightingModel,me as Plane,zr as PointLight,bb as PointLightNode,hf as PointUVNode,I as PointsMaterial,dg as PointsNodeMaterial,GN as PostProcessing,WN as PostProcessingUtils,Of as PosterizeNode,rn as PropertyNode,Qm as QuadMesh,ur as RED_GREEN_RGTC2_Format,or as RED_RGTC1_Format,De as REVISION,Fe as RGBAFormat,Ke as RGBAIntegerFormat,rr as RGBA_ASTC_10x10_Format,Jt as RGBA_ASTC_10x5_Format,er as RGBA_ASTC_10x6_Format,tr as RGBA_ASTC_10x8_Format,sr as RGBA_ASTC_12x10_Format,ir as RGBA_ASTC_12x12_Format,Ht as RGBA_ASTC_4x4_Format,jt as RGBA_ASTC_5x4_Format,qt as RGBA_ASTC_5x5_Format,Kt as RGBA_ASTC_6x5_Format,Xt as RGBA_ASTC_6x6_Format,Yt as RGBA_ASTC_8x5_Format,Qt as RGBA_ASTC_8x6_Format,Zt as RGBA_ASTC_8x8_Format,nr as RGBA_BPTC_Format,Wt as RGBA_ETC2_EAC_Format,kt as RGBA_PVRTC_2BPPV1_Format,Gt as RGBA_PVRTC_4BPPV1_Format,Pt as RGBA_S3TC_DXT1_Format,Lt as RGBA_S3TC_DXT3_Format,Dt as RGBA_S3TC_DXT5_Format,qe as RGBFormat,je as RGBIntegerFormat,zt as RGB_ETC1_Format,$t as RGB_ETC2_Format,Ot as RGB_PVRTC_2BPPV1_Format,Vt as RGB_PVRTC_4BPPV1_Format,It as RGB_S3TC_DXT1_Format,Ee as RGFormat,He as RGIntegerFormat,Jm as RTTNode,Sy as RangeNode,Wr as RectAreaLight,fT as RectAreaLightNode,We as RedFormat,$e as RedIntegerFormat,Al as ReferenceNode,jm as ReflectorNode,Xr as ReinhardToneMapping,su as RemapNode,lu as RenderOutputNode,ge as RenderTarget,ka as RendererReferenceNode,dr as RepeatWrapping,Lr as ReplaceStencilOp,tt as ReverseSubtractEquation,cg as RotateNode,lr as SIGNED_RED_GREEN_RGTC2_Format,ar as SIGNED_RED_RGTC1_Format,Ve as SRGBColorSpace,l as SRGBTransfer,z as Scene,ff as SceneNode,bc as ScreenNode,gy as ScriptableNode,ly as ScriptableValueNode,Ds as SetNode,oe as ShadowMaterial,ib as ShadowNode,yg as ShadowNodeMaterial,Qe as ShortType,tc as SkinningNode,Me as SphereGeometry,Ls as SplitNode,kr as SpotLight,yT as SpotLightNode,ne as SpriteMaterial,gg as SpriteNodeMaterial,Em as SpriteSheetUVNode,nt as SrcAlphaFactor,ot as SrcAlphaSaturateFactor,it as SrcColorFactor,nm as StackNode,c as StaticDrawUsage,af as StorageArrayElementNode,of as StorageBufferAttribute,lf as StorageBufferNode,nf as StorageInstancedBufferAttribute,HN as StorageTexture,Tf as StorageTextureNode,et as SubtractEquation,bt as SubtractiveBlending,hx as TSL,N as TangentSpaceNormalMap,Fs as TempNode,ee as Texture,xg as Texture3DNode,bu as TextureNode,gu as TextureSizeNode,$a as ToneMappingNode,Kf as ToonOutlinePassNode,Mm as TriplanarTexturesNode,Ne as UVMapping,ue as Uint16BufferAttribute,ae as Uint32BufferAttribute,vl as UniformArrayNode,Ki as UniformGroupNode,en as UniformNode,pe as UnsignedByteType,he as UnsignedInt248Type,Mt as UnsignedInt5999Type,f as UnsignedIntType,Et as UnsignedShort4444Type,wt as UnsignedShort5551Type,Xe as UnsignedShortType,vf as UserDataNode,Ce as VSMShadowMap,Aa as VarNode,Ea as VaryingNode,t as Vector2,r as Vector3,s as Vector4,cf as VertexColorNode,Lc as ViewportDepthNode,Ic as ViewportDepthTextureNode,zf as ViewportSharedTextureNode,Mc as ViewportTextureNode,_g as VolumeNodeMaterial,b as WebGLCoordinateSystem,V as WebGLCubeRenderTarget,v as WebGPUCoordinateSystem,LN as WebGPURenderer,rt as ZeroFactor,Dr as ZeroStencilOp,Ze as createCanvasElement,Rs as defaultBuildStages,As as defaultShaderStages,Cs as shaderStages,Es as vectorComponents};
=======
import{Color as e,Vector2 as t,Vector3 as s,Vector4 as r,Matrix3 as n,Matrix4 as i,EventDispatcher as o,MathUtils as a,ColorManagement as u,SRGBTransfer as l,NoToneMapping as d,StaticDrawUsage as c,InterleavedBuffer as h,DynamicDrawUsage as p,InterleavedBufferAttribute as g,NoColorSpace as m,UnsignedIntType as f,IntType as y,WebGLCoordinateSystem as b,BackSide as x,CubeReflectionMapping as T,CubeRefractionMapping as _,WebGPUCoordinateSystem as N,TangentSpaceNormalMap as v,ObjectSpaceNormalMap as S,InstancedInterleavedBuffer as A,InstancedBufferAttribute as R,DataArrayTexture as C,FloatType as E,FramebufferTexture as w,LinearMipmapLinearFilter as M,DepthTexture as B,Material as U,NormalBlending as F,PointsMaterial as P,LineBasicMaterial as I,LineDashedMaterial as L,MeshNormalMaterial as D,WebGLCubeRenderTarget as V,BoxGeometry as O,NoBlending as G,Mesh as k,Scene as z,LinearFilter as $,CubeCamera as H,CubeTexture as W,EquirectangularReflectionMapping as j,EquirectangularRefractionMapping as q,AddOperation as K,MixOperation as X,MultiplyOperation as Y,MeshBasicMaterial as Q,MeshLambertMaterial as Z,MeshPhongMaterial as J,Texture as ee,MeshStandardMaterial as te,MeshPhysicalMaterial as se,MeshToonMaterial as re,MeshMatcapMaterial as ne,SpriteMaterial as ie,ShadowMaterial as oe,Uint32BufferAttribute as ae,Uint16BufferAttribute as ue,DoubleSide as le,DepthStencilFormat as de,DepthFormat as ce,UnsignedInt248Type as he,UnsignedByteType as pe,RenderTarget as ge,Plane as me,Object3D as fe,HalfFloatType as ye,LinearMipMapLinearFilter as be,OrthographicCamera as xe,BufferGeometry as Te,Float32BufferAttribute as _e,UVMapping as Ne,Euler as ve,LinearSRGBColorSpace as Se,LessCompare as Ae,VSMShadowMap as Re,RGFormat as Ce,SphereGeometry as Ee,BufferAttribute as we,CubeUVReflectionMapping as Me,PerspectiveCamera as Be,RGBAFormat as Ue,LinearMipmapNearestFilter as Fe,NearestMipmapLinearFilter as Pe,Float16BufferAttribute as Ie,REVISION as Le,SRGBColorSpace as De,PCFShadowMap as Ve,FrontSide as Oe,Frustum as Ge,DataTexture as ke,RedIntegerFormat as ze,RedFormat as $e,RGIntegerFormat as He,RGBIntegerFormat as We,RGBFormat as je,RGBAIntegerFormat as qe,UnsignedShortType as Ke,ByteType as Xe,ShortType as Ye,createCanvasElement as Qe,AddEquation as Ze,SubtractEquation as Je,ReverseSubtractEquation as et,ZeroFactor as tt,OneFactor as st,SrcColorFactor as rt,SrcAlphaFactor as nt,SrcAlphaSaturateFactor as it,DstColorFactor as ot,DstAlphaFactor as at,OneMinusSrcColorFactor as ut,OneMinusSrcAlphaFactor as lt,OneMinusDstColorFactor as dt,OneMinusDstAlphaFactor as ct,CullFaceNone as ht,CullFaceBack as pt,CullFaceFront as gt,CustomBlending as mt,MultiplyBlending as ft,SubtractiveBlending as yt,AdditiveBlending as bt,NotEqualDepth as xt,GreaterDepth as Tt,GreaterEqualDepth as _t,EqualDepth as Nt,LessEqualDepth as vt,LessDepth as St,AlwaysDepth as At,NeverDepth as Rt,UnsignedShort4444Type as Ct,UnsignedShort5551Type as Et,UnsignedInt5999Type as wt,AlphaFormat as Mt,LuminanceFormat as Bt,LuminanceAlphaFormat as Ut,RGB_S3TC_DXT1_Format as Ft,RGBA_S3TC_DXT1_Format as Pt,RGBA_S3TC_DXT3_Format as It,RGBA_S3TC_DXT5_Format as Lt,RGB_PVRTC_4BPPV1_Format as Dt,RGB_PVRTC_2BPPV1_Format as Vt,RGBA_PVRTC_4BPPV1_Format as Ot,RGBA_PVRTC_2BPPV1_Format as Gt,RGB_ETC1_Format as kt,RGB_ETC2_Format as zt,RGBA_ETC2_EAC_Format as $t,RGBA_ASTC_4x4_Format as Ht,RGBA_ASTC_5x4_Format as Wt,RGBA_ASTC_5x5_Format as jt,RGBA_ASTC_6x5_Format as qt,RGBA_ASTC_6x6_Format as Kt,RGBA_ASTC_8x5_Format as Xt,RGBA_ASTC_8x6_Format as Yt,RGBA_ASTC_8x8_Format as Qt,RGBA_ASTC_10x5_Format as Zt,RGBA_ASTC_10x6_Format as Jt,RGBA_ASTC_10x8_Format as es,RGBA_ASTC_10x10_Format as ts,RGBA_ASTC_12x10_Format as ss,RGBA_ASTC_12x12_Format as rs,RGBA_BPTC_Format as ns,RED_RGTC1_Format as is,SIGNED_RED_RGTC1_Format as os,RED_GREEN_RGTC2_Format as as,SIGNED_RED_GREEN_RGTC2_Format as us,RepeatWrapping as ls,ClampToEdgeWrapping as ds,MirroredRepeatWrapping as cs,NearestFilter as hs,NearestMipmapNearestFilter as ps,NeverCompare as gs,AlwaysCompare as ms,LessEqualCompare as fs,EqualCompare as ys,GreaterEqualCompare as bs,GreaterCompare as xs,NotEqualCompare as Ts,warnOnce as _s,NotEqualStencilFunc as Ns,GreaterStencilFunc as vs,GreaterEqualStencilFunc as Ss,EqualStencilFunc as As,LessEqualStencilFunc as Rs,LessStencilFunc as Cs,AlwaysStencilFunc as Es,NeverStencilFunc as ws,DecrementWrapStencilOp as Ms,IncrementWrapStencilOp as Bs,DecrementStencilOp as Us,IncrementStencilOp as Fs,InvertStencilOp as Ps,ReplaceStencilOp as Is,ZeroStencilOp as Ls,KeepStencilOp as Ds,MaxEquation as Vs,MinEquation as Os,SpotLight as Gs,PointLight as ks,DirectionalLight as zs,RectAreaLight as $s,AmbientLight as Hs,HemisphereLight as Ws,LightProbe as js,LinearToneMapping as qs,ReinhardToneMapping as Ks,CineonToneMapping as Xs,ACESFilmicToneMapping as Ys,AgXToneMapping as Qs,NeutralToneMapping as Zs,Group as Js,Loader as er,FileLoader as tr,MaterialLoader as sr,ObjectLoader as rr}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BasicShadowMap,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,Camera,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,Matrix2,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneGeometry,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLMultipleRenderTargets,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const nr=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class ir{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=nr,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:s,material:r}=e;if(t={material:this.getMaterialData(r),geometry:{attributes:this.getAttributesData(s.attributes),indexVersion:s.index?s.index.version:null,drawRange:{start:s.drawRange.start,count:s.drawRange.count}},worldMatrix:e.object.matrixWorld.clone()},e.object.center&&(t.center=e.object.center.clone()),e.object.morphTargetInfluences&&(t.morphTargetInfluences=e.object.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:s,height:r}=e.context;t.bufferWidth=s,t.bufferHeight=r}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const s in e){const r=e[s];t[s]={version:r.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const s of this.refreshUniforms){const r=e[s];null!=r&&("object"==typeof r&&void 0!==r.clone?!0===r.isTexture?t[s]={id:r.id,version:r.version}:t[s]=r.clone():t[s]=r)}return t}equals(e){const{object:t,material:s,geometry:r}=e,n=this.getRenderObjectData(e);if(!0!==n.worldMatrix.equals(t.matrixWorld))return n.worldMatrix.copy(t.matrixWorld),!1;const i=n.material;for(const e in i){const t=i[e],r=s[e];if(void 0!==t.equals){if(!1===t.equals(r))return t.copy(r),!1}else if(!0===r.isTexture){if(t.id!==r.id||t.version!==r.version)return t.id=r.id,t.version=r.version,!1}else if(t!==r)return i[e]=r,!1}if(i.transmission>0){const{width:t,height:s}=e.context;if(n.bufferWidth!==t||n.bufferHeight!==s)return n.bufferWidth=t,n.bufferHeight=s,!1}const o=n.geometry,a=r.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(l.length!==d.length)return n.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],s=a[e];if(void 0===s)return delete u[e],!1;if(t.version!==s.version)return t.version=s.version,!1}const c=r.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==r.drawRange.start||o.drawRange.count!==r.drawRange.count)return o.drawRange.start=r.drawRange.start,o.drawRange.count=r.drawRange.count,!1;if(n.morphTargetInfluences){let e=!1;for(let s=0;s<n.morphTargetInfluences.length;s++)n.morphTargetInfluences[s]!==t.morphTargetInfluences[s]&&(e=!0);if(e)return!0}return n.center&&!1===n.center.equals(t.center)?(n.center.copy(t.center),!0):(null!==e.bundle&&(n.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:s}=t;if(this.renderId!==s)return this.renderId=s,!0;const r=!0===e.object.static,n=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(r||n)return!1;return!0!==this.equals(e)}}function or(e,t=0){let s=3735928559^t,r=1103547991^t;if(e instanceof Array)for(let t,n=0;n<e.length;n++)t=e[n],s=Math.imul(s^t,2654435761),r=Math.imul(r^t,1597334677);else for(let t,n=0;n<e.length;n++)t=e.charCodeAt(n),s=Math.imul(s^t,2654435761),r=Math.imul(r^t,1597334677);return s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),4294967296*(2097151&r)+(s>>>0)}const ar=e=>or(e),ur=e=>or(e),lr=(...e)=>or(e);function dr(e,t=!1){const s=[];!0===e.isNode&&(s.push(e.id),e=e.getSelf());for(const{property:r,childNode:n}of cr(e))s.push(s,or(r.slice(0,-4)),n.getCacheKey(t));return or(s)}function*cr(e,t=!1){for(const s in e){if(!0===s.startsWith("_"))continue;const r=e[s];if(!0===Array.isArray(r))for(let e=0;e<r.length;e++){const n=r[e];n&&(!0===n.isNode||t&&"function"==typeof n.toJSON)&&(yield{property:s,index:e,childNode:n})}else if(r&&!0===r.isNode)yield{property:s,childNode:r};else if("object"==typeof r)for(const e in r){const n=r[e];n&&(!0===n.isNode||t&&"function"==typeof n.toJSON)&&(yield{property:s,index:e,childNode:n})}}}function hr(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function pr(o,...a){const u=o?o.slice(-4):void 0;return 1===a.length&&("vec2"===u?a=[a[0],a[0]]:"vec3"===u?a=[a[0],a[0],a[0]]:"vec4"===u&&(a=[a[0],a[0],a[0],a[0]])),"color"===o?new e(...a):"vec2"===u?new t(...a):"vec3"===u?new s(...a):"vec4"===u?new r(...a):"mat3"===u?new n(...a):"mat4"===u?new i(...a):"bool"===o?a[0]||!1:"float"===o||"int"===o||"uint"===o?a[0]||0:"string"===o?a[0]||"":"ArrayBuffer"===o?mr(a[0]):null}function gr(e){let t="";const s=new Uint8Array(e);for(let e=0;e<s.length;e++)t+=String.fromCharCode(s[e]);return btoa(t)}function mr(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var fr=Object.freeze({__proto__:null,arrayBufferToBase64:gr,base64ToArrayBuffer:mr,getCacheKey:dr,getNodeChildren:cr,getValueFromType:pr,getValueType:hr,hash:lr,hashArray:ur,hashString:ar});const yr={VERTEX:"vertex",FRAGMENT:"fragment"},br={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},xr={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Tr=["fragment","vertex"],_r=["setup","analyze","generate"],Nr=[...Tr,"compute"],vr=["x","y","z","w"];let Sr=0;class Ar extends o{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=br.NONE,this.updateBeforeType=br.NONE,this.updateAfterType=br.NONE,this.uuid=a.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:Sr++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,br.FRAME)}onRenderUpdate(e){return this.onUpdate(e,br.RENDER)}onObjectUpdate(e){return this.onUpdate(e,br.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of cr(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=dr(this,e),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let s=0;for(const e of this.getChildren())t["node"+s++]=e;return null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const s of Object.values(t))s&&!0===s.isNode&&s.build(e)}}generate(e,t){const{outputNode:s}=e.getNodeProperties(this);if(s&&!0===s.isNode)return s.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const s=this.getShared(e);if(this!==s)return s.build(e,t);e.addNode(this),e.addChain(this);let r=null;const n=e.getBuildStage();if("setup"===n){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){e.stack.nodes.length;t.initialized=!0,t.outputNode=this.setup(e),null!==t.outputNode&&e.stack.nodes.length;for(const s of Object.values(t))s&&!0===s.isNode&&s.build(e)}}else if("analyze"===n)this.analyze(e);else if("generate"===n){if(1===this.generate.length){const s=this.getNodeType(e),n=e.getDataFromNode(this);r=n.snippet,void 0===r?(r=this.generate(e)||"",n.snippet=r):void 0!==n.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),r=e.format(r,s,t)}else r=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),r}getSerializeChildren(){return cr(this)}serialize(e){const t=this.getSerializeChildren(),s={};for(const{property:r,index:n,childNode:i}of t)void 0!==n?(void 0===s[r]&&(s[r]=Number.isInteger(n)?[]:{}),s[r][n]=i.toJSON(e.meta).uuid):s[r]=i.toJSON(e.meta).uuid;Object.keys(s).length>0&&(e.inputNodes=s)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const s in e.inputNodes)if(Array.isArray(e.inputNodes[s])){const r=[];for(const n of e.inputNodes[s])r.push(t[n]);this[s]=r}else if("object"==typeof e.inputNodes[s]){const r={};for(const n in e.inputNodes[s]){const i=e.inputNodes[s][n];r[n]=t[i]}this[s]=r}else{const r=e.inputNodes[s];this[s]=t[r]}}}toJSON(e){const{uuid:t,type:s}=this,r=void 0===e||"string"==typeof e;r&&(e={textures:{},images:{},nodes:{}});let n=e.nodes[t];function i(e){const t=[];for(const s in e){const r=e[s];delete r.metadata,t.push(r)}return t}if(void 0===n&&(n={uuid:t,type:s,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==r&&(e.nodes[n.uuid]=n),this.serialize(n),delete n.meta),r){const t=i(e.textures),s=i(e.images),r=i(e.nodes);t.length>0&&(n.textures=t),s.length>0&&(n.images=s),r.length>0&&(n.nodes=r)}return n}}class Rr extends Ar{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class Cr extends Ar{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let s=null;for(const r of this.convertTo.split("|"))null!==s&&e.getTypeLength(t)!==e.getTypeLength(r)||(s=r);return s}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const s=this.node,r=this.getNodeType(e),n=s.build(e,r);return e.format(n,r,t)}}class Er extends Ar{static get type(){return"TempNode"}constructor(e){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const s=e.getVectorType(this.getNodeType(e,t)),r=e.getDataFromNode(this);if(void 0!==r.propertyName)return e.format(r.propertyName,s,t);if("void"!==s&&"void"!==t&&this.hasDependencies(e)){const n=super.build(e,s),i=e.getVarFromNode(this,null,s),o=e.getPropertyName(i);return e.addLineFlowCode(`${o} = ${n}`,this),r.snippet=n,r.propertyName=o,e.format(r.propertyName,s,t)}}return super.build(e,t)}}class wr extends Er{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,s)=>t+e.getTypeLength(s.getNodeType(e))),0))}generate(e,t){const s=this.getNodeType(e),r=this.nodes,n=e.getComponentType(s),i=[];for(const t of r){let s=t.build(e);const r=e.getComponentType(t.getNodeType(e));r!==n&&(s=e.format(s,r,n)),i.push(s)}const o=`${e.getType(s)}( ${i.join(", ")} )`;return e.format(o,s,t)}}const Mr=vr.join("");class Br extends Ar{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(vr.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const s=this.node,r=e.getTypeLength(s.getNodeType(e));let n=null;if(r>1){let i=null;this.getVectorLength()>=r&&(i=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=s.build(e,i);n=this.components.length===r&&this.components===Mr.slice(0,this.components.length)?e.format(o,i,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else n=s.build(e,t);return n}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Ur extends Er{static get type(){return"SetNode"}constructor(e,t,s){super(),this.sourceNode=e,this.components=t,this.targetNode=s}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:s,targetNode:r}=this,n=this.getNodeType(e),i=e.getTypeFromLength(s.length,r.getNodeType(e)),o=r.build(e,i),a=t.build(e,n),u=e.getTypeLength(n),l=[];for(let e=0;e<u;e++){const t=vr[e];t===s[0]?(l.push(o),e+=s.length-1):l.push(a+"."+t)}return`${e.getType(n)}( ${l.join(", ")} )`}}class Fr extends Er{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:s}=this,r=this.getNodeType(e),n=s.build(e),i=e.getVarFromNode(this),o=e.getPropertyName(i);e.addLineFlowCode(o+" = "+n,this);const a=e.getTypeLength(r),u=[];let l=0;for(let e=0;e<a;e++){const s=vr[e];s===t[l]?(u.push("1.0 - "+o+"."+s),l++):u.push(o+"."+s)}return`${e.getType(r)}( ${u.join(", ")} )`}}class Pr extends Ar{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?hr(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=hr(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=gr(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?pr(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}class Ir extends Pr{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const s=this.getNodeType(e);return e.format(this.generateConst(e),s,t)}}let Lr=null;const Dr=new Map;function Vr(e,t){if(Dr.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);Dr.set(e,t)}}const Or=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Gr=e=>Or(e).split("").sort().join(""),kr={setup(e,t){const s=t.shift();return e(pn(s),...t)},get(e,t,s){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(Lr.assign(s,...e),s);if(Dr.has(t)){const r=Dr.get(t);return e.isStackNode?(...e)=>s.add(r(...e)):(...e)=>r(s,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&Dr.has(t.slice(0,t.length-6))){const r=Dr.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>s.assign(e[0],r(...e)):(...e)=>s.assign(r(s,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=Or(t),hn(new Br(s,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Gr(t.slice(3).toLowerCase()),s=>hn(new Ur(e,t,s));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Gr(t.slice(4).toLowerCase()),()=>hn(new Fr(hn(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),hn(new Br(e,t));if(!0===/^\d+$/.test(t))return hn(new Rr(s,new Ir(Number(t),"uint")))}return Reflect.get(e,t,s)},set:(e,t,s,r)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,s,r):(r[t].assign(s),!0)},zr=new WeakMap,$r=new WeakMap,Hr=function(e,t=null){for(const s in e)e[s]=hn(e[s],t);return e},Wr=function(e,t=null){const s=e.length;for(let r=0;r<s;r++)e[r]=hn(e[r],t);return e},jr=function(e,t=null,s=null,r=null){const n=e=>hn(null!==r?Object.assign(e,r):e);return null===t?(...t)=>n(new e(...gn(t))):null!==s?(s=hn(s),(...r)=>n(new e(t,...gn(r),s))):(...s)=>n(new e(t,...gn(s)))},qr=function(e,...t){return hn(new e(...gn(t)))};class Kr extends Ar{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}call(e){const{shaderNode:t,inputNodes:s}=this,r=e.getNodeProperties(t);if(r.onceOutput)return r.onceOutput;let n=null;if(t.layout){let r=$r.get(e.constructor);void 0===r&&(r=new WeakMap,$r.set(e.constructor,r));let i=r.get(t);void 0===i&&(i=hn(e.buildFunctionNode(t)),r.set(t,i)),null!==e.currentFunctionNode&&e.currentFunctionNode.includes.push(i),n=hn(i.call(s))}else{const r=t.jsFunc,i=null!==s?r(s,e):r(e);n=hn(i)}return t.once&&(r.onceOutput=n),n}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class Xr extends Ar{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return pn(e),hn(new Kr(this,e))}setup(){return this.call()}}const Yr=[!1,!0],Qr=[0,1,2,3],Zr=[-1,-2],Jr=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],en=new Map;for(const e of Yr)en.set(e,new Ir(e));const tn=new Map;for(const e of Qr)tn.set(e,new Ir(e,"uint"));const sn=new Map([...tn].map((e=>new Ir(e.value,"int"))));for(const e of Zr)sn.set(e,new Ir(e,"int"));const rn=new Map([...sn].map((e=>new Ir(e.value))));for(const e of Jr)rn.set(e,new Ir(e));for(const e of Jr)rn.set(-e,new Ir(-e));const nn={bool:en,uint:tn,ints:sn,float:rn},on=new Map([...en,...rn]),an=(e,t)=>on.has(e)?on.get(e):!0===e.isNode?e:new Ir(e,t),un=function(e,t=null){return(...s)=>{if((0===s.length||!["bool","float","int","uint"].includes(e)&&s.every((e=>"object"!=typeof e)))&&(s=[pr(e,...s)]),1===s.length&&null!==t&&t.has(s[0]))return hn(t.get(s[0]));if(1===s.length){const t=an(s[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?hn(t):hn(new Cr(t,e))}const r=s.map((e=>an(e)));return hn(new wr(r,e))}},ln=e=>"object"==typeof e&&null!==e?e.value:e,dn=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function cn(e,t){return new Proxy(new Xr(e,t),kr)}const hn=(e,t=null)=>function(e,t=null){const s=hr(e);if("node"===s){let t=zr.get(e);return void 0===t&&(t=new Proxy(e,kr),zr.set(e,t),zr.set(t,t)),t}return null===t&&("float"===s||"boolean"===s)||s&&"shader"!==s&&"string"!==s?hn(an(e,t)):"shader"===s?yn(e):e}(e,t),pn=(e,t=null)=>new Hr(e,t),gn=(e,t=null)=>new Wr(e,t),mn=(...e)=>new jr(...e),fn=(...e)=>new qr(...e),yn=(e,t)=>{const s=new cn(e,t),r=(...e)=>{let t;return pn(e),t=e[0]&&e[0].isNode?[...e]:e[0],s.call(t)};return r.shaderNode=s,r.setLayout=e=>(s.setLayout(e),r),r.once=()=>(s.once=!0,r),r},bn=(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),yn(...e));Vr("toGlobal",(e=>(e.global=!0,e)));const xn=e=>{Lr=e},Tn=()=>Lr,_n=(...e)=>Lr.If(...e);function Nn(e){return Lr&&Lr.add(e),e}Vr("append",Nn);const vn=new un("color"),Sn=new un("float",nn.float),An=new un("int",nn.ints),Rn=new un("uint",nn.uint),Cn=new un("bool",nn.bool),En=new un("vec2"),wn=new un("ivec2"),Mn=new un("uvec2"),Bn=new un("bvec2"),Un=new un("vec3"),Fn=new un("ivec3"),Pn=new un("uvec3"),In=new un("bvec3"),Ln=new un("vec4"),Dn=new un("ivec4"),Vn=new un("uvec4"),On=new un("bvec4"),Gn=new un("mat2"),kn=new un("mat3"),zn=new un("mat4"),$n=(e="")=>hn(new Ir(e,"string")),Hn=e=>hn(new Ir(e,"ArrayBuffer"));Vr("toColor",vn),Vr("toFloat",Sn),Vr("toInt",An),Vr("toUint",Rn),Vr("toBool",Cn),Vr("toVec2",En),Vr("toIVec2",wn),Vr("toUVec2",Mn),Vr("toBVec2",Bn),Vr("toVec3",Un),Vr("toIVec3",Fn),Vr("toUVec3",Pn),Vr("toBVec3",In),Vr("toVec4",Ln),Vr("toIVec4",Dn),Vr("toUVec4",Vn),Vr("toBVec4",On),Vr("toMat2",Gn),Vr("toMat3",kn),Vr("toMat4",zn);const Wn=mn(Rr),jn=(e,t)=>hn(new Cr(hn(e),t)),qn=(e,t)=>hn(new Br(hn(e),t));Vr("element",Wn),Vr("convert",jn);class Kn extends Ar{static get type(){return"UniformGroupNode"}constructor(e,t=!1,s=1){super("string"),this.name=e,this.version=0,this.shared=t,this.order=s,this.isUniformGroup=!0}set needsUpdate(e){!0===e&&this.version++}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const Xn=e=>new Kn(e),Yn=(e,t=0)=>new Kn(e,!0,t),Qn=Yn("frame"),Zn=Yn("render"),Jn=Xn("object");class ei extends Pr{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=Jn}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const s=this.getSelf();return e=e.bind(s),super.onUpdate((t=>{const r=e(t,s);void 0!==r&&(this.value=r)}),t)}generate(e,t){const s=this.getNodeType(e),r=this.getUniformHash(e);let n=e.getNodeFromHash(r);void 0===n&&(e.setHashNode(this,r),n=this);const i=n.getInputType(e),o=e.getUniformFromNode(n,i,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,s,t)}}const ti=(e,t)=>{const s=dn(t||e),r=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return hn(new ei(r,s))};class si extends Ar{static get type(){return"PropertyNode"}constructor(e,t=null,s=!1){super(e),this.name=t,this.varying=s,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const ri=(e,t)=>hn(new si(e,t)),ni=(e,t)=>hn(new si(e,t,!0)),ii=fn(si,"vec4","DiffuseColor"),oi=fn(si,"vec3","EmissiveColor"),ai=fn(si,"float","Roughness"),ui=fn(si,"float","Metalness"),li=fn(si,"float","Clearcoat"),di=fn(si,"float","ClearcoatRoughness"),ci=fn(si,"vec3","Sheen"),hi=fn(si,"float","SheenRoughness"),pi=fn(si,"float","Iridescence"),gi=fn(si,"float","IridescenceIOR"),mi=fn(si,"float","IridescenceThickness"),fi=fn(si,"float","AlphaT"),yi=fn(si,"float","Anisotropy"),bi=fn(si,"vec3","AnisotropyT"),xi=fn(si,"vec3","AnisotropyB"),Ti=fn(si,"color","SpecularColor"),_i=fn(si,"float","SpecularF90"),Ni=fn(si,"float","Shininess"),vi=fn(si,"vec4","Output"),Si=fn(si,"float","dashSize"),Ai=fn(si,"float","gapSize"),Ri=fn(si,"float","pointWidth"),Ci=fn(si,"float","IOR"),Ei=fn(si,"float","Transmission"),wi=fn(si,"float","Thickness"),Mi=fn(si,"float","AttenuationDistance"),Bi=fn(si,"color","AttenuationColor"),Ui=fn(si,"float","Dispersion");class Fi extends Er{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const s=e.getTypeLength(t.node.getNodeType(e));return vr.join("").slice(0,s)!==t.components}return!1}generate(e,t){const{targetNode:s,sourceNode:r}=this,n=this.needsSplitAssign(e),i=s.getNodeType(e),o=s.context({assign:!0}).build(e),a=r.build(e,i),u=r.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(n){const r=e.getVarFromNode(this,null,i),n=e.getPropertyName(r);e.addLineFlowCode(`${n} = ${a}`,this);const u=s.node.context({assign:!0}).build(e);for(let t=0;t<s.components.length;t++){const r=s.components[t];e.addLineFlowCode(`${u}.${r} = ${n}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,i,t)}}const Pi=mn(Fi);Vr("assign",Pi);class Ii extends Er{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],s=this.functionNode,r=s.getInputs(e),n=this.parameters,i=(t,s)=>{const r=s.type;let n;return n="pointer"===r?"&"+t.build(e):t.build(e,r),n};if(Array.isArray(n))for(let e=0;e<n.length;e++)t.push(i(n[e],r[e]));else for(const e of r){const s=n[e.name];if(void 0===s)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(i(s,e))}return`${s.build(e,"property")}( ${t.join(", ")} )`}}const Li=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?gn(t):pn(t[0]),hn(new Ii(hn(e),t)));Vr("call",Li);class Di extends Er{static get type(){return"OperatorNode"}constructor(e,t,s,...r){if(super(),r.length>0){let n=new Di(e,t,s);for(let t=0;t<r.length-1;t++)n=new Di(e,n,r[t]);t=n,s=r[r.length-1]}this.op=e,this.aNode=t,this.bNode=s}getNodeType(e,t){const s=this.op,r=this.aNode,n=this.bNode,i=r.getNodeType(e),o=void 0!==n?n.getNodeType(e):null;if("void"===i||"void"===o)return"void";if("%"===s)return i;if("~"===s||"&"===s||"|"===s||"^"===s||">>"===s||"<<"===s)return e.getIntegerType(i);if("!"===s||"=="===s||"&&"===s||"||"===s||"^^"===s)return"bool";if("<"===s||">"===s||"<="===s||">="===s){const s=t?e.getTypeLength(t):Math.max(e.getTypeLength(i),e.getTypeLength(o));return s>1?`bvec${s}`:"bool"}return"float"===i&&e.isMatrix(o)?o:e.isMatrix(i)&&e.isVector(o)?e.getVectorFromMatrix(i):e.isVector(i)&&e.isMatrix(o)?e.getVectorFromMatrix(o):e.getTypeLength(o)>e.getTypeLength(i)?o:i}generate(e,t){const s=this.op,r=this.aNode,n=this.bNode,i=this.getNodeType(e,t);let o=null,a=null;"void"!==i?(o=r.getNodeType(e),a=void 0!==n?n.getNodeType(e):null,"<"===s||">"===s||"<="===s||">="===s||"=="===s?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===s||"<<"===s?(o=i,a=e.changeComponentType(a,"uint")):e.isMatrix(o)&&e.isVector(a)?a=e.getVectorFromMatrix(o):o=e.isVector(o)&&e.isMatrix(a)?e.getVectorFromMatrix(a):a=i):o=a=i;const u=r.build(e,o),l=void 0!==n?n.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(s);return"void"!==t?"<"===s&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,i,t):e.format(`( ${u} < ${l} )`,i,t):"<="===s&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,i,t):e.format(`( ${u} <= ${l} )`,i,t):">"===s&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,i,t):e.format(`( ${u} > ${l} )`,i,t):">="===s&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,i,t):e.format(`( ${u} >= ${l} )`,i,t):"!"===s||"~"===s?e.format(`(${s}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,i,t):e.format(`( ${u} ${s} ${l} )`,i,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,i,t):e.format(`${u} ${s} ${l}`,i,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const Vi=mn(Di,"+"),Oi=mn(Di,"-"),Gi=mn(Di,"*"),ki=mn(Di,"/"),zi=mn(Di,"%"),$i=mn(Di,"=="),Hi=mn(Di,"!="),Wi=mn(Di,"<"),ji=mn(Di,">"),qi=mn(Di,"<="),Ki=mn(Di,">="),Xi=mn(Di,"&&"),Yi=mn(Di,"||"),Qi=mn(Di,"!"),Zi=mn(Di,"^^"),Ji=mn(Di,"&"),eo=mn(Di,"~"),to=mn(Di,"|"),so=mn(Di,"^"),ro=mn(Di,"<<"),no=mn(Di,">>");Vr("add",Vi),Vr("sub",Oi),Vr("mul",Gi),Vr("div",ki),Vr("modInt",zi),Vr("equal",$i),Vr("notEqual",Hi),Vr("lessThan",Wi),Vr("greaterThan",ji),Vr("lessThanEqual",qi),Vr("greaterThanEqual",Ki),Vr("and",Xi),Vr("or",Yi),Vr("not",Qi),Vr("xor",Zi),Vr("bitAnd",Ji),Vr("bitNot",eo),Vr("bitOr",to),Vr("bitXor",so),Vr("shiftLeft",ro),Vr("shiftRight",no);const io=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),zi(...e));Vr("remainder",io);class oo extends Er{static get type(){return"MathNode"}constructor(e,t,s=null,r=null){super(),this.method=e,this.aNode=t,this.bNode=s,this.cNode=r}getInputType(e){const t=this.aNode.getNodeType(e),s=this.bNode?this.bNode.getNodeType(e):null,r=this.cNode?this.cNode.getNodeType(e):null,n=e.isMatrix(t)?0:e.getTypeLength(t),i=e.isMatrix(s)?0:e.getTypeLength(s),o=e.isMatrix(r)?0:e.getTypeLength(r);return n>i&&n>o?t:i>o?s:o>n?r:t}getNodeType(e){const t=this.method;return t===oo.LENGTH||t===oo.DISTANCE||t===oo.DOT?"float":t===oo.CROSS?"vec3":t===oo.ALL?"bool":t===oo.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===oo.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){const s=this.method,r=this.getNodeType(e),n=this.getInputType(e),i=this.aNode,o=this.bNode,a=this.cNode,u=!0===e.renderer.isWebGLRenderer;if(s===oo.TRANSFORM_DIRECTION){let s=i,r=o;e.isMatrix(s.getNodeType(e))?r=Ln(Un(r),0):s=Ln(Un(s),0);const n=Gi(s,r).xyz;return Ao(n).build(e,t)}if(s===oo.NEGATE)return e.format("( - "+i.build(e,n)+" )",r,t);if(s===oo.ONE_MINUS)return Oi(1,i).build(e,t);if(s===oo.RECIPROCAL)return ki(1,i).build(e,t);if(s===oo.DIFFERENCE)return Fo(Oi(i,o)).build(e,t);{const l=[];return s===oo.CROSS||s===oo.MOD?l.push(i.build(e,r),o.build(e,r)):u&&s===oo.STEP?l.push(i.build(e,1===e.getTypeLength(i.getNodeType(e))?"float":n),o.build(e,n)):u&&(s===oo.MIN||s===oo.MAX)||s===oo.MOD?l.push(i.build(e,n),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":n)):s===oo.REFRACT?l.push(i.build(e,n),o.build(e,n),a.build(e,"float")):s===oo.MIX?l.push(i.build(e,n),o.build(e,n),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":n)):(l.push(i.build(e,n)),null!==o&&l.push(o.build(e,n)),null!==a&&l.push(a.build(e,n))),e.format(`${e.getMethod(s,r)}( ${l.join(", ")} )`,r,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}oo.ALL="all",oo.ANY="any",oo.EQUALS="equals",oo.RADIANS="radians",oo.DEGREES="degrees",oo.EXP="exp",oo.EXP2="exp2",oo.LOG="log",oo.LOG2="log2",oo.SQRT="sqrt",oo.INVERSE_SQRT="inversesqrt",oo.FLOOR="floor",oo.CEIL="ceil",oo.NORMALIZE="normalize",oo.FRACT="fract",oo.SIN="sin",oo.COS="cos",oo.TAN="tan",oo.ASIN="asin",oo.ACOS="acos",oo.ATAN="atan",oo.ABS="abs",oo.SIGN="sign",oo.LENGTH="length",oo.NEGATE="negate",oo.ONE_MINUS="oneMinus",oo.DFDX="dFdx",oo.DFDY="dFdy",oo.ROUND="round",oo.RECIPROCAL="reciprocal",oo.TRUNC="trunc",oo.FWIDTH="fwidth",oo.BITCAST="bitcast",oo.TRANSPOSE="transpose",oo.ATAN2="atan2",oo.MIN="min",oo.MAX="max",oo.MOD="mod",oo.STEP="step",oo.REFLECT="reflect",oo.DISTANCE="distance",oo.DIFFERENCE="difference",oo.DOT="dot",oo.CROSS="cross",oo.POW="pow",oo.TRANSFORM_DIRECTION="transformDirection",oo.MIX="mix",oo.CLAMP="clamp",oo.REFRACT="refract",oo.SMOOTHSTEP="smoothstep",oo.FACEFORWARD="faceforward";const ao=Sn(1e-6),uo=Sn(1e6),lo=Sn(Math.PI),co=Sn(2*Math.PI),ho=mn(oo,oo.ALL),po=mn(oo,oo.ANY),go=mn(oo,oo.EQUALS),mo=mn(oo,oo.RADIANS),fo=mn(oo,oo.DEGREES),yo=mn(oo,oo.EXP),bo=mn(oo,oo.EXP2),xo=mn(oo,oo.LOG),To=mn(oo,oo.LOG2),_o=mn(oo,oo.SQRT),No=mn(oo,oo.INVERSE_SQRT),vo=mn(oo,oo.FLOOR),So=mn(oo,oo.CEIL),Ao=mn(oo,oo.NORMALIZE),Ro=mn(oo,oo.FRACT),Co=mn(oo,oo.SIN),Eo=mn(oo,oo.COS),wo=mn(oo,oo.TAN),Mo=mn(oo,oo.ASIN),Bo=mn(oo,oo.ACOS),Uo=mn(oo,oo.ATAN),Fo=mn(oo,oo.ABS),Po=mn(oo,oo.SIGN),Io=mn(oo,oo.LENGTH),Lo=mn(oo,oo.NEGATE),Do=mn(oo,oo.ONE_MINUS),Vo=mn(oo,oo.DFDX),Oo=mn(oo,oo.DFDY),Go=mn(oo,oo.ROUND),ko=mn(oo,oo.RECIPROCAL),zo=mn(oo,oo.TRUNC),$o=mn(oo,oo.FWIDTH),Ho=mn(oo,oo.BITCAST),Wo=mn(oo,oo.TRANSPOSE),jo=mn(oo,oo.ATAN2),qo=mn(oo,oo.MIN),Ko=mn(oo,oo.MAX),Xo=mn(oo,oo.MOD),Yo=mn(oo,oo.STEP),Qo=mn(oo,oo.REFLECT),Zo=mn(oo,oo.DISTANCE),Jo=mn(oo,oo.DIFFERENCE),ea=mn(oo,oo.DOT),ta=mn(oo,oo.CROSS),sa=mn(oo,oo.POW),ra=mn(oo,oo.POW,2),na=mn(oo,oo.POW,3),ia=mn(oo,oo.POW,4),oa=mn(oo,oo.TRANSFORM_DIRECTION),aa=e=>Gi(Po(e),sa(Fo(e),1/3)),ua=e=>ea(e,e),la=mn(oo,oo.MIX),da=(e,t=0,s=1)=>hn(new oo(oo.CLAMP,hn(e),hn(t),hn(s))),ca=e=>da(e),ha=mn(oo,oo.REFRACT),pa=mn(oo,oo.SMOOTHSTEP),ga=mn(oo,oo.FACEFORWARD),ma=yn((([e])=>{const t=ea(e.xy,En(12.9898,78.233)),s=Xo(t,lo);return Ro(Co(s).mul(43758.5453))})),fa=(e,t,s)=>la(t,s,e),ya=(e,t,s)=>pa(t,s,e);Vr("all",ho),Vr("any",po),Vr("equals",go),Vr("radians",mo),Vr("degrees",fo),Vr("exp",yo),Vr("exp2",bo),Vr("log",xo),Vr("log2",To),Vr("sqrt",_o),Vr("inverseSqrt",No),Vr("floor",vo),Vr("ceil",So),Vr("normalize",Ao),Vr("fract",Ro),Vr("sin",Co),Vr("cos",Eo),Vr("tan",wo),Vr("asin",Mo),Vr("acos",Bo),Vr("atan",Uo),Vr("abs",Fo),Vr("sign",Po),Vr("length",Io),Vr("lengthSq",ua),Vr("negate",Lo),Vr("oneMinus",Do),Vr("dFdx",Vo),Vr("dFdy",Oo),Vr("round",Go),Vr("reciprocal",ko),Vr("trunc",zo),Vr("fwidth",$o),Vr("atan2",jo),Vr("min",qo),Vr("max",Ko),Vr("mod",Xo),Vr("step",Yo),Vr("reflect",Qo),Vr("distance",Zo),Vr("dot",ea),Vr("cross",ta),Vr("pow",sa),Vr("pow2",ra),Vr("pow3",na),Vr("pow4",ia),Vr("transformDirection",oa),Vr("mix",fa),Vr("clamp",da),Vr("refract",ha),Vr("smoothstep",ya),Vr("faceForward",ga),Vr("difference",Jo),Vr("saturate",ca),Vr("cbrt",aa),Vr("transpose",Wo),Vr("rand",ma);class ba extends Ar{static get type(){return"ConditionalNode"}constructor(e,t,s=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=s}getNodeType(e){const t=this.ifNode.getNodeType(e);if(null!==this.elseNode){const s=this.elseNode.getNodeType(e);if(e.getTypeLength(s)>e.getTypeLength(t))return s}return t}setup(e){const t=this.condNode.cache(),s=this.ifNode.cache(),r=this.elseNode?this.elseNode.cache():null,n=e.context.nodeBlock;e.getDataFromNode(s).parentNodeBlock=n,null!==r&&(e.getDataFromNode(r).parentNodeBlock=n);const i=e.getNodeProperties(this);i.condNode=t,i.ifNode=s.context({nodeBlock:s}),i.elseNode=r?r.context({nodeBlock:r}):null}generate(e,t){const s=this.getNodeType(e),r=e.getDataFromNode(this);if(void 0!==r.nodeProperty)return r.nodeProperty;const{condNode:n,ifNode:i,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?ri(s).build(e):"";r.nodeProperty=u;const l=n.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=i.build(e,s);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,s);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,s,t)}}const xa=mn(ba);Vr("select",xa);const Ta=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),xa(...e));Vr("cond",Ta);class _a extends Ar{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e);return e.setContext(t),s}generate(e,t){const s=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e,t);return e.setContext(s),r}}const Na=mn(_a),va=(e,t)=>Na(e,{label:t});Vr("context",Na),Vr("label",va);class Sa extends Ar{static get type(){return"VarNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:s}=this,r=e.getVarFromNode(this,s,e.getVectorType(this.getNodeType(e))),n=e.getPropertyName(r),i=t.build(e,r.type);return e.addLineFlowCode(`${n} = ${i}`,this),n}}const Aa=mn(Sa);Vr("toVar",((...e)=>Aa(...e).append()));const Ra=e=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),Aa(e));Vr("temp",Ra);class Ca extends Ar{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let s=t.varying;if(void 0===s){const r=this.name,n=this.getNodeType(e);t.varying=s=e.getVaryingFromNode(this,r,n),t.node=this.node}return s.needsInterpolation||(s.needsInterpolation="fragment"===e.shaderStage),s}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),s=this.setupVarying(e);if(void 0===t.propertyName){const r=this.getNodeType(e),n=e.getPropertyName(s,yr.VERTEX);e.flowNodeFromShaderStage(yr.VERTEX,this.node,r,n),t.propertyName=n}return e.getPropertyName(s)}}const Ea=mn(Ca);Vr("varying",Ea);const wa=yn((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),s=e.mul(.0773993808),r=e.lessThanEqual(.04045);return la(t,s,r)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ma=yn((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),s=e.mul(12.92),r=e.lessThanEqual(.0031308);return la(t,s,r)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ba="WorkingColorSpace",Ua="OutputColorSpace";class Fa extends Er{static get type(){return"ColorSpaceNode"}constructor(e,t,s){super("vec4"),this.colorNode=e,this.source=t,this.target=s}resolveColorSpace(e,t){return t===Ba?u.workingColorSpace:t===Ua?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,s=this.resolveColorSpace(e,this.source),r=this.resolveColorSpace(e,this.target);let i=t;return!1!==u.enabled&&s!==r&&s&&r?(u.getTransfer(s)===l&&(i=Ln(wa(i.rgb),i.a)),u.getPrimaries(s)!==u.getPrimaries(r)&&(i=Ln(kn(u._getMatrix(new n,s,r)).mul(i.rgb),i.a)),u.getTransfer(r)===l&&(i=Ln(Ma(i.rgb),i.a)),i):i}}const Pa=e=>hn(new Fa(hn(e),Ba,Ua)),Ia=e=>hn(new Fa(hn(e),Ua,Ba)),La=(e,t)=>hn(new Fa(hn(e),Ba,t)),Da=(e,t)=>hn(new Fa(hn(e),t,Ba)),Va=(e,t,s)=>hn(new Fa(hn(e),t,s));Vr("toOutputColorSpace",Pa),Vr("toWorkingColorSpace",Ia),Vr("workingToColorSpace",La),Vr("colorSpaceToWorking",Da);let Oa=class extends Rr{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),s=this.referenceNode.getNodeType(),r=this.getNodeType();return e.format(t,s,r)}};class Ga extends Ar{static get type(){return"ReferenceBaseNode"}constructor(e,t,s=null,r=null){super(),this.property=e,this.uniformType=t,this.object=s,this.count=r,this.properties=e.split("."),this.reference=s,this.node=null,this.group=null,this.updateType=br.OBJECT}setGroup(e){return this.group=e,this}element(e){return hn(new Oa(this,hn(e)))}setNodeType(e){const t=ti(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let s=e[t[0]];for(let e=1;e<t.length;e++)s=s[t[e]];return s}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class ka extends Ga{static get type(){return"RendererReferenceNode"}constructor(e,t,s=null){super(e,t,s),this.renderer=s,this.setGroup(Zn)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const za=(e,t,s)=>hn(new ka(e,t,s));class $a extends Er{static get type(){return"ToneMappingNode"}constructor(e,t=Wa,s=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=s}getCacheKey(){return lr(super.getCacheKey(),this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,s=this.toneMapping;if(s===d)return t;let r=null;const n=e.renderer.library.getToneMappingFunction(s);return null!==n?r=Ln(n(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",s),r=t),r}}const Ha=(e,t,s)=>hn(new $a(e,hn(t),hn(s))),Wa=za("toneMappingExposure","float");Vr("toneMapping",((e,t,s)=>Ha(t,s,e)));class ja extends Pr{static get type(){return"BufferAttributeNode"}constructor(e,t=null,s=0,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=s,this.bufferOffset=r,this.usage=c,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),s=this.value,r=e.getTypeLength(t),n=this.bufferStride||r,i=this.bufferOffset,o=!0===s.isInterleavedBuffer?s:new h(s,n),a=new g(o,r,i);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),s=e.getBufferAttributeFromNode(this,t),r=e.getPropertyName(s);let n=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=r,n=r;else{n=Ea(this).build(e,t)}return n}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const qa=(e,t,s,r)=>hn(new ja(e,t,s,r)),Ka=(e,t,s,r)=>qa(e,t,s,r).setUsage(p),Xa=(e,t,s,r)=>qa(e,t,s,r).setInstanced(!0),Ya=(e,t,s,r)=>Ka(e,t,s,r).setInstanced(!0);Vr("toAttribute",(e=>qa(e.value)));class Qa extends Ar{static get type(){return"ComputeNode"}constructor(e,t,s=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=s,this.dispatchCount=0,this.version=1,this.updateBeforeType=br.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let s=t[0];for(let e=1;e<t.length;e++)s*=t[e];this.dispatchCount=Math.ceil(e/s)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const Za=(e,t,s)=>hn(new Qa(hn(e),t,s));Vr("compute",Za);class Ja extends Ar{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){return this.node.getNodeType(e)}build(e,...t){const s=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const n=this.node.build(e,...t);return e.setCache(s),n}}const eu=(e,...t)=>hn(new Ja(hn(e),...t));Vr("cache",eu);class tu extends Ar{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const su=mn(tu);Vr("bypass",su);class ru extends Ar{static get type(){return"RemapNode"}constructor(e,t,s,r=Sn(0),n=Sn(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=s,this.outLowNode=r,this.outHighNode=n,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:s,outLowNode:r,outHighNode:n,doClamp:i}=this;let o=e.sub(t).div(s.sub(t));return!0===i&&(o=o.clamp()),o.mul(n.sub(r)).add(r)}}const nu=mn(ru,null,null,{doClamp:!1}),iu=mn(ru);Vr("remap",nu),Vr("remapClamp",iu);class ou extends Ar{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const s=this.getNodeType(e),r=this.snippet;if("void"!==s)return e.format(`( ${r} )`,s,t);e.addLineFlowCode(r,this)}}const au=mn(ou),uu=e=>(e?xa(e,au("discard")):au("discard")).append(),lu=()=>au("return").append();Vr("discard",uu);class du extends Er{static get type(){return"RenderOutputNode"}constructor(e,t,s){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=s,this.isRenderOutput=!0}setup({context:e}){let t=this.colorNode||e.color;const s=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||d,r=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||m;return s!==d&&(t=t.toneMapping(s)),r!==m&&r!==u.workingColorSpace&&(t=t.workingToColorSpace(r)),t}}const cu=(e,t=null,s=null)=>hn(new du(hn(e),t,s));function hu(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)}Vr("renderOutput",cu);class pu extends Ar{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const s=this.getAttributeName(e);if(e.hasGeometryAttribute(s)){const r=e.geometry.getAttribute(s);t=e.getTypeFromAttribute(r)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),s=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const r=e.geometry.getAttribute(t),n=e.getTypeFromAttribute(r),i=e.getAttribute(t,n);if("vertex"===e.shaderStage)return e.format(i.name,n,s);return Ea(this).build(e,s)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(s)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const gu=(e,t)=>hn(new pu(e,t)),mu=e=>gu("uv"+(e>0?e:""),"vec2");class fu extends Ar{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const s=this.textureNode.build(e,"property"),r=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${s}, ${r} )`,this.getNodeType(e),t)}}const yu=mn(fu);class bu extends ei{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=br.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,s=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(s&&void 0!==s.width){const{width:e,height:t}=s;this.value=Math.log2(Math.max(e,t))}}}const xu=mn(bu);class Tu extends ei{static get type(){return"TextureNode"}constructor(e,t=null,s=null,r=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=s,this.biasNode=r,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=br.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===f?"uvec4":this.value.type===y?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return mu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=ti(this.value.matrix)),this._matrixUniform.mul(Un(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?br.FRAME:br.NONE,this}setupUV(e,t){const s=this.value;return!e.isFlipY()||!0!==s.isRenderTargetTexture&&!0!==s.isFramebufferTexture&&!0!==s.isDepthTexture||(t=this.sampler?t.flipY():t.setY(An(yu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;let s=this.uvNode;null!==s&&!0!==e.context.forceUVContext||!e.context.getUV||(s=e.context.getUV(this)),s||(s=this.getDefaultUV()),!0===this.updateMatrix&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let r=this.levelNode;null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=r,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,s,r,n,i,o,a){const u=this.value;let l;return l=r?e.generateTextureLevel(u,t,s,r,i):n?e.generateTextureBias(u,t,s,n,i):a?e.generateTextureGrad(u,t,s,a,i):o?e.generateTextureCompare(u,t,s,o,i):!1===this.sampler?e.generateTextureLoad(u,t,s,i):e.generateTexture(u,t,s,i),l}generate(e,t){const s=e.getNodeProperties(this),r=this.value;if(!r||!0!==r.isTexture)throw new Error("TextureNode: Need a three.js texture.");const n=super.generate(e,"property");if("sampler"===t)return n+"_sampler";if(e.isReference(t))return n;{const i=e.getDataFromNode(this);let o=i.propertyName;if(void 0===o){const{uvNode:t,levelNode:r,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=s,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const b=this.generateSnippet(e,n,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${b}`,this),i.snippet=b,i.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(a=Da(au(a,u),r.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){const t=this.clone();return t.uvNode=hn(e),t.referenceNode=this.getSelf(),hn(t)}blur(e){const t=this.clone();return t.biasNode=hn(e).mul(xu(t)),t.referenceNode=this.getSelf(),hn(t)}level(e){const t=this.clone();return t.levelNode=hn(e),t.referenceNode=this.getSelf(),hn(t)}size(e){return yu(this,e)}bias(e){const t=this.clone();return t.biasNode=hn(e),t.referenceNode=this.getSelf(),hn(t)}compare(e){const t=this.clone();return t.compareNode=hn(e),t.referenceNode=this.getSelf(),hn(t)}grad(e,t){const s=this.clone();return s.gradNode=[hn(e),hn(t)],s.referenceNode=this.getSelf(),hn(s)}depth(e){const t=this.clone();return t.depthNode=hn(e),t.referenceNode=this.getSelf(),hn(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const _u=mn(Tu),Nu=(...e)=>_u(...e).setSampler(!1),vu=e=>(!0===e.isNode?e:_u(e)).convert("sampler"),Su=ti("float").label("cameraNear").setGroup(Zn).onRenderUpdate((({camera:e})=>e.near)),Au=ti("float").label("cameraFar").setGroup(Zn).onRenderUpdate((({camera:e})=>e.far)),Ru=ti("mat4").label("cameraProjectionMatrix").setGroup(Zn).onRenderUpdate((({camera:e})=>e.projectionMatrix)),Cu=ti("mat4").label("cameraProjectionMatrixInverse").setGroup(Zn).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Eu=ti("mat4").label("cameraViewMatrix").setGroup(Zn).onRenderUpdate((({camera:e})=>e.matrixWorldInverse)),wu=ti("mat4").label("cameraWorldMatrix").setGroup(Zn).onRenderUpdate((({camera:e})=>e.matrixWorld)),Mu=ti("mat3").label("cameraNormalMatrix").setGroup(Zn).onRenderUpdate((({camera:e})=>e.normalMatrix)),Bu=ti(new s).label("cameraPosition").setGroup(Zn).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld)));class Uu extends Ar{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=br.OBJECT,this._uniformNode=new ei(null)}getNodeType(){const e=this.scope;return e===Uu.WORLD_MATRIX?"mat4":e===Uu.POSITION||e===Uu.VIEW_POSITION||e===Uu.DIRECTION||e===Uu.SCALE?"vec3":void 0}update(e){const t=this.object3d,r=this._uniformNode,n=this.scope;if(n===Uu.WORLD_MATRIX)r.value=t.matrixWorld;else if(n===Uu.POSITION)r.value=r.value||new s,r.value.setFromMatrixPosition(t.matrixWorld);else if(n===Uu.SCALE)r.value=r.value||new s,r.value.setFromMatrixScale(t.matrixWorld);else if(n===Uu.DIRECTION)r.value=r.value||new s,t.getWorldDirection(r.value);else if(n===Uu.VIEW_POSITION){const n=e.camera;r.value=r.value||new s,r.value.setFromMatrixPosition(t.matrixWorld),r.value.applyMatrix4(n.matrixWorldInverse)}}generate(e){const t=this.scope;return t===Uu.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t!==Uu.POSITION&&t!==Uu.VIEW_POSITION&&t!==Uu.DIRECTION&&t!==Uu.SCALE||(this._uniformNode.nodeType="vec3"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}Uu.WORLD_MATRIX="worldMatrix",Uu.POSITION="position",Uu.SCALE="scale",Uu.VIEW_POSITION="viewPosition",Uu.DIRECTION="direction";const Fu=mn(Uu,Uu.DIRECTION),Pu=mn(Uu,Uu.WORLD_MATRIX),Iu=mn(Uu,Uu.POSITION),Lu=mn(Uu,Uu.SCALE),Du=mn(Uu,Uu.VIEW_POSITION);class Vu extends Uu{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const Ou=fn(Vu,Vu.DIRECTION),Gu=fn(Vu,Vu.WORLD_MATRIX),ku=fn(Vu,Vu.POSITION),zu=fn(Vu,Vu.SCALE),$u=fn(Vu,Vu.VIEW_POSITION),Hu=ti(new n).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),Wu=ti(new i).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),ju=Eu.mul(Gu).toVar("modelViewMatrix"),qu=yn((e=>(e.context.isHighPrecisionModelViewMatrix=!0,ti("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highPrecisionModelViewMatrix"),Ku=yn((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return ti("mat3").onObjectUpdate((({object:e,camera:s})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highPrecisionModelNormalMatrix"),Xu=gu("position","vec3"),Yu=Xu.varying("positionLocal"),Qu=Xu.varying("positionPrevious"),Zu=Gu.mul(Yu).xyz.varying("v_positionWorld"),Ju=Yu.transformDirection(Gu).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),el=ju.mul(Yu).xyz.varying("v_positionView"),tl=el.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class sl extends Ar{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:s}=e;return t.coordinateSystem===b&&s.side===x?"false":e.getFrontFacing()}}const rl=fn(sl),nl=Sn(rl).mul(2).sub(1),il=gu("normal","vec3"),ol=yn((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),Un(0,1,0)):il),"vec3").once()().toVar("normalLocal"),al=el.dFdx().cross(el.dFdy()).normalize().toVar("normalFlat"),ul=yn((e=>{let t;return t=!0===e.material.flatShading?al:Ea(gl(ol),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),ll=Ea(ul.transformDirection(Eu),"v_normalWorld").normalize().toVar("normalWorld"),dl=yn((e=>e.context.setupNormal()),"vec3").once()().mul(nl).toVar("transformedNormalView"),cl=dl.transformDirection(Eu).toVar("transformedNormalWorld"),hl=yn((e=>e.context.setupClearcoatNormal()),"vec3").once()().mul(nl).toVar("transformedClearcoatNormalView"),pl=yn((([e,t=Gu])=>{const s=kn(t),r=e.div(Un(s[0].dot(s[0]),s[1].dot(s[1]),s[2].dot(s[2])));return s.mul(r).xyz})),gl=yn((([e],t)=>{const s=t.renderer.nodes.modelNormalViewMatrix;if(null!==s)return s.transformDirection(e);const r=Hu.mul(e);return Eu.transformDirection(r)})),ml=ti(0).onReference((({material:e})=>e)).onRenderUpdate((({material:e})=>e.refractionRatio)),fl=tl.negate().reflect(dl),yl=tl.negate().refract(dl,ml),bl=fl.transformDirection(Eu).toVar("reflectVector"),xl=yl.transformDirection(Eu).toVar("reflectVector");class Tl extends Tu{static get type(){return"CubeTextureNode"}constructor(e,t=null,s=null,r=null){super(e,t,s,r),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===T?bl:e.mapping===_?xl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),Un(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const s=this.value;return e.renderer.coordinateSystem!==N&&s.isRenderTargetTexture?t:Un(t.x.negate(),t.yz)}generateUV(e,t){return t.build(e,"vec3")}}const _l=mn(Tl);class Nl extends ei{static get type(){return"BufferNode"}constructor(e,t,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=s}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const vl=(e,t,s)=>hn(new Nl(e,t,s));class Sl extends Rr{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),s=this.getNodeType();return e.format(t,"vec4",s)}}class Al extends Nl{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null,"vec4"),this.array=e,this.elementType=t,this._elementType=null,this._elementLength=0,this.updateType=br.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:e,value:t}=this,s=this.getElementLength(),r=this.getElementType();if(1===s)for(let s=0;s<e.length;s++){t[4*s]=e[s]}else if("color"===r)for(let s=0;s<e.length;s++){const r=4*s,n=e[s];t[r]=n.r,t[r+1]=n.g,t[r+2]=n.b||0}else for(let s=0;s<e.length;s++){const r=4*s,n=e[s];t[r]=n.x,t[r+1]=n.y,t[r+2]=n.z||0,t[r+3]=n.w||0}}setup(e){const t=this.array.length;this._elementType=null===this.elementType?hr(this.array[0]):this.elementType,this._elementLength=e.getTypeLength(this._elementType);let s=Float32Array;return"i"===this._elementType.charAt(0)?s=Int32Array:"u"===this._elementType.charAt(0)&&(s=Uint32Array),this.value=new s(4*t),this.bufferCount=t,this.bufferType=e.changeComponentType("vec4",e.getComponentType(this._elementType)),super.setup(e)}element(e){return hn(new Sl(this,hn(e)))}}const Rl=(e,t)=>hn(new Al(e,t)),Cl=(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),hn(new Al(e,t)));class El extends Rr{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),s=this.referenceNode.getNodeType(),r=this.getNodeType();return e.format(t,s,r)}}class wl extends Ar{static get type(){return"ReferenceNode"}constructor(e,t,s=null,r=null){super(),this.property=e,this.uniformType=t,this.object=s,this.count=r,this.properties=e.split("."),this.reference=s,this.node=null,this.group=null,this.name=null,this.updateType=br.OBJECT}element(e){return hn(new El(this,hn(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?vl(null,e,this.count):Array.isArray(this.getValueFromReference())?Rl(null,e):"texture"===e?_u(null):"cubeTexture"===e?_l(null):ti(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let s=e[t[0]];for(let e=1;e<t.length;e++)s=s[t[e]];return s}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const Ml=(e,t,s)=>hn(new wl(e,t,s)),Bl=(e,t,s,r)=>hn(new wl(e,t,r,s));class Ul extends wl{static get type(){return"MaterialReferenceNode"}constructor(e,t,s=null){super(e,t,s),this.material=s,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const Fl=(e,t,s)=>hn(new Ul(e,t,s)),Pl=yn((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),gu("tangent","vec4"))))(),Il=Pl.xyz.toVar("tangentLocal"),Ll=ju.mul(Ln(Il,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),Dl=Ll.transformDirection(Eu).varying("v_tangentWorld").normalize().toVar("tangentWorld"),Vl=Ll.toVar("transformedTangentView"),Ol=Vl.transformDirection(Eu).normalize().toVar("transformedTangentWorld"),Gl=e=>e.mul(Pl.w).xyz,kl=Ea(Gl(il.cross(Pl)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),zl=Ea(Gl(ol.cross(Il)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),$l=Ea(Gl(ul.cross(Ll)),"v_bitangentView").normalize().toVar("bitangentView"),Hl=Ea(Gl(ll.cross(Dl)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),Wl=Gl(dl.cross(Vl)).normalize().toVar("transformedBitangentView"),jl=Wl.transformDirection(Eu).normalize().toVar("transformedBitangentWorld"),ql=kn(Ll,$l,ul),Kl=tl.mul(ql),Xl=(e,t)=>e.sub(Kl.mul(t)),Yl=(()=>{let e=xi.cross(tl);return e=e.cross(xi).normalize(),e=la(e,dl,yi.mul(ai.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),Ql=yn((e=>{const{eye_pos:t,surf_norm:s,mapN:r,uv:n}=e,i=t.dFdx(),o=t.dFdy(),a=n.dFdx(),u=n.dFdy(),l=s,d=o.cross(l),c=l.cross(i),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=nl.mul(g.inverseSqrt());return Vi(h.mul(r.x,m),p.mul(r.y,m),l.mul(r.z)).normalize()}));class Zl extends Er{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=v}setup(e){const{normalMapType:t,scaleNode:s}=this;let r=this.node.mul(2).sub(1);null!==s&&(r=Un(r.xy.mul(s),r.z));let n=null;if(t===S)n=gl(r);else if(t===v){n=!0===e.hasGeometryAttribute("tangent")?ql.mul(r).normalize():Ql({eye_pos:el,surf_norm:ul,mapN:r,uv:mu()})}return n}}const Jl=mn(Zl),ed=yn((({textureNode:e,bumpScale:t})=>{const s=t=>e.cache().context({getUV:e=>t(e.uvNode||mu()),forceUVContext:!0}),r=Sn(s((e=>e)));return En(Sn(s((e=>e.add(e.dFdx())))).sub(r),Sn(s((e=>e.add(e.dFdy())))).sub(r)).mul(t)})),td=yn((e=>{const{surf_pos:t,surf_norm:s,dHdxy:r}=e,n=t.dFdx().normalize(),i=s,o=t.dFdy().normalize().cross(i),a=i.cross(n),u=n.dot(o).mul(nl),l=u.sign().mul(r.x.mul(o).add(r.y.mul(a)));return u.abs().mul(s).sub(l).normalize()}));class sd extends Er{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=ed({textureNode:this.textureNode,bumpScale:e});return td({surf_pos:el,surf_norm:ul,dHdxy:t})}}const rd=mn(sd),nd=new Map;class id extends Ar{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let s=nd.get(e);return void 0===s&&(s=Fl(e,t),nd.set(e,s)),s}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,s=this.scope;let r=null;if(s===id.COLOR){const e=void 0!==t.color?this.getColor(s):Un();r=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(s===id.OPACITY){const e=this.getFloat(s);r=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(s===id.SPECULAR_STRENGTH)r=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Sn(1);else if(s===id.SPECULAR_INTENSITY){const e=this.getFloat(s);r=t.specularMap?e.mul(this.getTexture(s).a):e}else if(s===id.SPECULAR_COLOR){const e=this.getColor(s);r=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(s).rgb):e}else if(s===id.ROUGHNESS){const e=this.getFloat(s);r=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(s).g):e}else if(s===id.METALNESS){const e=this.getFloat(s);r=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(s).b):e}else if(s===id.EMISSIVE){const e=this.getFloat("emissiveIntensity"),n=this.getColor(s).mul(e);r=t.emissiveMap&&!0===t.emissiveMap.isTexture?n.mul(this.getTexture(s)):n}else if(s===id.NORMAL)t.normalMap?(r=Jl(this.getTexture("normal"),this.getCache("normalScale","vec2")),r.normalMapType=t.normalMapType):r=t.bumpMap?rd(this.getTexture("bump").r,this.getFloat("bumpScale")):ul;else if(s===id.CLEARCOAT){const e=this.getFloat(s);r=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(s).r):e}else if(s===id.CLEARCOAT_ROUGHNESS){const e=this.getFloat(s);r=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(s).r):e}else if(s===id.CLEARCOAT_NORMAL)r=t.clearcoatNormalMap?Jl(this.getTexture(s),this.getCache(s+"Scale","vec2")):ul;else if(s===id.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));r=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(s===id.SHEEN_ROUGHNESS){const e=this.getFloat(s);r=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(s).a):e,r=r.clamp(.07,1)}else if(s===id.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(s);r=Gn($d.x,$d.y,$d.y.negate(),$d.x).mul(e.rg.mul(2).sub(En(1)).normalize().mul(e.b))}else r=$d;else if(s===id.IRIDESCENCE_THICKNESS){const e=Ml("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const n=Ml("0","float",t.iridescenceThicknessRange);r=e.sub(n).mul(this.getTexture(s).g).add(n)}else r=e}else if(s===id.TRANSMISSION){const e=this.getFloat(s);r=t.transmissionMap?e.mul(this.getTexture(s).r):e}else if(s===id.THICKNESS){const e=this.getFloat(s);r=t.thicknessMap?e.mul(this.getTexture(s).g):e}else if(s===id.IOR)r=this.getFloat(s);else if(s===id.LIGHT_MAP)r=this.getTexture(s).rgb.mul(this.getFloat("lightMapIntensity"));else if(s===id.AO_MAP)r=this.getTexture(s).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);r=this.getCache(s,t)}return r}}id.ALPHA_TEST="alphaTest",id.COLOR="color",id.OPACITY="opacity",id.SHININESS="shininess",id.SPECULAR="specular",id.SPECULAR_STRENGTH="specularStrength",id.SPECULAR_INTENSITY="specularIntensity",id.SPECULAR_COLOR="specularColor",id.REFLECTIVITY="reflectivity",id.ROUGHNESS="roughness",id.METALNESS="metalness",id.NORMAL="normal",id.CLEARCOAT="clearcoat",id.CLEARCOAT_ROUGHNESS="clearcoatRoughness",id.CLEARCOAT_NORMAL="clearcoatNormal",id.EMISSIVE="emissive",id.ROTATION="rotation",id.SHEEN="sheen",id.SHEEN_ROUGHNESS="sheenRoughness",id.ANISOTROPY="anisotropy",id.IRIDESCENCE="iridescence",id.IRIDESCENCE_IOR="iridescenceIOR",id.IRIDESCENCE_THICKNESS="iridescenceThickness",id.IOR="ior",id.TRANSMISSION="transmission",id.THICKNESS="thickness",id.ATTENUATION_DISTANCE="attenuationDistance",id.ATTENUATION_COLOR="attenuationColor",id.LINE_SCALE="scale",id.LINE_DASH_SIZE="dashSize",id.LINE_GAP_SIZE="gapSize",id.LINE_WIDTH="linewidth",id.LINE_DASH_OFFSET="dashOffset",id.POINT_WIDTH="pointWidth",id.DISPERSION="dispersion",id.LIGHT_MAP="light",id.AO_MAP="ao";const od=fn(id,id.ALPHA_TEST),ad=fn(id,id.COLOR),ud=fn(id,id.SHININESS),ld=fn(id,id.EMISSIVE),dd=fn(id,id.OPACITY),cd=fn(id,id.SPECULAR),hd=fn(id,id.SPECULAR_INTENSITY),pd=fn(id,id.SPECULAR_COLOR),gd=fn(id,id.SPECULAR_STRENGTH),md=fn(id,id.REFLECTIVITY),fd=fn(id,id.ROUGHNESS),yd=fn(id,id.METALNESS),bd=fn(id,id.NORMAL).context({getUV:null}),xd=fn(id,id.CLEARCOAT),Td=fn(id,id.CLEARCOAT_ROUGHNESS),_d=fn(id,id.CLEARCOAT_NORMAL).context({getUV:null}),Nd=fn(id,id.ROTATION),vd=fn(id,id.SHEEN),Sd=fn(id,id.SHEEN_ROUGHNESS),Ad=fn(id,id.ANISOTROPY),Rd=fn(id,id.IRIDESCENCE),Cd=fn(id,id.IRIDESCENCE_IOR),Ed=fn(id,id.IRIDESCENCE_THICKNESS),wd=fn(id,id.TRANSMISSION),Md=fn(id,id.THICKNESS),Bd=fn(id,id.IOR),Ud=fn(id,id.ATTENUATION_DISTANCE),Fd=fn(id,id.ATTENUATION_COLOR),Pd=fn(id,id.LINE_SCALE),Id=fn(id,id.LINE_DASH_SIZE),Ld=fn(id,id.LINE_GAP_SIZE),Dd=fn(id,id.LINE_WIDTH),Vd=fn(id,id.LINE_DASH_OFFSET),Od=fn(id,id.POINT_WIDTH),Gd=fn(id,id.DISPERSION),kd=fn(id,id.LIGHT_MAP),zd=fn(id,id.AO_MAP),$d=ti(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))}));class Hd extends Er{static get type(){return"ModelViewProjectionNode"}constructor(e=null){super("vec4"),this.positionNode=e}setup(e){if("fragment"===e.shaderStage)return Ea(e.context.mvp);const t=this.positionNode||Yu,s=e.renderer.nodes.modelViewMatrix||ju;return Ru.mul(s).mul(t)}}const Wd=mn(Hd);class jd extends Ar{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isInstanceIndexNode=!0}generate(e){const t=this.getNodeType(e),s=this.scope;let r,n;if(s===jd.VERTEX)r=e.getVertexIndex();else if(s===jd.INSTANCE)r=e.getInstanceIndex();else if(s===jd.DRAW)r=e.getDrawIndex();else if(s===jd.INVOCATION_LOCAL)r=e.getInvocationLocalIndex();else if(s===jd.INVOCATION_SUBGROUP)r=e.getInvocationSubgroupIndex();else{if(s!==jd.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+s);r=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)n=r;else{n=Ea(this).build(e,t)}return n}}jd.VERTEX="vertex",jd.INSTANCE="instance",jd.SUBGROUP="subgroup",jd.INVOCATION_LOCAL="invocationLocal",jd.INVOCATION_SUBGROUP="invocationSubgroup",jd.DRAW="draw";const qd=fn(jd,jd.VERTEX),Kd=fn(jd,jd.INSTANCE),Xd=fn(jd,jd.SUBGROUP),Yd=fn(jd,jd.INVOCATION_SUBGROUP),Qd=fn(jd,jd.INVOCATION_LOCAL),Zd=fn(jd,jd.DRAW);class Jd extends Ar{static get type(){return"InstanceNode"}constructor(e){super("void"),this.instanceMesh=e,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=br.FRAME,this.buffer=null,this.bufferColor=null}setup(e){let t=this.instanceMatrixNode,s=this.instanceColorNode;const r=this.instanceMesh;if(null===t){const e=r.instanceMatrix;if(r.count<=1e3)t=vl(e.array,"mat4",Math.max(r.count,1)).element(Kd);else{const s=new A(e.array,16,1);this.buffer=s;const r=e.usage===p?Ya:Xa,n=[r(s,"vec4",16,0),r(s,"vec4",16,4),r(s,"vec4",16,8),r(s,"vec4",16,12)];t=zn(...n)}this.instanceMatrixNode=t}const n=r.instanceColor;if(n&&null===s){const e=new R(n.array,3),t=n.usage===p?Ya:Xa;this.bufferColor=e,s=Un(t(e,"vec3",3,0)),this.instanceColorNode=s}const i=t.mul(Yu).xyz;if(Yu.assign(i),e.hasGeometryAttribute("normal")){const e=pl(ol,t);ol.assign(e)}null!==this.instanceColorNode&&ni("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMesh.instanceMatrix.usage!==p&&null!=this.buffer&&this.instanceMesh.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMesh.instanceMatrix.version),this.instanceMesh.instanceColor&&this.instanceMesh.instanceColor.usage!==p&&null!=this.bufferColor&&this.instanceMesh.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceMesh.instanceColor.version)}}const ec=mn(Jd);class tc extends Ar{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=Kd:this.batchingIdNode=Zd);const t=yn((([e])=>{const t=yu(Nu(this.batchMesh._indirectTexture),0),s=An(e).modInt(An(t)),r=An(e).div(An(t));return Nu(this.batchMesh._indirectTexture,wn(s,r)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),s=t(An(this.batchingIdNode)),r=this.batchMesh._matricesTexture,n=yu(Nu(r),0),i=Sn(s).mul(4).toInt().toVar(),o=i.modInt(n),a=i.div(An(n)),u=zn(Nu(r,wn(o,a)),Nu(r,wn(o.add(1),a)),Nu(r,wn(o.add(2),a)),Nu(r,wn(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=yn((([e])=>{const t=yu(Nu(l),0).x,s=e,r=s.modInt(t),n=s.div(t);return Nu(l,wn(r,n)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(s);ni("vec3","vBatchColor").assign(t)}const d=kn(u);Yu.assign(u.mul(Yu));const c=ol.div(Un(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;ol.assign(h),e.hasGeometryAttribute("tangent")&&Il.mulAssign(d)}}const sc=mn(tc),rc=new WeakMap;class nc extends Ar{static get type(){return"SkinningNode"}constructor(e,t=!1){let s,r,n;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=br.OBJECT,this.skinIndexNode=gu("skinIndex","uvec4"),this.skinWeightNode=gu("skinWeight","vec4"),t?(s=Ml("bindMatrix","mat4"),r=Ml("bindMatrixInverse","mat4"),n=Bl("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(s=ti(e.bindMatrix,"mat4"),r=ti(e.bindMatrixInverse,"mat4"),n=vl(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=s,this.bindMatrixInverseNode=r,this.boneMatricesNode=n,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=Yu){const{skinIndexNode:s,skinWeightNode:r,bindMatrixNode:n,bindMatrixInverseNode:i}=this,o=e.element(s.x),a=e.element(s.y),u=e.element(s.z),l=e.element(s.w),d=n.mul(t),c=Vi(o.mul(r.x).mul(d),a.mul(r.y).mul(d),u.mul(r.z).mul(d),l.mul(r.w).mul(d));return i.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=ol){const{skinIndexNode:s,skinWeightNode:r,bindMatrixNode:n,bindMatrixInverseNode:i}=this,o=e.element(s.x),a=e.element(s.y),u=e.element(s.z),l=e.element(s.w);let d=Vi(r.x.mul(o),r.y.mul(a),r.z.mul(u),r.w.mul(l));return d=i.mul(d).mul(n),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=Bl("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Qu)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")}setup(e){this.needsPreviousBoneMatrices(e)&&Qu.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(Yu.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();ol.assign(t),e.hasGeometryAttribute("tangent")&&Il.assign(t)}}generate(e,t){if("void"!==t)return Yu.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;rc.get(t)!==e.frameId&&(rc.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const ic=e=>hn(new nc(e)),oc=e=>hn(new nc(e,!0));class ac extends Ar{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt()+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const s={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],r=!0!==t.isNode&&t.name||this.getVarName(e),n=!0!==t.isNode&&t.type||"int";s[r]=au(r,n)}const r=e.addStack();return t.returnsNode=this.params[this.params.length-1](s,r,e),t.stackNode=r,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),s=this.params,r=t.stackNode;for(let t=0,r=s.length-1;t<r;t++){const r=s[t];let n=null,i=null,o=null,a=null,u=null,l=null;r.isNode?(a="int",o=this.getVarName(t),n="0",i=r.build(e,a),u="<"):(a=r.type||"int",o=r.name||this.getVarName(t),n=r.start,i=r.end,u=r.condition,l=r.update,"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),void 0!==n&&void 0===i?(n+=" - 1",i="0",u=">="):void 0!==i&&void 0===n&&(n="0",u="<"),void 0===u&&(u=Number(n)>Number(i)?">=":"<"));const d={start:n,end:i,condition:u},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const n=r.build(e,"void"),i=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+n);for(let t=0,s=this.params.length-1;t<s;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),i}}const uc=(...e)=>hn(new ac(gn(e,"int"))).append(),lc=()=>au("continue").append(),dc=()=>au("break").append(),cc=(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),uc(...e)),hc=new WeakMap,pc=new r,gc=yn((({bufferMap:e,influence:t,stride:s,width:r,depth:n,offset:i})=>{const o=An(qd).mul(s).add(i),a=o.div(r),u=o.sub(a.mul(r));return Nu(e,wn(u,a)).depth(n).mul(t)}));class mc extends Ar{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=ti(1),this.updateType=br.OBJECT}setup(e){const{geometry:s}=e,r=void 0!==s.morphAttributes.position,n=s.hasAttribute("normal")&&void 0!==s.morphAttributes.normal,i=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,o=void 0!==i?i.length:0,{texture:a,stride:u,size:l}=function(e){const s=void 0!==e.morphAttributes.position,r=void 0!==e.morphAttributes.normal,n=void 0!==e.morphAttributes.color,i=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==i?i.length:0;let a=hc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===s&&(c=1),!0===r&&(c=2),!0===n&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new C(m,h,p,o);f.type=E,f.needsUpdate=!0;const y=4*c;for(let x=0;x<o;x++){const T=u[x],_=l[x],N=d[x],v=h*p*4*x;for(let S=0;S<T.count;S++){const A=S*y;!0===s&&(pc.fromBufferAttribute(T,S),m[v+A+0]=pc.x,m[v+A+1]=pc.y,m[v+A+2]=pc.z,m[v+A+3]=0),!0===r&&(pc.fromBufferAttribute(_,S),m[v+A+4]=pc.x,m[v+A+5]=pc.y,m[v+A+6]=pc.z,m[v+A+7]=0),!0===n&&(pc.fromBufferAttribute(N,S),m[v+A+8]=pc.x,m[v+A+9]=pc.y,m[v+A+10]=pc.z,m[v+A+11]=4===N.itemSize?pc.w:1)}}function b(){f.dispose(),hc.delete(e),e.removeEventListener("dispose",b)}a={count:o,texture:f,stride:c,size:new t(h,p)},hc.set(e,a),e.addEventListener("dispose",b)}return a}(s);!0===r&&Yu.mulAssign(this.morphBaseInfluence),!0===n&&ol.mulAssign(this.morphBaseInfluence);const d=An(l.width);uc(o,(({i:e})=>{const t=Sn(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Nu(this.mesh.morphTexture,wn(An(e).add(1),An(Kd))).r):t.assign(Ml("morphTargetInfluences","float").element(e).toVar()),!0===r&&Yu.addAssign(gc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:An(0)})),!0===n&&ol.addAssign(gc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:An(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const fc=mn(mc);class yc extends Ar{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}generate(){console.warn("Abstract function.")}}class bc extends yc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class xc extends _a{static get type(){return"LightingContextNode"}constructor(e,t=null,s=null,r=null){super(e),this.lightingModel=t,this.backdropNode=s,this.backdropAlphaNode=r,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,s={directDiffuse:Un().toVar("directDiffuse"),directSpecular:Un().toVar("directSpecular"),indirectDiffuse:Un().toVar("indirectDiffuse"),indirectSpecular:Un().toVar("indirectSpecular")};return{radiance:Un().toVar("radiance"),irradiance:Un().toVar("irradiance"),iblIrradiance:Un().toVar("iblIrradiance"),ambientOcclusion:Sn(1).toVar("ambientOcclusion"),reflectedLight:s,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const Tc=mn(xc);class _c extends yc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let Nc,vc;class Sc extends Ar{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===Sc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=br.NONE;return this.scope!==Sc.SIZE&&this.scope!==Sc.VIEWPORT||(e=br.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===Sc.VIEWPORT?null!==t?vc.copy(t.viewport):(e.getViewport(vc),vc.multiplyScalar(e.getPixelRatio())):null!==t?(Nc.width=t.width,Nc.height=t.height):e.getDrawingBufferSize(Nc)}setup(){const e=this.scope;let s=null;return s=e===Sc.SIZE?ti(Nc||(Nc=new t)):e===Sc.VIEWPORT?ti(vc||(vc=new r)):En(Cc.div(Rc)),s}generate(e){if(this.scope===Sc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const s=e.getNodeProperties(Rc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${s}.y - ${t}.y )`}return t}return super.generate(e)}}Sc.COORDINATE="coordinate",Sc.VIEWPORT="viewport",Sc.SIZE="size",Sc.UV="uv";const Ac=fn(Sc,Sc.UV),Rc=fn(Sc,Sc.SIZE),Cc=fn(Sc,Sc.COORDINATE),Ec=fn(Sc,Sc.VIEWPORT),wc=Ec.zw,Mc=Cc.sub(Ec.xy),Bc=Mc.div(wc),Uc=yn((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),Rc)),"vec2").once()(),Fc=yn((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),Ac)),"vec2").once()(),Pc=yn((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),Ac.flipY())),"vec2").once()(),Ic=new t;class Lc extends Tu{static get type(){return"ViewportTextureNode"}constructor(e=Ac,t=null,s=null){null===s&&((s=new w).minFilter=M),super(s,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=br.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(Ic);const s=this.value;s.image.width===Ic.width&&s.image.height===Ic.height||(s.image.width=Ic.width,s.image.height=Ic.height,s.needsUpdate=!0);const r=s.generateMipmaps;s.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(s),s.generateMipmaps=r}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const Dc=mn(Lc),Vc=mn(Lc,null,null,{generateMipmaps:!0});let Oc=null;class Gc extends Lc{static get type(){return"ViewportDepthTextureNode"}constructor(e=Ac,t=null){null===Oc&&(Oc=new B),super(e,t,Oc)}}const kc=mn(Gc);class zc extends Ar{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===zc.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,s=this.valueNode;let r=null;if(t===zc.DEPTH_BASE)null!==s&&(r=Kc().assign(s));else if(t===zc.DEPTH)r=e.isPerspectiveCamera?Wc(el.z,Su,Au):$c(el.z,Su,Au);else if(t===zc.LINEAR_DEPTH)if(null!==s)if(e.isPerspectiveCamera){const e=jc(s,Su,Au);r=$c(e,Su,Au)}else r=s;else r=$c(el.z,Su,Au);return r}}zc.DEPTH_BASE="depthBase",zc.DEPTH="depth",zc.LINEAR_DEPTH="linearDepth";const $c=(e,t,s)=>e.add(t).div(t.sub(s)),Hc=(e,t,s)=>t.sub(s).mul(e).sub(t),Wc=(e,t,s)=>t.add(e).mul(s).div(s.sub(t).mul(e)),jc=(e,t,s)=>t.mul(s).div(s.sub(t).mul(e).sub(s)),qc=(e,t,s)=>{t=t.max(1e-6).toVar();const r=To(e.div(t).add(1)),n=To(s.div(t).add(1));return r.div(n)},Kc=mn(zc,zc.DEPTH_BASE),Xc=fn(zc,zc.DEPTH),Yc=mn(zc,zc.LINEAR_DEPTH),Qc=Yc(kc());Xc.assign=e=>Kc(e);const Zc=mn(class extends Ar{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class Jc extends Ar{static get type(){return"ClippingNode"}constructor(e=Jc.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:s,unionPlanes:r}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===Jc.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(s,r):this.scope===Jc.HARDWARE?this.setupHardwareClipping(r,e):this.setupDefault(s,r)}setupAlphaToCoverage(e,t){return yn((()=>{const s=Sn().toVar("distanceToPlane"),r=Sn().toVar("distanceToGradient"),n=Sn(1).toVar("clipOpacity"),i=t.length;if(!this.hardwareClipping&&i>0){const e=Rl(t);uc(i,(({i:t})=>{const i=e.element(t);s.assign(el.dot(i.xyz).negate().add(i.w)),r.assign(s.fwidth().div(2)),n.mulAssign(pa(r.negate(),r,s))}))}const o=e.length;if(o>0){const t=Rl(e),i=Sn(1).toVar("intersectionClipOpacity");uc(o,(({i:e})=>{const n=t.element(e);s.assign(el.dot(n.xyz).negate().add(n.w)),r.assign(s.fwidth().div(2)),i.mulAssign(pa(r.negate(),r,s).oneMinus())})),n.mulAssign(i.oneMinus())}ii.a.mulAssign(n),ii.a.equal(0).discard()}))()}setupDefault(e,t){return yn((()=>{const s=t.length;if(!this.hardwareClipping&&s>0){const e=Rl(t);uc(s,(({i:t})=>{const s=e.element(t);el.dot(s.xyz).greaterThan(s.w).discard()}))}const r=e.length;if(r>0){const t=Rl(e),s=Cn(!0).toVar("clipped");uc(r,(({i:e})=>{const r=t.element(e);s.assign(el.dot(r.xyz).greaterThan(r.w).and(s))})),s.discard()}}))()}setupHardwareClipping(e,t){const s=e.length;return t.enableHardwareClipping(s),yn((()=>{const r=Rl(e),n=Zc(t.getClipDistance());uc(s,(({i:e})=>{const t=r.element(e),s=el.dot(t.xyz).sub(t.w).negate();n.element(e).assign(s)}))}))()}}Jc.ALPHA_TO_COVERAGE="alphaToCoverage",Jc.DEFAULT="default",Jc.HARDWARE="hardware";const eh=yn((([e])=>Ro(Gi(1e4,Co(Gi(17,e.x).add(Gi(.1,e.y)))).mul(Vi(.1,Fo(Co(Gi(13,e.y).add(e.x)))))))),th=yn((([e])=>eh(En(eh(e.xy),e.z)))),sh=yn((([e])=>{const t=Ko(Io(Vo(e.xyz)),Io(Oo(e.xyz))).toVar("maxDeriv"),s=Sn(1).div(Sn(.05).mul(t)).toVar("pixScale"),r=En(bo(vo(To(s))),bo(So(To(s)))).toVar("pixScales"),n=En(th(vo(r.x.mul(e.xyz))),th(vo(r.y.mul(e.xyz)))).toVar("alpha"),i=Ro(To(s)).toVar("lerpFactor"),o=Vi(Gi(i.oneMinus(),n.x),Gi(i,n.y)).toVar("x"),a=qo(i,i.oneMinus()).toVar("a"),u=Un(o.mul(o).div(Gi(2,a).mul(Oi(1,a))),o.sub(Gi(.5,a)).div(Oi(1,a)),Oi(1,Oi(1,o).mul(Oi(1,o)).div(Gi(2,a).mul(Oi(1,a))))).toVar("cases"),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return da(l,1e-6,1)}));class rh extends U{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+dr(this)}build(e){this.setup(e)}setupObserver(e){return new ir(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e);const t=e.renderer,s=t.getRenderTarget();let r;e.addStack(),e.stack.outputNode=this.vertexNode||this.setupPosition(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0===this.depthWrite&&(null!==s?!0===s.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const i=this.setupLighting(e);null!==n&&e.stack.add(n);const o=Ln(i,ii.a).max(0);if(r=this.setupOutput(e,o),vi.assign(r),null!==this.outputNode&&(r=this.outputNode),null!==s){const e=t.getMRT(),s=this.mrtNode;null!==e?(r=e,null!==s&&(r=e.merge(s))):null!==s&&(r=s)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=Ln(t)),r=this.setupOutput(e,t)}e.stack.outputNode=r,e.addFlow("fragment",e.removeStack()),e.monitor=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:s}=e.clippingContext;let r=null;if(t.length>0||s.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?r=hn(new Jc(Jc.ALPHA_TO_COVERAGE)):e.stack.add(hn(new Jc))}return r}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(hn(new Jc(Jc.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:s}=e;let r=this.depthNode;if(null===r){const e=t.getMRT();e&&e.has("depth")?r=e.get("depth"):!0===t.logarithmicDepthBuffer&&(r=s.isPerspectiveCamera?qc(Wd().w,Su,Au):$c(el.z,Su,Au))}null!==r&&Xc.assign(r).append()}setupPosition(e){const{object:t}=e,s=t.geometry;if(e.addStack(),(s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color)&&fc(t).append(),!0===t.isSkinnedMesh&&oc(t).append(),this.displacementMap){const e=Fl("displacementMap","texture"),t=Fl("displacementScale","float"),s=Fl("displacementBias","float");Yu.addAssign(ol.normalize().mul(e.x.mul(t).add(s)))}t.isBatchedMesh&&sc(t).append(),t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&ec(t).append(),null!==this.positionNode&&Yu.assign(this.positionNode),this.setupHardwareClipping(e);const r=Wd();return e.context.vertex=e.removeStack(),e.context.mvp=r,r}setupDiffuseColor({object:e,geometry:t}){let s=this.colorNode?Ln(this.colorNode):ad;if(!0===this.vertexColors&&t.hasAttribute("color")&&(s=Ln(s.xyz.mul(gu("color","vec3")),s.a)),e.instanceColor){s=ni("vec3","vInstanceColor").mul(s)}if(e.isBatchedMesh&&e._colorsTexture){s=ni("vec3","vBatchColor").mul(s)}ii.assign(s);const r=this.opacityNode?Sn(this.opacityNode):dd;if(ii.a.assign(ii.a.mul(r)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Sn(this.alphaTestNode):od;ii.a.lessThanEqual(e).discard()}!0===this.alphaHash&&ii.a.lessThan(sh(Yu)).discard(),!1===this.transparent&&this.blending===F&&!1===this.alphaToCoverage&&ii.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?Un(0):ii.rgb}setupNormal(){return this.normalNode?Un(this.normalNode):bd}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?Fl("envMap","cubeTexture"):Fl("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new _c(kd)),t}setupLights(e){const t=[],s=this.setupEnvironment(e);s&&s.isLightingNode&&t.push(s);const r=this.setupLightMap(e);if(r&&r.isLightingNode&&t.push(r),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:zd;t.push(new bc(e))}let n=this.lightsNode||e.lightsNode;return t.length>0&&(n=e.renderer.lighting.createNode([...n.getLights(),...t])),n}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:s,backdropAlphaNode:r,emissiveNode:n}=this,i=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(i&&i.getScope().hasLights){const t=this.setupLightingModel(e);o=Tc(i,t,s,r)}else null!==s&&(o=Un(null!==r?la(o,s,r):s));return(n&&!0===n.isNode||t.emissive&&!0===t.emissive.isColor)&&(oi.assign(Un(n||ld)),o=o.add(oi)),o}setupOutput(e,t){if(!0===this.fog){const s=e.fogNode;s&&(t=Ln(s.mix(t.rgb,s.colorNode),t.a))}return t}setDefaultValues(e){for(const t in e){const s=e[t];void 0===this[t]&&(this[t]=s,s&&s.clone&&(this[t]=s.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const s=U.prototype.toJSON.call(this,e),r=cr(this);s.inputNodes={};for(const{property:t,childNode:n}of r)s.inputNodes[t]=n.toJSON(e).uuid;function n(e){const t=[];for(const s in e){const r=e[s];delete r.metadata,t.push(r)}return t}if(t){const t=n(e.textures),r=n(e.images),i=n(e.nodes);t.length>0&&(s.textures=t),r.length>0&&(s.images=r),i.length>0&&(s.nodes=i)}return s}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const nh=new P;class ih extends rh{static get type(){return"InstancedPointsNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.pointWidth=1,this.pointColorNode=null,this.pointWidthNode=null,this.setDefaultValues(nh),this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,s=this.useColor;this.vertexNode=yn((()=>{const e=gu("instancePosition").xyz,t=Ln(ju.mul(Ln(e,1))),s=Ec.z.div(Ec.w),r=Ru.mul(t),n=Xu.xy.toVar();return n.mulAssign(this.pointWidthNode?this.pointWidthNode:Od),n.assign(n.div(Ec.z)),n.y.assign(n.y.mul(s)),n.assign(n.mul(r.w)),r.addAssign(Ln(n,0,0)),r}))(),this.fragmentNode=yn((()=>{const r=Sn(1).toVar(),n=ua(mu().mul(2).sub(1));if(t&&e.samples>1){const e=Sn(n.fwidth()).toVar();r.assign(pa(e.oneMinus(),e.add(1),n).oneMinus())}else n.greaterThan(1).discard();let i;if(this.pointColorNode)i=this.pointColorNode;else if(s){i=gu("instanceColor").mul(ad)}else i=ad;return r.mulAssign(dd),Ln(i,r)}))()}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const oh=new I;class ah extends rh{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.lights=!1,this.setDefaultValues(oh),this.setValues(e)}}const uh=new L;class lh extends rh{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.lights=!1,this.setDefaultValues(uh),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Sn(this.offsetNodeNode):Vd,t=this.dashScaleNode?Sn(this.dashScaleNode):Pd,s=this.dashSizeNode?Sn(this.dashSizeNode):Id,r=this.dashSizeNode?Sn(this.dashGapNode):Ld;Si.assign(s),Ai.assign(r);const n=Ea(gu("lineDistance").mul(t));(e?n.add(e):n).mod(Si.add(Ai)).greaterThan(Si).discard()}}const dh=new L;class ch extends rh{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.lights=!1,this.setDefaultValues(dh),this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.useDash=e.dashed,this.useWorldUnits=!1,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,s=this.useColor,r=this.dashed,n=this.worldUnits,i=yn((({start:e,end:t})=>{const s=Ru.element(2).element(2),r=Ru.element(3).element(2).mul(-.5).div(s).sub(e.z).div(t.z.sub(e.z));return Ln(la(e.xyz,t.xyz,r),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=yn((()=>{const e=gu("instanceStart"),t=gu("instanceEnd"),s=Ln(ju.mul(Ln(e,1))).toVar("start"),o=Ln(ju.mul(Ln(t,1))).toVar("end");if(r){const e=this.dashScaleNode?Sn(this.dashScaleNode):Pd,t=this.offsetNode?Sn(this.offsetNodeNode):Vd,s=gu("instanceDistanceStart"),r=gu("instanceDistanceEnd");let n=Xu.y.lessThan(.5).select(e.mul(s),e.mul(r));n=n.add(t),ni("float","lineDistance").assign(n)}n&&(ni("vec3","worldStart").assign(s.xyz),ni("vec3","worldEnd").assign(o.xyz));const a=Ec.z.div(Ec.w),u=Ru.element(2).element(3).equal(-1);_n(u,(()=>{_n(s.z.lessThan(0).and(o.z.greaterThan(0)),(()=>{o.assign(i({start:s,end:o}))})).ElseIf(o.z.lessThan(0).and(s.z.greaterThanEqual(0)),(()=>{s.assign(i({start:o,end:s}))}))}));const l=Ru.mul(s),d=Ru.mul(o),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=Ln().toVar();if(n){const e=o.xyz.sub(s.xyz).normalize(),t=la(s.xyz,o.xyz,.5).normalize(),n=e.cross(t).normalize(),i=e.cross(n),a=ni("vec4","worldPos");a.assign(Xu.y.lessThan(.5).select(s,o));const u=Dd.mul(.5);a.addAssign(Ln(Xu.x.lessThan(0).select(n.mul(u),n.mul(u).negate()),0)),r||(a.addAssign(Ln(Xu.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(Ln(i.mul(u),0)),_n(Xu.y.greaterThan(1).or(Xu.y.lessThan(0)),(()=>{a.subAssign(Ln(i.mul(2).mul(u),0))}))),g.assign(Ru.mul(a));const l=Un().toVar();l.assign(Xu.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=En(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(Xu.x.lessThan(0).select(e.negate(),e)),_n(Xu.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(Xu.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(Dd)),e.assign(e.div(Ec.w)),g.assign(Xu.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(Ln(e,0,0)))}return g}))();const o=yn((({p1:e,p2:t,p3:s,p4:r})=>{const n=e.sub(s),i=r.sub(s),o=t.sub(e),a=n.dot(i),u=i.dot(o),l=n.dot(o),d=i.dot(i),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return En(h,p)}));this.fragmentNode=yn((()=>{const i=mu();if(r){const e=this.dashSizeNode?Sn(this.dashSizeNode):Id,t=this.dashSizeNode?Sn(this.dashGapNode):Ld;Si.assign(e),Ai.assign(t);const s=ni("float","lineDistance");i.y.lessThan(-1).or(i.y.greaterThan(1)).discard(),s.mod(Si.add(Ai)).greaterThan(Si).discard()}const a=Sn(1).toVar("alpha");if(n){const s=ni("vec3","worldStart"),n=ni("vec3","worldEnd"),i=ni("vec4","worldPos").xyz.normalize().mul(1e5),u=n.sub(s),l=o({p1:s,p2:n,p3:Un(0,0,0),p4:i}),d=s.add(u.mul(l.x)),c=i.mul(l.y),h=d.sub(c).length().div(Dd);if(!r)if(t&&e.samples>1){const e=h.fwidth();a.assign(pa(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(t&&e.samples>1){const e=i.x,t=i.y.greaterThan(0).select(i.y.sub(1),i.y.add(1)),s=e.mul(e).add(t.mul(t)),r=Sn(s.fwidth()).toVar("dlen");_n(i.y.abs().greaterThan(1),(()=>{a.assign(pa(r.oneMinus(),r.add(1),s).oneMinus())}))}else _n(i.y.abs().greaterThan(1),(()=>{const e=i.x,t=i.y.greaterThan(0).select(i.y.sub(1),i.y.add(1));e.mul(e).add(t.mul(t)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(s){const e=gu("instanceColorStart"),t=gu("instanceColorEnd");u=Xu.y.lessThan(.5).select(e,t).mul(ad)}else u=ad;return Ln(u,a)}))()}get worldUnits(){return this.useWorldUnits}set worldUnits(e){this.useWorldUnits!==e&&(this.useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this.useDash}set dashed(e){this.useDash!==e&&(this.useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const hh=e=>hn(e).mul(.5).add(.5),ph=e=>hn(e).mul(2).sub(1),gh=new D;class mh extends rh{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(gh),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Sn(this.opacityNode):dd;ii.assign(Ln(hh(dl),e))}}class fh extends Er{static get type(){return"EquirectUVNode"}constructor(e=Ju){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan2(e.x).mul(1/(2*Math.PI)).add(.5),s=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return En(t,s)}}const yh=mn(fh);class bh extends V{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const s=t.minFilter,r=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n=new O(5,5,5),i=yh(Ju),o=new rh;o.colorNode=_u(t,i,0),o.side=x,o.blending=G;const a=new k(n,o),u=new z;u.add(a),t.minFilter===M&&(t.minFilter=$);const l=new H(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=s,t.currentGenerateMipmaps=r,a.geometry.dispose(),a.material.dispose(),this}}const xh=new WeakMap;class Th extends Er{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=_l();const t=new W;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=br.RENDER}updateBefore(e){const{renderer:t,material:s}=e,r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:s[r.property];if(e&&e.isTexture){const s=e.mapping;if(s===j||s===q){if(xh.has(e)){const t=xh.get(e);Nh(t,e.mapping),this._cubeTexture=t}else{const s=e.image;if(function(e){return null!=e&&e.height>0}(s)){const r=new bh(s.height);r.fromEquirectangularTexture(t,e),Nh(r.texture,e.mapping),this._cubeTexture=r.texture,xh.set(e,r.texture),e.addEventListener("dispose",_h)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function _h(e){const t=e.target;t.removeEventListener("dispose",_h);const s=xh.get(t);void 0!==s&&(xh.delete(t),s.dispose())}function Nh(e,t){t===j?e.mapping=T:t===q&&(e.mapping=_)}const vh=mn(Th);class Sh extends yc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=vh(this.envNode)}}class Ah extends yc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Sn(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class Rh{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class Ch extends Rh{constructor(){super()}indirect(e,t,s){const r=e.ambientOcclusion,n=e.reflectedLight,i=s.context.irradianceLightMap;n.indirectDiffuse.assign(Ln(0)),i?n.indirectDiffuse.addAssign(i):n.indirectDiffuse.addAssign(Ln(1,1,1,0)),n.indirectDiffuse.mulAssign(r),n.indirectDiffuse.mulAssign(ii.rgb)}finish(e,t,s){const r=s.material,n=e.outgoingLight,i=s.context.environment;if(i)switch(r.combine){case Y:n.rgb.assign(la(n.rgb,n.rgb.mul(i.rgb),gd.mul(md)));break;case X:n.rgb.assign(la(n.rgb,i.rgb,gd.mul(md)));break;case K:n.rgb.addAssign(i.rgb.mul(gd.mul(md)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",r.combine)}}}const Eh=new Q;class wh extends rh{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Eh),this.setValues(e)}setupNormal(){return ul}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Sh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Ah(kd)),t}setupOutgoingLight(){return ii.rgb}setupLightingModel(){return new Ch}}const Mh=yn((({f0:e,f90:t,dotVH:s})=>{const r=s.mul(-5.55473).sub(6.98316).mul(s).exp2();return e.mul(r.oneMinus()).add(t.mul(r))})),Bh=yn((e=>e.diffuseColor.mul(1/Math.PI))),Uh=yn((({dotNH:e})=>Ni.mul(Sn(.5)).add(1).mul(Sn(1/Math.PI)).mul(e.pow(Ni)))),Fh=yn((({lightDirection:e})=>{const t=e.add(tl).normalize(),s=dl.dot(t).clamp(),r=tl.dot(t).clamp(),n=Mh({f0:Ti,f90:1,dotVH:r}),i=Sn(.25),o=Uh({dotNH:s});return n.mul(i).mul(o)}));class Ph extends Ch{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:s}){const r=dl.dot(e).clamp().mul(t);s.directDiffuse.addAssign(r.mul(Bh({diffuseColor:ii.rgb}))),!0===this.specular&&s.directSpecular.addAssign(r.mul(Fh({lightDirection:e})).mul(gd))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:s}){s.indirectDiffuse.addAssign(t.mul(Bh({diffuseColor:ii}))),s.indirectDiffuse.mulAssign(e)}}const Ih=new Z;class Lh extends rh{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Ih),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Sh(t):null}setupLightingModel(){return new Ph(!1)}}const Dh=new J;class Vh extends rh{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(Dh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Sh(t):null}setupLightingModel(){return new Ph}setupVariants(){const e=(this.shininessNode?Sn(this.shininessNode):ud).max(1e-4);Ni.assign(e);const t=this.specularNode||cd;Ti.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const Oh=yn((e=>{if(!1===e.geometry.hasAttribute("normal"))return Sn(0);const t=ul.dFdx().abs().max(ul.dFdy().abs());return t.x.max(t.y).max(t.z)})),Gh=yn((e=>{const{roughness:t}=e,s=Oh();let r=t.max(.0525);return r=r.add(s),r=r.min(1),r})),kh=yn((({alpha:e,dotNL:t,dotNV:s})=>{const r=e.pow2(),n=t.mul(r.add(r.oneMinus().mul(s.pow2())).sqrt()),i=s.mul(r.add(r.oneMinus().mul(t.pow2())).sqrt());return ki(.5,n.add(i).max(ao))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),zh=yn((({alphaT:e,alphaB:t,dotTV:s,dotBV:r,dotTL:n,dotBL:i,dotNV:o,dotNL:a})=>{const u=a.mul(Un(e.mul(s),t.mul(r),o).length()),l=o.mul(Un(e.mul(n),t.mul(i),a).length());return ki(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),$h=yn((({alpha:e,dotNH:t})=>{const s=e.pow2(),r=t.pow2().mul(s.oneMinus()).oneMinus();return s.div(r.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),Hh=Sn(1/Math.PI),Wh=yn((({alphaT:e,alphaB:t,dotNH:s,dotTH:r,dotBH:n})=>{const i=e.mul(t),o=Un(t.mul(r),e.mul(n),i.mul(s)),a=o.dot(o),u=i.div(a);return Hh.mul(i.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),jh=yn((e=>{const{lightDirection:t,f0:s,f90:r,roughness:n,f:i,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||dl,l=n.pow2(),d=t.add(tl).normalize(),c=u.dot(t).clamp(),h=u.dot(tl).clamp(),p=u.dot(d).clamp(),g=tl.dot(d).clamp();let m,f,y=Mh({f0:s,f90:r,dotVH:g});if(ln(o)&&(y=pi.mix(y,i)),ln(a)){const e=bi.dot(t),s=bi.dot(tl),r=bi.dot(d),n=xi.dot(t),i=xi.dot(tl),o=xi.dot(d);m=zh({alphaT:fi,alphaB:l,dotTV:s,dotBV:i,dotTL:e,dotBL:n,dotNV:h,dotNL:c}),f=Wh({alphaT:fi,alphaB:l,dotNH:p,dotTH:r,dotBH:o})}else m=kh({alpha:l,dotNL:c,dotNV:h}),f=$h({alpha:l,dotNH:p});return y.mul(m).mul(f)})),qh=yn((({roughness:e,dotNV:t})=>{const s=Ln(-1,-.0275,-.572,.022),r=Ln(1,.0425,1.04,-.04),n=e.mul(s).add(r),i=n.x.mul(n.x).min(t.mul(-9.28).exp2()).mul(n.x).add(n.y);return En(-1.04,1.04).mul(i).add(n.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),Kh=yn((e=>{const{dotNV:t,specularColor:s,specularF90:r,roughness:n}=e,i=qh({dotNV:t,roughness:n});return s.mul(i.x).add(r.mul(i.y))})),Xh=yn((({f:e,f90:t,dotVH:s})=>{const r=s.oneMinus().saturate(),n=r.mul(r),i=r.mul(n,n).clamp(0,.9999);return e.sub(Un(t).mul(i)).div(i.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),Yh=yn((({roughness:e,dotNH:t})=>{const s=e.pow2(),r=Sn(1).div(s),n=t.pow2().oneMinus().max(.0078125);return Sn(2).add(r).mul(n.pow(r.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),Qh=yn((({dotNV:e,dotNL:t})=>Sn(1).div(Sn(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),Zh=yn((({lightDirection:e})=>{const t=e.add(tl).normalize(),s=dl.dot(e).clamp(),r=dl.dot(tl).clamp(),n=dl.dot(t).clamp(),i=Yh({roughness:hi,dotNH:n}),o=Qh({dotNV:r,dotNL:s});return ci.mul(i).mul(o)})),Jh=yn((({N:e,V:t,roughness:s})=>{const r=e.dot(t).saturate(),n=En(s,r.oneMinus().sqrt());return n.assign(n.mul(.984375).add(.0078125)),n})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),ep=yn((({f:e})=>{const t=e.length();return Ko(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),tp=yn((({v1:e,v2:t})=>{const s=e.dot(t),r=s.abs().toVar(),n=r.mul(.0145206).add(.4965155).mul(r).add(.8543985).toVar(),i=r.add(4.1616724).mul(r).add(3.417594).toVar(),o=n.div(i),a=s.greaterThan(0).select(o,Ko(s.mul(s).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),sp=yn((({N:e,V:t,P:s,mInv:r,p0:n,p1:i,p2:o,p3:a})=>{const u=i.sub(n).toVar(),l=a.sub(n).toVar(),d=u.cross(l),c=Un().toVar();return _n(d.dot(s.sub(n)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=r.mul(kn(u,l,e).transpose()).toVar(),h=d.mul(n.sub(s)).normalize().toVar(),p=d.mul(i.sub(s)).normalize().toVar(),g=d.mul(o.sub(s)).normalize().toVar(),m=d.mul(a.sub(s)).normalize().toVar(),f=Un(0).toVar();f.addAssign(tp({v1:h,v2:p})),f.addAssign(tp({v1:p,v2:g})),f.addAssign(tp({v1:g,v2:m})),f.addAssign(tp({v1:m,v2:h})),c.assign(Un(ep({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),rp=1/6,np=e=>Gi(rp,Gi(e,Gi(e,e.negate().add(3)).sub(3)).add(1)),ip=e=>Gi(rp,Gi(e,Gi(e,Gi(3,e).sub(6))).add(4)),op=e=>Gi(rp,Gi(e,Gi(e,Gi(-3,e).add(3)).add(3)).add(1)),ap=e=>Gi(rp,sa(e,3)),up=e=>np(e).add(ip(e)),lp=e=>op(e).add(ap(e)),dp=e=>Vi(-1,ip(e).div(np(e).add(ip(e)))),cp=e=>Vi(1,ap(e).div(op(e).add(ap(e)))),hp=(e,t,s)=>{const r=e.uvNode,n=Gi(r,t.zw).add(.5),i=vo(n),o=Ro(n),a=up(o.x),u=lp(o.x),l=dp(o.x),d=cp(o.x),c=dp(o.y),h=cp(o.y),p=En(i.x.add(l),i.y.add(c)).sub(.5).mul(t.xy),g=En(i.x.add(d),i.y.add(c)).sub(.5).mul(t.xy),m=En(i.x.add(l),i.y.add(h)).sub(.5).mul(t.xy),f=En(i.x.add(d),i.y.add(h)).sub(.5).mul(t.xy),y=up(o.y).mul(Vi(a.mul(e.uv(p).level(s)),u.mul(e.uv(g).level(s)))),b=lp(o.y).mul(Vi(a.mul(e.uv(m).level(s)),u.mul(e.uv(f).level(s))));return y.add(b)},pp=yn((([e,t=Sn(3)])=>{const s=En(e.size(An(t))),r=En(e.size(An(t.add(1)))),n=ki(1,s),i=ki(1,r),o=hp(e,Ln(n,s),vo(t)),a=hp(e,Ln(i,r),So(t));return Ro(t).mix(o,a)})),gp=yn((([e,t,s,r,n])=>{const i=Un(ha(t.negate(),Ao(e),ki(1,r))),o=Un(Io(n[0].xyz),Io(n[1].xyz),Io(n[2].xyz));return Ao(i).mul(s.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),mp=yn((([e,t])=>e.mul(da(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),fp=Vc(),yp=Vc(),bp=yn((([e,t,s],{material:r})=>{const n=(r.side==x?fp:yp).uv(e),i=To(Rc.x).mul(mp(t,s));return pp(n,i)})),xp=yn((([e,t,s])=>(_n(s.notEqual(0),(()=>{const r=xo(t).negate().div(s);return yo(r.negate().mul(e))})),Un(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),Tp=yn((([e,t,s,r,n,i,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=Ln().toVar(),f=Un().toVar();const n=d.sub(1).mul(g.mul(.025)),i=Un(d.sub(n),d,d.add(n));uc({start:0,end:3},(({i:n})=>{const d=i.element(n),g=gp(e,t,c,d,a),y=o.add(g),b=l.mul(u.mul(Ln(y,1))),x=En(b.xy.div(b.w)).toVar();x.addAssign(1),x.divAssign(2),x.assign(En(x.x,x.y.oneMinus()));const T=bp(x,s,d);m.element(n).assign(T.element(n)),m.a.addAssign(T.a),f.element(n).assign(r.element(n).mul(xp(Io(g),h,p).element(n)))})),m.a.divAssign(3)}else{const n=gp(e,t,c,d,a),i=o.add(n),g=l.mul(u.mul(Ln(i,1))),y=En(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(En(y.x,y.y.oneMinus())),m=bp(y,s,d),f=r.mul(xp(Io(n),h,p))}const y=f.rgb.mul(m.rgb),b=e.dot(t).clamp(),x=Un(Kh({dotNV:b,specularColor:n,specularF90:i,roughness:s})),T=f.r.add(f.g,f.b).div(3);return Ln(x.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),_p=kn(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),Np=(e,t)=>e.sub(t).div(e.add(t)).pow2(),vp=yn((({outsideIOR:e,eta2:t,cosTheta1:s,thinFilmThickness:r,baseF0:n})=>{const i=la(e,t,pa(0,.03,r)),o=e.div(i).pow2().mul(s.pow2().oneMinus()).oneMinus();_n(o.lessThan(0),(()=>Un(1)));const a=o.sqrt(),u=Np(i,e),l=Mh({f0:u,f90:1,dotVH:s}),d=l.oneMinus(),c=i.lessThan(e).select(Math.PI,0),h=Sn(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return Un(1).add(t).div(Un(1).sub(t))})(n.clamp(0,.9999)),g=Np(p,i.toVec3()),m=Mh({f0:g,f90:1,dotVH:a}),f=Un(p.x.lessThan(i).select(Math.PI,0),p.y.lessThan(i).select(Math.PI,0),p.z.lessThan(i).select(Math.PI,0)),y=i.mul(r,a,2),b=Un(h).add(f),x=l.mul(m).clamp(1e-5,.9999),T=x.sqrt(),_=d.pow2().mul(m).div(Un(1).sub(x)),N=l.add(_).toVar(),v=_.sub(d).toVar();return uc({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{v.mulAssign(T);const t=((e,t)=>{const s=e.mul(2*Math.PI*1e-9),r=Un(54856e-17,44201e-17,52481e-17),n=Un(1681e3,1795300,2208400),i=Un(43278e5,93046e5,66121e5),o=Sn(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(s.mul(2239900).add(t.x).cos()).mul(s.pow2().mul(-45282e5).exp());let a=r.mul(i.mul(2*Math.PI).sqrt()).mul(n.mul(s).add(t).cos()).mul(s.pow2().negate().mul(i).exp());return a=Un(a.x.add(o),a.y,a.z).div(1.0685e-7),_p.mul(a)})(Sn(e).mul(y),Sn(e).mul(b)).mul(2);N.addAssign(v.mul(t))})),N.max(Un(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),Sp=yn((({normal:e,viewDir:t,roughness:s})=>{const r=e.dot(t).saturate(),n=s.pow2(),i=xa(s.lessThan(.25),Sn(-339.2).mul(n).add(Sn(161.4).mul(s)).sub(25.9),Sn(-8.48).mul(n).add(Sn(14.3).mul(s)).sub(9.95)),o=xa(s.lessThan(.25),Sn(44).mul(n).sub(Sn(23.7).mul(s)).add(3.26),Sn(1.97).mul(n).sub(Sn(3.27).mul(s)).add(.72));return xa(s.lessThan(.25),0,Sn(.1).mul(s).sub(.025)).add(i.mul(r).add(o).exp()).mul(1/Math.PI).saturate()})),Ap=Un(.04),Rp=Sn(1);class Cp extends Rh{constructor(e=!1,t=!1,s=!1,r=!1,n=!1,i=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=s,this.anisotropy=r,this.transmission=n,this.dispersion=i,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=Un().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Un().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Un().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=Un().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Un().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=dl.dot(tl).clamp();this.iridescenceFresnel=vp({outsideIOR:Sn(1),eta2:gi,cosTheta1:e,thinFilmThickness:mi,baseF0:Ti}),this.iridescenceF0=Xh({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Zu,s=Bu.sub(Zu).normalize(),r=cl;e.backdrop=Tp(r,s,ai,ii,Ti,_i,t,Gu,Eu,Ru,Ci,wi,Bi,Mi,this.dispersion?Ui:null),e.backdropAlpha=Ei,ii.a.mulAssign(la(1,e.backdrop.a,Ei))}}computeMultiscattering(e,t,s){const r=dl.dot(tl).clamp(),n=qh({roughness:ai,dotNV:r}),i=(this.iridescenceF0?pi.mix(Ti,this.iridescenceF0):Ti).mul(n.x).add(s.mul(n.y)),o=n.x.add(n.y).oneMinus(),a=Ti.add(Ti.oneMinus().mul(.047619)),u=i.mul(a).div(o.mul(a).oneMinus());e.addAssign(i),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:s}){const r=dl.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(r.mul(Zh({lightDirection:e}))),!0===this.clearcoat){const s=hl.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(s.mul(jh({lightDirection:e,f0:Ap,f90:Rp,roughness:di,normalView:hl})))}s.directDiffuse.addAssign(r.mul(Bh({diffuseColor:ii.rgb}))),s.directSpecular.addAssign(r.mul(jh({lightDirection:e,f0:Ti,f90:1,roughness:ai,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:s,halfHeight:r,reflectedLight:n,ltc_1:i,ltc_2:o}){const a=t.add(s).sub(r),u=t.sub(s).sub(r),l=t.sub(s).add(r),d=t.add(s).add(r),c=dl,h=tl,p=el.toVar(),g=Jh({N:c,V:h,roughness:ai}),m=i.uv(g).toVar(),f=o.uv(g).toVar(),y=kn(Un(m.x,0,m.y),Un(0,1,0),Un(m.z,0,m.w)).toVar(),b=Ti.mul(f.x).add(Ti.oneMinus().mul(f.y)).toVar();n.directSpecular.addAssign(e.mul(b).mul(sp({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),n.directDiffuse.addAssign(e.mul(ii).mul(sp({N:c,V:h,P:p,mInv:kn(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e,t,s){this.indirectDiffuse(e,t,s),this.indirectSpecular(e,t,s),this.ambientOcclusion(e,t,s)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.addAssign(e.mul(Bh({diffuseColor:ii})))}indirectSpecular({radiance:e,iblIrradiance:t,reflectedLight:s}){if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(t.mul(ci,Sp({normal:dl,viewDir:tl,roughness:hi}))),!0===this.clearcoat){const e=hl.dot(tl).clamp(),t=Kh({dotNV:e,specularColor:Ap,specularF90:Rp,roughness:di});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const r=Un().toVar("singleScattering"),n=Un().toVar("multiScattering"),i=t.mul(1/Math.PI);this.computeMultiscattering(r,n,_i);const o=r.add(n),a=ii.mul(o.r.max(o.g).max(o.b).oneMinus());s.indirectSpecular.addAssign(e.mul(r)),s.indirectSpecular.addAssign(n.mul(i)),s.indirectDiffuse.addAssign(a.mul(i))}ambientOcclusion({ambientOcclusion:e,reflectedLight:t}){const s=dl.dot(tl).clamp().add(e),r=ai.mul(-16).oneMinus().negate().exp2(),n=e.sub(s.pow(r).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(e),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(e),t.indirectDiffuse.mulAssign(e),t.indirectSpecular.mulAssign(n)}finish(e){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=hl.dot(tl).clamp(),s=Mh({dotVH:e,f0:Ap,f90:Rp}),r=t.mul(li.mul(s).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(li));t.assign(r)}if(!0===this.sheen){const e=ci.r.max(ci.g).max(ci.b).mul(.157).oneMinus(),s=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(s)}}}const Ep=Sn(1),wp=Sn(-2),Mp=Sn(.8),Bp=Sn(-1),Up=Sn(.4),Fp=Sn(2),Pp=Sn(.305),Ip=Sn(3),Lp=Sn(.21),Dp=Sn(4),Vp=Sn(4),Op=Sn(16),Gp=yn((([e])=>{const t=Un(Fo(e)).toVar(),s=Sn(-1).toVar();return _n(t.x.greaterThan(t.z),(()=>{_n(t.x.greaterThan(t.y),(()=>{s.assign(xa(e.x.greaterThan(0),0,3))})).Else((()=>{s.assign(xa(e.y.greaterThan(0),1,4))}))})).Else((()=>{_n(t.z.greaterThan(t.y),(()=>{s.assign(xa(e.z.greaterThan(0),2,5))})).Else((()=>{s.assign(xa(e.y.greaterThan(0),1,4))}))})),s})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),kp=yn((([e,t])=>{const s=En().toVar();return _n(t.equal(0),(()=>{s.assign(En(e.z,e.y).div(Fo(e.x)))})).ElseIf(t.equal(1),(()=>{s.assign(En(e.x.negate(),e.z.negate()).div(Fo(e.y)))})).ElseIf(t.equal(2),(()=>{s.assign(En(e.x.negate(),e.y).div(Fo(e.z)))})).ElseIf(t.equal(3),(()=>{s.assign(En(e.z.negate(),e.y).div(Fo(e.x)))})).ElseIf(t.equal(4),(()=>{s.assign(En(e.x.negate(),e.z).div(Fo(e.y)))})).Else((()=>{s.assign(En(e.x,e.y).div(Fo(e.z)))})),Gi(.5,s.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),zp=yn((([e])=>{const t=Sn(0).toVar();return _n(e.greaterThanEqual(Mp),(()=>{t.assign(Ep.sub(e).mul(Bp.sub(wp)).div(Ep.sub(Mp)).add(wp))})).ElseIf(e.greaterThanEqual(Up),(()=>{t.assign(Mp.sub(e).mul(Fp.sub(Bp)).div(Mp.sub(Up)).add(Bp))})).ElseIf(e.greaterThanEqual(Pp),(()=>{t.assign(Up.sub(e).mul(Ip.sub(Fp)).div(Up.sub(Pp)).add(Fp))})).ElseIf(e.greaterThanEqual(Lp),(()=>{t.assign(Pp.sub(e).mul(Dp.sub(Ip)).div(Pp.sub(Lp)).add(Ip))})).Else((()=>{t.assign(Sn(-2).mul(To(Gi(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),$p=yn((([e,t])=>{const s=e.toVar();s.assign(Gi(2,s).sub(1));const r=Un(s,1).toVar();return _n(t.equal(0),(()=>{r.assign(r.zyx)})).ElseIf(t.equal(1),(()=>{r.assign(r.xzy),r.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{r.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{r.assign(r.zyx),r.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{r.assign(r.xzy),r.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{r.z.mulAssign(-1)})),r})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),Hp=yn((([e,t,s,r,n,i])=>{const o=Sn(s),a=Un(t),u=da(zp(o),wp,i),l=Ro(u),d=vo(u),c=Un(Wp(e,a,d,r,n,i)).toVar();return _n(l.notEqual(0),(()=>{const t=Un(Wp(e,a,d.add(1),r,n,i)).toVar();c.assign(la(c,t,l))})),c})),Wp=yn((([e,t,s,r,n,i])=>{const o=Sn(s).toVar(),a=Un(t),u=Sn(Gp(a)).toVar(),l=Sn(Ko(Vp.sub(o),0)).toVar();o.assign(Ko(o,Vp));const d=Sn(bo(o)).toVar(),c=En(kp(a,u).mul(d.sub(2)).add(1)).toVar();return _n(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(Gi(3,Op))),c.y.addAssign(Gi(4,bo(i).sub(d))),c.x.mulAssign(r),c.y.mulAssign(n),e.uv(c).grad(En(),En())})),jp=yn((({envMap:e,mipInt:t,outputDirection:s,theta:r,axis:n,CUBEUV_TEXEL_WIDTH:i,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=Eo(r),l=s.mul(u).add(n.cross(s).mul(Co(r))).add(n.mul(n.dot(s).mul(u.oneMinus())));return Wp(e,l,t,i,o,a)})),qp=yn((({n:e,latitudinal:t,poleAxis:s,outputDirection:r,weights:n,samples:i,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=Un(xa(t,s,ta(s,r))).toVar();_n(ho(h.equals(Un(0))),(()=>{h.assign(Un(r.z,0,r.x.negate()))})),h.assign(Ao(h));const p=Un().toVar();return p.addAssign(n.element(An(0)).mul(jp({theta:0,axis:h,outputDirection:r,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),uc({start:An(1),end:e},(({i:e})=>{_n(e.greaterThanEqual(i),(()=>{dc()}));const t=Sn(o.mul(Sn(e))).toVar();p.addAssign(n.element(e).mul(jp({theta:t.mul(-1),axis:h,outputDirection:r,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(n.element(e).mul(jp({theta:t,axis:h,outputDirection:r,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),Ln(p,1)}));let Kp=null;const Xp=new WeakMap;function Yp(e){let t=Xp.get(e);if((void 0!==t?t.pmremVersion:-1)!==e.pmremVersion){const s=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const s=6;for(let r=0;r<s;r++)void 0!==e[r]&&t++;return t===s}(s))return null;t=Kp.fromCubemap(e,t)}else{if(!function(e){return null!=e&&e.height>0}(s))return null;t=Kp.fromEquirectangular(e,t)}t.pmremVersion=e.pmremVersion,Xp.set(e,t)}return t.texture}class Qp extends Er{static get type(){return"PMREMNode"}constructor(e,t=null,s=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=s,this._generator=null;const r=new ee;r.isRenderTargetTexture=!0,this._texture=_u(r),this._width=ti(0),this._height=ti(0),this._maxMip=ti(0),this.updateBeforeType=br.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,s=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:s,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(){let e=this._pmrem;const t=e?e.pmremVersion:-1,s=this._value;t!==s.pmremVersion&&(e=!0===s.isPMREMTexture?s:Yp(s),null!==e&&(this._pmrem=e,this.updateFromTexture(e)))}setup(e){null===Kp&&(Kp=e.createPMREMGenerator()),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this));const s=this.value;e.renderer.coordinateSystem===b&&!0!==s.isPMREMTexture&&!0===s.isRenderTargetTexture&&(t=Un(t.x.negate(),t.yz));let r=this.levelNode;return null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),Hp(this._texture,t,r,this._width,this._height,this._maxMip)}}const Zp=mn(Qp),Jp=new WeakMap;class eg extends yc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:t[s.property];let r=Jp.get(e);void 0===r&&(r=Zp(e),Jp.set(e,r)),s=r}const r=t.envMap?Ml("envMapIntensity","float",e.material):Ml("environmentIntensity","float",e.scene),n=!0===t.useAnisotropy||t.anisotropy>0?Yl:dl,i=s.context(tg(ai,n)).mul(r),o=s.context(sg(cl)).mul(Math.PI).mul(r),a=eu(i),u=eu(o);e.context.radiance.addAssign(a),e.context.iblIrradiance.addAssign(u);const l=e.context.lightingModel.clearcoatRadiance;if(l){const e=s.context(tg(di,hl)).mul(r),t=eu(e);l.addAssign(t)}}}const tg=(e,t)=>{let s=null;return{getUV:()=>(null===s&&(s=tl.negate().reflect(t),s=e.mul(e).mix(s,t).normalize(),s=s.transformDirection(Eu)),s),getTextureLevel:()=>e}},sg=e=>({getUV:()=>e,getTextureLevel:()=>Sn(1)}),rg=new te;class ng extends rh{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(rg),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new eg(t):null}setupLightingModel(){return new Cp}setupSpecular(){const e=la(Un(.04),ii.rgb,ui);Ti.assign(e),_i.assign(1)}setupVariants(){const e=this.metalnessNode?Sn(this.metalnessNode):yd;ui.assign(e);let t=this.roughnessNode?Sn(this.roughnessNode):fd;t=Gh({roughness:t}),ai.assign(t),this.setupSpecular(),ii.assign(Ln(ii.rgb.mul(e.oneMinus()),ii.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const ig=new se;class og extends ng{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(ig),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Sn(this.iorNode):Bd;Ci.assign(e),Ti.assign(la(qo(ra(Ci.sub(1).div(Ci.add(1))).mul(pd),Un(1)).mul(hd),ii.rgb,ui)),_i.assign(la(hd,1,ui))}setupLightingModel(){return new Cp(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Sn(this.clearcoatNode):xd,t=this.clearcoatRoughnessNode?Sn(this.clearcoatRoughnessNode):Td;li.assign(e),di.assign(Gh({roughness:t}))}if(this.useSheen){const e=this.sheenNode?Un(this.sheenNode):vd,t=this.sheenRoughnessNode?Sn(this.sheenRoughnessNode):Sd;ci.assign(e),hi.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Sn(this.iridescenceNode):Rd,t=this.iridescenceIORNode?Sn(this.iridescenceIORNode):Cd,s=this.iridescenceThicknessNode?Sn(this.iridescenceThicknessNode):Ed;pi.assign(e),gi.assign(t),mi.assign(s)}if(this.useAnisotropy){const e=(this.anisotropyNode?En(this.anisotropyNode):Ad).toVar();yi.assign(e.length()),_n(yi.equal(0),(()=>{e.assign(En(1,0))})).Else((()=>{e.divAssign(En(yi)),yi.assign(yi.saturate())})),fi.assign(yi.pow2().mix(ai.pow2(),1)),bi.assign(ql[0].mul(e.x).add(ql[1].mul(e.y))),xi.assign(ql[1].mul(e.x).sub(ql[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Sn(this.transmissionNode):wd,t=this.thicknessNode?Sn(this.thicknessNode):Md,s=this.attenuationDistanceNode?Sn(this.attenuationDistanceNode):Ud,r=this.attenuationColorNode?Un(this.attenuationColorNode):Fd;if(Ei.assign(e),wi.assign(t),Mi.assign(s),Bi.assign(r),this.useDispersion){const e=this.dispersionNode?Sn(this.dispersionNode):Gd;Ui.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Un(this.clearcoatNormalNode):_d}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class ag extends Cp{constructor(e,t,s,r){super(e,t,s),this.useSSS=r}direct({lightDirection:e,lightColor:t,reflectedLight:s},r,n){if(!0===this.useSSS){const r=n.material,{thicknessColorNode:i,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=r,c=e.add(dl.mul(o)).normalize(),h=Sn(tl.dot(c.negate()).saturate().pow(l).mul(d)),p=Un(h.add(a).mul(i));s.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:s},r,n)}}class ug extends og{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Sn(.1),this.thicknessAmbientNode=Sn(0),this.thicknessAttenuationNode=Sn(.1),this.thicknessPowerNode=Sn(2),this.thicknessScaleNode=Sn(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new ag(this.useClearcoat,this.useSheen,this.useIridescence,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const lg=yn((({normal:e,lightDirection:t,builder:s})=>{const r=e.dot(t),n=En(r.mul(.5).add(.5),0);if(s.material.gradientMap){const e=Fl("gradientMap","texture").context({getUV:()=>n});return Un(e.r)}{const e=n.fwidth().mul(.5);return la(Un(.7),Un(1),pa(Sn(.7).sub(e.x),Sn(.7).add(e.x),n.x))}}));class dg extends Rh{direct({lightDirection:e,lightColor:t,reflectedLight:s},r,n){const i=lg({normal:il,lightDirection:e,builder:n}).mul(t);s.directDiffuse.addAssign(i.mul(Bh({diffuseColor:ii.rgb})))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:s}){s.indirectDiffuse.addAssign(t.mul(Bh({diffuseColor:ii}))),s.indirectDiffuse.mulAssign(e)}}const cg=new re;class hg extends rh{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(cg),this.setValues(e)}setupLightingModel(){return new dg}}class pg extends Er{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=Un(tl.z,0,tl.x.negate()).normalize(),t=tl.cross(e);return En(e.dot(dl),t.dot(dl)).mul(.495).add(.5)}}const gg=fn(pg),mg=new ne;class fg extends rh{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(mg),this.setValues(e)}setupVariants(e){const t=gg;let s;s=e.material.matcap?Fl("matcap","texture").context({getUV:()=>t}):Un(la(.2,.8,t.y)),ii.rgb.mulAssign(s.rgb)}}const yg=new P;class bg extends rh{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.isPointsNodeMaterial=!0,this.lights=!1,this.transparent=!0,this.sizeNode=null,this.setDefaultValues(yg),this.setValues(e)}copy(e){return this.sizeNode=e.sizeNode,super.copy(e)}}class xg extends Er{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:s}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),r=t.sin();return Gn(e,r,r.negate(),e).mul(s)}{const e=t,r=zn(Ln(1,0,0,0),Ln(0,Eo(e.x),Co(e.x).negate(),0),Ln(0,Co(e.x),Eo(e.x),0),Ln(0,0,0,1)),n=zn(Ln(Eo(e.y),0,Co(e.y),0),Ln(0,1,0,0),Ln(Co(e.y).negate(),0,Eo(e.y),0),Ln(0,0,0,1)),i=zn(Ln(Eo(e.z),Co(e.z).negate(),0,0),Ln(Co(e.z),Eo(e.z),0,0),Ln(0,0,1,0),Ln(0,0,0,1));return r.mul(n).mul(i).mul(Ln(s,1)).xyz}}}const Tg=mn(xg),_g=new ie;class Ng extends rh{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(_g),this.setValues(e)}setupPosition({object:e,camera:t,context:s}){const r=this.sizeAttenuation,{positionNode:n,rotationNode:i,scaleNode:o}=this,a=Yu;let u=ju.mul(Un(n||0)),l=En(Gu[0].xyz.length(),Gu[1].xyz.length());if(null!==o&&(l=l.mul(o)),!r)if(t.isPerspectiveCamera)l=l.mul(u.z.negate());else{const e=Sn(2).div(Ru.element(1).element(1));l=l.mul(e.mul(2))}let d=a.xy;if(e.center&&!0===e.center.isVector2){const e=((e,t,s)=>hn(new Ga(e,t,s)))("center","vec2");d=d.sub(e.sub(.5))}d=d.mul(l);const c=Sn(i||Nd),h=Tg(d,c);u=Ln(u.xy.add(h),u.zw);const p=Ru.mul(u);return s.vertex=a,p}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}class vg extends Rh{constructor(){super(),this.shadowNode=Sn(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){ii.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(ii.rgb)}}const Sg=new oe;class Ag extends rh{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Sg),this.setValues(e)}setupLightingModel(){return new vg}}const Rg=yn((({texture:e,uv:t})=>{const s=1e-4,r=Un().toVar();return _n(t.x.lessThan(s),(()=>{r.assign(Un(1,0,0))})).ElseIf(t.y.lessThan(s),(()=>{r.assign(Un(0,1,0))})).ElseIf(t.z.lessThan(s),(()=>{r.assign(Un(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{r.assign(Un(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{r.assign(Un(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{r.assign(Un(0,0,-1))})).Else((()=>{const s=.01,n=e.uv(t.add(Un(-.01,0,0))).r.sub(e.uv(t.add(Un(s,0,0))).r),i=e.uv(t.add(Un(0,-.01,0))).r.sub(e.uv(t.add(Un(0,s,0))).r),o=e.uv(t.add(Un(0,0,-.01))).r.sub(e.uv(t.add(Un(0,0,s))).r);r.assign(Un(n,i,o))})),r.normalize()}));class Cg extends Tu{static get type(){return"Texture3DNode"}constructor(e,t=null,s=null){super(e,t,s),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return Un(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){return t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return Rg({texture:this,uv:e})}}const Eg=mn(Cg);class wg extends rh{static get type(){return"VolumeNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.isVolumeNodeMaterial=!0,this.testNode=null,this.setValues(e)}setup(e){const t=Eg(this.map,null,0),s=yn((({orig:e,dir:t})=>{const s=Un(-.5),r=Un(.5),n=t.reciprocal(),i=s.sub(e).mul(n),o=r.sub(e).mul(n),a=qo(i,o),u=Ko(i,o),l=Ko(a.x,Ko(a.y,a.z)),d=qo(u.x,qo(u.y,u.z));return En(l,d)}));this.fragmentNode=yn((()=>{const e=Ea(Un(Wu.mul(Ln(Bu,1)))),r=Ea(Xu.sub(e)).normalize(),n=En(s({orig:e,dir:r})).toVar();n.x.greaterThan(n.y).discard(),n.assign(En(Ko(n.x,0),n.y));const i=Un(e.add(n.x.mul(r))).toVar(),o=Un(r.abs().reciprocal()).toVar(),a=Sn(qo(o.x,qo(o.y,o.z))).toVar("delta");a.divAssign(Fl("steps","float"));const u=Ln(Fl("base","color"),0).toVar();return uc({type:"float",start:n.x,end:n.y,update:"+= delta"},(()=>{const e=ri("float","d").assign(t.uv(i.add(.5)).r);null!==this.testNode?this.testNode({map:t,mapValue:e,probe:i,finalColor:u}).append():(u.a.assign(1),dc()),i.addAssign(r.mul(a))})),u.a.equal(0).discard(),Ln(u)}))(),super.setup(e)}}class Mg{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,s)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,s)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}setAnimationLoop(e){this._animationLoop=e}setContext(e){this._context=e}dispose(){this.stop()}}class Bg{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let s=0;s<e.length;s++)if(t=t.get(e[s]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let s=this.weakMap;for(let t=0;t<e.length;t++){const r=e[t];!1===s.has(r)&&s.set(r,new WeakMap),s=s.get(r)}return s.set(e[e.length-1],t)}delete(e){let t=this.weakMap;for(let s=0;s<e.length;s++)if(t=t.get(e[s]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Ug=0;class Fg{constructor(e,t,s,r,n,i,o,a,u,l){this._nodes=e,this._geometries=t,this.id=Ug++,this.renderer=s,this.object=r,this.material=n,this.scene=i,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=r.geometry,this.version=n.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,s=[],r=new Set;for(const n of e){const e=n.node&&n.node.attribute?n.node.attribute:t.getAttribute(n.name);if(void 0===e)continue;s.push(e);const i=e.isInterleavedBufferAttribute?e.data:e;r.add(i)}return this.attributes=s,this.vertexBuffers=Array.from(r.values()),s}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:s,group:r,drawRange:n}=this,i=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=s.isInstancedBufferGeometry?s.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(i.instanceCount=u,!0===e.isBatchedMesh)return i;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=n.start*l,c=(n.start+n.count)*l;null!==r&&(d=Math.max(d,r.start*l),c=Math.min(c,(r.start+r.count)*l));const h=s.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(i.vertexCount=g,i.firstVertex=d,i)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const s of Object.keys(e.attributes).sort()){const r=e.attributes[s];t+=s+",",r.data&&(t+=r.data.stride+","),r.offset&&(t+=r.offset+","),r.itemSize&&(t+=r.itemSize+","),r.normalized&&(t+="n,")}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let s=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let s=Object.getPrototypeOf(e);for(;s;){const e=Object.getOwnPropertyDescriptors(s);for(const s in e)if(void 0!==e[s]){const r=e[s];r&&"function"==typeof r.get&&t.push(s)}s=Object.getPrototypeOf(s)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const r=t[e];let n;if(null!==r){const e=typeof r;"number"===e?n=0!==r?"1":"0":"object"===e?(n="{",r.isTexture&&(n+=r.mapping),n+="}"):n=String(r)}else n=String(r);s+=n+","}return s+=this.clippingContextCacheKey+",",e.geometry&&(s+=this.getGeometryCacheKey()),e.skeleton&&(s+=e.skeleton.bones.length+","),e.morphTargetInfluences&&(s+=e.morphTargetInfluences.length+","),e.isBatchedMesh&&(s+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(s+=e._colorsTexture.uuid+",")),e.count>1&&(s+=e.uuid+","),ar(s)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(e+=1),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Pg=[];class Ig{constructor(e,t,s,r,n,i){this.renderer=e,this.nodes=t,this.geometries=s,this.pipelines=r,this.bindings=n,this.info=i,this.chainMaps={}}get(e,t,s,r,n,i,o,a){const u=this.getChainMap(a);Pg[0]=e,Pg[1]=t,Pg[2]=i,Pg[3]=n;let l=u.get(Pg);if(void 0===l)l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,s,r,n,i,o,a),u.set(Pg,l);else{l.updateClipping(o);const u=l.needsGeometryUpdate;(l.version!==t.version||l.needsUpdate||u)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,s,r,n,i,o,a)):(l.version=t.version,u&&l.setGeometry(e.geometry)))}return l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Bg)}dispose(){this.chainMaps={}}createRenderObject(e,t,s,r,n,i,o,a,u,l,d){const c=this.getChainMap(d),h=new Fg(e,t,s,r,n,i,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Lg{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Dg=1,Vg=2,Og=3,Gg=4,kg=16;class zg extends Lg{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return void 0!==t&&this.backend.destroyAttribute(e),t}update(e,t){const s=this.get(e);if(void 0===s.version)t===Dg?this.backend.createAttribute(e):t===Vg?this.backend.createIndexAttribute(e):t===Og?this.backend.createStorageAttribute(e):t===Gg&&this.backend.createIndirectStorageAttribute(e),s.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(s.version<t.version||t.usage===p)&&(this.backend.updateAttribute(e),s.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function $g(e){return null!==e.index?e.index.version:e.attributes.position.version}function Hg(e){const t=[],s=e.index,r=e.attributes.position;if(null!==s){const e=s.array;for(let s=0,r=e.length;s<r;s+=3){const r=e[s+0],n=e[s+1],i=e[s+2];t.push(r,n,n,i,i,r)}}else{for(let e=0,s=r.array.length/3-1;e<s;e+=3){const s=e+0,r=e+1,n=e+2;t.push(s,r,r,n,n,s)}}const n=new(function(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}(t)?ae:ue)(t,1);return n.version=$g(e),n}class Wg extends Lg{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const s=()=>{this.info.memory.geometries--;const r=t.index,n=e.getAttributes();null!==r&&this.attributes.delete(r);for(const e of n)this.attributes.delete(e);const i=this.wireframes.get(t);void 0!==i&&this.attributes.delete(i),t.removeEventListener("dispose",s)};t.addEventListener("dispose",s)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Og):this.updateAttribute(e,Dg);const s=this.getIndex(e);null!==s&&this.updateAttribute(s,Vg);const r=e.geometry.indirect;null!==r&&this.updateAttribute(r,Gg)}updateAttribute(e,t){const s=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,s)):this.attributeCall.get(e.data)!==s&&(this.attributes.update(e,t),this.attributeCall.set(e.data,s),this.attributeCall.set(e,s)):this.attributeCall.get(e)!==s&&(this.attributes.update(e,t),this.attributeCall.set(e,s))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:s}=e;let r=t.index;if(!0===s.wireframe){const e=this.wireframes;let s=e.get(t);void 0===s?(s=Hg(t),e.set(t,s)):s.version!==$g(t)&&(this.attributes.delete(s),s=Hg(t),e.set(t,s)),r=s}return r}}class jg{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(e,t,s){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=s*(t/3):e.isPoints?this.render.points+=s*t:e.isLineSegments?this.render.lines+=s*(t/2):e.isLine?this.render.lines+=s*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(e,t){0===this[e].timestampCalls&&(this[e].timestamp=0),this[e].timestamp+=t,this[e].timestampCalls++,this[e].timestampCalls>=this[e].previousFrameCalls&&(this[e].timestampCalls=0)}reset(){const e=this.render.frameCalls;this.render.previousFrameCalls=e;const t=this.compute.frameCalls;this.compute.previousFrameCalls=t,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class qg{constructor(e){this.cacheKey=e,this.usedTimes=0}}class Kg extends qg{constructor(e,t,s){super(e),this.vertexProgram=t,this.fragmentProgram=s}}class Xg extends qg{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let Yg=0;class Qg{constructor(e,t,s=null,r=null){this.id=Yg++,this.code=e,this.stage=t,this.transforms=s,this.attributes=r,this.usedTimes=0}}class Zg extends Lg{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:s}=this,r=this.get(e);if(this._needsComputeUpdate(e)){const n=r.pipeline;n&&(n.usedTimes--,n.computeProgram.usedTimes--);const i=this.nodes.getForCompute(e);let o=this.programs.compute.get(i.computeShader);void 0===o&&(n&&0===n.computeProgram.usedTimes&&this._releaseProgram(n.computeProgram),o=new Qg(i.computeShader,"compute",i.transforms,i.nodeAttributes),this.programs.compute.set(i.computeShader,o),s.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(n&&0===n.usedTimes&&this._releasePipeline(n),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,r.version=e.version,r.pipeline=u}return r.pipeline}getForRender(e,t=null){const{backend:s}=this,r=this.get(e);if(this._needsRenderUpdate(e)){const n=r.pipeline;n&&(n.usedTimes--,n.vertexProgram.usedTimes--,n.fragmentProgram.usedTimes--);const i=e.getNodeBuilderState();let o=this.programs.vertex.get(i.vertexShader);void 0===o&&(n&&0===n.vertexProgram.usedTimes&&this._releaseProgram(n.vertexProgram),o=new Qg(i.vertexShader,"vertex"),this.programs.vertex.set(i.vertexShader,o),s.createProgram(o));let a=this.programs.fragment.get(i.fragmentShader);void 0===a&&(n&&0===n.fragmentProgram.usedTimes&&this._releaseProgram(n.fragmentProgram),a=new Qg(i.fragmentShader,"fragment"),this.programs.fragment.set(i.fragmentShader,a),s.createProgram(a));const u=this._getRenderCacheKey(e,o,a);let l=this.caches.get(u);void 0===l?(n&&0===n.usedTimes&&this._releasePipeline(n),l=this._getRenderPipeline(e,o,a,u,t)):e.pipeline=l,l.usedTimes++,o.usedTimes++,a.usedTimes++,r.pipeline=l}return r.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,s,r){s=s||this._getComputeCacheKey(e,t);let n=this.caches.get(s);return void 0===n&&(n=new Xg(s,t),this.caches.set(s,n),this.backend.createComputePipeline(n,r)),n}_getRenderPipeline(e,t,s,r,n){r=r||this._getRenderCacheKey(e,t,s);let i=this.caches.get(r);return void 0===i&&(i=new Kg(r,t,s),this.caches.set(r,i),e.pipeline=i,this.backend.createRenderPipeline(e,n)),i}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,s){return t.id+","+s.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,s=e.stage;this.programs[s].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class Jg extends Lg{constructor(e,t,s,r,n,i){super(),this.backend=e,this.textures=s,this.pipelines=n,this.attributes=r,this.nodes=t,this.info=i,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const s=this.get(e);void 0===s.bindGroup&&(this._init(e),this.backend.createBindings(e,t),s.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const s=this.get(e);void 0===s.bindGroup&&(this._init(e),this.backend.createBindings(e,t),s.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,s=e.isIndirectStorageBufferAttribute?Gg:Og;this.attributes.update(e,s)}}_update(e,t){const{backend:s}=this;let r=!1;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!this.nodes.updateGroup(t))continue}if(t.isUniformBuffer){t.update()&&s.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){t.needsBindingsUpdate(this.textures.get(t.texture).generation)&&(r=!0);const e=t.update(),n=t.texture;e&&this.textures.updateTexture(n);const i=s.get(n);if(!0===s.isWebGPUBackend&&void 0===i.texture&&void 0===i.externalTexture&&(console.error("Bindings._update: binding should be available:",t,e,n,t.textureNode.value,r),this.textures.updateTexture(n),r=!0),!0===n.isStorageTexture){const e=this.get(n);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(n)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(n),e.needsMipmap=!1)}}}!0===r&&this.backend.updateBindings(e,t)}}function em(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function tm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function sm(e){return(e.transmission>0||e.transmissionNode)&&e.side===le&&!1===e.forceSinglePass}class rm{constructor(e,t,s){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,s),this.lightsArray=[],this.scene=t,this.camera=s,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,s,r,n,i,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:s,groupOrder:r,renderOrder:e.renderOrder,z:n,group:i,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=s,a.groupOrder=r,a.renderOrder=e.renderOrder,a.z=n,a.group=i,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,s,r,n,i,o){const a=this.getNextRenderItem(e,t,s,r,n,i,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===s.transparent||s.transmission>0?(sm(s)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,s,r,n,i,o){const a=this.getNextRenderItem(e,t,s,r,n,i,o);!0===s.transparent||s.transmission>0?(sm(s)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||em),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||tm),this.transparent.length>1&&this.transparent.sort(t||tm)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}class nm{constructor(e){this.lighting=e,this.lists=new Bg}get(e,t){const s=this.lists,r=[e,t];let n=s.get(r);return void 0===n&&(n=new rm(this.lighting,e,t),s.set(r,n)),n}dispose(){this.lists=new Bg}}let im=0;class om{constructor(){this.id=im++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new r,this.scissor=!1,this.scissorValue=new r,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return am(this)}}function am(e){const{textures:t,activeCubeFace:s}=e,r=[s];for(const e of t)r.push(e.id);return ur(r)}class um{constructor(){this.chainMaps={}}get(e,t,s=null){const r=[e,t];let n;if(null===s)n="default";else{const e=s.texture.format;n=`${s.textures.length}:${e}:${s.samples}:${s.depthBuffer}:${s.stencilBuffer}`}const i=this.getChainMap(n);let o=i.get(r);return void 0===o&&(o=new om,i.set(r,o)),null!==s&&(o.sampleCount=0===s.samples?1:s.samples),o}getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Bg)}dispose(){this.chainMaps={}}}const lm=new s;class dm extends Lg{constructor(e,t,s){super(),this.renderer=e,this.backend=t,this.info=s}updateRenderTarget(e,t=0){const s=this.get(e),r=0===e.samples?1:e.samples,n=s.depthTextureMips||(s.depthTextureMips={}),i=e.textures,o=this.getSize(i[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||n[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new B,l.format=e.stencilBuffer?de:ce,l.type=e.stencilBuffer?he:f,l.image.width=a,l.image.height=u,n[t]=l),s.width===o.width&&o.height===s.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),s.width=o.width,s.height=o.height,s.textures=i,s.depthTexture=l||null,s.depth=e.depthBuffer,s.stencil=e.stencilBuffer,s.renderTarget=e,s.sampleCount!==r&&(c=!0,l&&(l.needsUpdate=!0),s.sampleCount=r);const h={sampleCount:r};for(let e=0;e<i.length;e++){const t=i[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}if(l&&this.updateTexture(l,h),!0!==s.initialized){s.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<i.length;e++)this._destroyTexture(i[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const s=this.get(e);if(!0===s.initialized&&s.version===e.version)return;const r=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,n=this.backend;if(r&&!0===s.initialized&&(n.destroySampler(e),n.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:pe}const{width:i,height:o,depth:a}=this.getSize(e);if(t.width=i,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,i,o):1,r||!0===e.isStorageTexture)n.createSampler(e),n.createTexture(e,t),s.generation=e.version;else{if(!0!==s.initialized&&n.createSampler(e),e.version>0){const r=e.image;if(void 0===r)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===r.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const s=[];for(const t of e.images)s.push(t);t.images=s}else t.image=r;void 0!==s.isDefaultTexture&&!0!==s.isDefaultTexture||(n.createTexture(e,t),s.isDefaultTexture=!1,s.generation=e.version),!0===e.source.dataReady&&n.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&n.generateMipmaps(e)}}else n.createDefaultTexture(e),s.isDefaultTexture=!0,s.generation=e.version}if(!0!==s.initialized){s.initialized=!0,s.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}s.version=e.version}getSize(e,t=lm){let s=e.images?e.images[0]:e.image;return s?(void 0!==s.image&&(s=s.image),t.width=s.width||1,t.height=s.height||1,t.depth=e.isCubeTexture?6:s.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,s){let r;return r=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,s)))+1,r}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class cm extends e{constructor(e,t,s,r=1){super(e,t,s),this.a=r}set(e,t,s,r=1){return this.a=r,super.set(e,t,s)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class hm extends si{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}const pm=(e,t)=>hn(new hm(e,t));class gm extends Ar{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}add(e){return this.nodes.push(e),this}If(e,t){const s=new cn(t);return this._currentCond=xa(e,s),this.add(this._currentCond)}ElseIf(e,t){const s=new cn(t),r=xa(e,s);return this._currentCond.elseNode=r,this._currentCond=r,this}Else(e){return this._currentCond.elseNode=new cn(e),this}build(e,...t){const s=Tn();xn(this);for(const t of this.nodes)t.build(e,"void");return xn(s),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const mm=mn(gm);class fm extends Ar{static get type(){return"StructTypeNode"}constructor(e){super(),this.types=e,this.isStructTypeNode=!0}getMemberTypes(){return this.types}}class ym extends Ar{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}setup(e){super.setup(e);const t=this.members,s=[];for(let r=0;r<t.length;r++)s.push(t[r].getNodeType(e));this.nodeType=e.getStructTypeFromNode(new fm(s)).name}generate(e,t){const s=e.getOutputStructName(),r=this.members,n=""!==s?s+".":"";for(let s=0;s<r.length;s++){const i=r[s].build(e,t);e.addLineFlowCode(`${n}m${s} = ${i}`,this)}return s}}const bm=mn(ym);function xm(e,t){for(let s=0;s<e.length;s++)if(e[s].name===t)return s;return-1}class Tm extends ym{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return _m(t)}setup(e){const t=this.outputNodes,s=[],r=e.renderer.getRenderTarget().textures;for(const e in t){s[xm(r,e)]=Ln(t[e])}return this.members=s,super.setup(e)}}const _m=mn(Tm),Nm=yn((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),s=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return s.shiftRight(22).bitXor(s).toFloat().mul(1/2**32)})),vm=(e,t)=>sa(Gi(4,e.mul(Oi(1,e))),t),Sm=(e,t)=>e.lessThan(.5)?vm(e.mul(2),t).div(2):Oi(1,vm(Gi(Oi(1,e),2),t).div(2)),Am=(e,t,s)=>sa(ki(sa(e,t),Vi(sa(e,t),sa(Oi(1,e),s))),1/t),Rm=(e,t)=>Co(lo.mul(t.mul(e).sub(1))).div(lo.mul(t.mul(e).sub(1))),Cm=yn((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),Em=yn((([e])=>Un(Cm(e.z.add(Cm(e.y.mul(1)))),Cm(e.z.add(Cm(e.x.mul(1)))),Cm(e.y.add(Cm(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),wm=yn((([e,t,s])=>{const r=Un(e).toVar(),n=Sn(1.4).toVar(),i=Sn(0).toVar(),o=Un(r).toVar();return uc({start:Sn(0),end:Sn(3),type:"float",condition:"<="},(()=>{const e=Un(Em(o.mul(2))).toVar();r.addAssign(e.add(s.mul(Sn(.1).mul(t)))),o.mulAssign(1.8),n.mulAssign(1.5),r.mulAssign(1.2);const a=Sn(Cm(r.z.add(Cm(r.x.add(Cm(r.y)))))).toVar();i.addAssign(a.div(n)),o.addAssign(.14)})),i})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"p",type:"vec3"},{name:"spd",type:"float"},{name:"time",type:"float"}]});class Mm extends Ar{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let s=this._candidateFnCall;if(null===s){let r=null,n=-1;for(const s of this.functionNodes){const i=s.shaderNode.layout;if(null===i)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=i.inputs;if(t.length===o.length){let i=0;for(let s=0;s<t.length;s++){const r=t[s],n=o[s];r.getNodeType(e)===n.type?i++:i=0}i>n&&(r=s,n=i)}}this._candidateFnCall=s=r(...t)}return s}}const Bm=mn(Mm),Um=e=>(...t)=>Bm(e,...t),Fm=ti(0).setGroup(Zn).onRenderUpdate((e=>e.time)),Pm=ti(0).setGroup(Zn).onRenderUpdate((e=>e.deltaTime)),Im=ti(0,"uint").setGroup(Zn).onRenderUpdate((e=>e.frameId)),Lm=(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),Fm.mul(e)),Dm=(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),Fm.mul(e)),Vm=(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),Pm.mul(e)),Om=(e=Fm)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),Gm=(e=Fm)=>e.fract().round(),km=(e=Fm)=>e.add(.5).fract().mul(2).sub(1).abs(),zm=(e=Fm)=>e.fract(),$m=yn((([e,t,s=En(.5)])=>Tg(e.sub(s),t).add(s))),Hm=yn((([e,t,s=En(.5)])=>{const r=e.sub(s),n=r.dot(r),i=n.mul(n).mul(t);return e.add(r.mul(i))})),Wm=yn((({position:e=null,horizontal:t=!0,vertical:s=!1})=>{let r;null!==e?(r=Gu.toVar(),r[3][0]=e.x,r[3][1]=e.y,r[3][2]=e.z):r=Gu;const n=Eu.mul(r);return ln(t)&&(n[0][0]=Gu[0].length(),n[0][1]=0,n[0][2]=0),ln(s)&&(n[1][0]=0,n[1][1]=Gu[1].length(),n[1][2]=0),n[2][0]=0,n[2][1]=0,n[2][2]=1,Ru.mul(n).mul(Yu)})),jm=yn((([e=null])=>{const t=Yc();return Yc(kc(e)).sub(t).lessThan(0).select(Ac,e)}));class qm extends Ar{static get type(){return"SpriteSheetUVNode"}constructor(e,t=mu(),s=Sn(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=s}setup(){const{frameNode:e,uvNode:t,countNode:s}=this,{width:r,height:n}=s,i=e.mod(r.mul(n)).floor(),o=i.mod(r),a=n.sub(i.add(1).div(r).ceil()),u=s.reciprocal(),l=En(o,a);return t.add(l).mul(u)}}const Km=mn(qm);class Xm extends Ar{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,s=null,r=Sn(1),n=Yu,i=ol){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=s,this.scaleNode=r,this.positionNode=n,this.normalNode=i}setup(){const{textureXNode:e,textureYNode:t,textureZNode:s,scaleNode:r,positionNode:n,normalNode:i}=this;let o=i.abs().normalize();o=o.div(o.dot(Un(1)));const a=n.yz.mul(r),u=n.zx.mul(r),l=n.xy.mul(r),d=e.value,c=null!==t?t.value:d,h=null!==s?s.value:d,p=_u(d,a).mul(o.x),g=_u(c,u).mul(o.y),m=_u(h,l).mul(o.z);return Vi(p,g,m)}}const Ym=mn(Xm),Qm=(...e)=>Ym(...e),Zm=new me,Jm=new s,ef=new s,tf=new s,sf=new i,rf=new s(0,0,-1),nf=new r,of=new s,af=new s,uf=new r,lf=new t,df=new ge,cf=Ac.flipX();df.depthTexture=new B(1,1);let hf=!1;class pf extends Tu{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||df.texture,cf),this._reflectorBaseNode=e.reflector||new gf(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=hn(new pf({defaultTexture:df.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class gf extends Ar{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:s=new fe,resolution:r=1,generateMipmaps:n=!1,bounces:i=!0,depth:o=!1}=t;this.textureNode=e,this.target=s,this.resolution=r,this.generateMipmaps=n,this.bounces=i,this.depth=o,this.updateBeforeType=i?br.RENDER:br.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap}_updateResolution(e,t){const s=this.resolution;t.getDrawingBufferSize(lf),e.setSize(Math.round(lf.width*s),Math.round(lf.height*s))}setup(e){return this._updateResolution(df,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ge(0,0,{type:ye}),!0===this.generateMipmaps&&(t.texture.minFilter=be,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new B),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&hf)return;hf=!0;const{scene:t,camera:s,renderer:r,material:n}=e,{target:i}=this,o=this.getVirtualCamera(s),a=this.getRenderTarget(o);if(r.getDrawingBufferSize(lf),this._updateResolution(a,r),ef.setFromMatrixPosition(i.matrixWorld),tf.setFromMatrixPosition(s.matrixWorld),sf.extractRotation(i.matrixWorld),Jm.set(0,0,1),Jm.applyMatrix4(sf),of.subVectors(ef,tf),of.dot(Jm)>0)return;of.reflect(Jm).negate(),of.add(ef),sf.extractRotation(s.matrixWorld),rf.set(0,0,-1),rf.applyMatrix4(sf),rf.add(tf),af.subVectors(ef,rf),af.reflect(Jm).negate(),af.add(ef),o.coordinateSystem=s.coordinateSystem,o.position.copy(of),o.up.set(0,1,0),o.up.applyMatrix4(sf),o.up.reflect(Jm),o.lookAt(af),o.near=s.near,o.far=s.far,o.updateMatrixWorld(),o.projectionMatrix.copy(s.projectionMatrix),Zm.setFromNormalAndCoplanarPoint(Jm,ef),Zm.applyMatrix4(o.matrixWorldInverse),nf.set(Zm.normal.x,Zm.normal.y,Zm.normal.z,Zm.constant);const u=o.projectionMatrix;uf.x=(Math.sign(nf.x)+u.elements[8])/u.elements[0],uf.y=(Math.sign(nf.y)+u.elements[9])/u.elements[5],uf.z=-1,uf.w=(1+u.elements[10])/u.elements[14],nf.multiplyScalar(1/nf.dot(uf));u.elements[2]=nf.x,u.elements[6]=nf.y,u.elements[10]=r.coordinateSystem===N?nf.z-0:nf.z+1-0,u.elements[14]=nf.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),n.visible=!1;const l=r.getRenderTarget(),d=r.getMRT();r.setMRT(null),r.setRenderTarget(a),r.render(t,o),r.setMRT(d),r.setRenderTarget(l),n.visible=!0,hf=!1}}const mf=e=>hn(new pf(e)),ff=new xe(-1,1,1,-1,0,1);class yf extends Te{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new _e([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new _e(t,2))}}const bf=new yf;class xf extends k{constructor(e=null){super(bf,e),this.camera=ff,this.isQuadMesh=!0}renderAsync(e){return e.renderAsync(this,ff)}render(e){e.render(this,ff)}}const Tf=new t;class _f extends Tu{static get type(){return"RTTNode"}constructor(e,t=null,s=null,r={type:ye}){const n=new ge(t,s,r);super(n.texture,mu()),this.node=e,this.width=t,this.height=s,this.renderTarget=n,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this.updateMap=new WeakMap,this._rttNode=null,this._quadMesh=new xf(new rh),this.updateBeforeType=br.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const s=e*this.pixelRatio,r=t*this.pixelRatio;this.renderTarget.setSize(s,r),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(Tf);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Tu(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const Nf=(e,...t)=>hn(new _f(hn(e),...t)),vf=(e,...t)=>e.isTextureNode?e:Nf(e,...t),Sf=yn((([e,t,s],r)=>{let n;r.renderer.coordinateSystem===N?(e=En(e.x,e.y.oneMinus()).mul(2).sub(1),n=Ln(Un(e,t),1)):n=Ln(Un(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const i=Ln(s.mul(n));return i.xyz.div(i.w)})),Af=yn((([e,t])=>{const s=t.mul(Ln(e,1)),r=s.xy.div(s.w).mul(.5).add(.5).toVar();return En(r.x,r.y.oneMinus())})),Rf=yn((([e,t,s])=>{const r=yu(Nu(t)),n=wn(e.mul(r)).toVar(),i=Nu(t,n).toVar(),o=Nu(t,n.sub(wn(2,0))).toVar(),a=Nu(t,n.sub(wn(1,0))).toVar(),u=Nu(t,n.add(wn(1,0))).toVar(),l=Nu(t,n.add(wn(2,0))).toVar(),d=Nu(t,n.add(wn(0,2))).toVar(),c=Nu(t,n.add(wn(0,1))).toVar(),h=Nu(t,n.sub(wn(0,1))).toVar(),p=Nu(t,n.sub(wn(0,2))).toVar(),g=Fo(Oi(Sn(2).mul(a).sub(o),i)).toVar(),m=Fo(Oi(Sn(2).mul(u).sub(l),i)).toVar(),f=Fo(Oi(Sn(2).mul(c).sub(d),i)).toVar(),y=Fo(Oi(Sn(2).mul(h).sub(p),i)).toVar(),b=Sf(e,i,s).toVar(),x=g.lessThan(m).select(b.sub(Sf(e.sub(En(Sn(1).div(r.x),0)),a,s)),b.negate().add(Sf(e.add(En(Sn(1).div(r.x),0)),u,s))),T=f.lessThan(y).select(b.sub(Sf(e.add(En(0,Sn(1).div(r.y))),c,s)),b.negate().add(Sf(e.sub(En(0,Sn(1).div(r.y))),h,s)));return Ao(ta(x,T))}));class Cf extends pu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let s;return s=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new r(1,1,1,1)),s}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}const Ef=(...e)=>hn(new Cf(...e));class wf extends Ar{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const Mf=fn(wf),Bf=new ve,Uf=new i;class Ff extends Ar{static get type(){return"SceneNode"}constructor(e=Ff.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,s=null!==this.scene?this.scene:e.scene;let r;return t===Ff.BACKGROUND_BLURRINESS?r=Ml("backgroundBlurriness","float",s):t===Ff.BACKGROUND_INTENSITY?r=Ml("backgroundIntensity","float",s):t===Ff.BACKGROUND_ROTATION?r=ti("mat4").label("backgroundRotation").setGroup(Zn).onRenderUpdate((()=>{const e=s.background;return null!==e&&e.isTexture&&e.mapping!==Ne?(Bf.copy(s.backgroundRotation),Bf.x*=-1,Bf.y*=-1,Bf.z*=-1,Uf.makeRotationFromEuler(Bf)):Uf.identity(),Uf})):console.error("THREE.SceneNode: Unknown scope:",t),r}}Ff.BACKGROUND_BLURRINESS="backgroundBlurriness",Ff.BACKGROUND_INTENSITY="backgroundIntensity",Ff.BACKGROUND_ROTATION="backgroundRotation";const Pf=fn(Ff,Ff.BACKGROUND_BLURRINESS),If=fn(Ff,Ff.BACKGROUND_INTENSITY),Lf=fn(Ff,Ff.BACKGROUND_ROTATION);class Df extends Rr{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.bufferObject&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let s;const r=e.context.assign;if(s=!1===e.isAvailable("storageBuffer")?!0===this.node.bufferObject&&!0!==r?e.generatePBO(this):this.node.build(e):super.generate(e),!0!==r){const r=this.getNodeType(e);s=e.format(s,r,t)}return s}}const Vf=mn(Df),Of="point-list",Gf="line-list",kf="line-strip",zf="triangle-list",$f="triangle-strip",Hf="never",Wf="less",jf="equal",qf="less-equal",Kf="greater",Xf="not-equal",Yf="greater-equal",Qf="always",Zf="store",Jf="load",ey="clear",ty="ccw",sy="none",ry="front",ny="back",iy="uint16",oy="uint32",ay={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},uy="clamp-to-edge",ly="repeat",dy="mirror-repeat",cy="linear",hy="nearest",py="zero",gy="one",my="src",fy="one-minus-src",yy="src-alpha",by="one-minus-src-alpha",xy="dst",Ty="one-minus-dst",_y="dst-alpha",Ny="one-minus-dst-alpha",vy="src-alpha-saturated",Sy="constant",Ay="one-minus-constant",Ry="add",Cy="subtract",Ey="reverse-subtract",wy="min",My="max",By=0,Uy=15,Fy="keep",Py="zero",Iy="replace",Ly="invert",Dy="increment-clamp",Vy="decrement-clamp",Oy="increment-wrap",Gy="decrement-wrap",ky="storage",zy="read-only-storage",$y="write-only",Hy="read-only",Wy="float",jy="unfilterable-float",qy="depth",Ky="sint",Xy="uint",Yy="2d",Qy="3d",Zy="2d",Jy="2d-array",eb="cube",tb="3d",sb="all",rb="vertex",nb="instance",ib={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class ob extends Nl{static get type(){return"StorageBufferNode"}constructor(e,t,s=0){super(e,t,s),this.isStorageBufferNode=!0,this.access=ky,this.isAtomic=!1,this.bufferObject=!1,this.bufferCount=s,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return Vf(this,e)}setBufferObject(e){return this.bufferObject=e,this}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(zy)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=qa(this.value),this._varying=Ea(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:s}=this.getAttributeData(),r=s.build(e);return e.registerTransform(r,t),r}}const ab=(e,t,s)=>hn(new ob(e,t,s)),ub=(e,t,s)=>hn(new ob(e,t,s).setBufferObject(!0));class lb extends Tu{static get type(){return"StorageTextureNode"}constructor(e,t,s=null){super(e,t),this.storeNode=s,this.isStorageTextureNode=!0,this.access=$y}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let s;return s=null!==this.storeNode?this.generateStore(e):super.generate(e,t),s}toReadOnly(){return this.setAccess(Hy)}toWriteOnly(){return this.setAccess($y)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:s,storeNode:r}=t,n=super.generate(e,"property"),i=s.build(e,"uvec2"),o=r.build(e,"vec4"),a=e.generateTextureStore(e,n,i,o);e.addLineFlowCode(a,this)}}const db=mn(lb),cb=(e,t,s)=>{const r=db(e,t,s);return null!==s&&r.append(),r};class hb extends wl{static get type(){return"UserDataNode"}constructor(e,t,s=null){super(e,t,s),this.userData=s}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const pb=(e,t,s)=>hn(new hb(e,t,s)),gb=new WeakMap;class mb extends Er{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=br.OBJECT,this.updateAfterType=br.OBJECT,this.previousModelWorldMatrix=ti(new i),this.previousProjectionMatrix=ti(new i).setGroup(Zn),this.previousCameraViewMatrix=ti(new i)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:s}){const r=yb(s);this.previousModelWorldMatrix.value.copy(r);const n=fb(t);n.frameId!==e&&(n.frameId=e,void 0===n.previousProjectionMatrix?(n.previousProjectionMatrix=new i,n.previousCameraViewMatrix=new i,n.currentProjectionMatrix=new i,n.currentCameraViewMatrix=new i,n.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),n.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(n.previousProjectionMatrix.copy(n.currentProjectionMatrix),n.previousCameraViewMatrix.copy(n.currentCameraViewMatrix)),n.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),n.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(n.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(n.previousCameraViewMatrix))}updateAfter({object:e}){yb(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?Ru:ti(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),s=e.mul(ju).mul(Yu),r=this.previousProjectionMatrix.mul(t).mul(Qu),n=s.xy.div(s.w),i=r.xy.div(r.w);return Oi(n,i)}}function fb(e){let t=gb.get(e);return void 0===t&&(t={},gb.set(e,t)),t}function yb(e,t=0){const s=fb(e);let r=s[t];return void 0===r&&(s[t]=r=new i),r}const bb=fn(mb),xb=yn((([e,t])=>qo(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"burnBlend",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Tb=yn((([e,t])=>qo(e.div(t.oneMinus()),1))).setLayout({name:"dodgeBlend",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),_b=yn((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"screenBlend",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Nb=yn((([e,t])=>la(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),Yo(.5,e)))).setLayout({name:"overlayBlend",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),vb=yn((([e])=>Cb(e.rgb))),Sb=yn((([e,t=Sn(1)])=>t.mix(Cb(e.rgb),e.rgb))),Ab=yn((([e,t=Sn(1)])=>{const s=Vi(e.r,e.g,e.b).div(3),r=e.r.max(e.g.max(e.b)),n=r.sub(s).mul(t).mul(-3);return la(e.rgb,r,n)})),Rb=yn((([e,t=Sn(1)])=>{const s=Un(.57735,.57735,.57735),r=t.cos();return Un(e.rgb.mul(r).add(s.cross(e.rgb).mul(t.sin()).add(s.mul(ea(s,e.rgb).mul(r.oneMinus())))))})),Cb=(e,t=Un(u.getLuminanceCoefficients(new s)))=>ea(e,t),Eb=(e,t)=>la(Un(0),e,Cb(e).sub(t).max(0)),wb=yn((([e,t=Un(1),r=Un(0),n=Un(1),i=Sn(1),o=Un(u.getLuminanceCoefficients(new s,Se))])=>{const a=e.rgb.dot(Un(o)),l=Ko(e.rgb.mul(t).add(r),0).toVar(),d=l.pow(n).toVar();return _n(l.r.greaterThan(0),(()=>{l.r.assign(d.r)})),_n(l.g.greaterThan(0),(()=>{l.g.assign(d.g)})),_n(l.b.greaterThan(0),(()=>{l.b.assign(d.b)})),l.assign(a.add(l.sub(a).mul(i))),Ln(l.rgb,e.a)}));class Mb extends Er{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const Bb=mn(Mb);let Ub=null;class Fb extends Lc{static get type(){return"ViewportSharedTextureNode"}constructor(e=Ac,t=null){null===Ub&&(Ub=new w),super(e,t,Ub)}updateReference(){return this}}const Pb=mn(Fb),Ib=new t;class Lb extends Tu{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class Db extends Lb{static get type(){return"PassMultipleTextureNode"}constructor(e,t,s=!1){super(e,null),this.textureName=t,this.previousTexture=s}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class Vb extends Er{static get type(){return"PassNode"}constructor(e,t,s,r={}){super("vec4"),this.scope=e,this.scene=t,this.camera=s,this.options=r,this._pixelRatio=1,this._width=1,this._height=1;const n=new B;n.isRenderTargetTexture=!0,n.name="depth";const i=new ge(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ye,...r});i.texture.name="output",i.depthTexture=n,this.renderTarget=i,this.updateBeforeType=br.FRAME,this._textures={output:i.texture,depth:n},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=ti(0),this._cameraFar=ti(0),this._mrt=null,this.isPassNode=!0}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.isRenderTargetTexture=!0,t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),t.isRenderTargetTexture=!0,this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const s=this._textures[e],r=this.renderTarget.textures.indexOf(s);this.renderTarget.textures[r]=t,this._textures[e]=t,this._previousTextures[e]=s,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=hn(new Db(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=hn(new Db(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const s=this._cameraNear,r=this._cameraFar;this._viewZNodes[e]=t=jc(this.getTextureNode(e),s,r)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const s=this._cameraNear,r=this._cameraFar,n=this.getViewZNode(e);this._linearDepthNodes[e]=t=$c(n,s,r)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===Vb.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:s,camera:r}=this;this._pixelRatio=t.getPixelRatio();const n=t.getSize(Ib);this.setSize(n.width,n.height);const i=t.getRenderTarget(),o=t.getMRT();this._cameraNear.value=r.near,this._cameraFar.value=r.far;for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(s,r),t.setRenderTarget(i),t.setMRT(o)}setSize(e,t){this._width=e,this._height=t;const s=this._width*this._pixelRatio,r=this._height*this._pixelRatio;this.renderTarget.setSize(s,r)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Vb.COLOR="color",Vb.DEPTH="depth";const Ob=(e,t,s)=>hn(new Vb(Vb.COLOR,e,t,s)),Gb=(e,t)=>hn(new Lb(e,t)),kb=(e,t)=>hn(new Vb(Vb.DEPTH,e,t));class zb extends Vb{static get type(){return"ToonOutlinePassNode"}constructor(e,t,s,r,n){super(Vb.COLOR,e,t),this.colorNode=s,this.thicknessNode=r,this.alphaNode=n,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,s=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,s,r,n,i,o,a,u)=>{if((i.isMeshToonMaterial||i.isMeshToonNodeMaterial)&&!1===i.wireframe){const l=this._getOutlineMaterial(i);t.renderObject(e,s,r,n,l,o,a,u)}t.renderObject(e,s,r,n,i,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(s)}_createMaterial(){const e=new rh;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=x;const t=ol.negate(),s=Ru.mul(ju),r=Sn(1),n=s.mul(Ln(Yu,1)),i=s.mul(Ln(Yu.add(t),1)),o=Ao(n.sub(i));return e.vertexNode=n.add(o.mul(this.thicknessNode).mul(n.w).mul(r)),e.colorNode=Ln(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const $b=(t,s,r=new e(0,0,0),n=.003,i=1)=>hn(new zb(t,s,hn(r),hn(n),hn(i))),Hb=yn((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Wb=yn((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),jb=yn((([e,t])=>{const s=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),r=e.mul(e.mul(6.2).add(1.7)).add(.06);return s.div(r).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),qb=yn((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),s=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(s)})),Kb=yn((([e,t])=>{const s=kn(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),r=kn(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=s.mul(e),e=qb(e),(e=r.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Xb=kn(Un(1.6605,-.1246,-.0182),Un(-.5876,1.1329,-.1006),Un(-.0728,-.0083,1.1187)),Yb=kn(Un(.6274,.0691,.0164),Un(.3293,.9195,.088),Un(.0433,.0113,.8956)),Qb=yn((([e])=>{const t=Un(e).toVar(),s=Un(t.mul(t)).toVar(),r=Un(s.mul(s)).toVar();return Sn(15.5).mul(r.mul(s)).sub(Gi(40.14,r.mul(t))).add(Gi(31.96,r).sub(Gi(6.868,s.mul(t))).add(Gi(.4298,s).add(Gi(.1191,t).sub(.00232))))})),Zb=yn((([e,t])=>{const s=Un(e).toVar(),r=kn(Un(.856627153315983,.137318972929847,.11189821299995),Un(.0951212405381588,.761241990602591,.0767994186031903),Un(.0482516061458583,.101439036467562,.811302368396859)),n=kn(Un(1.1271005818144368,-.1413297634984383,-.14132976349843826),Un(-.11060664309660323,1.157823702216272,-.11060664309660294),Un(-.016493938717834573,-.016493938717834257,1.2519364065950405)),i=Sn(-12.47393),o=Sn(4.026069);return s.mulAssign(t),s.assign(Yb.mul(s)),s.assign(r.mul(s)),s.assign(Ko(s,1e-10)),s.assign(To(s)),s.assign(s.sub(i).div(o.sub(i))),s.assign(da(s,0,1)),s.assign(Qb(s)),s.assign(n.mul(s)),s.assign(sa(Ko(Un(0),s),Un(2.2))),s.assign(Xb.mul(s)),s.assign(da(s,0,1)),s})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Jb=yn((([e,t])=>{const s=Sn(.76),r=Sn(.15);e=e.mul(t);const n=qo(e.r,qo(e.g,e.b)),i=xa(n.lessThan(.08),n.sub(Gi(6.25,n.mul(n))),.04);e.subAssign(i);const o=Ko(e.r,Ko(e.g,e.b));_n(o.lessThan(s),(()=>e));const a=Oi(1,s),u=Oi(1,a.mul(a).div(o.add(a.sub(s))));e.mulAssign(u.div(o));const l=Oi(1,ki(1,r.mul(o.sub(u)).add(1)));return la(e,Un(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class ex extends Ar{static get type(){return"CodeNode"}constructor(e="",t=[],s=""){super("code"),this.isCodeNode=!0,this.code=e,this.language=s,this.includes=t}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const s of t)s.build(e);const s=e.getCodeFromNode(this,this.getNodeType(e));return s.code=this.code,s.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const tx=mn(ex),sx=(e,t)=>tx(e,t,"js"),rx=(e,t)=>tx(e,t,"wgsl"),nx=(e,t)=>tx(e,t,"glsl");class ix extends ex{static get type(){return"FunctionNode"}constructor(e="",t=[],s=""){super(e,t,s)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let s=t.nodeFunction;return void 0===s&&(s=e.parser.parseFunction(this.code),t.nodeFunction=s),s}generate(e,t){super.generate(e);const s=this.getNodeFunction(e),r=s.name,n=s.type,i=e.getCodeFromNode(this,n);""!==r&&(i.name=r);const o=e.getPropertyName(i),a=this.getNodeFunction(e).getCode(o);return i.code=a+"\n","property"===t?o:e.format(`${o}()`,n,t)}}const ox=(e,t=[],s="")=>{for(let e=0;e<t.length;e++){const s=t[e];"function"==typeof s&&(t[e]=s.functionNode)}const r=hn(new ix(e,t,s)),n=(...e)=>r.call(...e);return n.functionNode=r,n},ax=(e,t)=>ox(e,t,"glsl"),ux=(e,t)=>ox(e,t,"wgsl");class lx extends Ar{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outpuType=null,this.events=new o,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Sn()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=gr(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?mr(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const dx=mn(lx);class cx extends Map{get(e,t=null,...s){if(this.has(e))return super.get(e);if(null!==t){const r=t(...s);return this.set(e,r),r}}}class hx{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const px=new cx;class gx extends Ar{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new cx,this._output=dx(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const s=this._outputs;return void 0===s[e]?s[e]=dx(t):s[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const s=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),s[e]=t,s[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),s[e]=t,s[e].events.addEventListener("refresh",this.onRefresh)):void 0===s[e]?(s[e]=dx(t),s[e].events.addEventListener("refresh",this.onRefresh)):s[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const s=this.getObject()[e];if("function"==typeof s)return s(...t)}async callAsync(e,...t){const s=this.getObject()[e];if("function"==typeof s)return"AsyncFunction"===s.constructor.name?await s(...t):s(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new hx(this),t=px.get("THREE"),s=px.get("TSL"),r=this.getMethod(this.codeNode),n=[e,this._local,px,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,s];this._object=r(...n);const i=this._object.layout;if(i&&(!1===i.cache&&this._local.clear(),this._output.outputType=i.outputType||null,Array.isArray(i.elements)))for(const e of i.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Sn()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",s="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],s),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[ar(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const s in this.parameters)t.push(this.parameters[s].getCacheKey(e));return ur(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const mx=mn(gx);class fx extends Ar{static get type(){return"FogNode"}constructor(e,t){super("float"),this.isFogNode=!0,this.colorNode=e,this.factorNode=t}getViewZNode(e){let t;const s=e.context.getViewZ;return void 0!==s&&(t=s(this)),(t||el.z).negate()}setup(){return this.factorNode}}const yx=mn(fx);class bx extends fx{static get type(){return"FogRangeNode"}constructor(e,t,s){super(e),this.isFogRangeNode=!0,this.nearNode=t,this.farNode=s}setup(e){const t=this.getViewZNode(e);return pa(this.nearNode,this.farNode,t)}}const xx=mn(bx);class Tx extends fx{static get type(){return"FogExp2Node"}constructor(e,t){super(e),this.isFogExp2Node=!0,this.densityNode=t}setup(e){const t=this.getViewZNode(e),s=this.densityNode;return s.mul(s,t,t).negate().exp().oneMinus()}}const _x=mn(Tx);let Nx=null,vx=null;class Sx extends Ar{static get type(){return"RangeNode"}constructor(e=Sn(),t=Sn()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(hr(this.minNode.value)),s=e.getTypeLength(hr(this.maxNode.value));return t>s?t:s}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let s=null;if(t.count>1){const n=this.minNode.value,i=this.maxNode.value,o=e.getTypeLength(hr(n)),u=e.getTypeLength(hr(i));Nx=Nx||new r,vx=vx||new r,Nx.setScalar(0),vx.setScalar(0),1===o?Nx.setScalar(n):n.isColor?Nx.set(n.r,n.g,n.b):Nx.set(n.x,n.y,n.z||0,n.w||0),1===u?vx.setScalar(i):i.isColor?vx.set(i.r,i.g,i.b):vx.set(i.x,i.y,i.z||0,i.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,s=Nx.getComponent(t),r=vx.getComponent(t);c[e]=a.lerp(s,r,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)s=vl(c,"vec4",t.count).element(Kd).convert(h);else{const t=new R(c,4);e.geometry.setAttribute("__range"+this.id,t),s=Xa(t).convert(h)}}else s=Sn(0);return s}}const Ax=mn(Sx);class Rx extends Ar{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){e.hasBuiltin(this._builtinName)}generate(e,t){const s=this.getBuiltinName(e),r=this.getNodeType(e);return"compute"===e.shaderStage?e.format(s,r,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${s} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(r))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Cx=(e,t)=>hn(new Rx(e,t)),Ex=Cx("numWorkgroups","uvec3"),wx=Cx("workgroupId","uvec3"),Mx=Cx("localId","uvec3"),Bx=Cx("subgroupSize","uint");const Ux=mn(class extends Ar{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:s}=e;!0===s.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}}),Fx=()=>Ux("workgroup").append(),Px=()=>Ux("storage").append(),Ix=()=>Ux("texture").append();class Lx extends Rr{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let s;const r=e.context.assign;if(s=super.generate(e),!0!==r){const r=this.getNodeType(e);s=e.format(s,r,t)}return s}}class Dx extends Ar{constructor(e,t,s=0){super(t),this.bufferType=t,this.bufferCount=s,this.isWorkgroupInfoNode=!0,this.scope=e}label(e){return this.name=e,this}getHash(){return this.uuid}setScope(e){return this.scope=e,this}getInputType(){return`${this.scope}Array`}element(e){return hn(new Lx(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}const Vx=(e,t)=>hn(new Dx("Workgroup",e,t));class Ox extends Er{static get type(){return"AtomicFunctionNode"}constructor(e,t,s,r=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=s,this.storeNode=r}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,s=this.getNodeType(e),r=this.getInputType(e),n=this.pointerNode,i=this.valueNode,o=[];o.push(`&${n.build(e,r)}`),o.push(i.build(e,r));const a=`${e.getMethod(t,s)}( ${o.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(e,r);e.addLineFlowCode(`${t} = ${a}`,this)}else e.addLineFlowCode(a,this)}}Ox.ATOMIC_LOAD="atomicLoad",Ox.ATOMIC_STORE="atomicStore",Ox.ATOMIC_ADD="atomicAdd",Ox.ATOMIC_SUB="atomicSub",Ox.ATOMIC_MAX="atomicMax",Ox.ATOMIC_MIN="atomicMin",Ox.ATOMIC_AND="atomicAnd",Ox.ATOMIC_OR="atomicOr",Ox.ATOMIC_XOR="atomicXor";const Gx=mn(Ox),kx=(e,t,s,r)=>{const n=Gx(e,t,s,r);return n.append(),n},zx=(e,t,s=null)=>kx(Ox.ATOMIC_STORE,e,t,s),$x=(e,t,s=null)=>kx(Ox.ATOMIC_ADD,e,t,s),Hx=(e,t,s=null)=>kx(Ox.ATOMIC_SUB,e,t,s),Wx=(e,t,s=null)=>kx(Ox.ATOMIC_MAX,e,t,s),jx=(e,t,s=null)=>kx(Ox.ATOMIC_MIN,e,t,s),qx=(e,t,s=null)=>kx(Ox.ATOMIC_AND,e,t,s),Kx=(e,t,s=null)=>kx(Ox.ATOMIC_OR,e,t,s),Xx=(e,t,s=null)=>kx(Ox.ATOMIC_XOR,e,t,s);let Yx;function Qx(e){Yx=Yx||new WeakMap;let t=Yx.get(e);return void 0===t&&Yx.set(e,t={}),t}function Zx(e){const t=Qx(e);return t.position||(t.position=ti(new s).setGroup(Zn).onRenderUpdate(((t,s)=>s.value.setFromMatrixPosition(e.matrixWorld))))}function Jx(e){const t=Qx(e);return t.targetPosition||(t.targetPosition=ti(new s).setGroup(Zn).onRenderUpdate(((t,s)=>s.value.setFromMatrixPosition(e.target.matrixWorld))))}function eT(e){const t=Qx(e);return t.viewPosition||(t.viewPosition=ti(new s).setGroup(Zn).onRenderUpdate((({camera:t},r)=>{r.value=r.value||new s,r.value.setFromMatrixPosition(e.matrixWorld),r.value.applyMatrix4(t.matrixWorldInverse)})))}const tT=e=>Eu.transformDirection(Zx(e).sub(Jx(e))),sT=(e,t)=>{for(const s of t)if(s.isAnalyticLightNode&&s.light.id===e)return s;return null},rT=new WeakMap;class nT extends Ar{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Un().toVar("totalDiffuse"),this.totalSpecularNode=Un().toVar("totalSpecular"),this.outgoingLightNode=Un().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const s of t.nodes)s.build(e)}setupLightsNode(e){const t=[],s=this._lightNodes,r=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),n=e.renderer.library;for(const e of r)if(e.isNode)t.push(hn(e));else{let r=null;if(null!==s&&(r=sT(e.id,s)),null===r){const s=n.getLightNodeClass(e.constructor);if(null===s){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let r=null;rT.has(e)?r=rT.get(e):(r=hn(new s(e)),rT.set(e,r)),t.push(r)}}this._lightNodes=t}setupLights(e,t){for(const s of t)s.build(e)}setup(e){null===this._lightNodes&&this.setupLightsNode(e);const t=e.context,s=t.lightingModel;let r=this.outgoingLightNode;if(s){const{_lightNodes:n,totalDiffuseNode:i,totalSpecularNode:o}=this;t.outgoingLight=r;const a=e.addStack();e.getDataFromNode(this).nodes=a.nodes,s.start(t,a,e),this.setupLights(e,n),s.indirect(t,a,e);const{backdrop:u,backdropAlpha:l}=t,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=t.reflectedLight;let g=d.add(h);null!==u&&(g=Un(null!==l?l.mix(g,u):u),t.material.transparent=!0),i.assign(g),o.assign(c.add(p)),r.assign(i.add(o)),s.finish(t,a,e),r=r.bypass(e.removeStack())}return r}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const iT=(e=[])=>hn(new nT).setLights(e),oT=yn((({depthTexture:e,shadowCoord:t})=>_u(e,t.xy).compare(t.z))),aT=yn((({depthTexture:e,shadowCoord:t,shadow:s})=>{const r=(t,s)=>_u(e,t).compare(s),n=Ml("mapSize","vec2",s).setGroup(Zn),i=Ml("radius","float",s).setGroup(Zn),o=En(1).div(n),a=o.x.negate().mul(i),u=o.y.negate().mul(i),l=o.x.mul(i),d=o.y.mul(i),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return Vi(r(t.xy.add(En(a,u)),t.z),r(t.xy.add(En(0,u)),t.z),r(t.xy.add(En(l,u)),t.z),r(t.xy.add(En(c,h)),t.z),r(t.xy.add(En(0,h)),t.z),r(t.xy.add(En(p,h)),t.z),r(t.xy.add(En(a,0)),t.z),r(t.xy.add(En(c,0)),t.z),r(t.xy,t.z),r(t.xy.add(En(p,0)),t.z),r(t.xy.add(En(l,0)),t.z),r(t.xy.add(En(c,g)),t.z),r(t.xy.add(En(0,g)),t.z),r(t.xy.add(En(p,g)),t.z),r(t.xy.add(En(a,d)),t.z),r(t.xy.add(En(0,d)),t.z),r(t.xy.add(En(l,d)),t.z)).mul(1/17)})),uT=yn((({depthTexture:e,shadowCoord:t,shadow:s})=>{const r=(t,s)=>_u(e,t).compare(s),n=Ml("mapSize","vec2",s).setGroup(Zn),i=En(1).div(n),o=i.x,a=i.y,u=t.xy,l=Ro(u.mul(n).add(.5));return u.subAssign(l.mul(i)),Vi(r(u,t.z),r(u.add(En(o,0)),t.z),r(u.add(En(0,a)),t.z),r(u.add(i),t.z),la(r(u.add(En(o.negate(),0)),t.z),r(u.add(En(o.mul(2),0)),t.z),l.x),la(r(u.add(En(o.negate(),a)),t.z),r(u.add(En(o.mul(2),a)),t.z),l.x),la(r(u.add(En(0,a.negate())),t.z),r(u.add(En(0,a.mul(2))),t.z),l.y),la(r(u.add(En(o,a.negate())),t.z),r(u.add(En(o,a.mul(2))),t.z),l.y),la(la(r(u.add(En(o.negate(),a.negate())),t.z),r(u.add(En(o.mul(2),a.negate())),t.z),l.x),la(r(u.add(En(o.negate(),a.mul(2))),t.z),r(u.add(En(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),lT=yn((({depthTexture:e,shadowCoord:t})=>{const s=Sn(1).toVar(),r=_u(e).uv(t.xy).rg,n=Yo(t.z,r.x);return _n(n.notEqual(Sn(1)),(()=>{const e=t.z.sub(r.x),i=Ko(0,r.y.mul(r.y));let o=i.div(i.add(e.mul(e)));o=da(Oi(o,.3).div(.95-.3)),s.assign(da(Ko(n,o)))})),s})),dT=yn((({samples:e,radius:t,size:s,shadowPass:r})=>{const n=Sn(0).toVar(),i=Sn(0).toVar(),o=e.lessThanEqual(Sn(1)).select(Sn(0),Sn(2).div(e.sub(1))),a=e.lessThanEqual(Sn(1)).select(Sn(0),Sn(-1));uc({start:An(0),end:An(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Sn(e).mul(o)),l=r.uv(Vi(Cc.xy,En(0,u).mul(t)).div(s)).x;n.addAssign(l),i.addAssign(l.mul(l))})),n.divAssign(e),i.divAssign(e);const u=_o(i.sub(n.mul(n)));return En(n,u)})),cT=yn((({samples:e,radius:t,size:s,shadowPass:r})=>{const n=Sn(0).toVar(),i=Sn(0).toVar(),o=e.lessThanEqual(Sn(1)).select(Sn(0),Sn(2).div(e.sub(1))),a=e.lessThanEqual(Sn(1)).select(Sn(0),Sn(-1));uc({start:An(0),end:An(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Sn(e).mul(o)),l=r.uv(Vi(Cc.xy,En(u,0).mul(t)).div(s));n.addAssign(l.x),i.addAssign(Vi(l.y.mul(l.y),l.x.mul(l.x)))})),n.divAssign(e),i.divAssign(e);const u=_o(i.sub(n.mul(n)));return En(n,u)})),hT=[oT,aT,uT,lT];let pT=null;const gT=new xf;class mT extends Ar{static get type(){return"ShadowNode"}constructor(e,t=null){super(),this.light=e,this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this.updateBeforeType=br.RENDER,this._node=null,this.isShadowNode=!0}setupShadow(e){const{object:t,renderer:s}=e;null===pT&&(pT=new rh,pT.fragmentNode=Ln(0,0,0,1),pT.isShadowNodeMaterial=!0,pT.name="ShadowMaterial");const r=this.shadow,n=s.shadowMap.type,i=new B(r.mapSize.width,r.mapSize.height);i.compareFunction=Ae;const o=e.createRenderTarget(r.mapSize.width,r.mapSize.height);if(o.depthTexture=i,r.camera.updateProjectionMatrix(),n===Re){i.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(r.mapSize.width,r.mapSize.height,{format:Ce,type:ye}),this.vsmShadowMapHorizontal=e.createRenderTarget(r.mapSize.width,r.mapSize.height,{format:Ce,type:ye});const t=_u(i),s=_u(this.vsmShadowMapVertical.texture),n=Ml("blurSamples","float",r).setGroup(Zn),o=Ml("radius","float",r).setGroup(Zn),a=Ml("mapSize","vec2",r).setGroup(Zn);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new rh);u.fragmentNode=dT({samples:n,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new rh),u.fragmentNode=cT({samples:n,radius:o,size:a,shadowPass:s}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=Ml("intensity","float",r).setGroup(Zn),u=Ml("bias","float",r).setGroup(Zn),l=Ml("normalBias","float",r).setGroup(Zn),d=t.material.shadowPositionNode||Zu;let c,h=ti(r.matrix).setGroup(Zn).mul(d.add(cl.mul(l)));if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)h=h.xyz.div(h.w),c=h.z,s.coordinateSystem===N&&(c=c.mul(2).sub(1));else{const e=h.w;h=h.xy.div(e);const t=ti("float").onRenderUpdate((()=>r.camera.near)),s=ti("float").onRenderUpdate((()=>r.camera.far));c=qc(e,t,s)}h=Un(h.x,h.y.oneMinus(),c.add(u));const p=h.x.greaterThanEqual(0).and(h.x.lessThanEqual(1)).and(h.y.greaterThanEqual(0)).and(h.y.lessThanEqual(1)).and(h.z.lessThanEqual(1)),g=r.filterNode||hT[s.shadowMap.type]||null;if(null===g)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const m=_u(o.texture,h),f=p.select(g({depthTexture:n===Re?this.vsmShadowMapHorizontal.texture:i,shadowCoord:h,shadow:r}),Sn(1)),y=la(1,f.rgb.mix(m,1),a.mul(m.a)).toVar();return this.shadowMap=o,this.shadow.map=o,y}setup(e){if(!1===e.renderer.shadowMap.enabled)return;let t=this._node;return null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}updateShadow(e){const{shadowMap:t,light:s,shadow:r}=this,{renderer:n,scene:i,camera:o}=e,a=n.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u;const l=i.overrideMaterial;i.overrideMaterial=pT,t.setSize(r.mapSize.width,r.mapSize.height),r.updateMatrices(s),r.camera.layers.mask=o.layers.mask;const d=n.getRenderTarget(),c=n.getRenderObjectFunction();n.setRenderObjectFunction(((e,...t)=>{(!0===e.castShadow||e.receiveShadow&&a===Re)&&n.renderObject(e,...t)})),n.setRenderTarget(t),n.render(i,r.camera),n.setRenderObjectFunction(c),!0!==s.isPointLight&&a===Re&&this.vsmPass(n),n.setRenderTarget(d),i.overrideMaterial=l}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),gT.material=this.vsmMaterialVertical,gT.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),gT.material=this.vsmMaterialHorizontal,gT.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),this.updateBeforeType=br.NONE}updateBefore(e){const{shadow:t}=this;(t.needsUpdate||t.autoUpdate)&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const fT=(e,t)=>hn(new mT(e,t));class yT extends yc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.updateType=br.FRAME,this.light=t,this.color=new e,this.colorNode=ti(this.color).setGroup(Zn),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0}getCacheKey(){return lr(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let s=this.shadowColorNode;if(null===s){const e=this.light.shadow.shadowNode;let t;t=void 0!==e?hn(e):fT(this.light),this.shadowNode=t,this.shadowColorNode=s=this.colorNode.mul(t),this.baseColorNode=this.colorNode}this.colorNode=s}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&this.shadowNode.dispose()}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const bT=yn((e=>{const{lightDistance:t,cutoffDistance:s,decayExponent:r}=e,n=t.pow(r).max(.01).reciprocal();return s.greaterThan(0).select(n.mul(t.div(s).pow4().oneMinus().clamp().pow2()),n)})),xT=yn((({color:e,lightViewPosition:t,cutoffDistance:s,decayExponent:r},n)=>{const i=n.context.lightingModel,o=t.sub(el),a=o.normalize(),u=o.length(),l=bT({lightDistance:u,cutoffDistance:s,decayExponent:r}),d=e.mul(l),c=n.context.reflectedLight;i.direct({lightDirection:a,lightColor:d,reflectedLight:c},n.stack,n)}));class TT extends yT{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=ti(0).setGroup(Zn),this.decayExponentNode=ti(0).setGroup(Zn)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setup(){xT({color:this.colorNode,lightViewPosition:eT(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const _T=yn((([e=t()])=>{const t=e.mul(2),s=t.x.floor(),r=t.y.floor();return s.add(r).mod(2).sign()})),NT=yn((([e,t,s])=>{const r=Sn(s).toVar(),n=Sn(t).toVar(),i=Cn(e).toVar();return xa(i,n,r)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),vT=yn((([e,t])=>{const s=Cn(t).toVar(),r=Sn(e).toVar();return xa(s,r.negate(),r)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),ST=yn((([e])=>{const t=Sn(e).toVar();return An(vo(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),AT=yn((([e,t])=>{const s=Sn(e).toVar();return t.assign(ST(s)),s.sub(Sn(t))})),RT=Um([yn((([e,t,s,r,n,i])=>{const o=Sn(i).toVar(),a=Sn(n).toVar(),u=Sn(r).toVar(),l=Sn(s).toVar(),d=Sn(t).toVar(),c=Sn(e).toVar(),h=Sn(Oi(1,a)).toVar();return Oi(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),yn((([e,t,s,r,n,i])=>{const o=Sn(i).toVar(),a=Sn(n).toVar(),u=Un(r).toVar(),l=Un(s).toVar(),d=Un(t).toVar(),c=Un(e).toVar(),h=Sn(Oi(1,a)).toVar();return Oi(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),CT=Um([yn((([e,t,s,r,n,i,o,a,u,l,d])=>{const c=Sn(d).toVar(),h=Sn(l).toVar(),p=Sn(u).toVar(),g=Sn(a).toVar(),m=Sn(o).toVar(),f=Sn(i).toVar(),y=Sn(n).toVar(),b=Sn(r).toVar(),x=Sn(s).toVar(),T=Sn(t).toVar(),_=Sn(e).toVar(),N=Sn(Oi(1,p)).toVar(),v=Sn(Oi(1,h)).toVar();return Sn(Oi(1,c)).toVar().mul(v.mul(_.mul(N).add(T.mul(p))).add(h.mul(x.mul(N).add(b.mul(p))))).add(c.mul(v.mul(y.mul(N).add(f.mul(p))).add(h.mul(m.mul(N).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),yn((([e,t,s,r,n,i,o,a,u,l,d])=>{const c=Sn(d).toVar(),h=Sn(l).toVar(),p=Sn(u).toVar(),g=Un(a).toVar(),m=Un(o).toVar(),f=Un(i).toVar(),y=Un(n).toVar(),b=Un(r).toVar(),x=Un(s).toVar(),T=Un(t).toVar(),_=Un(e).toVar(),N=Sn(Oi(1,p)).toVar(),v=Sn(Oi(1,h)).toVar();return Sn(Oi(1,c)).toVar().mul(v.mul(_.mul(N).add(T.mul(p))).add(h.mul(x.mul(N).add(b.mul(p))))).add(c.mul(v.mul(y.mul(N).add(f.mul(p))).add(h.mul(m.mul(N).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),ET=yn((([e,t,s])=>{const r=Sn(s).toVar(),n=Sn(t).toVar(),i=Rn(e).toVar(),o=Rn(i.bitAnd(Rn(7))).toVar(),a=Sn(NT(o.lessThan(Rn(4)),n,r)).toVar(),u=Sn(Gi(2,NT(o.lessThan(Rn(4)),r,n))).toVar();return vT(a,Cn(o.bitAnd(Rn(1)))).add(vT(u,Cn(o.bitAnd(Rn(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),wT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=Sn(t).toVar(),a=Rn(e).toVar(),u=Rn(a.bitAnd(Rn(15))).toVar(),l=Sn(NT(u.lessThan(Rn(8)),o,i)).toVar(),d=Sn(NT(u.lessThan(Rn(4)),i,NT(u.equal(Rn(12)).or(u.equal(Rn(14))),o,n))).toVar();return vT(l,Cn(u.bitAnd(Rn(1)))).add(vT(d,Cn(u.bitAnd(Rn(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),MT=Um([ET,wT]),BT=yn((([e,t,s])=>{const r=Sn(s).toVar(),n=Sn(t).toVar(),i=Pn(e).toVar();return Un(MT(i.x,n,r),MT(i.y,n,r),MT(i.z,n,r))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),UT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=Sn(t).toVar(),a=Pn(e).toVar();return Un(MT(a.x,o,i,n),MT(a.y,o,i,n),MT(a.z,o,i,n))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),FT=Um([BT,UT]),PT=yn((([e])=>{const t=Sn(e).toVar();return Gi(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),IT=yn((([e])=>{const t=Sn(e).toVar();return Gi(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),LT=Um([PT,yn((([e])=>{const t=Un(e).toVar();return Gi(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),DT=Um([IT,yn((([e])=>{const t=Un(e).toVar();return Gi(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),VT=yn((([e,t])=>{const s=An(t).toVar(),r=Rn(e).toVar();return r.shiftLeft(s).bitOr(r.shiftRight(An(32).sub(s)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),OT=yn((([e,t,s])=>{e.subAssign(s),e.bitXorAssign(VT(s,An(4))),s.addAssign(t),t.subAssign(e),t.bitXorAssign(VT(e,An(6))),e.addAssign(s),s.subAssign(t),s.bitXorAssign(VT(t,An(8))),t.addAssign(e),e.subAssign(s),e.bitXorAssign(VT(s,An(16))),s.addAssign(t),t.subAssign(e),t.bitXorAssign(VT(e,An(19))),e.addAssign(s),s.subAssign(t),s.bitXorAssign(VT(t,An(4))),t.addAssign(e)})),GT=yn((([e,t,s])=>{const r=Rn(s).toVar(),n=Rn(t).toVar(),i=Rn(e).toVar();return r.bitXorAssign(n),r.subAssign(VT(n,An(14))),i.bitXorAssign(r),i.subAssign(VT(r,An(11))),n.bitXorAssign(i),n.subAssign(VT(i,An(25))),r.bitXorAssign(n),r.subAssign(VT(n,An(16))),i.bitXorAssign(r),i.subAssign(VT(r,An(4))),n.bitXorAssign(i),n.subAssign(VT(i,An(14))),r.bitXorAssign(n),r.subAssign(VT(n,An(24))),r})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),kT=yn((([e])=>{const t=Rn(e).toVar();return Sn(t).div(Sn(Rn(An(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),zT=yn((([e])=>{const t=Sn(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),$T=Um([yn((([e])=>{const t=An(e).toVar(),s=Rn(Rn(1)).toVar(),r=Rn(Rn(An(3735928559)).add(s.shiftLeft(Rn(2))).add(Rn(13))).toVar();return GT(r.add(Rn(t)),r,r)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),yn((([e,t])=>{const s=An(t).toVar(),r=An(e).toVar(),n=Rn(Rn(2)).toVar(),i=Rn().toVar(),o=Rn().toVar(),a=Rn().toVar();return i.assign(o.assign(a.assign(Rn(An(3735928559)).add(n.shiftLeft(Rn(2))).add(Rn(13))))),i.addAssign(Rn(r)),o.addAssign(Rn(s)),GT(i,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),yn((([e,t,s])=>{const r=An(s).toVar(),n=An(t).toVar(),i=An(e).toVar(),o=Rn(Rn(3)).toVar(),a=Rn().toVar(),u=Rn().toVar(),l=Rn().toVar();return a.assign(u.assign(l.assign(Rn(An(3735928559)).add(o.shiftLeft(Rn(2))).add(Rn(13))))),a.addAssign(Rn(i)),u.addAssign(Rn(n)),l.addAssign(Rn(r)),GT(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),yn((([e,t,s,r])=>{const n=An(r).toVar(),i=An(s).toVar(),o=An(t).toVar(),a=An(e).toVar(),u=Rn(Rn(4)).toVar(),l=Rn().toVar(),d=Rn().toVar(),c=Rn().toVar();return l.assign(d.assign(c.assign(Rn(An(3735928559)).add(u.shiftLeft(Rn(2))).add(Rn(13))))),l.addAssign(Rn(a)),d.addAssign(Rn(o)),c.addAssign(Rn(i)),OT(l,d,c),l.addAssign(Rn(n)),GT(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),yn((([e,t,s,r,n])=>{const i=An(n).toVar(),o=An(r).toVar(),a=An(s).toVar(),u=An(t).toVar(),l=An(e).toVar(),d=Rn(Rn(5)).toVar(),c=Rn().toVar(),h=Rn().toVar(),p=Rn().toVar();return c.assign(h.assign(p.assign(Rn(An(3735928559)).add(d.shiftLeft(Rn(2))).add(Rn(13))))),c.addAssign(Rn(l)),h.addAssign(Rn(u)),p.addAssign(Rn(a)),OT(c,h,p),c.addAssign(Rn(o)),h.addAssign(Rn(i)),GT(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),HT=Um([yn((([e,t])=>{const s=An(t).toVar(),r=An(e).toVar(),n=Rn($T(r,s)).toVar(),i=Pn().toVar();return i.x.assign(n.bitAnd(An(255))),i.y.assign(n.shiftRight(An(8)).bitAnd(An(255))),i.z.assign(n.shiftRight(An(16)).bitAnd(An(255))),i})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),yn((([e,t,s])=>{const r=An(s).toVar(),n=An(t).toVar(),i=An(e).toVar(),o=Rn($T(i,n,r)).toVar(),a=Pn().toVar();return a.x.assign(o.bitAnd(An(255))),a.y.assign(o.shiftRight(An(8)).bitAnd(An(255))),a.z.assign(o.shiftRight(An(16)).bitAnd(An(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),WT=Um([yn((([e])=>{const t=En(e).toVar(),s=An().toVar(),r=An().toVar(),n=Sn(AT(t.x,s)).toVar(),i=Sn(AT(t.y,r)).toVar(),o=Sn(zT(n)).toVar(),a=Sn(zT(i)).toVar(),u=Sn(RT(MT($T(s,r),n,i),MT($T(s.add(An(1)),r),n.sub(1),i),MT($T(s,r.add(An(1))),n,i.sub(1)),MT($T(s.add(An(1)),r.add(An(1))),n.sub(1),i.sub(1)),o,a)).toVar();return LT(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),yn((([e])=>{const t=Un(e).toVar(),s=An().toVar(),r=An().toVar(),n=An().toVar(),i=Sn(AT(t.x,s)).toVar(),o=Sn(AT(t.y,r)).toVar(),a=Sn(AT(t.z,n)).toVar(),u=Sn(zT(i)).toVar(),l=Sn(zT(o)).toVar(),d=Sn(zT(a)).toVar(),c=Sn(CT(MT($T(s,r,n),i,o,a),MT($T(s.add(An(1)),r,n),i.sub(1),o,a),MT($T(s,r.add(An(1)),n),i,o.sub(1),a),MT($T(s.add(An(1)),r.add(An(1)),n),i.sub(1),o.sub(1),a),MT($T(s,r,n.add(An(1))),i,o,a.sub(1)),MT($T(s.add(An(1)),r,n.add(An(1))),i.sub(1),o,a.sub(1)),MT($T(s,r.add(An(1)),n.add(An(1))),i,o.sub(1),a.sub(1)),MT($T(s.add(An(1)),r.add(An(1)),n.add(An(1))),i.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return DT(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),jT=Um([yn((([e])=>{const t=En(e).toVar(),s=An().toVar(),r=An().toVar(),n=Sn(AT(t.x,s)).toVar(),i=Sn(AT(t.y,r)).toVar(),o=Sn(zT(n)).toVar(),a=Sn(zT(i)).toVar(),u=Un(RT(FT(HT(s,r),n,i),FT(HT(s.add(An(1)),r),n.sub(1),i),FT(HT(s,r.add(An(1))),n,i.sub(1)),FT(HT(s.add(An(1)),r.add(An(1))),n.sub(1),i.sub(1)),o,a)).toVar();return LT(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),yn((([e])=>{const t=Un(e).toVar(),s=An().toVar(),r=An().toVar(),n=An().toVar(),i=Sn(AT(t.x,s)).toVar(),o=Sn(AT(t.y,r)).toVar(),a=Sn(AT(t.z,n)).toVar(),u=Sn(zT(i)).toVar(),l=Sn(zT(o)).toVar(),d=Sn(zT(a)).toVar(),c=Un(CT(FT(HT(s,r,n),i,o,a),FT(HT(s.add(An(1)),r,n),i.sub(1),o,a),FT(HT(s,r.add(An(1)),n),i,o.sub(1),a),FT(HT(s.add(An(1)),r.add(An(1)),n),i.sub(1),o.sub(1),a),FT(HT(s,r,n.add(An(1))),i,o,a.sub(1)),FT(HT(s.add(An(1)),r,n.add(An(1))),i.sub(1),o,a.sub(1)),FT(HT(s,r.add(An(1)),n.add(An(1))),i,o.sub(1),a.sub(1)),FT(HT(s.add(An(1)),r.add(An(1)),n.add(An(1))),i.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return DT(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),qT=Um([yn((([e])=>{const t=Sn(e).toVar(),s=An(ST(t)).toVar();return kT($T(s))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),yn((([e])=>{const t=En(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar();return kT($T(s,r))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),yn((([e])=>{const t=Un(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar(),n=An(ST(t.z)).toVar();return kT($T(s,r,n))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),yn((([e])=>{const t=Ln(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar(),n=An(ST(t.z)).toVar(),i=An(ST(t.w)).toVar();return kT($T(s,r,n,i))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),KT=Um([yn((([e])=>{const t=Sn(e).toVar(),s=An(ST(t)).toVar();return Un(kT($T(s,An(0))),kT($T(s,An(1))),kT($T(s,An(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),yn((([e])=>{const t=En(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar();return Un(kT($T(s,r,An(0))),kT($T(s,r,An(1))),kT($T(s,r,An(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),yn((([e])=>{const t=Un(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar(),n=An(ST(t.z)).toVar();return Un(kT($T(s,r,n,An(0))),kT($T(s,r,n,An(1))),kT($T(s,r,n,An(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),yn((([e])=>{const t=Ln(e).toVar(),s=An(ST(t.x)).toVar(),r=An(ST(t.y)).toVar(),n=An(ST(t.z)).toVar(),i=An(ST(t.w)).toVar();return Un(kT($T(s,r,n,i,An(0))),kT($T(s,r,n,i,An(1))),kT($T(s,r,n,i,An(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),XT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=An(t).toVar(),a=Un(e).toVar(),u=Sn(0).toVar(),l=Sn(1).toVar();return uc(o,(()=>{u.addAssign(l.mul(WT(a))),l.mulAssign(n),a.mulAssign(i)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),YT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=An(t).toVar(),a=Un(e).toVar(),u=Un(0).toVar(),l=Sn(1).toVar();return uc(o,(()=>{u.addAssign(l.mul(jT(a))),l.mulAssign(n),a.mulAssign(i)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),QT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=An(t).toVar(),a=Un(e).toVar();return En(XT(a,o,i,n),XT(a.add(Un(An(19),An(193),An(17))),o,i,n))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),ZT=yn((([e,t,s,r])=>{const n=Sn(r).toVar(),i=Sn(s).toVar(),o=An(t).toVar(),a=Un(e).toVar(),u=Un(YT(a,o,i,n)).toVar(),l=Sn(XT(a.add(Un(An(19),An(193),An(17))),o,i,n)).toVar();return Ln(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),JT=Um([yn((([e,t,s,r,n,i,o])=>{const a=An(o).toVar(),u=Sn(i).toVar(),l=An(n).toVar(),d=An(r).toVar(),c=An(s).toVar(),h=An(t).toVar(),p=En(e).toVar(),g=Un(KT(En(h.add(d),c.add(l)))).toVar(),m=En(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=En(En(Sn(h),Sn(c)).add(m)).toVar(),y=En(f.sub(p)).toVar();return _n(a.equal(An(2)),(()=>Fo(y.x).add(Fo(y.y)))),_n(a.equal(An(3)),(()=>Ko(Fo(y.x),Fo(y.y)))),ea(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),yn((([e,t,s,r,n,i,o,a,u])=>{const l=An(u).toVar(),d=Sn(a).toVar(),c=An(o).toVar(),h=An(i).toVar(),p=An(n).toVar(),g=An(r).toVar(),m=An(s).toVar(),f=An(t).toVar(),y=Un(e).toVar(),b=Un(KT(Un(f.add(p),m.add(h),g.add(c)))).toVar();b.subAssign(.5),b.mulAssign(d),b.addAssign(.5);const x=Un(Un(Sn(f),Sn(m),Sn(g)).add(b)).toVar(),T=Un(x.sub(y)).toVar();return _n(l.equal(An(2)),(()=>Fo(T.x).add(Fo(T.y)).add(Fo(T.z)))),_n(l.equal(An(3)),(()=>Ko(Ko(Fo(T.x),Fo(T.y)),Fo(T.z)))),ea(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),e_=yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=En(e).toVar(),o=An().toVar(),a=An().toVar(),u=En(AT(i.x,o),AT(i.y,a)).toVar(),l=Sn(1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{const s=Sn(JT(u,e,t,o,a,n,r)).toVar();l.assign(qo(l,s))}))})),_n(r.equal(An(0)),(()=>{l.assign(_o(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),t_=yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=En(e).toVar(),o=An().toVar(),a=An().toVar(),u=En(AT(i.x,o),AT(i.y,a)).toVar(),l=En(1e6,1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{const s=Sn(JT(u,e,t,o,a,n,r)).toVar();_n(s.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(s)})).ElseIf(s.lessThan(l.y),(()=>{l.y.assign(s)}))}))})),_n(r.equal(An(0)),(()=>{l.assign(_o(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),s_=yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=En(e).toVar(),o=An().toVar(),a=An().toVar(),u=En(AT(i.x,o),AT(i.y,a)).toVar(),l=Un(1e6,1e6,1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{const s=Sn(JT(u,e,t,o,a,n,r)).toVar();_n(s.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(s)})).ElseIf(s.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(s)})).ElseIf(s.lessThan(l.z),(()=>{l.z.assign(s)}))}))})),_n(r.equal(An(0)),(()=>{l.assign(_o(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),r_=Um([e_,yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=Un(e).toVar(),o=An().toVar(),a=An().toVar(),u=An().toVar(),l=Un(AT(i.x,o),AT(i.y,a),AT(i.z,u)).toVar(),d=Sn(1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{uc({start:-1,end:An(1),name:"z",condition:"<="},(({z:s})=>{const i=Sn(JT(l,e,t,s,o,a,u,n,r)).toVar();d.assign(qo(d,i))}))}))})),_n(r.equal(An(0)),(()=>{d.assign(_o(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),n_=Um([t_,yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=Un(e).toVar(),o=An().toVar(),a=An().toVar(),u=An().toVar(),l=Un(AT(i.x,o),AT(i.y,a),AT(i.z,u)).toVar(),d=En(1e6,1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{uc({start:-1,end:An(1),name:"z",condition:"<="},(({z:s})=>{const i=Sn(JT(l,e,t,s,o,a,u,n,r)).toVar();_n(i.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(i)})).ElseIf(i.lessThan(d.y),(()=>{d.y.assign(i)}))}))}))})),_n(r.equal(An(0)),(()=>{d.assign(_o(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),i_=Um([s_,yn((([e,t,s])=>{const r=An(s).toVar(),n=Sn(t).toVar(),i=Un(e).toVar(),o=An().toVar(),a=An().toVar(),u=An().toVar(),l=Un(AT(i.x,o),AT(i.y,a),AT(i.z,u)).toVar(),d=Un(1e6,1e6,1e6).toVar();return uc({start:-1,end:An(1),name:"x",condition:"<="},(({x:e})=>{uc({start:-1,end:An(1),name:"y",condition:"<="},(({y:t})=>{uc({start:-1,end:An(1),name:"z",condition:"<="},(({z:s})=>{const i=Sn(JT(l,e,t,s,o,a,u,n,r)).toVar();_n(i.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(i)})).ElseIf(i.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(i)})).ElseIf(i.lessThan(d.z),(()=>{d.z.assign(i)}))}))}))})),_n(r.equal(An(0)),(()=>{d.assign(_o(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),o_=yn((([e])=>{const t=e.y,s=e.z,r=Un().toVar();return _n(t.lessThan(1e-4),(()=>{r.assign(Un(s,s,s))})).Else((()=>{let n=e.x;n=n.sub(vo(n)).mul(6).toVar();const i=An(zo(n)),o=n.sub(Sn(i)),a=s.mul(t.oneMinus()),u=s.mul(t.mul(o).oneMinus()),l=s.mul(t.mul(o.oneMinus()).oneMinus());_n(i.equal(An(0)),(()=>{r.assign(Un(s,l,a))})).ElseIf(i.equal(An(1)),(()=>{r.assign(Un(u,s,a))})).ElseIf(i.equal(An(2)),(()=>{r.assign(Un(a,s,l))})).ElseIf(i.equal(An(3)),(()=>{r.assign(Un(a,u,s))})).ElseIf(i.equal(An(4)),(()=>{r.assign(Un(l,a,s))})).Else((()=>{r.assign(Un(s,a,u))}))})),r})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),a_=yn((([e])=>{const t=Un(e).toVar(),s=Sn(t.x).toVar(),r=Sn(t.y).toVar(),n=Sn(t.z).toVar(),i=Sn(qo(s,qo(r,n))).toVar(),o=Sn(Ko(s,Ko(r,n))).toVar(),a=Sn(o.sub(i)).toVar(),u=Sn().toVar(),l=Sn().toVar(),d=Sn().toVar();return d.assign(o),_n(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),_n(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{_n(s.greaterThanEqual(o),(()=>{u.assign(r.sub(n).div(a))})).ElseIf(r.greaterThanEqual(o),(()=>{u.assign(Vi(2,n.sub(s).div(a)))})).Else((()=>{u.assign(Vi(4,s.sub(r).div(a)))})),u.mulAssign(1/6),_n(u.lessThan(0),(()=>{u.addAssign(1)}))})),Un(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),u_=yn((([e])=>{const t=Un(e).toVar(),s=In(ji(t,Un(.04045))).toVar(),r=Un(t.div(12.92)).toVar(),n=Un(sa(Ko(t.add(Un(.055)),Un(0)).div(1.055),Un(2.4))).toVar();return la(r,n,s)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),l_=(e,t)=>{e=Sn(e),t=Sn(t);const s=En(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return pa(e.sub(s),e.add(s),t)},d_=(e,t,s,r)=>la(e,t,s[r].clamp()),c_=(e,t,s=mu())=>d_(e,t,s,"x"),h_=(e,t,s=mu())=>d_(e,t,s,"y"),p_=(e,t,s,r,n)=>la(e,t,l_(s,r[n])),g_=(e,t,s,r=mu())=>p_(e,t,s,r,"x"),m_=(e,t,s,r=mu())=>p_(e,t,s,r,"y"),f_=(e=1,t=0,s=mu())=>s.mul(e).add(t),y_=(e,t=1)=>(e=Sn(e)).abs().pow(t).mul(e.sign()),b_=(e,t=1,s=.5)=>Sn(e).sub(s).mul(t).add(s),x_=(e=mu(),t=1,s=0)=>WT(e.convert("vec2|vec3")).mul(t).add(s),T_=(e=mu(),t=1,s=0)=>jT(e.convert("vec2|vec3")).mul(t).add(s),__=(e=mu(),t=1,s=0)=>{e=e.convert("vec2|vec3");return Ln(jT(e),WT(e.add(En(19,73)))).mul(t).add(s)},N_=(e=mu(),t=1)=>r_(e.convert("vec2|vec3"),t,An(1)),v_=(e=mu(),t=1)=>n_(e.convert("vec2|vec3"),t,An(1)),S_=(e=mu(),t=1)=>i_(e.convert("vec2|vec3"),t,An(1)),A_=(e=mu())=>qT(e.convert("vec2|vec3")),R_=(e=mu(),t=3,s=2,r=.5,n=1)=>XT(e,An(t),s,r).mul(n),C_=(e=mu(),t=3,s=2,r=.5,n=1)=>QT(e,An(t),s,r).mul(n),E_=(e=mu(),t=3,s=2,r=.5,n=1)=>YT(e,An(t),s,r).mul(n),w_=(e=mu(),t=3,s=2,r=.5,n=1)=>ZT(e,An(t),s,r).mul(n),M_=yn((([e,t,s])=>{const r=Ao(e).toVar("nDir"),n=Oi(Sn(.5).mul(t.sub(s)),Zu).div(r).toVar("rbmax"),i=Oi(Sn(-.5).mul(t.sub(s)),Zu).div(r).toVar("rbmin"),o=Un().toVar("rbminmax");o.x=r.x.greaterThan(Sn(0)).select(n.x,i.x),o.y=r.y.greaterThan(Sn(0)).select(n.y,i.y),o.z=r.z.greaterThan(Sn(0)).select(n.z,i.z);const a=qo(qo(o.x,o.y),o.z).toVar("correction");return Zu.add(r.mul(a)).toVar("boxIntersection").sub(s)})),B_=yn((([e,t])=>{const s=e.x,r=e.y,n=e.z;let i=t.element(0).mul(.886227);return i=i.add(t.element(1).mul(1.023328).mul(r)),i=i.add(t.element(2).mul(1.023328).mul(n)),i=i.add(t.element(3).mul(1.023328).mul(s)),i=i.add(t.element(4).mul(.858086).mul(s).mul(r)),i=i.add(t.element(5).mul(.858086).mul(r).mul(n)),i=i.add(t.element(6).mul(n.mul(n).mul(.743125).sub(.247708))),i=i.add(t.element(7).mul(.858086).mul(s).mul(n)),i=i.add(t.element(8).mul(.429043).mul(Gi(s,s).sub(Gi(r,r)))),i})),U_=new cm;class F_ extends Lg{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,s){const r=this.renderer,n=this.nodes.getBackgroundNode(e)||e.background;let i=!1;if(null===n)r._clearColor.getRGB(U_,Se),U_.a=r._clearColor.a;else if(!0===n.isColor)n.getRGB(U_,Se),U_.a=1,i=!0;else if(!0===n.isNode){const s=this.get(e),i=n;U_.copy(r._clearColor);let o=s.backgroundMesh;if(void 0===o){const e=Na(Ln(i).mul(If),{getUV:()=>Lf.mul(ll),getTextureLevel:()=>Pf});let t=Wd();t=t.setZ(t.w);const r=new rh;r.name="Background.material",r.side=x,r.depthTest=!1,r.depthWrite=!1,r.fog=!1,r.lights=!1,r.vertexNode=t,r.colorNode=e,s.backgroundMeshNode=e,s.backgroundMesh=o=new k(new Ee(1,32,32),r),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,s){this.matrixWorld.copyPosition(s.matrixWorld)}}const a=i.getCacheKey();s.backgroundCacheKey!==a&&(s.backgroundMeshNode.node=Ln(i).mul(If),s.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,s.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",n);if(!0===r.autoClear||!0===i){const e=s.clearColorValue;e.r=U_.r,e.g=U_.g,e.b=U_.b,e.a=U_.a,!0!==r.backend.isWebGLBackend&&!0!==r.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),s.depthClearValue=r._clearDepth,s.stencilClearValue=r._clearStencil,s.clearColor=!0===r.autoClearColor,s.clearDepth=!0===r.autoClearDepth,s.clearStencil=!0===r.autoClearStencil}else s.clearColor=!1,s.clearDepth=!1,s.clearStencil=!1}}let P_=0;class I_{constructor(e="",t=[],s=0,r=[]){this.name=e,this.bindings=t,this.index=s,this.bindingsReference=r,this.id=P_++}}class L_{constructor(e,t,s,r,n,i,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=s,this.transforms=l,this.nodeAttributes=r,this.bindings=n,this.updateNodes=i,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.monitor=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const s=new I_(t.name,[],t.index,t);e.push(s);for(const e of t.bindings)s.bindings.push(e.clone())}else e.push(t)}return e}}class D_{constructor(e,t,s=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=s}}class V_{constructor(e,t,s){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=s.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class O_{constructor(e,t){this.isNodeVar=!0,this.name=e,this.type=t}}class G_ extends O_{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class k_{constructor(e,t,s=""){this.name=e,this.type=t,this.code=s,Object.defineProperty(this,"isNodeCode",{value:!0})}}let z_=0;class $_{constructor(e=null){this.id=z_++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class H_{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class W_ extends H_{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class j_ extends H_{constructor(e,s=new t){super(e,s),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class q_ extends H_{constructor(e,t=new s){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class K_ extends H_{constructor(e,t=new r){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class X_ extends H_{constructor(t,s=new e){super(t,s),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class Y_ extends H_{constructor(e,t=new n){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class Q_ extends H_{constructor(e,t=new i){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class Z_ extends W_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class J_ extends j_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class eN extends q_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class tN extends K_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class sN extends X_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class rN extends Y_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}class nN extends Q_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}}const iN=[.125,.215,.35,.446,.526,.582],oN=20,aN=new xe(-1,1,1,-1,0,1),uN=new Be(90,1),lN=new e;let dN=null,cN=0,hN=0;const pN=(1+Math.sqrt(5))/2,gN=1/pN,mN=[new s(-pN,gN,0),new s(pN,gN,0),new s(-gN,0,pN),new s(gN,0,pN),new s(0,pN,-gN),new s(0,pN,gN),new s(-1,1,-1),new s(1,1,-1),new s(-1,1,1),new s(1,1,1)],fN=[3,1,5,0,4,2],yN=$p(mu(),gu("faceIndex")).normalize(),bN=Un(yN.x,yN.y.negate(),yN.z);class xN{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}fromScene(e,t=0,s=.1,r=100){dN=this._renderer.getRenderTarget(),cN=this._renderer.getActiveCubeFace(),hN=this._renderer.getActiveMipmapLevel(),this._setSize(256);const n=this._allocateTargets();return n.depthBuffer=!0,this._sceneToCubeUV(e,s,r,n),t>0&&this._blur(n,0,0,t),this._applyPMREM(n),this._cleanup(n),n}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=vN(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=SN(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(dN,cN,hN),e.scissorTest=!1,_N(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===T||e.mapping===_?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),dN=this._renderer.getRenderTarget(),cN=this._renderer.getActiveCubeFace(),hN=this._renderer.getActiveMipmapLevel();const s=t||this._allocateTargets();return this._textureToCubeUV(e,s),this._applyPMREM(s),this._cleanup(s),s}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,r={magFilter:$,minFilter:$,generateMipmaps:!1,type:ye,format:Ue,colorSpace:Se},n=TN(e,t,r);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=TN(e,t,r);const{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],s=[],r=[],n=[];let i=e;const o=e-4+1+iN.length;for(let a=0;a<o;a++){const o=Math.pow(2,i);s.push(o);let u=1/o;a>e-4?u=iN[a-e+4-1]:0===a&&(u=0),r.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,b=new Float32Array(m*g*p),x=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,s=e>2?0:-1,r=[t,s,0,t+2/3,s,0,t+2/3,s+1,0,t,s,0,t+2/3,s+1,0,t,s+1,0],n=fN[e];b.set(r,m*g*n),x.set(h,f*g*n);const i=[n,n,n,n,n,n];T.set(i,y*g*n)}const _=new Te;_.setAttribute("position",new we(b,m)),_.setAttribute("uv",new we(x,f)),_.setAttribute("faceIndex",new we(T,y)),t.push(_),n.push(new k(_,null)),i>4&&i--}return{lodPlanes:t,sizeLods:s,sigmas:r,lodMeshes:n}}(n)),this._blurMaterial=function(e,t,r){const n=Rl(new Array(oN).fill(0)),i=ti(new s(0,1,0)),o=ti(0),a=Sn(oN),u=ti(0),l=ti(1),d=_u(null),c=ti(0),h=Sn(1/t),p=Sn(1/r),g=Sn(e),m={n:a,latitudinal:u,weights:n,poleAxis:i,outputDirection:bN,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=NN("blur");return f.uniforms=m,f.fragmentNode=qp({...m,latitudinal:u.equal(1)}),f}(n,e,t)}return n}async _compileMaterial(e){const t=new k(this._lodPlanes[0],e);await this._renderer.compile(t,aN)}_sceneToCubeUV(e,t,s,r){const n=uN;n.near=t,n.far=s;const i=[-1,1,-1,-1,-1,-1],o=[1,1,1,-1,-1,-1],a=this._renderer,u=a.autoClear;a.getClearColor(lN),a.autoClear=!1;let l=this._backgroundBox;if(null===l){const e=new Q({name:"PMREM.Background",side:x,depthWrite:!1,depthTest:!1});l=new k(new O,e)}let d=!1;const c=e.background;c?c.isColor&&(l.material.color.copy(c),e.background=null,d=!0):(l.material.color.copy(lN),d=!0),a.setRenderTarget(r),a.clear(),d&&a.render(l,n);for(let t=0;t<6;t++){const s=t%3;0===s?(n.up.set(0,i[t],0),n.lookAt(o[t],0,0)):1===s?(n.up.set(0,0,i[t]),n.lookAt(0,o[t],0)):(n.up.set(0,i[t],0),n.lookAt(0,0,o[t]));const u=this._cubeSize;_N(r,s*u,t>2?u:0,u,u),a.render(e,n)}a.autoClear=u,e.background=c}_textureToCubeUV(e,t){const s=this._renderer,r=e.mapping===T||e.mapping===_;r?null===this._cubemapMaterial&&(this._cubemapMaterial=vN(e)):null===this._equirectMaterial&&(this._equirectMaterial=SN(e));const n=r?this._cubemapMaterial:this._equirectMaterial;n.fragmentNode.value=e;const i=this._lodMeshes[0];i.material=n;const o=this._cubeSize;_N(t,0,0,3*o,2*o),s.setRenderTarget(t),s.render(i,aN)}_applyPMREM(e){const t=this._renderer,s=t.autoClear;t.autoClear=!1;const r=this._lodPlanes.length;for(let t=1;t<r;t++){const s=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),n=mN[(r-t-1)%mN.length];this._blur(e,t-1,t,s,n)}t.autoClear=s}_blur(e,t,s,r,n){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,s,r,"latitudinal",n),this._halfBlur(i,e,s,s,r,"longitudinal",n)}_halfBlur(e,t,s,r,n,i,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==i&&"longitudinal"!==i&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[r];l.material=u;const d=u.uniforms,c=this._sizeLods[s]-1,h=isFinite(n)?Math.PI/(2*c):2*Math.PI/39,p=n/h,g=isFinite(n)?1+Math.floor(3*p):oN;g>oN&&console.warn(`sigmaRadians, ${n}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<oN;++e){const t=e/p,s=Math.exp(-t*t/2);m.push(s),0===e?f+=s:e<g&&(f+=2*s)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===i?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-s;const b=this._sizeLods[r];_N(t,3*b*(r>y-4?r-y+4:0),4*(this._cubeSize-b),3*b,2*b),a.setRenderTarget(t),a.render(l,aN)}}function TN(e,t,s){const r=new ge(e,t,s);return r.texture.mapping=Me,r.texture.name="PMREM.cubeUv",r.texture.isPMREMTexture=!0,r.scissorTest=!0,r}function _N(e,t,s,r,n){e.viewport.set(t,s,r,n),e.scissor.set(t,s,r,n)}function NN(e){const t=new rh;return t.depthTest=!1,t.depthWrite=!1,t.blending=G,t.name=`PMREM_${e}`,t}function vN(e){const t=NN("cubemap");return t.fragmentNode=_l(e,bN),t}function SN(e){const t=NN("equirect");return t.fragmentNode=_u(e,yh(bN),0),t}const AN=new WeakMap,RN=new Map([[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),CN=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),EN=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class wN{constructor(e,t,s){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=s,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=mm(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new $_,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=AN.get(this.renderer);return void 0===e&&(e=new Bg,AN.set(this.renderer,e)),e}createRenderTarget(e,t,s){return new ge(e,t,s)}createCubeRenderTarget(e,t){return new bh(e,t)}createPMREMGenerator(){return new xN(this.renderer)}includes(e){return this.nodes.includes(e)}_getBindGroup(e,t){const s=this.getBindGroupsCache(),r=[];let n,i=!0;for(const e of t)r.push(e),i=i&&!0!==e.groupNode.shared;return i?(n=s.get(r),void 0===n&&(n=new I_(e,r,this.bindingsIndexes[e].group,r),s.set(r,n))):n=new I_(e,r,this.bindingsIndexes[e].group,r),n}getBindGroupArray(e,t){const s=this.bindings[t];let r=s[e];return void 0===r&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),s[e]=r=[]),r}getBindings(){let e=this.bindGroups;if(null===e){const t={},s=this.bindings;for(const e of Nr)for(const r in s[e]){const n=s[e][r];(t[r]||(t[r]=[])).push(...n)}e=[];for(const s in t){const r=t[s],n=this._getBindGroup(s,r);e.push(n)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const s=e[t];this.bindingsIndexes[s.name].group=t,s.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==br.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),s=e.getUpdateAfterType();t!==br.NONE&&this.updateBeforeNodes.push(e.getSelf()),s!==br.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===$||e.magFilter===Fe||e.magFilter===Pe||e.magFilter===M||e.minFilter===$||e.minFilter===Fe||e.minFilter===Pe||e.minFilter===M}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const s=this.getDataFromNode(e);return void 0===s.cache&&(s.cache=new $_(t?this.getCache():null)),s.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(n,i=null){if(null===i&&("float"===n||"int"===n||"uint"===n?i=0:"bool"===n?i=!1:"color"===n?i=new e:"vec2"===n?i=new t:"vec3"===n?i=new s:"vec4"===n&&(i=new r)),"float"===n)return EN(i);if("int"===n)return`${Math.round(i)}`;if("uint"===n)return i>=0?`${Math.round(i)}u`:"0u";if("bool"===n)return i?"true":"false";if("color"===n)return`${this.getType("vec3")}( ${EN(i.r)}, ${EN(i.g)}, ${EN(i.b)} )`;const o=this.getTypeLength(n),a=this.getComponentType(n),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(n)}( ${u(i.x)}, ${u(i.y)} )`;if(3===o)return`${this.getType(n)}( ${u(i.x)}, ${u(i.y)}, ${u(i.z)} )`;if(4===o)return`${this.getType(n)}( ${u(i.x)}, ${u(i.y)}, ${u(i.z)}, ${u(i.w)} )`;if(o>4&&i&&(i.isMatrix3||i.isMatrix4))return`${this.getType(n)}( ${i.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(n)}()`;throw new Error(`NodeBuilder: Type '${n}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const s=this.attributes;for(const t of s)if(t.name===e)return t;const r=new D_(e,t);return s.push(r),r}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===y)return"int";if(t===f)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;const s=RN.get(e);return("float"===t?"":t[0])+s}getTypeFromArray(e){return CN.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const s=t.array,r=e.itemSize,n=e.normalized;let i;return e instanceof Ie||!0===n||(i=this.getTypeFromArray(s)),this.getTypeFromLength(r,i)}getTypeLength(e){const t=this.getVectorType(e),s=/vec([2-4])/.exec(t);return null!==s?Number(s[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=mm(this.stack),this.stacks.push(Tn()||this.stack),xn(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,xn(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,s=null){let r=(s=null===s?e.isGlobal(this)?this.globalCache:this.cache:s).getData(e);return void 0===r&&(r={},s.setData(e,r)),void 0===r[t]&&(r[t]={}),r[t]}getNodeProperties(e,t="any"){const s=this.getDataFromNode(e,t);return s.properties||(s.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const s=this.getDataFromNode(e);let r=s.bufferAttribute;if(void 0===r){const n=this.uniforms.index++;r=new D_("nodeAttribute"+n,t,e),this.bufferAttributes.push(r),s.bufferAttribute=r}return r}getStructTypeFromNode(e,t=this.shaderStage){const s=this.getDataFromNode(e,t);if(void 0===s.structType){const r=this.structs.index++;e.name=`StructType${r}`,this.structs[t].push(e),s.structType=e}return e}getUniformFromNode(e,t,s=this.shaderStage,r=null){const n=this.getDataFromNode(e,s,this.globalCache);let i=n.uniform;if(void 0===i){const o=this.uniforms.index++;i=new V_(r||"nodeUniform"+o,t,e),this.uniforms[s].push(i),n.uniform=i}return i}getVarFromNode(e,t=null,s=e.getNodeType(this),r=this.shaderStage){const n=this.getDataFromNode(e,r);let i=n.variable;if(void 0===i){const e=this.vars[r]||(this.vars[r]=[]);null===t&&(t="nodeVar"+e.length),i=new O_(t,s),e.push(i),n.variable=i}return i}getVaryingFromNode(e,t=null,s=e.getNodeType(this)){const r=this.getDataFromNode(e,"any");let n=r.varying;if(void 0===n){const e=this.varyings,i=e.length;null===t&&(t="nodeVarying"+i),n=new G_(t,s),e.push(n),r.varying=n}return n}getCodeFromNode(e,t,s=this.shaderStage){const r=this.getDataFromNode(e);let n=r.code;if(void 0===n){const e=this.codes[s]||(this.codes[s]=[]),i=e.length;n=new k_("nodeCode"+i,t),e.push(n),r.code=n}return n}addFlowCodeHierarchy(e,t){const{flowCodes:s,flowCodeBlock:r}=this.getDataFromNode(e);let n=!0,i=t;for(;i;){if(!0===r.get(i)){n=!1;break}i=this.getDataFromNode(i).parentNodeBlock}if(n)for(const e of s)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,s){const r=this.getDataFromNode(e),n=r.flowCodes||(r.flowCodes=[]),i=r.flowCodeBlock||(r.flowCodeBlock=new WeakMap);n.push(t),i.set(s,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),s=this.flowChildNode(e,t);return this.flowsData.set(e,s),s}buildFunctionNode(e){const t=new ix,s=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=s,t}flowShaderNode(e){const t=e.layout,s={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)s[e.name]=new hm(e.type,e.name);e.layout=null;const r=e.call(s),n=this.flowStagesNode(r,t.type);return e.layout=t,n}flowStagesNode(e,t=null){const s=this.flow,r=this.vars,n=this.cache,i=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new $_,this.stack=mm();for(const s of _r)this.setBuildStage(s),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=s,this.vars=r,this.cache=n,this.stack=o,this.setBuildStage(i),a}getFunctionOperator(){return null}flowChildNode(e,t=null){const s=this.flow,r={code:""};return this.flow=r,r.result=e.build(this,t),this.flow=s,r}flowNodeFromShaderStage(e,t,s=null,r=null){const n=this.shaderStage;this.setShaderStage(e);const i=this.flowChildNode(t,s);return null!==r&&(i.code+=`${this.tab+r} = ${i.result};\n`),this.flowCode[e]=this.flowCode[e]+i.code,this.setShaderStage(n),i}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t){return`${this.getType(e)} ${t}`}getVars(e){let t="";const s=this.vars[e];if(void 0!==s)for(const e of s)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let s="";if(void 0!==t)for(const e of t)s+=e.code+"\n";return s}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:s}=this;if(null!==t){let e=s.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new rh),e.build(this)}else this.addFlow("compute",e);for(const e of _r){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Nr){this.setShaderStage(t);const s=this.flowNodes[t];for(const t of s)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new Z_(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new J_(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new eN(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new tN(e);if("color"===t)return new sN(e);if("mat3"===t)return new rN(e);if("mat4"===t)return new nN(e);throw new Error(`Uniform "${t}" not declared.`)}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}format(e,t,s){if((t=this.getVectorType(t))===(s=this.getVectorType(s))||null===s||this.isReference(s))return e;const r=this.getTypeLength(t),n=this.getTypeLength(s);return 16===r&&9===n?`${this.getType(s)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===r&&4===n?`${this.getType(s)}(${e}[0].xy, ${e}[1].xy)`:r>4||n>4||0===n?e:r===n?`${this.getType(s)}( ${e} )`:r>n?this.format(`${e}.${"xyz".slice(0,n)}`,this.getTypeFromLength(n,this.getComponentType(t)),s):4===n&&r>1?`${this.getType(s)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===r?`${this.getType(s)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===r&&n>1&&t!==this.getComponentType(s)&&(e=`${this.getType(this.getComponentType(s))}( ${e} )`),`${this.getType(s)}( ${e} )`)}getSignature(){return`// Three.js r${Le} - Node System\n`}}class MN{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.startTime=null,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let s=e.get(t);return void 0===s&&(s={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,s)),s}updateBeforeNode(e){const t=e.getUpdateBeforeType(),s=e.updateReference(this);if(t===br.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,s);t.get(s)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(s,this.frameId)}else if(t===br.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,s);t.get(s)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(s,this.renderId)}else t===br.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),s=e.updateReference(this);if(t===br.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,s);t.get(s)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(s,this.frameId)}else if(t===br.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,s);t.get(s)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(s,this.renderId)}else t===br.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),s=e.updateReference(this);if(t===br.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,s);t.get(s)!==this.frameId&&!1!==e.update(this)&&t.set(s,this.frameId)}else if(t===br.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,s);t.get(s)!==this.renderId&&!1!==e.update(this)&&t.set(s,this.renderId)}else t===br.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class BN{constructor(e,t,s=null,r="",n=!1){this.type=e,this.name=t,this.count=s,this.qualifier=r,this.isConst=n}}BN.isNodeFunctionInput=!0;class UN extends yT{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setup(e){super.setup(e);const t=e.context.lightingModel,s=this.colorNode,r=tT(this.light),n=e.context.reflectedLight;t.direct({lightDirection:r,lightColor:s,reflectedLight:n},e.stack,e)}}const FN=new i,PN=new i;let IN=null;class LN extends yT{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=ti(new s).setGroup(Zn),this.halfWidth=ti(new s).setGroup(Zn),this.updateType=br.RENDER}update(e){super.update(e);const{light:t}=this,s=e.camera.matrixWorldInverse;PN.identity(),FN.copy(t.matrixWorld),FN.premultiply(s),PN.extractRotation(FN),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(PN),this.halfHeight.value.applyMatrix4(PN)}setup(e){let t,s;super.setup(e),e.isAvailable("float32Filterable")?(t=_u(IN.LTC_FLOAT_1),s=_u(IN.LTC_FLOAT_2)):(t=_u(IN.LTC_HALF_1),s=_u(IN.LTC_HALF_2));const{colorNode:r,light:n}=this,i=e.context.lightingModel,o=eT(n),a=e.context.reflectedLight;i.directRectArea({lightColor:r,lightPosition:o,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:a,ltc_1:t,ltc_2:s},e.stack,e)}static setLTC(e){IN=e}}class DN extends yT{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=ti(0).setGroup(Zn),this.penumbraCosNode=ti(0).setGroup(Zn),this.cutoffDistanceNode=ti(0).setGroup(Zn),this.decayExponentNode=ti(0).setGroup(Zn)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:s}=this;return pa(t,s,e)}setup(e){super.setup(e);const t=e.context.lightingModel,{colorNode:s,cutoffDistanceNode:r,decayExponentNode:n,light:i}=this,o=eT(i).sub(el),a=o.normalize(),u=a.dot(tT(i)),l=this.getSpotAttenuation(u),d=o.length(),c=bT({lightDistance:d,cutoffDistance:r,decayExponent:n}),h=s.mul(l).mul(c),p=e.context.reflectedLight;t.direct({lightDirection:a,lightColor:h,reflectedLight:p},e.stack,e)}}class VN extends DN{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let s=null;if(t&&!0===t.isTexture){const r=e.acos().mul(1/Math.PI);s=_u(t,En(r,0),0).r}else s=super.getSpotAttenuation(e);return s}}class ON extends yT{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class GN extends yT{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=Zx(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=ti(new e).setGroup(Zn)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:s,lightDirectionNode:r}=this,n=ul.dot(r).mul(.5).add(.5),i=la(s,t,n);e.context.irradiance.addAssign(i)}}class kN extends yT{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new s);this.lightProbe=Rl(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=B_(ll,this.lightProbe);e.context.irradiance.addAssign(t)}}class zN{parseFunction(){console.warn("Abstract function.")}}class $N{constructor(e,t,s="",r=""){this.type=e,this.inputs=t,this.name=s,this.precision=r}getCode(){console.warn("Abstract function.")}}$N.isNodeFunction=!0;const HN=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,WN=/[a-z_0-9]+/gi,jN="#pragma main";class qN extends $N{constructor(e){const{type:t,inputs:s,name:r,precision:n,inputsCode:i,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(jN),s=-1!==t?e.slice(t+12):e,r=s.match(HN);if(null!==r&&5===r.length){const n=r[4],i=[];let o=null;for(;null!==(o=WN.exec(n));)i.push(o);const a=[];let u=0;for(;u<i.length;){const e="const"===i[u][0];!0===e&&u++;let t=i[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const s=i[u++][0];let r=Number.parseInt(i[u][0]);!1===Number.isNaN(r)?u++:r=null;const n=i[u++][0];a.push(new BN(s,n,r,t,e))}const l=s.substring(r[0].length),d=void 0!==r[3]?r[3]:"";return{type:r[2],inputs:a,name:d,precision:void 0!==r[1]?r[1]:"",inputsCode:n,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,s,r,n),this.inputsCode=i,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const s=this.blockCode;if(""!==s){const{type:r,inputsCode:n,headerCode:i,precision:o}=this;let a=`${r} ${e} ( ${n.trim()} )`;""!==o&&(a=`${o} ${a}`),t=i+a+s}else t="";return t}}class KN extends zN{parseFunction(e){return new qN(e)}}const XN=new WeakMap;class YN extends Lg{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new MN,this.nodeBuilderCache=new Map,this.callHashCache=new Bg,this.groupsData=new Bg}updateGroup(e){const t=e.groupNode,s=t.name;if(s===Jn.name)return!0;if(s===Zn.name){const t=this.get(e),s=this.nodeFrame.renderId;return t.renderId!==s&&(t.renderId=s,!0)}if(s===Qn.name){const t=this.get(e),s=this.nodeFrame.frameId;return t.frameId!==s&&(t.frameId=s,!0)}const r=[t,e];let n=this.groupsData.get(r);return void 0===n&&this.groupsData.set(r,n={}),n.version!==t.version&&(n.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let s=t.nodeBuilderState;if(void 0===s){const{nodeBuilderCache:r}=this,n=this.getForRenderCacheKey(e);if(s=r.get(n),void 0===s){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),s=this._createNodeBuilderState(t),r.set(n,s)}s.usedTimes++,t.nodeBuilderState=s}return s}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let s=t.nodeBuilderState;if(void 0===s){const r=this.backend.createNodeBuilder(e,this.renderer);r.build(),s=this._createNodeBuilderState(r),t.nodeBuilderState=s}return s}_createNodeBuilderState(e){return new L_(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.monitor,e.transforms)}getEnvironmentNode(e){return e.environmentNode||this.get(e).environmentNode||null}getBackgroundNode(e){return e.backgroundNode||this.get(e).backgroundNode||null}getFogNode(e){return e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){const s=[e,t],r=this.renderer.info.calls;let n=this.callHashCache.get(s);if(void 0===n||n.callId!==r){const i=this.getEnvironmentNode(e),o=this.getFogNode(e),a=[];t&&a.push(t.getCacheKey(!0)),i&&a.push(i.getCacheKey()),o&&a.push(o.getCacheKey()),a.push(this.renderer.shadowMap.enabled?1:0),n={callId:r,cacheKey:ur(a)},this.callHashCache.set(s,n)}return n.cacheKey}updateScene(e){this.updateEnvironment(e),this.updateFog(e),this.updateBackground(e)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),s=e.background;if(s){const r=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==s||r){let r=null;if(!0===s.isCubeTexture||s.mapping===j||s.mapping===q||s.mapping===Me)if(e.backgroundBlurriness>0||s.mapping===Me)r=Zp(s);else{let e;e=!0===s.isCubeTexture?_l(s):_u(s),r=vh(e)}else!0===s.isTexture?r=_u(s,Ac.flipY()).setUpdateMatrix(!0):!0!==s.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",s);t.backgroundNode=r,t.background=s,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}updateFog(e){const t=this.get(e),s=e.fog;if(s){if(t.fog!==s){let e=null;if(s.isFogExp2){const t=Ml("color","color",s).setGroup(Zn),r=Ml("density","float",s).setGroup(Zn);e=_x(t,r)}else if(s.isFog){const t=Ml("color","color",s).setGroup(Zn),r=Ml("near","float",s).setGroup(Zn),n=Ml("far","float",s).setGroup(Zn);e=xx(t,r,n)}else console.error("WebGPUNodes: Unsupported fog configuration.",s);t.fogNode=e,t.fog=s}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),s=e.environment;if(s){if(t.environment!==s){let e=null;!0===s.isCubeTexture?e=_l(s):!0===s.isTexture?e=_u(s):console.error("Nodes: Unsupported environment configuration.",s),t.environmentNode=e,t.environment=s}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,s=null,r=null,n=null){const i=this.nodeFrame;return i.renderer=e,i.scene=t,i.object=s,i.camera=r,i.material=n,i}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return XN.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,s=this.getOutputCacheKey(),r=_u(e,Ac).renderOutput(t.toneMapping,t.currentColorSpace);return XN.set(e,s),r}updateBefore(e){const t=e.getNodeBuilderState();for(const s of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(s)}updateAfter(e){const t=e.getNodeBuilderState();for(const s of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(s)}updateForCompute(e){const t=this.getNodeFrame(),s=this.getForCompute(e);for(const e of s.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),s=e.getNodeBuilderState();for(const e of s.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new MN,this.nodeBuilderCache=new Map}}const QN=new me;class ZN{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",null===e?(this.intersectionPlanes=[],this.unionPlanes=[],this.viewNormalMatrix=new n,this.clippingGroupContexts=new WeakMap,this.shadowPass=!1):(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix),this.parentVersion=null}projectPlanes(e,t,s){const r=e.length;for(let n=0;n<r;n++){QN.copy(e[n]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const r=t[s+n],i=QN.normal;r.x=-i.x,r.y=-i.y,r.z=-i.z,r.w=QN.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowNodeMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let s=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const n=t.clippingPlanes,i=n.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+i){o.length=a+i;for(let e=0;e<i;e++)o[a+e]=new r;s=!0}this.projectPlanes(n,o,a),s&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new ZN(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class JN{constructor(e,t){this.scene=e,this.camera=t}clone(){return Object.assign(new this.constructor,this)}}class ev{constructor(){this.lists=new Bg}get(e,t){const s=this.lists,r=[e,t];let n=s.get(r);return void 0===n&&(n=new JN(e,t),s.set(r,n)),n}dispose(){this.lists=new Bg}}class tv{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const s=this.getMaterialNodeClass(e.type);if(null!==s){t=new s;for(const s in e)t[s]=e[s]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,s){if(s.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);s.set(t,e)}}addClass(e,t,s){if(s.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);s.set(t,e)}}}const sv=new nT;class rv extends Bg{constructor(){super()}createNode(e=[]){return(new nT).setLights(e)}getNode(e,t){if(e.isQuadMesh)return sv;const s=[e,t];let r=this.get(s);return void 0===r&&(r=this.createNode(),this.set(s,r)),r}}const nv=new z,iv=new t,ov=new r,av=new Ge,uv=new i,lv=new r;class dv{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:s=!1,alpha:n=!0,depth:i=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=n,this.logarithmicDepthBuffer=s,this.outputColorSpace=De,this.toneMapping=d,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=i,this.stencil=o,this.info=new jg,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new tv,this.lighting=new rv,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new r(0,0,this._width,this._height),this._scissor=new r(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new xf(new rh),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new cm(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:Ve},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,s)=>{await this.compileAsync(e,t);const r=this._renderLists.get(e,t),n=this._renderContexts.get(e,t,this._renderTarget),i=e.overrideMaterial||s.material,o=this._objects.get(s,i,e,t,r.lightsNode,n,n.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let s=this.backend;try{await s.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=s=this._getFallback(e),await s.init(this)}catch(e){return void t(e)}}this._nodes=new YN(this,s),this._animation=new Mg(this._nodes,this.info),this._attributes=new zg(s),this._background=new F_(this,this._nodes),this._geometries=new Wg(this._attributes,this.info),this._textures=new dm(this,s,this.info),this._pipelines=new Zg(s,this._nodes),this._bindings=new Jg(s,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new Ig(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new nm(this.lighting),this._bundles=new ev,this._renderContexts=new um,this._animation.start(),this._initialized=!0,e()}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,s=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const r=this._nodes.nodeFrame,n=r.renderId,i=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:nv;null===s&&(s=e);const l=this._renderTarget,d=this._renderContexts.get(s,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,r.renderId++,r.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new ZN),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),s!==e&&s.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._nodes.updateScene(u),this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),r.renderId=n,this._currentRenderContext=i,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init();const s=this._renderScene(e,t);await this.backend.resolveTimestampAsync(s,"render")}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,s){const{bundleGroup:r,camera:n,renderList:i}=e,o=this._currentRenderContext,a=this._bundles.get(r,n),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=r.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const e=i.opaque;!0===this.opaque&&e.length>0&&this._renderObjects(e,n,t,s),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=r.version}else{const{renderObjects:e}=u;for(let t=0,s=e.length;t<s;t++){const s=e[t];this._nodes.needsRefresh(s)&&(this._nodes.updateBefore(s),this._nodes.updateForRender(s),this._bindings.updateForRender(s),this._nodes.updateAfter(s))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==d)&&!1===(t!==Se))return null;const{width:s,height:r}=this.getDrawingBufferSize(iv),{depth:n,stencil:i}=this;let o=this._frameBufferTarget;return null===o&&(o=new ge(s,r,{depthBuffer:n,stencilBuffer:i,type:ye,format:Ue,colorSpace:Se,generateMipmaps:!1,minFilter:$,magFilter:$,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=n,o.stencilBuffer=i,o.setSize(s,r),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,s=!0){if(!0===this._isDeviceLost)return;const r=s?this._getFrameBufferTarget():null,n=this._nodes.nodeFrame,i=n.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:nv,l=this._renderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==r?(h=r,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,n.renderId=this.info.calls;const g=this.coordinateSystem;t.coordinateSystem!==g&&(t.coordinateSystem=g,t.updateProjectionMatrix()),!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld();let m=this._viewport,f=this._scissor,y=this._pixelRatio;null!==h&&(m=h.viewport,f=h.scissor,y=1),this.getDrawingBufferSize(iv),ov.set(0,0,iv.width,iv.height);const b=void 0===m.minDepth?0:m.minDepth,x=void 0===m.maxDepth?1:m.maxDepth;p.viewportValue.copy(m).multiplyScalar(y).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=x,p.viewport=!1===p.viewportValue.equals(ov),p.scissorValue.copy(f).multiplyScalar(y).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(ov),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new ZN),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),uv.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),av.setFromProjectionMatrix(uv,g);const T=this._renderLists.get(e,t);if(T.begin(),this._projectObject(e,t,0,T,p.clippingContext),T.finish(),!0===this.sortObjects&&T.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=T.occlusionQueryCount,this._nodes.updateScene(u),this._background.update(u,T,p),this.backend.beginRender(p);const{bundles:_,lightsNode:N,transparentDoublePass:v,transparent:S,opaque:A}=T;if(_.length>0&&this._renderBundles(_,u,N),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,N),!0===this.transparent&&S.length>0&&this._renderTransparents(S,v,t,u,N),this.backend.finishRender(p),n.renderId=i,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==r){this.setRenderTarget(l,d,c);const e=this._quad;this._nodes.hasOutputChange(h.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(h.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}return u.onAfterRender(this,e,t,h),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,s){this._width=e,this._height=t,this._pixelRatio=s,this.domElement.width=Math.floor(e*s),this.domElement.height=Math.floor(t*s),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,s=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===s&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,s,r){const n=this._scissor;e.isVector4?n.copy(e):n.set(e,t,s,r)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,s,r,n=0,i=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,s,r),o.minDepth=n,o.maxDepth=i}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,s=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,s);const r=this._renderTarget||this._getFrameBufferTarget();let n=null;if(null!==r&&(this._textures.updateRenderTarget(r),n=this._textures.get(r)),this.backend.clear(e,t,s,n),null!==r&&null===this._renderTarget){const e=this._quad;this._nodes.hasOutputChange(r.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(r.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,s=!0){!1===this._initialized&&await this.init(),this.clear(e,t,s)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return null!==this._renderTarget?d:this.toneMapping}get currentColorSpace(){return null!==this._renderTarget?Se:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,s=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=s}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this.isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,s=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const r=this.backend,n=this._pipelines,i=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");r.beginCompute(e);for(const t of a){if(!1===n.has(t)){const e=()=>{t.removeEventListener("dispose",e),n.delete(t),i.delete(t),o.delete(t)};t.addEventListener("dispose",e);const s=t.onInitFunction;null!==s&&s.call(t,{renderer:this})}o.updateForCompute(t),i.updateForCompute(t);const s=i.getForCompute(t),a=n.getForCompute(t,s);r.compute(e,t,s,a)}r.finishCompute(e),t.renderId=s}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e),await this.backend.resolveTimestampAsync(e,"compute")}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=lv.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=lv.copy(t).floor()}else t=lv.set(0,0,e.image.width,e.image.height);let s,r=this._currentRenderContext;null!==r?s=r.renderTarget:(s=this._renderTarget||this._getFrameBufferTarget(),null!==s&&(this._textures.updateRenderTarget(s),r=this._textures.get(s))),this._textures.updateTexture(e,{renderTarget:s}),this.backend.copyFramebufferToTexture(e,r,t)}copyTextureToTexture(e,t,s=null,r=null,n=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,s,r,n)}readRenderTargetPixelsAsync(e,t,s,r,n,i=0,o=0){return this.backend.copyTextureToBuffer(e.textures[i],t,s,r,n,o)}_projectObject(e,t,s,r,n){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)s=e.renderOrder,e.isClippingGroup&&e.enabled&&(n=n.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)r.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||av.intersectsSprite(e)){!0===this.sortObjects&&lv.setFromMatrixPosition(e.matrixWorld).applyMatrix4(uv);const{geometry:t,material:i}=e;i.visible&&r.push(e,t,i,s,lv.z,null,n)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||av.intersectsObject(e))){const{geometry:t,material:i}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),lv.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(uv)),Array.isArray(i)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=i[u.materialIndex];l&&l.visible&&r.push(e,t,l,s,lv.z,u,n)}}else i.visible&&r.push(e,t,i,s,lv.z,null,n)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const s=r;(r=this._renderLists.get(e,t)).begin(),s.pushBundle({bundleGroup:e,camera:t,renderList:r}),r.finish()}const i=e.children;for(let e=0,o=i.length;e<o;e++)this._projectObject(i[e],t,s,r,n)}_renderBundles(e,t,s){for(const r of e)this._renderBundle(r,t,s)}_renderTransparents(e,t,s,r,n){if(t.length>0){for(const{material:e}of t)e.side=x;this._renderObjects(t,s,r,n,"backSide");for(const{material:e}of t)e.side=Oe;this._renderObjects(e,s,r,n);for(const{material:e}of t)e.side=le}else this._renderObjects(e,s,r,n)}_renderObjects(e,t,s,r,n=null){for(let i=0,o=e.length;i<o;i++){const o=e[i],{object:a,geometry:u,material:l,group:d,clippingContext:c}=o;if(t.isArrayCamera){const e=t.cameras;for(let t=0,i=e.length;t<i;t++){const i=e[t];if(a.layers.test(i.layers)){const e=i.viewport,t=void 0===e.minDepth?0:e.minDepth,o=void 0===e.maxDepth?1:e.maxDepth,h=this._currentRenderContext.viewportValue;h.copy(e).multiplyScalar(this._pixelRatio).floor(),h.minDepth=t,h.maxDepth=o,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(a,s,i,u,l,d,r,c,n)}}}else this._currentRenderObjectFunction(a,s,t,u,l,d,r,c,n)}}renderObject(e,t,s,r,n,i,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,s,r,n,i),null!==t.overrideMaterial){const e=t.overrideMaterial;n.positionNode&&n.positionNode.isNode&&(l=e.positionNode,e.positionNode=n.positionNode),e.isShadowNodeMaterial&&(e.side=null===n.shadowSide?n.side:n.shadowSide,n.depthNode&&n.depthNode.isNode&&(c=e.depthNode,e.depthNode=n.depthNode),n.castShadowNode&&n.castShadowNode.isNode&&(d=e.fragmentNode,e.fragmentNode=n.castShadowNode)),n=e}!0===n.transparent&&n.side===le&&!1===n.forceSinglePass?(n.side=x,this._handleObjectFunction(e,n,t,s,o,i,a,"backSide"),n.side=Oe,this._handleObjectFunction(e,n,t,s,o,i,a,u),n.side=le):this._handleObjectFunction(e,n,t,s,o,i,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.fragmentNode=d),e.onAfterRender(this,t,s,r,n,i)}_renderObjectDirect(e,t,s,r,n,i,o,a){const u=this._objects.get(e,t,s,r,n,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=i;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.scene}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,s,r,n,i,o){const a=this._objects.get(e,t,s,r,n,this._currentRenderContext,i,o);this._nodes.updateBefore(a),this._geometries.updateForRender(a),this._nodes.updateForRender(a),this._bindings.updateForRender(a),this._pipelines.getForRender(a,this._compilationPromises),this._nodes.updateAfter(a)}get compile(){return this.compileAsync}}class cv{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class hv extends cv{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(kg-e%kg)%kg;var e}get buffer(){return this._buffer}update(){return!0}}class pv extends hv{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let gv=0;class mv extends pv{constructor(e,t){super("UniformBuffer_"+gv++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class fv extends pv{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,s=this.uniforms.length;t<s;t++){const s=this.uniforms[t],{boundary:r,itemSize:n}=s,i=e%kg;0!==i&&kg-i-r<0?e+=kg-i:i%r!=0&&(e+=i%r),s.offset=e/this.bytesPerElement,e+=n*this.bytesPerElement}return Math.ceil(e/kg)*kg}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const s=this.values,r=e.getValue(),n=e.offset;if(s[n]!==r){this.buffer[n]=s[n]=r,t=!0}return t}updateVector2(e){let t=!1;const s=this.values,r=e.getValue(),n=e.offset;if(s[n+0]!==r.x||s[n+1]!==r.y){const e=this.buffer;e[n+0]=s[n+0]=r.x,e[n+1]=s[n+1]=r.y,t=!0}return t}updateVector3(e){let t=!1;const s=this.values,r=e.getValue(),n=e.offset;if(s[n+0]!==r.x||s[n+1]!==r.y||s[n+2]!==r.z){const e=this.buffer;e[n+0]=s[n+0]=r.x,e[n+1]=s[n+1]=r.y,e[n+2]=s[n+2]=r.z,t=!0}return t}updateVector4(e){let t=!1;const s=this.values,r=e.getValue(),n=e.offset;if(s[n+0]!==r.x||s[n+1]!==r.y||s[n+2]!==r.z||s[n+4]!==r.w){const e=this.buffer;e[n+0]=s[n+0]=r.x,e[n+1]=s[n+1]=r.y,e[n+2]=s[n+2]=r.z,e[n+3]=s[n+3]=r.w,t=!0}return t}updateColor(e){let t=!1;const s=this.values,r=e.getValue(),n=e.offset;if(s[n+0]!==r.r||s[n+1]!==r.g||s[n+2]!==r.b){const e=this.buffer;e[n+0]=s[n+0]=r.r,e[n+1]=s[n+1]=r.g,e[n+2]=s[n+2]=r.b,t=!0}return t}updateMatrix3(e){let t=!1;const s=this.values,r=e.getValue().elements,n=e.offset;if(s[n+0]!==r[0]||s[n+1]!==r[1]||s[n+2]!==r[2]||s[n+4]!==r[3]||s[n+5]!==r[4]||s[n+6]!==r[5]||s[n+8]!==r[6]||s[n+9]!==r[7]||s[n+10]!==r[8]){const e=this.buffer;e[n+0]=s[n+0]=r[0],e[n+1]=s[n+1]=r[1],e[n+2]=s[n+2]=r[2],e[n+4]=s[n+4]=r[3],e[n+5]=s[n+5]=r[4],e[n+6]=s[n+6]=r[5],e[n+8]=s[n+8]=r[6],e[n+9]=s[n+9]=r[7],e[n+10]=s[n+10]=r[8],t=!0}return t}updateMatrix4(e){let t=!1;const s=this.values,r=e.getValue().elements,n=e.offset;if(!1===function(e,t,s){for(let r=0,n=t.length;r<n;r++)if(e[s+r]!==t[r])return!1;return!0}(s,r,n)){this.buffer.set(r,n),function(e,t,s){for(let r=0,n=t.length;r<n;r++)e[s+r]=t[r]}(s,r,n),t=!0}return t}}let yv=0;class bv extends fv{constructor(e,t){super(e),this.id=yv++,this.groupNode=t,this.isNodeUniformsGroup=!0}getNodes(){const e=[];for(const t of this.uniforms){const s=t.nodeUniform.node;if(!s)throw new Error("NodeUniformsGroup: Uniform has no node.");e.push(s)}return e}}let xv=0;class Tv extends cv{constructor(e,t){super(e),this.id=xv++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class _v extends Tv{constructor(e,t,s,r=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=s,this.access=r}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class Nv extends _v{constructor(e,t,s,r){super(e,t,s,r),this.isSampledCubeTexture=!0}}class vv extends _v{constructor(e,t,s,r){super(e,t,s,r),this.isSampledTexture3D=!0}}const Sv={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},Av={low:"lowp",medium:"mediump",high:"highp"},Rv={swizzleAssign:!0,storageBuffer:!1},Cv="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class Ev extends wN{constructor(e,t){super(e,t,new KN),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsColorSpaceToLinearSRGB(e){return!0===e.isVideoTexture&&e.colorSpace!==m}getMethod(e){return Sv[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,s=this.flowShaderNode(e),r=[];for(const e of t.inputs)r.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${r.join(", ")} ) {\n\n\t${s.vars}\n\n${s.code}\n\treturn ${s.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,s=t.count*t.itemSize,{itemSize:r}=t,n=t.array.constructor.name.toLowerCase().includes("int");let i=n?ze:$e;2===r?i=n?He:Ce:3===r?i=n?We:je:4===r&&(i=n?qe:Ue);const o={Float32Array:E,Uint8Array:pe,Uint16Array:Ke,Uint32Array:f,Int8Array:Xe,Int16Array:Ye,Int32Array:y,Uint8ClampedArray:pe},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(s/r))));let u=Math.ceil(s/r/a);a*u*r<s&&u++;const l=a*u*r,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new ke(t.array,a,u,i,o[t.array.constructor.name]||E);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new Tu(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:s}=e,r=t.value;if(this.renderer.backend.has(r)){this.renderer.backend.get(r).pbo=r.pbo}const n=this.getUniformFromNode(r.pboNode,"texture",this.shaderStage,this.context.label),i=this.getPropertyName(n);this.increaseUsage(s);const o=s.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const s=this.getVarFromNode(e);u=this.getPropertyName(s);const n=this.getDataFromNode(t);let l=n.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${i}, 0 ).x )`,e),n.propertySizeName=l);const{itemSize:d}=r,c="."+vr.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,i,h,null,"0");let g="vec4";r.pbo.type===f?g="uvec4":r.pbo.type===y&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,s,r,n="0"){return r?`texelFetch( ${t}, ivec3( ${s}, ${r} ), ${n} )`:`texelFetch( ${t}, ${s}, ${n} )`}generateTexture(e,t,s,r){return e.isDepthTexture?`texture( ${t}, ${s} ).x`:(r&&(s=`vec3( ${s}, ${r} )`),`texture( ${t}, ${s} )`)}generateTextureLevel(e,t,s,r){return`textureLod( ${t}, ${s}, ${r} )`}generateTextureBias(e,t,s,r){return`texture( ${t}, ${s}, ${r} )`}generateTextureGrad(e,t,s,r){return`textureGrad( ${t}, ${s}, ${r[0]}, ${r[1]} )`}generateTextureCompare(e,t,s,r,n,i=this.shaderStage){if("fragment"===i)return`texture( ${t}, vec3( ${s}, ${r} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${i} shader.`)}getVars(e){const t=[],s=this.vars[e];if(void 0!==s)for(const e of s)t.push(`${this.getVar(e.type,e.name)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],s=[],r={};for(const n of t){let t=null,i=!1;if("texture"===n.type){const e=n.node.value;let s="";!0===e.isDataTexture&&(e.type===f?s="u":e.type===y&&(s="i")),t=e.compareFunction?`sampler2DShadow ${n.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${s}sampler2DArray ${n.name};`:`${s}sampler2D ${n.name};`}else if("cubeTexture"===n.type)t=`samplerCube ${n.name};`;else if("texture3D"===n.type)t=`sampler3D ${n.name};`;else if("buffer"===n.type){const e=n.node,s=this.getType(e.bufferType),r=e.bufferCount,i=r>0?r:"";t=`${e.name} {\n\t${s} ${n.name}[${i}];\n};\n`}else{t=`${this.getVectorType(n.type)} ${this.getPropertyName(n,e)};`,i=!0}const o=n.node.precision;if(null!==o&&(t=Av[o]+" "+t),i){t="\t"+t;const e=n.groupNode.name;(r[e]||(r[e]=[])).push(t)}else t="uniform "+t,s.push(t)}let n="";for(const t in r){const s=r[t];n+=this._getGLSLUniformStruct(e+"_"+t,s.join("\n"))+"\n"}return n+=s.join("\n"),n}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==y){let s=e;e.isInterleavedBufferAttribute&&(s=e.data);const r=s.array;!1==(r instanceof Uint32Array||r instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let s=0;for(const r of e)t+=`layout( location = ${s++} ) in ${r.type} ${r.name};\n`}return t}getStructMembers(e){const t=[],s=e.getMemberTypes();for(let e=0;e<s.length;e++){const r=s[e];t.push(`layout( location = ${e} ) out ${r} m${e};`)}return t.join("\n")}getStructs(e){const t=[],s=this.structs[e];if(0===s.length)return"layout( location = 0 ) out vec4 fragColor;\n";for(let e=0,r=s.length;e<r;e++){const r=s[e];let n="\n";n+=this.getStructMembers(r),n+="\n",t.push(n)}return t.join("\n\n")}getVaryings(e){let t="";const s=this.varyings;if("vertex"===e||"compute"===e)for(const r of s){"compute"===e&&(r.needsInterpolation=!0);const s=r.type;t+=`${s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":""}${r.needsInterpolation?"out":"/*out*/"} ${s} ${r.name};\n`}else if("fragment"===e)for(const e of s)if(e.needsInterpolation){const s=e.type;t+=`${s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":""}in ${s} ${e.name};\n`}for(const s of this.builtins[e])t+=`${s};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,s=this.shaderStage){const r=this.extensions[s]||(this.extensions[s]=new Map);!1===r.has(e)&&r.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const s=this.extensions[e];if(void 0!==s)for(const{name:e,behavior:r}of s.values())t.push(`#extension ${e} : ${r}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=Rv[e];if(void 0===t){let s;switch(t=!1,e){case"float32Filterable":s="OES_texture_float_linear";break;case"clipDistance":s="WEBGL_clip_cull_distance"}if(void 0!==s){const e=this.renderer.backend.extensions;e.has(s)&&(e.get(s),t=!0)}Rv[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let s=0;s<e.length;s++){const r=e[s],n=this.getPropertyName(r.attributeNode);t+=`${r.varyingName} = ${n};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions \n${e.extensions}\n\n// precision\n${Cv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${Cv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let s="// code\n\n";s+=this.flowCode[t];const r=this.flowNodes[t],n=r[r.length-1];for(const e of r){const r=this.getFlowData(e),i=e.name;i&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${i}\n\t`),s+=`${r.code}\n\t`,e===n&&"compute"!==t&&(s+="// result\n\t","vertex"===t?(s+="gl_Position = ",s+=`${r.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(s+="fragColor = ",s+=`${r.result};`)))}const i=e[t];i.extensions=this.getExtensions(t),i.uniforms=this.getUniforms(t),i.attributes=this.getAttributes(t),i.varyings=this.getVaryings(t),i.vars=this.getVars(t),i.structs=this.getStructs(t),i.codes=this.getCodes(t),i.transforms=this.getTransforms(t),i.flow=s}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,s,r=null){const n=super.getUniformFromNode(e,t,s,r),i=this.getDataFromNode(e,s,this.globalCache);let o=i.uniformGPU;if(void 0===o){const r=e.groupNode,a=r.name,u=this.getBindGroupArray(a,s);if("texture"===t)o=new _v(n.name,n.node,r),u.push(o);else if("cubeTexture"===t)o=new Nv(n.name,n.node,r),u.push(o);else if("texture3D"===t)o=new vv(n.name,n.node,r),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,n.name=`buffer${e.id}`;const t=new mv(e,r);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[s]||(this.uniformGroups[s]={});let i=e[a];void 0===i&&(i=new bv(s+"_"+a,r),e[a]=i,u.push(i)),o=this.getNodeUniform(n,t),i.addUniform(o)}i.uniformGPU=o}return n}}let wv=null,Mv=null,Bv=null;class Uv{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(e){this.renderer=e}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(e){const{object:t,geometry:s}=e;return s.isInstancedBufferGeometry?s.instanceCount:t.count>1?t.count:1}getDrawingBufferSize(){return wv=wv||new t,this.renderer.getDrawingBufferSize(wv)}getScissor(){return Mv=Mv||new r,this.renderer.getScissor(Mv)}setScissorTest(){}getClearColor(){const e=this.renderer;return Bv=Bv||new cm,e.getClearColor(Bv),Bv.getRGB(Bv,this.renderer.currentColorSpace),Bv}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:Qe(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Le} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let Fv=0;class Pv{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class Iv{constructor(e){this.backend=e}createAttribute(e,t){const s=this.backend,{gl:r}=s,n=e.array,i=e.usage||r.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=s.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(r,t,n,i),a.bufferGPU=l,a.bufferType=t,a.version=o.version),n instanceof Float32Array)u=r.FLOAT;else if(n instanceof Uint16Array)u=e.isFloat16BufferAttribute?r.HALF_FLOAT:r.UNSIGNED_SHORT;else if(n instanceof Int16Array)u=r.SHORT;else if(n instanceof Uint32Array)u=r.UNSIGNED_INT;else if(n instanceof Int32Array)u=r.INT;else if(n instanceof Int8Array)u=r.BYTE;else if(n instanceof Uint8Array)u=r.UNSIGNED_BYTE;else{if(!(n instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+n);u=r.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:n.byteLength,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===r.INT||u===r.UNSIGNED_INT||e.gpuType===y,id:Fv++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(r,t,n,i);d=new Pv(d,e)}s.set(e,d)}updateAttribute(e){const t=this.backend,{gl:s}=t,r=e.array,n=e.isInterleavedBufferAttribute?e.data:e,i=t.get(n),o=i.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(s.bindBuffer(o,i.bufferGPU),0===a.length)s.bufferSubData(o,0,r);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];s.bufferSubData(o,t.start*r.BYTES_PER_ELEMENT,r,t.start,t.count)}n.clearUpdateRanges()}s.bindBuffer(o,null),i.version=n.version}destroyAttribute(e){const t=this.backend,{gl:s}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const r=t.get(e);s.deleteBuffer(r.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:s}=t,r=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:n}=t.get(r),i=e.array,o=i.byteLength;s.bindBuffer(s.COPY_READ_BUFFER,n);const a=s.createBuffer();s.bindBuffer(s.COPY_WRITE_BUFFER,a),s.bufferData(s.COPY_WRITE_BUFFER,o,s.STREAM_READ),s.copyBufferSubData(s.COPY_READ_BUFFER,s.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(i.length);return s.bindBuffer(s.COPY_WRITE_BUFFER,a),s.getBufferSubData(s.COPY_WRITE_BUFFER,0,u),s.deleteBuffer(a),s.bindBuffer(s.COPY_READ_BUFFER,null),s.bindBuffer(s.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,s,r){const n=e.createBuffer();return e.bindBuffer(t,n),e.bufferData(t,s,r),e.bindBuffer(t,null),n}}let Lv,Dv,Vv=!1;class Ov{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},!1===Vv&&(this._init(this.gl),Vv=!0)}_init(e){Lv={[Ze]:e.FUNC_ADD,[Je]:e.FUNC_SUBTRACT,[et]:e.FUNC_REVERSE_SUBTRACT},Dv={[tt]:e.ZERO,[st]:e.ONE,[rt]:e.SRC_COLOR,[nt]:e.SRC_ALPHA,[it]:e.SRC_ALPHA_SATURATE,[ot]:e.DST_COLOR,[at]:e.DST_ALPHA,[ut]:e.ONE_MINUS_SRC_COLOR,[lt]:e.ONE_MINUS_SRC_ALPHA,[dt]:e.ONE_MINUS_DST_COLOR,[ct]:e.ONE_MINUS_DST_ALPHA}}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==ht?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===pt?t.cullFace(t.BACK):e===gt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:s}=this;e!==t&&(s.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,s,r,n,i,o,a){const{gl:u}=this;if(e!==G){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===mt)n=n||t,i=i||s,o=o||r,t===this.currentBlendEquation&&n===this.currentBlendEquationAlpha||(u.blendEquationSeparate(Lv[t],Lv[n]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=n),s===this.currentBlendSrc&&r===this.currentBlendDst&&i===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(Dv[s],Dv[r],Dv[i],Dv[o]),this.currentBlendSrc=s,this.currentBlendDst=r,this.currentBlendSrcAlpha=i,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===Ze&&this.currentBlendEquationAlpha===Ze||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=Ze,this.currentBlendEquationAlpha=Ze),a)switch(e){case F:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case bt:u.blendFunc(u.ONE,u.ONE);break;case yt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case ft:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case F:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case bt:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case yt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case ft:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Rt:t.depthFunc(t.NEVER);break;case At:t.depthFunc(t.ALWAYS);break;case St:t.depthFunc(t.LESS);break;case vt:t.depthFunc(t.LEQUAL);break;case Nt:t.depthFunc(t.EQUAL);break;case _t:t.depthFunc(t.GEQUAL);break;case Tt:t.depthFunc(t.GREATER);break;case xt:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,s){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===s||(this.gl.stencilFunc(e,t,s),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=s)}setStencilOp(e,t,s){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===s||(this.gl.stencilOp(e,t,s),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=s)}setMaterial(e,t,s){const{gl:r}=this;e.side===le?this.disable(r.CULL_FACE):this.enable(r.CULL_FACE);let n=e.side===x;t&&(n=!n),this.setFlipSided(n),e.blending===F&&!1===e.transparent?this.setBlending(G):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const i=e.stencilWrite;if(this.setStencilTest(i),i&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(r.SAMPLE_ALPHA_TO_COVERAGE):this.disable(r.SAMPLE_ALPHA_TO_COVERAGE),s>0&&this.currentClippingPlanes!==s){const e=12288;for(let t=0;t<8;t++)t<s?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,s){const{gl:r}=this;e?(this.enable(r.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===s||(r.polygonOffset(t,s),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=s)):this.disable(r.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}bindFramebuffer(e,t){const{gl:s,currentBoundFramebuffers:r}=this;return r[e]!==t&&(s.bindFramebuffer(e,t),r[e]=t,e===s.DRAW_FRAMEBUFFER&&(r[s.FRAMEBUFFER]=t),e===s.FRAMEBUFFER&&(r[s.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:s}=this;let r=[],n=!1;if(null!==e.textures){r=this.currentDrawbuffers.get(t),void 0===r&&(r=[],this.currentDrawbuffers.set(t,r));const i=e.textures;if(r.length!==i.length||r[0]!==s.COLOR_ATTACHMENT0){for(let e=0,t=i.length;e<t;e++)r[e]=s.COLOR_ATTACHMENT0+e;r.length=i.length,n=!0}}else r[0]!==s.BACK&&(r[0]=s.BACK,n=!0);n&&s.drawBuffers(r)}activeTexture(e){const{gl:t,currentTextureSlot:s,maxTextures:r}=this;void 0===e&&(e=t.TEXTURE0+r-1),s!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,s){const{gl:r,currentTextureSlot:n,currentBoundTextures:i,maxTextures:o}=this;void 0===s&&(s=null===n?r.TEXTURE0+o-1:n);let a=i[s];void 0===a&&(a={type:void 0,texture:void 0},i[s]=a),a.type===e&&a.texture===t||(n!==s&&(r.activeTexture(s),this.currentTextureSlot=s),r.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,s){const{gl:r}=this,n=`${e}-${t}`;return this.currentBoundBufferBases[n]!==s&&(r.bindBufferBase(e,t,s),this.currentBoundBufferBases[n]=s,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:s}=this,r=s[t];void 0!==r&&void 0!==r.type&&(e.bindTexture(r.type,null),r.type=void 0,r.texture=void 0)}}class Gv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=m){const{gl:s,extensions:r}=this;let n;if(e===pe)return s.UNSIGNED_BYTE;if(e===Ct)return s.UNSIGNED_SHORT_4_4_4_4;if(e===Et)return s.UNSIGNED_SHORT_5_5_5_1;if(e===wt)return s.UNSIGNED_INT_5_9_9_9_REV;if(e===Xe)return s.BYTE;if(e===Ye)return s.SHORT;if(e===Ke)return s.UNSIGNED_SHORT;if(e===y)return s.INT;if(e===f)return s.UNSIGNED_INT;if(e===E)return s.FLOAT;if(e===ye)return s.HALF_FLOAT;if(e===Mt)return s.ALPHA;if(e===je)return s.RGB;if(e===Ue)return s.RGBA;if(e===Bt)return s.LUMINANCE;if(e===Ut)return s.LUMINANCE_ALPHA;if(e===ce)return s.DEPTH_COMPONENT;if(e===de)return s.DEPTH_STENCIL;if(e===$e)return s.RED;if(e===ze)return s.RED_INTEGER;if(e===Ce)return s.RG;if(e===He)return s.RG_INTEGER;if(e===qe)return s.RGBA_INTEGER;if(e===Ft||e===Pt||e===It||e===Lt)if(t===De){if(n=r.get("WEBGL_compressed_texture_s3tc_srgb"),null===n)return null;if(e===Ft)return n.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===Pt)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===It)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Lt)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(n=r.get("WEBGL_compressed_texture_s3tc"),null===n)return null;if(e===Ft)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Pt)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===It)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Lt)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Dt||e===Vt||e===Ot||e===Gt){if(n=r.get("WEBGL_compressed_texture_pvrtc"),null===n)return null;if(e===Dt)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Vt)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Ot)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Gt)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===kt||e===zt||e===$t){if(n=r.get("WEBGL_compressed_texture_etc"),null===n)return null;if(e===kt||e===zt)return t===De?n.COMPRESSED_SRGB8_ETC2:n.COMPRESSED_RGB8_ETC2;if(e===$t)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:n.COMPRESSED_RGBA8_ETC2_EAC}if(e===Ht||e===Wt||e===jt||e===qt||e===Kt||e===Xt||e===Yt||e===Qt||e===Zt||e===Jt||e===es||e===ts||e===ss||e===rs){if(n=r.get("WEBGL_compressed_texture_astc"),null===n)return null;if(e===Ht)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:n.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===Wt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:n.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===jt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:n.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===qt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:n.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===Kt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:n.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===Xt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:n.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===Yt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:n.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===Qt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:n.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===Zt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:n.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===Jt)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:n.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===es)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:n.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===ts)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:n.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===ss)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:n.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===rs)return t===De?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:n.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===ns){if(n=r.get("EXT_texture_compression_bptc"),null===n)return null;if(e===ns)return t===De?n.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:n.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===is||e===os||e===as||e===us){if(n=r.get("EXT_texture_compression_rgtc"),null===n)return null;if(e===ns)return n.COMPRESSED_RED_RGTC1_EXT;if(e===os)return n.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===as)return n.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===us)return n.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===he?s.UNSIGNED_INT_24_8:void 0!==s[e]?s[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((s,r)=>{!function n(){const i=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(i===e.WAIT_FAILED)return e.deleteSync(t),void r();i!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),s()):requestAnimationFrame(n)}()}))}}let kv,zv,$v,Hv=!1;class Wv{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===Hv&&(this._init(this.gl),Hv=!0)}_init(e){kv={[ls]:e.REPEAT,[ds]:e.CLAMP_TO_EDGE,[cs]:e.MIRRORED_REPEAT},zv={[hs]:e.NEAREST,[ps]:e.NEAREST_MIPMAP_NEAREST,[Pe]:e.NEAREST_MIPMAP_LINEAR,[$]:e.LINEAR,[Fe]:e.LINEAR_MIPMAP_NEAREST,[M]:e.LINEAR_MIPMAP_LINEAR},$v={[gs]:e.NEVER,[ms]:e.ALWAYS,[Ae]:e.LESS,[fs]:e.LEQUAL,[ys]:e.EQUAL,[bs]:e.GEQUAL,[xs]:e.GREATER,[Ts]:e.NOTEQUAL}}filterFallback(e){const{gl:t}=this;return e===hs||e===ps||e===Pe?t.NEAREST:t.LINEAR}getGLTextureType(e){const{gl:t}=this;let s;return s=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,s}getInternalFormat(e,t,s,r,n=!1){const{gl:i,extensions:o}=this;if(null!==e){if(void 0!==i[e])return i[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===i.RED&&(s===i.FLOAT&&(a=i.R32F),s===i.HALF_FLOAT&&(a=i.R16F),s===i.UNSIGNED_BYTE&&(a=i.R8),s===i.UNSIGNED_SHORT&&(a=i.R16),s===i.UNSIGNED_INT&&(a=i.R32UI),s===i.BYTE&&(a=i.R8I),s===i.SHORT&&(a=i.R16I),s===i.INT&&(a=i.R32I)),t===i.RED_INTEGER&&(s===i.UNSIGNED_BYTE&&(a=i.R8UI),s===i.UNSIGNED_SHORT&&(a=i.R16UI),s===i.UNSIGNED_INT&&(a=i.R32UI),s===i.BYTE&&(a=i.R8I),s===i.SHORT&&(a=i.R16I),s===i.INT&&(a=i.R32I)),t===i.RG&&(s===i.FLOAT&&(a=i.RG32F),s===i.HALF_FLOAT&&(a=i.RG16F),s===i.UNSIGNED_BYTE&&(a=i.RG8),s===i.UNSIGNED_SHORT&&(a=i.RG16),s===i.UNSIGNED_INT&&(a=i.RG32UI),s===i.BYTE&&(a=i.RG8I),s===i.SHORT&&(a=i.RG16I),s===i.INT&&(a=i.RG32I)),t===i.RG_INTEGER&&(s===i.UNSIGNED_BYTE&&(a=i.RG8UI),s===i.UNSIGNED_SHORT&&(a=i.RG16UI),s===i.UNSIGNED_INT&&(a=i.RG32UI),s===i.BYTE&&(a=i.RG8I),s===i.SHORT&&(a=i.RG16I),s===i.INT&&(a=i.RG32I)),t===i.RGB&&(s===i.FLOAT&&(a=i.RGB32F),s===i.HALF_FLOAT&&(a=i.RGB16F),s===i.UNSIGNED_BYTE&&(a=i.RGB8),s===i.UNSIGNED_SHORT&&(a=i.RGB16),s===i.UNSIGNED_INT&&(a=i.RGB32UI),s===i.BYTE&&(a=i.RGB8I),s===i.SHORT&&(a=i.RGB16I),s===i.INT&&(a=i.RGB32I),s===i.UNSIGNED_BYTE&&(a=r===De&&!1===n?i.SRGB8:i.RGB8),s===i.UNSIGNED_SHORT_5_6_5&&(a=i.RGB565),s===i.UNSIGNED_SHORT_5_5_5_1&&(a=i.RGB5_A1),s===i.UNSIGNED_SHORT_4_4_4_4&&(a=i.RGB4),s===i.UNSIGNED_INT_5_9_9_9_REV&&(a=i.RGB9_E5)),t===i.RGB_INTEGER&&(s===i.UNSIGNED_BYTE&&(a=i.RGB8UI),s===i.UNSIGNED_SHORT&&(a=i.RGB16UI),s===i.UNSIGNED_INT&&(a=i.RGB32UI),s===i.BYTE&&(a=i.RGB8I),s===i.SHORT&&(a=i.RGB16I),s===i.INT&&(a=i.RGB32I)),t===i.RGBA&&(s===i.FLOAT&&(a=i.RGBA32F),s===i.HALF_FLOAT&&(a=i.RGBA16F),s===i.UNSIGNED_BYTE&&(a=i.RGBA8),s===i.UNSIGNED_SHORT&&(a=i.RGBA16),s===i.UNSIGNED_INT&&(a=i.RGBA32UI),s===i.BYTE&&(a=i.RGBA8I),s===i.SHORT&&(a=i.RGBA16I),s===i.INT&&(a=i.RGBA32I),s===i.UNSIGNED_BYTE&&(a=r===De&&!1===n?i.SRGB8_ALPHA8:i.RGBA8),s===i.UNSIGNED_SHORT_4_4_4_4&&(a=i.RGBA4),s===i.UNSIGNED_SHORT_5_5_5_1&&(a=i.RGB5_A1)),t===i.RGBA_INTEGER&&(s===i.UNSIGNED_BYTE&&(a=i.RGBA8UI),s===i.UNSIGNED_SHORT&&(a=i.RGBA16UI),s===i.UNSIGNED_INT&&(a=i.RGBA32UI),s===i.BYTE&&(a=i.RGBA8I),s===i.SHORT&&(a=i.RGBA16I),s===i.INT&&(a=i.RGBA32I)),t===i.DEPTH_COMPONENT&&(s===i.UNSIGNED_INT&&(a=i.DEPTH24_STENCIL8),s===i.FLOAT&&(a=i.DEPTH_COMPONENT32F)),t===i.DEPTH_STENCIL&&s===i.UNSIGNED_INT_24_8&&(a=i.DEPTH24_STENCIL8),a!==i.R16F&&a!==i.R32F&&a!==i.RG16F&&a!==i.RG32F&&a!==i.RGBA16F&&a!==i.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:s,extensions:r,backend:n}=this;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,t.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,t.unpackAlignment),s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL,s.NONE),s.texParameteri(e,s.TEXTURE_WRAP_S,kv[t.wrapS]),s.texParameteri(e,s.TEXTURE_WRAP_T,kv[t.wrapT]),e!==s.TEXTURE_3D&&e!==s.TEXTURE_2D_ARRAY||s.texParameteri(e,s.TEXTURE_WRAP_R,kv[t.wrapR]),s.texParameteri(e,s.TEXTURE_MAG_FILTER,zv[t.magFilter]);const i=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===$&&i?M:t.minFilter;if(s.texParameteri(e,s.TEXTURE_MIN_FILTER,zv[o]),t.compareFunction&&(s.texParameteri(e,s.TEXTURE_COMPARE_MODE,s.COMPARE_REF_TO_TEXTURE),s.texParameteri(e,s.TEXTURE_COMPARE_FUNC,$v[t.compareFunction])),!0===r.has("EXT_texture_filter_anisotropic")){if(t.magFilter===hs)return;if(t.minFilter!==Pe&&t.minFilter!==M)return;if(t.type===E&&!1===r.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const i=r.get("EXT_texture_filter_anisotropic");s.texParameterf(e,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,n.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:s,defaultTextures:r}=this,n=this.getGLTextureType(e);let i=r[n];void 0===i&&(i=t.createTexture(),s.state.bindTexture(n,i),t.texParameteri(n,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(n,t.TEXTURE_MAG_FILTER,t.NEAREST),r[n]=i),s.set(e,{textureGPU:i,glTextureType:n,isDefault:!0})}createTexture(e,t){const{gl:s,backend:r}=this,{levels:n,width:i,height:o,depth:a}=t,u=r.utils.convert(e.format,e.colorSpace),l=r.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=s.createTexture(),h=this.getGLTextureType(e);r.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?s.texStorage3D(s.TEXTURE_2D_ARRAY,n,d,i,o,a):e.isData3DTexture?s.texStorage3D(s.TEXTURE_3D,n,d,i,o,a):e.isVideoTexture||s.texStorage2D(h,n,d,i,o),r.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:s,backend:r}=this,{textureGPU:n,glTextureType:i,glFormat:o,glType:a}=r.get(t),{width:u,height:l}=t.source.data;s.bindBuffer(s.PIXEL_UNPACK_BUFFER,e),r.state.bindTexture(i,n),s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,!1),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),s.texSubImage2D(i,0,0,0,u,l,o,a,0),s.bindBuffer(s.PIXEL_UNPACK_BUFFER,null),r.state.unbindTexture()}updateTexture(e,t){const{gl:s}=this,{width:r,height:n}=t,{textureGPU:i,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===i)return;const d=e=>e.isDataTexture?e.image.data:e instanceof ImageBitmap||e instanceof OffscreenCanvas||e instanceof HTMLImageElement||e instanceof HTMLCanvasElement?e:e.data;if(this.backend.state.bindTexture(o,i),this.setTextureParameters(o,e),e.isCompressedTexture){const r=e.mipmaps,n=t.image;for(let t=0;t<r.length;t++){const i=r[t];e.isCompressedArrayTexture?e.format!==s.RGBA?null!==a?s.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,t,0,0,0,i.width,i.height,n.depth,a,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):s.texSubImage3D(s.TEXTURE_2D_ARRAY,t,0,0,0,i.width,i.height,n.depth,a,u,i.data):null!==a?s.compressedTexSubImage2D(s.TEXTURE_2D,t,0,0,i.width,i.height,a,i.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const i=d(e[t]);s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,r,n,a,u,i)}}else if(e.isDataArrayTexture){const e=t.image;s.texSubImage3D(s.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;s.texSubImage3D(s.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),s.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);s.texSubImage2D(o,0,0,0,r,n,a,u,e)}}generateMipmaps(e){const{gl:t,backend:s}=this,{textureGPU:r,glTextureType:n}=s.get(e);s.state.bindTexture(n,r),t.generateMipmap(n)}deallocateRenderBuffers(e){const{gl:t,backend:s}=this;if(e){const r=s.get(e);if(r.renderBufferStorageSetup=void 0,r.framebuffers){for(const e in r.framebuffers)t.deleteFramebuffer(r.framebuffers[e]);delete r.framebuffers}if(r.depthRenderbuffer&&(t.deleteRenderbuffer(r.depthRenderbuffer),delete r.depthRenderbuffer),r.stencilRenderbuffer&&(t.deleteRenderbuffer(r.stencilRenderbuffer),delete r.stencilRenderbuffer),r.msaaFrameBuffer&&(t.deleteFramebuffer(r.msaaFrameBuffer),delete r.msaaFrameBuffer),r.msaaRenderbuffers){for(let e=0;e<r.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(r.msaaRenderbuffers[e]);delete r.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:s}=this,{textureGPU:r,renderTarget:n}=s.get(e);this.deallocateRenderBuffers(n),t.deleteTexture(r),s.delete(e)}copyTextureToTexture(e,t,s=null,r=null,n=0){const{gl:i,backend:o}=this,{state:a}=this.backend,{textureGPU:u,glTextureType:l,glType:d,glFormat:c}=o.get(t);let h,p,g,m,f,y;null!==s?(h=s.max.x-s.min.x,p=s.max.y-s.min.y,g=s.min.x,m=s.min.y):(h=e.image.width,p=e.image.height,g=0,m=0),null!==r?(f=r.x,y=r.y):(f=0,y=0),a.bindTexture(l,u),i.pixelStorei(i.UNPACK_ALIGNMENT,t.unpackAlignment),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,t.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,t.unpackAlignment);const b=i.getParameter(i.UNPACK_ROW_LENGTH),x=i.getParameter(i.UNPACK_IMAGE_HEIGHT),T=i.getParameter(i.UNPACK_SKIP_PIXELS),_=i.getParameter(i.UNPACK_SKIP_ROWS),N=i.getParameter(i.UNPACK_SKIP_IMAGES),v=e.isCompressedTexture?e.mipmaps[n]:e.image;if(i.pixelStorei(i.UNPACK_ROW_LENGTH,v.width),i.pixelStorei(i.UNPACK_IMAGE_HEIGHT,v.height),i.pixelStorei(i.UNPACK_SKIP_PIXELS,g),i.pixelStorei(i.UNPACK_SKIP_ROWS,m),e.isRenderTargetTexture||e.isDepthTexture){const s=o.get(e),r=o.get(t),n=o.get(s.renderTarget),u=o.get(r.renderTarget),l=n.framebuffers[s.cacheKey],d=u.framebuffers[r.cacheKey];a.bindFramebuffer(i.READ_FRAMEBUFFER,l),a.bindFramebuffer(i.DRAW_FRAMEBUFFER,d);let c=i.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=i.DEPTH_BUFFER_BIT),i.blitFramebuffer(g,m,h,p,f,y,h,p,c,i.NEAREST),a.bindFramebuffer(i.READ_FRAMEBUFFER,null),a.bindFramebuffer(i.DRAW_FRAMEBUFFER,null)}else e.isDataTexture?i.texSubImage2D(i.TEXTURE_2D,n,f,y,h,p,c,d,v.data):e.isCompressedTexture?i.compressedTexSubImage2D(i.TEXTURE_2D,n,f,y,v.width,v.height,c,v.data):i.texSubImage2D(i.TEXTURE_2D,n,f,y,h,p,c,d,v);i.pixelStorei(i.UNPACK_ROW_LENGTH,b),i.pixelStorei(i.UNPACK_IMAGE_HEIGHT,x),i.pixelStorei(i.UNPACK_SKIP_PIXELS,T),i.pixelStorei(i.UNPACK_SKIP_ROWS,_),i.pixelStorei(i.UNPACK_SKIP_IMAGES,N),0===n&&t.generateMipmaps&&i.generateMipmap(i.TEXTURE_2D),a.unbindTexture()}copyFramebufferToTexture(e,t,s){const{gl:r}=this,{state:n}=this.backend,{textureGPU:i}=this.backend.get(e),{x:o,y:a,z:u,w:l}=s,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(d){const s=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=r.DEPTH_BUFFER_BIT,h=r.DEPTH_ATTACHMENT,t.stencil&&(d|=r.STENCIL_BUFFER_BIT)):(d=r.COLOR_BUFFER_BIT,h=r.COLOR_ATTACHMENT0),s){const e=this.backend.get(t.renderTarget),s=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;n.bindFramebuffer(r.DRAW_FRAMEBUFFER,s),n.bindFramebuffer(r.READ_FRAMEBUFFER,h);const p=c-a-l;r.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,r.NEAREST),n.bindFramebuffer(r.READ_FRAMEBUFFER,s),n.bindTexture(r.TEXTURE_2D,i),r.copyTexSubImage2D(r.TEXTURE_2D,0,0,0,o,p,u,l),n.unbindTexture()}else{const e=r.createFramebuffer();n.bindFramebuffer(r.DRAW_FRAMEBUFFER,e),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,h,r.TEXTURE_2D,i,0),r.blitFramebuffer(0,0,u,l,0,0,u,l,d,r.NEAREST),r.deleteFramebuffer(e)}}else n.bindTexture(r.TEXTURE_2D,i),r.copyTexSubImage2D(r.TEXTURE_2D,0,0,0,o,c-l-a,u,l),n.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t){const{gl:s}=this,r=t.renderTarget,{samples:n,depthTexture:i,depthBuffer:o,stencilBuffer:a,width:u,height:l}=r;if(s.bindRenderbuffer(s.RENDERBUFFER,e),o&&!a){let t=s.DEPTH_COMPONENT24;n>0?(i&&i.isDepthTexture&&i.type===s.FLOAT&&(t=s.DEPTH_COMPONENT32F),s.renderbufferStorageMultisample(s.RENDERBUFFER,n,t,u,l)):s.renderbufferStorage(s.RENDERBUFFER,t,u,l),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.RENDERBUFFER,e)}else o&&a&&(n>0?s.renderbufferStorageMultisample(s.RENDERBUFFER,n,s.DEPTH24_STENCIL8,u,l):s.renderbufferStorage(s.RENDERBUFFER,s.DEPTH_STENCIL,u,l),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,s,r,n,i){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+i:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=r*n*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,s,r,n,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:s}=this;let r=0;return e===s.UNSIGNED_BYTE&&(r=1),e!==s.UNSIGNED_SHORT_4_4_4_4&&e!==s.UNSIGNED_SHORT_5_5_5_1&&e!==s.UNSIGNED_SHORT_5_6_5&&e!==s.UNSIGNED_SHORT&&e!==s.HALF_FLOAT||(r=2),e!==s.UNSIGNED_INT&&e!==s.FLOAT||(r=4),t===s.RGBA?4*r:t===s.RGB?3*r:t===s.ALPHA?r:void 0}}class jv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class qv{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const s=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(s.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Kv={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class Xv{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:s,mode:r,object:n,type:i,info:o,index:a}=this;0!==a?s.drawElements(r,t,i,e):s.drawArrays(r,e,t),o.update(n,t,r,1)}renderInstances(e,t,s){const{gl:r,mode:n,type:i,index:o,object:a,info:u}=this;0!==s&&(0!==o?r.drawElementsInstanced(n,t,i,e,s):r.drawArraysInstanced(n,e,t,s),u.update(a,t,n,s))}renderMultiDraw(e,t,s){const{extensions:r,mode:n,object:i,info:o}=this;if(0===s)return;const a=r.get("WEBGL_multi_draw");if(null===a)for(let r=0;r<s;r++)this.render(e[r],t[r]);else{0!==this.index?a.multiDrawElementsWEBGL(n,t,0,this.type,e,0,s):a.multiDrawArraysWEBGL(n,e,0,t,0,s);let r=0;for(let e=0;e<s;e++)r+=t[e];o.update(i,r,n,1)}}renderMultiDrawInstances(e,t,s,r){const{extensions:n,mode:i,object:o,info:a}=this;if(0===s)return;const u=n.get("WEBGL_multi_draw");if(null===u)for(let n=0;n<s;n++)this.renderInstances(e[n],t[n],r[n]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(i,t,0,this.type,e,0,r,0,s):u.multiDrawArraysInstancedWEBGL(i,e,0,t,0,r,0,s);let n=0;for(let e=0;e<s;e++)n+=t[e]*r[e];a.update(o,n,i,1)}}}class Yv extends Uv{constructor(e={}){super(e),this.isWebGLBackend=!0}init(e){super.init(e);const t=this.parameters,s=void 0!==t.context?t.context:e.domElement.getContext("webgl2");function r(t){t.preventDefault();const s={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(s)}this._onContextLost=r,e.domElement.addEventListener("webglcontextlost",r,!1),this.gl=s,this.extensions=new jv(this),this.capabilities=new qv(this),this.attributeUtils=new Iv(this),this.textureUtils=new Wv(this),this.bufferRenderer=new Xv(this),this.state=new Ov(this),this.utils=new Gv(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=!0===t.trackTimestamp,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._knownBindings=new WeakSet,this._currentContext=null}get coordinateSystem(){return b}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(this.queryRunning)return t.queryQueue||(t.queryQueue=[]),void t.queryQueue.push(e);t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.activeQuery=null),t.activeQuery=this.gl.createQuery(),null!==t.activeQuery&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,t.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.gpuQueries||(t.gpuQueries=[]),t.gpuQueries.push({query:t.activeQuery}),t.activeQuery=null,this.queryRunning=!1,t.queryQueue&&t.queryQueue.length>0)){const e=t.queryQueue.shift();this.initTimestampQuery(e)}}async resolveTimestampAsync(e,t="render"){if(!this.disjoint||!this.trackTimestamp)return;const s=this.get(e);s.gpuQueries||(s.gpuQueries=[]);for(let e=0;e<s.gpuQueries.length;e++){const r=s.gpuQueries[e],n=this.gl.getQueryParameter(r.query,this.gl.QUERY_RESULT_AVAILABLE),i=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(n&&!i){const n=this.gl.getQueryParameter(r.query,this.gl.QUERY_RESULT),i=Number(n)/1e6;this.gl.deleteQuery(r.query),s.gpuQueries.splice(e,1),e--,this.renderer.info.updateTimestamp(t,i)}}}getContext(){return this.gl}beginRender(e){const{gl:t}=this,s=this.get(e);if(this.initTimestampQuery(e),s.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1),e.viewport?this.updateViewport(e):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),e.scissor){const{x:s,y:r,width:n,height:i}=e.scissorValue;t.scissor(s,e.height-i-r,n,i)}const r=e.occlusionQueryCount;r>0&&(s.currentOcclusionQueries=s.occlusionQueries,s.currentOcclusionQueryObjects=s.occlusionQueryObjects,s.lastOcclusionObject=null,s.occlusionQueries=new Array(r),s.occlusionQueryObjects=new Array(r),s.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:s}=this,r=this.get(e),n=r.previousContext,i=e.occlusionQueryCount;i>0&&(i>r.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=n,null!==e.textures&&e.renderTarget){const r=this.get(e.renderTarget),{samples:n}=e.renderTarget;if(n>0){const n=r.framebuffers[e.getCacheKey()],i=t.COLOR_BUFFER_BIT,o=r.msaaFrameBuffer,a=e.textures;s.bindFramebuffer(t.READ_FRAMEBUFFER,o),s.bindFramebuffer(t.DRAW_FRAMEBUFFER,n);for(let s=0;s<a.length;s++)if(e.scissor){const{x:s,y:n,width:o,height:a}=e.scissorValue,u=e.height-a-n;t.blitFramebuffer(s,u,s+o,u+a,s,u,s+o,u+a,i,t.NEAREST),t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,r.invalidationArray,s,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,i,t.NEAREST),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,r.invalidationArray)}}null!==n&&(this._setFramebuffer(n),n.viewport?this.updateViewport(n):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:s,currentOcclusionQueryObjects:r}=t;if(s&&r){const e=new WeakSet,{gl:n}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const i=()=>{let o=0;for(let t=0;t<s.length;t++){const i=s[t];null!==i&&(n.getQueryParameter(i,n.QUERY_RESULT_AVAILABLE)&&(n.getQueryParameter(i,n.QUERY_RESULT)>0&&e.add(r[t]),s[t]=null,n.deleteQuery(i),o++))}o<s.length?requestAnimationFrame(i):t.occluded=e};i()}}isOccluded(e,t){const s=this.get(e);return s.occluded&&s.occluded.has(t)}updateViewport(e){const t=this.gl,{x:s,y:r,width:n,height:i}=e.viewportValue;t.viewport(s,e.height-i-r,n,i)}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}clear(e,t,s,r=null,n=!0){const{gl:i}=this;if(null===r){const e=this.getClearColor();e.r*=e.a,e.g*=e.a,e.b*=e.a,r={textures:null,clearColorValue:e}}let o=0;if(e&&(o|=i.COLOR_BUFFER_BIT),t&&(o|=i.DEPTH_BUFFER_BIT),s&&(o|=i.STENCIL_BUFFER_BIT),0!==o){let a;if(r.clearColorValue?a=r.clearColorValue:(a=this.getClearColor(),a.r*=a.a,a.g*=a.a,a.b*=a.a),t&&this.state.setDepthMask(!0),null===r.textures)i.clearColor(a.r,a.g,a.b,a.a),i.clear(o);else{if(n&&this._setFramebuffer(r),e)for(let e=0;e<r.textures.length;e++)i.clearBufferfv(i.COLOR,e,[a.r,a.g,a.b,a.a]);t&&s?i.clearBufferfi(i.DEPTH_STENCIL,0,1,0):t?i.clearBufferfv(i.DEPTH,0,[1]):s&&i.clearBufferiv(i.STENCIL,0,[0])}}}beginCompute(e){const{state:t,gl:s}=this;t.bindFramebuffer(s.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,s,r){const{state:n,gl:i}=this;this.discard||(i.enable(i.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(r),l=this._getVaoKey(null,u),d=this.vaoCache[l];void 0===d?this._createVao(null,u):i.bindVertexArray(d),n.useProgram(o),this._bindUniforms(s);const c=this._getTransformFeedback(a);i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,c),i.beginTransformFeedback(i.POINTS),u[0].isStorageInstancedBufferAttribute?i.drawArraysInstanced(i.POINTS,0,1,t.count):i.drawArrays(i.POINTS,0,t.count),i.endTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:s,material:r,context:n,hardwareClippingPlanes:i}=e,{programGPU:o}=this.get(s),{gl:a,state:u}=this,l=this.get(n),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(r,c,i),u.useProgram(o);let h=e.staticVao;if(void 0===h){const t=this._getVaoKey(e.getIndex(),e.getAttributes());if(h=this.vaoCache[t],void 0===h){let t;({vaoGPU:h,staticVao:t}=this._createVao(e.getIndex(),e.getAttributes())),t&&(e.staticVao=h)}}a.bindVertexArray(h);const p=e.getIndex(),g=l.lastOcclusionObject;if(g!==t&&void 0!==g){if(null!==g&&!0===g.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const m=this.bufferRenderer;t.isPoints?m.mode=a.POINTS:t.isLineSegments?m.mode=a.LINES:t.isLine?m.mode=a.LINE_STRIP:t.isLineLoop?m.mode=a.LINE_LOOP:!0===r.wireframe?(u.setLineWidth(r.wireframeLinewidth*this.renderer.getPixelRatio()),m.mode=a.LINES):m.mode=a.TRIANGLES;const{vertexCount:f,instanceCount:y}=d;let{firstVertex:b}=d;if(m.object=t,null!==p){b*=p.array.BYTES_PER_ELEMENT;const e=this.get(p);m.index=p.count,m.type=e.type}else m.index=0;t.isBatchedMesh?null!==t._multiDrawInstances?m.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?m.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):_s("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):y>1?m.renderInstances(b,f,y):m.render(b,f),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,s,r,n,i){return this.textureUtils.copyTextureToBuffer(e,t,s,r,n,i)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new Ev(e,t)}createProgram(e){const t=this.gl,{stage:s,code:r}=e,n="fragment"===s?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(n,r),t.compileShader(n),this.set(e,{shaderGPU:n})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(e,t){const s=this.gl,r=e.pipeline,{fragmentProgram:n,vertexProgram:i}=r,o=s.createProgram(),a=this.get(n).shaderGPU,u=this.get(i).shaderGPU;if(s.attachShader(o,a),s.attachShader(o,u),s.linkProgram(o),this.set(r,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const n=new Promise((t=>{const n=this.parallel,i=()=>{s.getProgramParameter(o,n.COMPLETION_STATUS_KHR)?(this._completeCompile(e,r),t()):requestAnimationFrame(i)};i()}));t.push(n)}else this._completeCompile(e,r)}_handleSource(e,t){const s=e.split("\n"),r=[],n=Math.max(t-6,0),i=Math.min(t+6,s.length);for(let e=n;e<i;e++){const n=e+1;r.push(`${n===t?">":" "} ${n}: ${s[e]}`)}return r.join("\n")}_getShaderErrors(e,t,s){const r=e.getShaderParameter(t,e.COMPILE_STATUS),n=e.getShaderInfoLog(t).trim();if(r&&""===n)return"";const i=/ERROR: 0:(\d+)/.exec(n);if(i){const r=parseInt(i[1]);return s.toUpperCase()+"\n\n"+n+"\n\n"+this._handleSource(e.getShaderSource(t),r)}return n}_logProgramError(e,t,s){if(this.renderer.debug.checkShaderErrors){const r=this.gl,n=r.getProgramInfoLog(e).trim();if(!1===r.getProgramParameter(e,r.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(r,e,s,t);else{const i=this._getShaderErrors(r,s,"vertex"),o=this._getShaderErrors(r,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(e,r.VALIDATE_STATUS)+"\n\nProgram Info Log: "+n+"\n"+i+"\n"+o)}else""!==n&&console.warn("THREE.WebGLProgram: Program Info Log:",n)}}_completeCompile(e,t){const{state:s,gl:r}=this,n=this.get(t),{programGPU:i,fragmentShader:o,vertexShader:a}=n;!1===r.getProgramParameter(i,r.LINK_STATUS)&&this._logProgramError(i,o,a),s.useProgram(i);const u=e.getBindings();this._setupBindings(u,i),this.set(t,{programGPU:i})}createComputePipeline(e,t){const{state:s,gl:r}=this,n={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(n);const{computeProgram:i}=e,o=r.createProgram(),a=this.get(n).shaderGPU,u=this.get(i).shaderGPU,l=i.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}r.attachShader(o,a),r.attachShader(o,u),r.transformFeedbackVaryings(o,d,r.SEPARATE_ATTRIBS),r.linkProgram(o),!1===r.getProgramParameter(o,r.LINK_STATUS)&&this._logProgramError(o,a,u),s.useProgram(o),this._setupBindings(t,o);const h=i.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,r.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,r.ARRAY_BUFFER);const s=this.get(t);g.push(s)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,s=0;for(const r of t){this.set(r,{textures:s,uniformBuffers:e});for(const t of r.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&s++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,s=this.get(e);let r=s.uniformBuffers,n=s.textures;for(const s of e.bindings)if(s.isUniformsGroup||s.isUniformBuffer){const e=s.buffer,n=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,n),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(s,{index:r++,bufferGPU:n})}else if(s.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(s.texture);this.set(s,{index:n++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const s=this.get(e).bufferGPU,r=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,s),t.bufferData(t.UNIFORM_BUFFER,r,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){}hasFeature(e){const t=Object.keys(Kv).filter((t=>Kv[t]===e)),s=this.extensions;for(let e=0;e<t.length;e++)if(s.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,s,r,n){this.textureUtils.copyTextureToTexture(e,t,s,r,n)}copyFramebufferToTexture(e,t,s){this.textureUtils.copyFramebufferToTexture(e,t,s)}_setFramebuffer(e){const{gl:t,state:s}=this;let r=null;if(null!==e.textures){const n=e.renderTarget,i=this.get(n),{samples:o,depthBuffer:a,stencilBuffer:u}=n,l=!0===n.isWebGLCubeRenderTarget;let d=i.msaaFrameBuffer,c=i.depthRenderbuffer;const h=am(e);let p;if(l?(i.cubeFramebuffers||(i.cubeFramebuffers={}),p=i.cubeFramebuffers[h]):(i.framebuffers||(i.framebuffers={}),p=i.framebuffers[h]),void 0===p){p=t.createFramebuffer(),s.bindFramebuffer(t.FRAMEBUFFER,p);const r=e.textures;if(l){i.cubeFramebuffers[h]=p;const{textureGPU:e}=this.get(r[0]),s=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+s,e,0)}else{i.framebuffers[h]=p;for(let s=0;s<r.length;s++){const n=r[s],i=this.get(n);i.renderTarget=e.renderTarget,i.cacheKey=h;const o=t.COLOR_ATTACHMENT0+s;t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,i.textureGPU,0)}s.drawBuffers(e,p)}if(null!==e.depthTexture){const s=this.get(e.depthTexture),r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.renderTarget=e.renderTarget,s.cacheKey=h,t.framebufferTexture2D(t.FRAMEBUFFER,r,t.TEXTURE_2D,s.textureGPU,0)}}if(o>0){if(void 0===d){const r=[];d=t.createFramebuffer(),s.bindFramebuffer(t.FRAMEBUFFER,d);const n=[],l=e.textures;for(let s=0;s<l.length;s++){if(n[s]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,n[s]),r.push(t.COLOR_ATTACHMENT0+s),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.push(e)}const i=e.textures[s],l=this.get(i);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+s,t.RENDERBUFFER,n[s])}if(i.msaaFrameBuffer=d,i.msaaRenderbuffers=n,void 0===c){c=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(c,e),i.depthRenderbuffer=c;const s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.push(s)}i.invalidationArray=r}r=i.msaaFrameBuffer}else r=p}s.bindFramebuffer(t.FRAMEBUFFER,r)}_getVaoKey(e,t){let s=[];if(null!==e){s+=":"+this.get(e).id}for(let e=0;e<t.length;e++){s+=":"+this.get(t[e]).id}return s}_createVao(e,t){const{gl:s}=this,r=s.createVertexArray();let n="",i=!0;if(s.bindVertexArray(r),null!==e){const t=this.get(e);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,t.bufferGPU),n+=":"+t.id}for(let e=0;e<t.length;e++){const r=t[e],o=this.get(r);let a,u;n+=":"+o.id,s.bindBuffer(s.ARRAY_BUFFER,o.bufferGPU),s.enableVertexAttribArray(e),(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&(i=!1),!0===r.isInterleavedBufferAttribute?(a=r.data.stride*o.bytesPerElement,u=r.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?s.vertexAttribIPointer(e,r.itemSize,o.type,a,u):s.vertexAttribPointer(e,r.itemSize,o.type,r.normalized,a,u),r.isInstancedBufferAttribute&&!r.isInterleavedBufferAttribute?s.vertexAttribDivisor(e,r.meshPerAttribute):r.isInterleavedBufferAttribute&&r.data.isInstancedInterleavedBuffer&&s.vertexAttribDivisor(e,r.data.meshPerAttribute)}return s.bindBuffer(s.ARRAY_BUFFER,null),this.vaoCache[n]=r,{vaoGPU:r,staticVao:i}}_getTransformFeedback(e){let t="";for(let s=0;s<e.length;s++)t+=":"+e[s].id;let s=this.transformFeedbackCache[t];if(void 0!==s)return s;const{gl:r}=this;s=r.createTransformFeedback(),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,s);for(let t=0;t<e.length;t++){const s=e[t];r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,t,s.transformBuffer)}return r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=s,s}_setupBindings(e,t){const s=this.gl;for(const r of e)for(const e of r.bindings){const r=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const n=s.getUniformBlockIndex(t,e.name);s.uniformBlockBinding(t,n,r)}else if(e.isSampledTexture){const n=s.getUniformLocation(t,e.name);s.uniform1i(n,r)}}}_bindUniforms(e){const{gl:t,state:s}=this;for(const r of e)for(const e of r.bindings){const r=this.get(e),n=r.index;e.isUniformsGroup||e.isUniformBuffer?s.bindBufferBase(t.UNIFORM_BUFFER,n,r.bufferGPU):e.isSampledTexture&&s.bindTexture(r.glTextureType,r.textureGPU,t.TEXTURE0+n)}}dispose(){this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}class Qv extends cv{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class Zv extends Qv{constructor(e,t,s){super(e,t?t.value:null),this.textureNode=t,this.groupNode=s}update(){this.texture=this.textureNode.value}}class Jv extends hv{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let eS=0;class tS extends Jv{constructor(e,t){super("StorageBuffer_"+eS++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:ky,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class sS extends Lg{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:cy}),this.flipYSampler=e.createSampler({minFilter:hy}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:$f,stripIndexFormat:oy},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:$f,stripIndexFormat:oy},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,s=0){const r=t.format,{width:n,height:i}=t.size,o=this.getTransferPipeline(r),a=this.getFlipYPipeline(r),u=this.device.createTexture({size:{width:n,height:i,depthOrArrayLayers:1},format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Zy,baseArrayLayer:s}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:Zy,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,s)=>{const r=e.getBindGroupLayout(0),n=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),i=c.beginRenderPass({colorAttachments:[{view:s,loadOp:ey,storeOp:Zf,clearValue:[0,0,0,0]}]});i.setPipeline(e),i.setBindGroup(0,n),i.draw(4,1,0,0),i.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,s=0){const r=this.get(e);void 0===r.useCount&&(r.useCount=0,r.layers=[]);const n=r.layers[s]||this._mipmapCreateBundles(e,t,s),i=this.device.createCommandEncoder({});this._mipmapRunBundles(i,n),this.device.queue.submit([i.finish()]),0!==r.useCount&&(r.layers[s]=n),r.useCount++}_mipmapCreateBundles(e,t,s){const r=this.getTransferPipeline(t.format),n=r.getBindGroupLayout(0);let i=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Zy,baseArrayLayer:s});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:n,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:i}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:Zy,baseArrayLayer:s}),d={colorAttachments:[{view:l,loadOp:ey,storeOp:Zf,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(r),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),i=l}return o}_mipmapRunBundles(e,t){const s=t.length;for(let r=0;r<s;r++){const s=t[r],n=e.beginRenderPass(s.passDescriptor);n.executeBundles(s.renderBundles),n.end()}}}const rS={[gs]:"never",[Ae]:"less",[ys]:"equal",[fs]:"less-equal",[xs]:"greater",[bs]:"greater-equal",[ms]:"always",[Ts]:"not-equal"},nS=[0,1,3,2,4,5];class iS{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new B,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,s=t.device,r=t.get(e),n={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};n.magFilter===cy&&n.minFilter===cy&&n.mipmapFilter===cy&&(n.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(n.compare=rS[e.compareFunction]),r.sampler=s.createSampler(n)}createDefaultTexture(e){let t;const s=oS(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(s):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(s),this.backend.get(e).texture=t}createTexture(e,t={}){const s=this.backend,r=s.get(e);if(r.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:n,height:i,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||oS(e,s.device);r.format=l;let d=void 0!==t.sampleCount?t.sampleCount:1;d=s.utils.getSampleCount(d);const c=e.isRenderTargetTexture&&!e.isMultisampleRenderTargetTexture?1:d;let h=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(h|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(h|=GPUTextureUsage.RENDER_ATTACHMENT);const p={label:e.name,size:{width:n,height:i,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:h};if(e.isVideoTexture){const t=e.source.data,s=new VideoFrame(t);p.size.width=s.displayWidth,p.size.height=s.displayHeight,s.close(),r.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);r.texture=s.device.createTexture(p)}if(e.isRenderTargetTexture&&d>1&&!e.isMultisampleRenderTargetTexture){const e=Object.assign({},p);e.label=e.label+"-msaa",e.sampleCount=d,r.msaaTexture=s.device.createTexture(e)}r.initialized=!0,r.textureDescriptorGPU=p}destroyTexture(e){const t=this.backend,s=t.get(e);s.texture.destroy(),void 0!==s.msaaTexture&&s.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const s=e.image.depth||1;for(let e=0;e<s;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:s}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:s,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const s=this.backend,{width:r,height:n}=s.getDrawingBufferSize(),i=this.depthTexture,o=s.get(i).texture;let a,u;if(t?(a=de,u=he):e&&(a=ce,u=f),void 0!==o){if(i.image.width===r&&i.image.height===n&&i.format===a&&i.type===u)return o;this.destroyTexture(i)}return i.name="depthBuffer",i.format=a,i.type=u,i.image.width=r,i.image.height=n,this.createTexture(i,{sampleCount:s.utils.getSampleCount(s.renderer.samples),width:r,height:n}),s.get(i).texture}updateTexture(e,t){const s=this.backend.get(e),{textureDescriptorGPU:r}=s;if(!e.isRenderTargetTexture&&void 0!==r){if(e.isDataTexture)this._copyBufferToTexture(t.image,s.texture,r,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let n=0;n<t.image.depth;n++)this._copyBufferToTexture(t.image,s.texture,r,n,e.flipY,n);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,s.texture,r);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,s.texture,r,e.flipY);else if(e.isVideoTexture){const t=e.source.data;s.externalTexture=t}else this._copyImageToTexture(t.image,s.texture,r,0,e.flipY);s.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,s,r,n,i){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=r*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:r*n*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:s,z:i}},{buffer:h,bytesPerRow:c},{width:r,height:n});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const s=new ee;s.minFilter=hs,s.magFilter=hs,this.createTexture(s,{width:1,height:1,format:e}),this.defaultTexture[e]=t=s}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const s=new W;s.minFilter=hs,s.magFilter=hs,this.createTexture(s,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=s}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,s,r){for(let n=0;n<6;n++){const i=e[n],o=!0===r?nS[n]:n;i.isDataTexture?this._copyBufferToTexture(i.image,t,s,o,r):this._copyImageToTexture(i,t,s,o,r)}}_copyImageToTexture(e,t,s,r,n){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:r}},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===n&&this._flipY(t,s,r)}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new sS(this.backend.device)),e}_generateMipmaps(e,t,s=0){this._getPassUtils().generateMipmaps(e,t,s)}_flipY(e,t,s=0){this._getPassUtils().flipY(e,t,s)}_copyBufferToTexture(e,t,s,r,n,i=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(s.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:r}},a,{offset:e.width*e.height*u*i,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===n&&this._flipY(t,s,r)}_copyCompressedBufferToTexture(e,t,s){const r=this.backend.device,n=this._getBlockData(s.format),i=s.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=i?s.size.depthOrArrayLayers:1,c=Math.ceil(u/n.width)*n.byteLength,h=c*Math.ceil(l/n.height);for(let e=0;e<d;e++)r.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/n.height)},{width:Math.ceil(u/n.width)*n.width,height:Math.ceil(l/n.height)*n.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===ay.BC1RGBAUnorm||e===ay.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===ay.BC2RGBAUnorm||e===ay.BC2RGBAUnormSRGB||e===ay.BC3RGBAUnorm||e===ay.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===ay.BC4RUnorm||e===ay.BC4RSNorm?{byteLength:8,width:4,height:4}:e===ay.BC5RGUnorm||e===ay.BC5RGSnorm||e===ay.BC6HRGBUFloat||e===ay.BC6HRGBFloat||e===ay.BC7RGBAUnorm||e===ay.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===ay.ETC2RGB8Unorm||e===ay.ETC2RGB8UnormSRGB||e===ay.ETC2RGB8A1Unorm||e===ay.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===ay.ETC2RGBA8Unorm||e===ay.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===ay.EACR11Unorm||e===ay.EACR11Snorm?{byteLength:8,width:4,height:4}:e===ay.EACRG11Unorm||e===ay.EACRG11Snorm||e===ay.ASTC4x4Unorm||e===ay.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===ay.ASTC5x4Unorm||e===ay.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===ay.ASTC5x5Unorm||e===ay.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===ay.ASTC6x5Unorm||e===ay.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===ay.ASTC6x6Unorm||e===ay.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===ay.ASTC8x5Unorm||e===ay.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===ay.ASTC8x6Unorm||e===ay.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===ay.ASTC8x8Unorm||e===ay.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===ay.ASTC10x5Unorm||e===ay.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===ay.ASTC10x6Unorm||e===ay.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===ay.ASTC10x8Unorm||e===ay.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===ay.ASTC10x10Unorm||e===ay.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===ay.ASTC12x10Unorm||e===ay.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===ay.ASTC12x12Unorm||e===ay.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=uy;return e===ls?t=ly:e===cs&&(t=dy),t}_convertFilterMode(e){let t=cy;return e!==hs&&e!==ps&&e!==Pe||(t=hy),t}_getBytesPerTexel(e){return e===ay.R8Unorm||e===ay.R8Snorm||e===ay.R8Uint||e===ay.R8Sint?1:e===ay.R16Uint||e===ay.R16Sint||e===ay.R16Float||e===ay.RG8Unorm||e===ay.RG8Snorm||e===ay.RG8Uint||e===ay.RG8Sint?2:e===ay.R32Uint||e===ay.R32Sint||e===ay.R32Float||e===ay.RG16Uint||e===ay.RG16Sint||e===ay.RG16Float||e===ay.RGBA8Unorm||e===ay.RGBA8UnormSRGB||e===ay.RGBA8Snorm||e===ay.RGBA8Uint||e===ay.RGBA8Sint||e===ay.BGRA8Unorm||e===ay.BGRA8UnormSRGB||e===ay.RGB9E5UFloat||e===ay.RGB10A2Unorm||e===ay.RG11B10UFloat||e===ay.Depth32Float||e===ay.Depth24Plus||e===ay.Depth24PlusStencil8||e===ay.Depth32FloatStencil8?4:e===ay.RG32Uint||e===ay.RG32Sint||e===ay.RG32Float||e===ay.RGBA16Uint||e===ay.RGBA16Sint||e===ay.RGBA16Float?8:e===ay.RGBA32Uint||e===ay.RGBA32Sint||e===ay.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===ay.R8Uint?Uint8Array:e===ay.R8Sint?Int8Array:e===ay.R8Unorm?Uint8Array:e===ay.R8Snorm?Int8Array:e===ay.RG8Uint?Uint8Array:e===ay.RG8Sint?Int8Array:e===ay.RG8Unorm?Uint8Array:e===ay.RG8Snorm?Int8Array:e===ay.RGBA8Uint?Uint8Array:e===ay.RGBA8Sint?Int8Array:e===ay.RGBA8Unorm?Uint8Array:e===ay.RGBA8Snorm?Int8Array:e===ay.R16Uint?Uint16Array:e===ay.R16Sint?Int16Array:e===ay.RG16Uint?Uint16Array:e===ay.RG16Sint?Int16Array:e===ay.RGBA16Uint?Uint16Array:e===ay.RGBA16Sint?Int16Array:e===ay.R16Float||e===ay.RG16Float||e===ay.RGBA16Float?Uint16Array:e===ay.R32Uint?Uint32Array:e===ay.R32Sint?Int32Array:e===ay.R32Float?Float32Array:e===ay.RG32Uint?Uint32Array:e===ay.RG32Sint?Int32Array:e===ay.RG32Float?Float32Array:e===ay.RGBA32Uint?Uint32Array:e===ay.RGBA32Sint?Int32Array:e===ay.RGBA32Float?Float32Array:e===ay.BGRA8Unorm||e===ay.BGRA8UnormSRGB?Uint8Array:e===ay.RGB10A2Unorm||e===ay.RGB9E5UFloat||e===ay.RG11B10UFloat?Uint32Array:e===ay.Depth32Float?Float32Array:e===ay.Depth24Plus||e===ay.Depth24PlusStencil8?Uint32Array:e===ay.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?Qy:Yy,t}}function oS(e,t=null){const s=e.format,r=e.type,n=e.colorSpace;let i;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(s){case Pt:i=n===De?ay.BC1RGBAUnormSRGB:ay.BC1RGBAUnorm;break;case It:i=n===De?ay.BC2RGBAUnormSRGB:ay.BC2RGBAUnorm;break;case Lt:i=n===De?ay.BC3RGBAUnormSRGB:ay.BC3RGBAUnorm;break;case zt:i=n===De?ay.ETC2RGB8UnormSRGB:ay.ETC2RGB8Unorm;break;case $t:i=n===De?ay.ETC2RGBA8UnormSRGB:ay.ETC2RGBA8Unorm;break;case Ht:i=n===De?ay.ASTC4x4UnormSRGB:ay.ASTC4x4Unorm;break;case Wt:i=n===De?ay.ASTC5x4UnormSRGB:ay.ASTC5x4Unorm;break;case jt:i=n===De?ay.ASTC5x5UnormSRGB:ay.ASTC5x5Unorm;break;case qt:i=n===De?ay.ASTC6x5UnormSRGB:ay.ASTC6x5Unorm;break;case Kt:i=n===De?ay.ASTC6x6UnormSRGB:ay.ASTC6x6Unorm;break;case Xt:i=n===De?ay.ASTC8x5UnormSRGB:ay.ASTC8x5Unorm;break;case Yt:i=n===De?ay.ASTC8x6UnormSRGB:ay.ASTC8x6Unorm;break;case Qt:i=n===De?ay.ASTC8x8UnormSRGB:ay.ASTC8x8Unorm;break;case Zt:i=n===De?ay.ASTC10x5UnormSRGB:ay.ASTC10x5Unorm;break;case Jt:i=n===De?ay.ASTC10x6UnormSRGB:ay.ASTC10x6Unorm;break;case es:i=n===De?ay.ASTC10x8UnormSRGB:ay.ASTC10x8Unorm;break;case ts:i=n===De?ay.ASTC10x10UnormSRGB:ay.ASTC10x10Unorm;break;case ss:i=n===De?ay.ASTC12x10UnormSRGB:ay.ASTC12x10Unorm;break;case rs:i=n===De?ay.ASTC12x12UnormSRGB:ay.ASTC12x12Unorm;break;case Ue:i=n===De?ay.RGBA8UnormSRGB:ay.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",s)}else switch(s){case Ue:switch(r){case Xe:i=ay.RGBA8Snorm;break;case Ye:i=ay.RGBA16Sint;break;case Ke:i=ay.RGBA16Uint;break;case f:i=ay.RGBA32Uint;break;case y:i=ay.RGBA32Sint;break;case pe:i=n===De?ay.RGBA8UnormSRGB:ay.RGBA8Unorm;break;case ye:i=ay.RGBA16Float;break;case E:i=ay.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",r)}break;case je:if(r===wt)i=ay.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",r);break;case $e:switch(r){case Xe:i=ay.R8Snorm;break;case Ye:i=ay.R16Sint;break;case Ke:i=ay.R16Uint;break;case f:i=ay.R32Uint;break;case y:i=ay.R32Sint;break;case pe:i=ay.R8Unorm;break;case ye:i=ay.R16Float;break;case E:i=ay.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",r)}break;case Ce:switch(r){case Xe:i=ay.RG8Snorm;break;case Ye:i=ay.RG16Sint;break;case Ke:i=ay.RG16Uint;break;case f:i=ay.RG32Uint;break;case y:i=ay.RG32Sint;break;case pe:i=ay.RG8Unorm;break;case ye:i=ay.RG16Float;break;case E:i=ay.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",r)}break;case ce:switch(r){case Ke:i=ay.Depth16Unorm;break;case f:i=ay.Depth24Plus;break;case E:i=ay.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",r)}break;case de:switch(r){case he:i=ay.Depth24PlusStencil8;break;case E:t&&!1===t.features.has(ib.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),i=ay.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",r)}break;case ze:switch(r){case y:i=ay.R32Sint;break;case f:i=ay.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",r)}break;case He:switch(r){case y:i=ay.RG32Sint;break;case f:i=ay.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",r)}break;case qe:switch(r){case y:i=ay.RGBA32Sint;break;case f:i=ay.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",r)}break;default:console.error("WebGPURenderer: Unsupported texture format.",s)}return i}const aS=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,uS=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,lS={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class dS extends $N{constructor(e){const{type:t,inputs:s,name:r,inputsCode:n,blockCode:i,outputType:o}=(e=>{const t=(e=e.trim()).match(aS);if(null!==t&&4===t.length){const s=t[2],r=[];let n=null;for(;null!==(n=uS.exec(s));)r.push({name:n[1],type:n[2]});const i=[];for(let e=0;e<r.length;e++){const{name:t,type:s}=r[e];let n=s;n.startsWith("ptr")?n="pointer":(n.startsWith("texture")&&(n=s.split("<")[0]),n=lS[n]),i.push(new BN(n,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:lS[a]||a,inputs:i,name:u,inputsCode:s,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,s,r),this.inputsCode=n,this.blockCode=i,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class cS extends zN{parseFunction(e){return new dS(e)}}const hS=self.GPUShaderStage,pS={[ls]:"repeat",[ds]:"clamp",[cs]:"mirror"},gS={vertex:hS?hS.VERTEX:1,fragment:hS?hS.FRAGMENT:2,compute:hS?hS.COMPUTE:4},mS={instance:!0,swizzleAssign:!1,storageBuffer:!0},fS={"^^":"tsl_xor"},yS={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},bS={},xS={tsl_xor:new ex("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new ex("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new ex("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new ex("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new ex("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new ex("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new ex("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new ex("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new ex("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new ex("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new ex("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new ex("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),repeatWrapping:new ex("\nfn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {\n\n\tlet uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );\n\n\treturn ( ( uvScaled % dimension ) + dimension ) % dimension;\n\n}\n"),biquadraticTexture:new ex("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : i32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},TS={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(xS.pow_float=new ex("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),xS.pow_vec2=new ex("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[xS.pow_float]),xS.pow_vec3=new ex("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[xS.pow_float]),xS.pow_vec4=new ex("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[xS.pow_float]),TS.pow_float="tsl_pow_float",TS.pow_vec2="tsl_pow_vec2",TS.pow_vec3="tsl_pow_vec3",TS.pow_vec4="tsl_pow_vec4");let _S="";!0!==/Firefox|Deno/g.test(navigator.userAgent)&&(_S+="diagnostic( off, derivative_uniformity );\n");class NS extends wN{constructor(e,t){super(e,t,new cS),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==m}_generateTextureSample(e,t,s,r,n=this.shaderStage){return"fragment"===n?r?`textureSample( ${t}, ${t}_sampler, ${s}, ${r} )`:`textureSample( ${t}, ${t}_sampler, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,s):this.generateTextureLod(e,t,s,"0")}_generateVideoSample(e,t,s=this.shaderStage){if("fragment"===s)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${s} shader.`)}_generateTextureSampleLevel(e,t,s,r,n,i=this.shaderStage){return"fragment"===i&&!1===this.isUnfilterable(e)?`textureSampleLevel( ${t}, ${t}_sampler, ${s}, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,s,r):this.generateTextureLod(e,t,s,r)}generateWrapFunction(e){const t=`tsl_coord_${pS[e.wrapS]}S_${pS[e.wrapT]}T`;let s=bS[t];if(void 0===s){const r=[];let n=`fn ${t}( coord : vec2f ) -> vec2f {\n\n\treturn vec2f(\n`;const i=(e,t)=>{e===ls?(r.push(xS.repeatWrapping_float),n+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===ds?(r.push(xS.clampWrapping_float),n+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===cs?(r.push(xS.mirrorWrapping_float),n+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(n+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};i(e.wrapS,"x"),n+=",\n",i(e.wrapT,"y"),n+="\n\t);\n\n}\n",bS[t]=s=new ex(n,r)}return s.build(this),t}generateTextureDimension(e,t,s){const r=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===r.dimensionsSnippet&&(r.dimensionsSnippet={});let n=r.dimensionsSnippet[s];return void 0===r.dimensionsSnippet[s]&&(n=`textureDimension_${e.id}_${s}`,this.addLineFlowCode(`let ${n} = textureDimensions( ${t}, i32( ${s} ) );`),r.dimensionsSnippet[s]=n),n}generateFilteredTexture(e,t,s,r="0"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${s} ), ${this.generateTextureDimension(e,t,r)}, i32( ${r} ) )`}generateTextureLod(e,t,s,r="0"){this._include("repeatWrapping");return`textureLoad( ${t}, tsl_repeatWrapping( ${s}, ${!0===e.isMultisampleRenderTargetTexture?`textureDimensions( ${t} )`:`textureDimensions( ${t}, 0 )`} ), i32( ${r} ) )`}generateTextureLoad(e,t,s,r,n="0u"){return r?`textureLoad( ${t}, ${s}, ${r}, ${n} )`:`textureLoad( ${t}, ${s}, ${n} )`}generateTextureStore(e,t,s,r){return`textureStore( ${t}, ${s}, ${r} )`}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===E||!0===e.isMultisampleRenderTargetTexture}generateTexture(e,t,s,r,n=this.shaderStage){let i=null;return i=!0===e.isVideoTexture?this._generateVideoSample(t,s,n):this.isUnfilterable(e)?this.generateTextureLod(e,t,s,"0",r,n):this._generateTextureSample(e,t,s,r,n),i}generateTextureGrad(e,t,s,r,n,i=this.shaderStage){if("fragment"===i)return`textureSampleGrad( ${t}, ${t}_sampler, ${s},  ${r[0]}, ${r[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${i} shader.`)}generateTextureCompare(e,t,s,r,n,i=this.shaderStage){if("fragment"===i)return`textureSampleCompare( ${t}, ${t}_sampler, ${s}, ${r} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${i} shader.`)}generateTextureLevel(e,t,s,r,n,i=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,s,i):this._generateTextureSampleLevel(e,t,s,r,n,i),o}generateTextureBias(e,t,s,r,n,i=this.shaderStage){if("fragment"===i)return`textureSampleBias( ${t}, ${t}_sampler, ${s}, ${r} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${i} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,s=e.type;return"texture"===s||"cubeTexture"===s||"storageTexture"===s||"texture3D"===s?t:"buffer"===s||"storageBuffer"===s||"indirectStorageBuffer"===s?`NodeBuffer_${e.id}.${t}`:e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}_getUniformGroupCount(e){return Object.keys(this.uniforms[e]).length}getFunctionOperator(e){const t=fS[e];return void 0!==t?(this._include(t),t):null}getStorageAccess(e){if(e.isStorageTextureNode)switch(e.access){case Hy:return"read";case $y:return"write";default:return"read_write"}else switch(e.access){case ky:return"read_write";case zy:return"read";default:return"write"}}getUniformFromNode(e,t,s,r=null){const n=super.getUniformFromNode(e,t,s,r),i=this.getDataFromNode(e,s,this.globalCache);if(void 0===i.uniformGPU){let r;const o=e.groupNode,a=o.name,u=this.getBindGroupArray(a,s);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let i=null;if("texture"===t||"storageTexture"===t?i=new _v(n.name,n.node,o,e.access?e.access:null):"cubeTexture"===t?i=new Nv(n.name,n.node,o,e.access?e.access:null):"texture3D"===t&&(i=new vv(n.name,n.node,o,e.access?e.access:null)),i.store=!0===e.isStorageTextureNode,i.setVisibility(gS[s]),"fragment"===s&&!1===this.isUnfilterable(e.value)&&!1===i.store){const e=new Zv(`${n.name}_sampler`,n.node,o);e.setVisibility(gS[s]),u.push(e,i),r=[e,i]}else u.push(i),r=[i]}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const n=new("buffer"===t?mv:tS)(e,o);n.setVisibility(gS[s]),u.push(n),r=n}else{const e=this.uniformGroups[s]||(this.uniformGroups[s]={});let i=e[a];void 0===i&&(i=new bv(a,o),i.setVisibility(gS[s]),e[a]=i,u.push(i)),r=this.getNodeUniform(n,t),i.addUniform(r)}i.uniformGPU=r}return n}getBuiltin(e,t,s,r=this.shaderStage){const n=this.builtins[r]||(this.builtins[r]=new Map);return!1===n.has(e)&&n.set(e,{name:e,property:t,type:s}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,s=this.flowShaderNode(e),r=[];for(const e of t.inputs)r.push(e.name+" : "+this.getType(e.type));let n=`fn ${t.name}( ${r.join(", ")} ) -> ${this.getType(t.type)} {\n${s.vars}\n${s.code}\n`;return s.result&&(n+=`\treturn ${s.result};\n`),n+="\n}\n",n}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],s=this.directives[e];if(void 0!==s)for(const e of s)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],s=this.builtins[e];if(void 0!==s)for(const{name:e,property:r,type:n}of s.values())t.push(`@builtin( ${e} ) ${r} : ${n}`);return t.join(",\n\t")}getScopedArray(e,t,s,r){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:s,bufferCount:r}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:s,bufferType:r,bufferCount:n}of this.scopedArrays.values()){const i=this.getType(r);t.push(`var<${s}> ${e}: array< ${i}, ${n} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const s=this.getAttributesArray();for(let e=0,r=s.length;e<r;e++){const r=s[e],n=r.name,i=this.getType(r.type);t.push(`@location( ${e} ) ${n} : ${i}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[],s=e.getMemberTypes();for(let e=0;e<s.length;e++){const r=s[e];t.push(`\t@location( ${e} ) m${e} : ${r}<f32>`)}const r=this.getBuiltins("output");return r&&t.push("\t"+r),t.join(",\n")}getStructs(e){const t=[],s=this.structs[e];for(let e=0,r=s.length;e<r;e++){const r=s[e],n=r.name;let i=`struct ${n} {\n`;i+=this.getStructMembers(r),i+="\n}",t.push(i),t.push(`\nvar<private> output : ${n};\n\n`)}return t.join("\n\n")}getVar(e,t){return`var ${t} : ${this.getType(e)}`}getVars(e){const t=[],s=this.vars[e];if(void 0!==s)for(const e of s)t.push(`\t${this.getVar(e.type,e.name)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const s=this.varyings,r=this.vars[e];for(let n=0;n<s.length;n++){const i=s[n];if(i.needsInterpolation){let e=`@location( ${n} )`;/^(int|uint|ivec|uvec)/.test(i.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${i.name} : ${this.getType(i.type)}`)}else"vertex"===e&&!1===r.includes(i)&&r.push(i)}}const s=this.getBuiltins(e);s&&t.push(s);const r=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+r):r}getUniforms(e){const t=this.uniforms[e],s=[],r=[],n=[],i={};for(const n of t){const t=n.groupNode.name,o=this.bindingsIndexes[t];if("texture"===n.type||"cubeTexture"===n.type||"storageTexture"===n.type||"texture3D"===n.type){const t=n.node.value;let r;"fragment"===e&&!1===this.isUnfilterable(t)&&!0!==n.node.isStorageTextureNode&&(!0===t.isDepthTexture&&null!==t.compareFunction?s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${n.name}_sampler : sampler_comparison;`):s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${n.name}_sampler : sampler;`));let i="";if(!0===t.isMultisampleRenderTargetTexture&&(i="_multisampled"),!0===t.isCubeTexture)r="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)r="texture_2d_array<f32>";else if(!0===t.isDepthTexture)r=`texture_depth${i}_2d`;else if(!0===t.isVideoTexture)r="texture_external";else if(!0===t.isData3DTexture)r="texture_3d<f32>";else if(!0===n.node.isStorageTextureNode){r=`texture_storage_2d<${oS(t)}, ${this.getStorageAccess(n.node)}>`}else{r=`texture${i}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${n.name} : ${r};`)}else if("buffer"===n.type||"storageBuffer"===n.type||"indirectStorageBuffer"===n.type){const e=n.node,t=this.getType(e.bufferType),s=e.bufferCount,i=s>0&&"buffer"===n.type?", "+s:"",a=e.isAtomic?`atomic<${t}>`:`${t}`,u=`\t${n.name} : array< ${a}${i} >\n`,l=e.isStorageBufferNode?`storage, ${this.getStorageAccess(e)}`:"uniform";r.push(this._getWGSLStructBinding("NodeBuffer_"+e.id,u,l,o.binding++,o.group))}else{const e=this.getType(this.getVectorType(n.type)),t=n.groupNode.name;(i[t]||(i[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${n.name} : ${e}`)}}for(const e in i){const t=i[e];n.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=s.join("\n");return o+=r.join("\n"),o+=n.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){const s=e[t];s.uniforms=this.getUniforms(t),s.attributes=this.getAttributes(t),s.varyings=this.getVaryings(t),s.structs=this.getStructs(t),s.vars=this.getVars(t),s.codes=this.getCodes(t),s.directives=this.getDirectives(t),s.scopedArrays=this.getScopedArrays(t);let r="// code\n\n";r+=this.flowCode[t];const n=this.flowNodes[t],i=n[n.length-1],o=i.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of n){const n=this.getFlowData(e),u=e.name;if(u&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${u}\n\t`),r+=`${n.code}\n\t`,e===i&&"compute"!==t)if(r+="// result\n\n\t","vertex"===t)r+=`varyings.Vertex = ${n.result};`;else if("fragment"===t)if(a)s.returnType=o.nodeType,r+=`return ${n.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),s.returnType="OutputStruct",s.structs+=this._getWGSLStruct("OutputStruct",e),s.structs+="\nvar<private> output : OutputStruct;\n\n",r+=`output.color = ${n.result};\n\n\treturn output;`}}s.flow=r}null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):(this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", ")),console.log(this.computeShader))}getMethod(e,t=null){let s;return null!==t&&(s=this._getWGSLMethod(e+"_"+t)),void 0===s&&(s=this._getWGSLMethod(e)),s||e}getType(e){return yS[e]||e}isAvailable(e){let t=mS[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),mS[e]=t),t}_getWGSLMethod(e){return void 0!==xS[e]&&this._include(e),TS[e]}_include(e){const t=xS[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${_S}\n\n// uniforms\n${e.uniforms}\n\n// structs\n${e.structs}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x + id.y * numWorkgroups.x * u32(${t}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,s,r=0,n=0){const i=e+"Struct";return`${this._getWGSLStruct(i,t)}\n@binding( ${r} ) @group( ${n} )\nvar<${s}> ${e} : ${i};`}}class vS{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=ay.Depth24PlusStencil8:e.depth&&(t=ay.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?Of:e.isLineSegments||e.isMesh&&!0===t.wireframe?Gf:e.isLine?kf:e.isMesh?zf:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?ay.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const SS=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),AS=new Map([[Ie,["float16"]]]),RS=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class CS{constructor(e){this.backend=e}createAttribute(e,t){const s=this._getBufferAttribute(e),r=this.backend,n=r.get(s);let i=n.buffer;if(void 0===i){const o=r.device;let a=s.array;if(!1===e.normalized&&(a.constructor===Int16Array||a.constructor===Uint16Array)){const e=new Uint32Array(a.length);for(let t=0;t<a.length;t++)e[t]=a[t];a=e}if(s.array=a,(s.isStorageBufferAttribute||s.isStorageInstancedBufferAttribute)&&3===s.itemSize){a=new a.constructor(4*s.count);for(let e=0;e<s.count;e++)a.set(s.array.subarray(3*e,3*e+3),4*e);s.itemSize=4,s.array=a}const u=a.byteLength+(4-a.byteLength%4)%4;i=o.createBuffer({label:s.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(i.getMappedRange()).set(a),i.unmap(),n.buffer=i}}updateAttribute(e){const t=this._getBufferAttribute(e),s=this.backend,r=s.device,n=s.get(t).buffer,i=t.array,o=t.updateRanges;if(0===o.length)r.queue.writeBuffer(n,0,i,0);else{for(let e=0,t=o.length;e<t;e++){const t=o[e];r.queue.writeBuffer(n,0,i,t.start*i.BYTES_PER_ELEMENT,t.count*i.BYTES_PER_ELEMENT)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),s=new Map;for(let e=0;e<t.length;e++){const r=t[e],n=r.array.BYTES_PER_ELEMENT,i=this._getBufferAttribute(r);let o=s.get(i);if(void 0===o){let e,t;!0===r.isInterleavedBufferAttribute?(e=r.data.stride*n,t=r.data.isInstancedInterleavedBuffer?nb:rb):(e=r.itemSize*n,t=r.isInstancedBufferAttribute?nb:rb),!1!==r.normalized||r.array.constructor!==Int16Array&&r.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},s.set(i,o)}const a=this._getVertexFormat(r),u=!0===r.isInterleavedBufferAttribute?r.offset*n:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(s.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,s=t.device,r=t.get(this._getBufferAttribute(e)).buffer,n=r.size,i=s.createBuffer({label:e.name,size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=s.createCommandEncoder({});o.copyBufferToBuffer(r,0,i,0,n),i.unmap();const a=o.finish();s.queue.submit([a]),await i.mapAsync(GPUMapMode.READ);return i.getMappedRange()}_getVertexFormat(e){const{itemSize:t,normalized:s}=e,r=e.array.constructor,n=e.constructor;let i;if(1==t)i=RS.get(r);else{const e=(AS.get(n)||SS.get(r))[s?1:0];if(e){const s=r.BYTES_PER_ELEMENT*t,n=4*Math.floor((s+3)/4)/r.BYTES_PER_ELEMENT;if(n%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");i=`${e}x${n}`}}return i||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),i}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class ES{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend.device,s=[];let r=0;for(const t of e.bindings){const e={binding:r++,visibility:t.visibility};if(t.isUniformBuffer||t.isStorageBuffer){const s={};t.isStorageBuffer&&(s.type=t.access),e.buffer=s}else if(t.isSampler){const s={};t.texture.isDepthTexture&&null!==t.texture.compareFunction&&(s.type="comparison"),e.sampler=s}else if(t.isSampledTexture&&t.texture.isVideoTexture)e.externalTexture={};else if(t.isSampledTexture&&t.store){const s=this.backend.get(t.texture).texture.format,r=t.access;e.storageTexture={format:s,access:r}}else if(t.isSampledTexture){const s={};if(!0===t.texture.isMultisampleRenderTargetTexture&&(s.multisampled=!0),t.texture.isDepthTexture)s.sampleType=qy;else if(t.texture.isDataTexture||t.texture.isDataArrayTexture||t.texture.isData3DTexture){const e=t.texture.type;e===y?s.sampleType=Ky:e===f?s.sampleType=Xy:e===E&&(this.backend.hasFeature("float32-filterable")?s.sampleType=Wy:s.sampleType=jy)}t.isSampledCubeTexture?s.viewDimension=eb:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?s.viewDimension=Jy:t.isSampledTexture3D&&(s.viewDimension=tb),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${t}".`);s.push(e)}return t.createBindGroupLayout({entries:s})}createBindings(e){const{backend:t,bindGroupLayoutCache:s}=this,r=t.get(e);let n=s.get(e.bindingsReference);void 0===n&&(n=this.createBindingsLayout(e),s.set(e.bindingsReference,n));const i=this.createBindGroup(e,n);r.layout=n,r.group=i}updateBinding(e){const t=this.backend,s=t.device,r=e.buffer,n=t.get(e).buffer;s.queue.writeBuffer(n,0,r,0)}createBindGroup(e,t){const s=this.backend,r=s.device;let n=0;const i=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=s.get(t);if(void 0===e.buffer){const s=t.byteLength,n=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,i=r.createBuffer({label:"bindingBuffer_"+t.name,size:s,usage:n});e.buffer=i}i.push({binding:n,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=s.get(t);if(void 0===e.buffer){const r=t.attribute;e.buffer=s.get(r).buffer}i.push({binding:n,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=s.get(t.texture);i.push({binding:n,resource:e.sampler})}else if(t.isSampledTexture){const e=s.get(t.texture);let o;if(void 0!==e.externalTexture)o=r.importExternalTexture({source:e.externalTexture});else{const s=t.store?1:e.texture.mipLevelCount,r=`view-${e.texture.width}-${e.texture.height}-${s}`;if(o=e[r],void 0===o){const n=sb;let i;i=t.isSampledCubeTexture?eb:t.isSampledTexture3D?tb:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?Jy:Zy,o=e[r]=e.texture.createView({aspect:n,dimension:i,mipLevelCount:s})}}i.push({binding:n,resource:o})}n++}return r.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:i})}}class wS{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:s,material:r,geometry:n,pipeline:i}=e,{vertexProgram:o,fragmentProgram:a}=i,u=this.backend,l=u.device,d=u.utils,c=u.get(i),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===r.transparent&&r.blending!==G&&(g=this._getBlending(r));let m={};!0===r.stencilWrite&&(m={compare:this._getStencilCompare(r),failOp:this._getStencilOperation(r.stencilFail),depthFailOp:this._getStencilOperation(r.stencilZFail),passOp:this._getStencilOperation(r.stencilZPass)});const f=this._getColorWriteMask(r),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const s=d.getTextureFormatGPU(t[e]);y.push({format:s,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const b=u.get(o).module,x=u.get(a).module,T=this._getPrimitiveState(s,n,r),_=this._getDepthCompare(r),N=d.getCurrentDepthStencilFormat(e.context),v=this._getSampleCount(e.context),S={label:`renderPipeline_${r.name||r.type}_${r.id}`,vertex:Object.assign({},b,{buffers:p}),fragment:Object.assign({},x,{targets:y}),primitive:T,multisample:{count:v,alphaToCoverageEnabled:r.alphaToCoverage&&v>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},A={},R=e.context.depth,C=e.context.stencil;if(!0!==R&&!0!==C||(!0===R&&(A.format=N,A.depthWriteEnabled=r.depthWrite,A.depthCompare=_),!0===C&&(A.stencilFront=m,A.stencilBack={},A.stencilReadMask=r.stencilFuncMask,A.stencilWriteMask=r.stencilWriteMask),S.depthStencil=A),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:s,device:r}=t,n=s.getCurrentDepthStencilFormat(e),i={label:"renderBundleEncoder",colorFormats:[s.getCurrentColorFormat(e)],depthStencilFormat:n,sampleCount:this._getSampleCount(e)};return r.createRenderBundleEncoder(i)}createComputePipeline(e,t){const s=this.backend,r=s.device,n=s.get(e.computeProgram).module,i=s.get(e),o=[];for(const e of t){const t=s.get(e);o.push(t.layout)}i.pipeline=r.createComputePipeline({compute:n,layout:r.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,s;const r=e.blending,n=e.blendSrc,i=e.blendDst,o=e.blendEquation;if(r===mt){const r=null!==e.blendSrcAlpha?e.blendSrcAlpha:n,a=null!==e.blendDstAlpha?e.blendDstAlpha:i,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(n),dstFactor:this._getBlendFactor(i),operation:this._getBlendOperation(o)},s={srcFactor:this._getBlendFactor(r),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const n=(e,r,n,i)=>{t={srcFactor:e,dstFactor:r,operation:Ry},s={srcFactor:n,dstFactor:i,operation:Ry}};if(e.premultipliedAlpha)switch(r){case F:n(gy,by,gy,by);break;case bt:n(gy,gy,gy,gy);break;case yt:n(py,fy,py,gy);break;case ft:n(py,my,py,yy)}else switch(r){case F:n(yy,by,gy,by);break;case bt:n(yy,gy,yy,gy);break;case yt:n(py,fy,py,gy);break;case ft:n(py,my,py,my)}}if(void 0!==t&&void 0!==s)return{color:t,alpha:s};console.error("THREE.WebGPURenderer: Invalid blending: ",r)}_getBlendFactor(e){let t;switch(e){case tt:t=py;break;case st:t=gy;break;case rt:t=my;break;case ut:t=fy;break;case nt:t=yy;break;case lt:t=by;break;case ot:t=xy;break;case dt:t=Ty;break;case at:t=_y;break;case ct:t=Ny;break;case it:t=vy;break;case 211:t=Sy;break;case 212:t=Ay;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const s=e.stencilFunc;switch(s){case ws:t=Hf;break;case Es:t=Qf;break;case Cs:t=Wf;break;case Rs:t=qf;break;case As:t=jf;break;case Ss:t=Yf;break;case vs:t=Kf;break;case Ns:t=Xf;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",s)}return t}_getStencilOperation(e){let t;switch(e){case Ds:t=Fy;break;case Ls:t=Py;break;case Is:t=Iy;break;case Ps:t=Ly;break;case Fs:t=Dy;break;case Us:t=Vy;break;case Bs:t=Oy;break;case Ms:t=Gy;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Ze:t=Ry;break;case Je:t=Cy;break;case et:t=Ey;break;case Os:t=wy;break;case Vs:t=My;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,s){const r={},n=this.backend.utils;switch(r.topology=n.getPrimitiveTopology(e,s),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(r.stripIndexFormat=t.index.array instanceof Uint16Array?iy:oy),s.side){case Oe:r.frontFace=ty,r.cullMode=ny;break;case x:r.frontFace=ty,r.cullMode=ry;break;case le:r.frontFace=ty,r.cullMode=sy;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",s.side)}return r}_getColorWriteMask(e){return!0===e.colorWrite?Uy:By}_getDepthCompare(e){let t;if(!1===e.depthTest)t=Qf;else{const s=e.depthFunc;switch(s){case Rt:t=Hf;break;case At:t=Qf;break;case St:t=Wf;break;case vt:t=qf;break;case Nt:t=jf;break;case _t:t=Yf;break;case Tt:t=Kf;break;case xt:t=Xf;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",s)}}return t}}class MS extends Uv{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.trackTimestamp=!0===e.trackTimestamp,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new vS(this),this.attributeUtils=new CS(this),this.bindingUtils=new ES(this),this.pipelineUtils=new wS(this),this.textureUtils=new iS(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let s;if(void 0===t.device){const e={powerPreference:t.powerPreference},r=await navigator.gpu.requestAdapter(e);if(null===r)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const n=Object.values(ib),i=[];for(const e of n)r.features.has(e)&&i.push(e);const o={requiredFeatures:i,requiredLimits:t.requiredLimits};s=await r.requestDevice(o)}else s=t.device;s.lost.then((t=>{const s={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(s)}));const r=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=s,this.context=r;const n=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(ib.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:n}),this.updateSize()}get coordinateSystem(){return N}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const s=e.colorAttachments[0];this.renderer.samples>0?s.view=this.colorBuffer.createView():s.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e){const t=e.renderTarget,s=this.get(t);let r=s.descriptors;if(void 0===r||s.width!==t.width||s.height!==t.height||s.activeMipmapLevel!==t.activeMipmapLevel||s.samples!==t.samples){r={},s.descriptors=r;const e=()=>{t.removeEventListener("dispose",e),this.delete(t)};t.addEventListener("dispose",e)}const n=e.getCacheKey();let i=r[n];if(void 0===i){const o=e.textures,a=[];for(let t=0;t<o.length;t++){const s=this.get(o[t]),r=s.texture.createView({baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,dimension:Zy});let n,i;void 0!==s.msaaTexture?(n=s.msaaTexture.createView(),i=r):(n=r,i=void 0),a.push({view:n,resolveTarget:i,loadOp:Jf,storeOp:Zf})}if(i={colorAttachments:a},e.depth){const t={view:this.get(e.depthTexture).texture.createView()};i.depthStencilAttachment=t}r[n]=i,s.width=t.width,s.height=t.height,s.samples=t.samples,s.activeMipmapLevel=t.activeMipmapLevel}return i}beginRender(e){const t=this.get(e),s=this.device,r=e.occlusionQueryCount;let n,i;r>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,n=s.createQuerySet({type:"occlusion",count:r}),t.occlusionQuerySet=n,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(r),t.lastOcclusionObject=null),i=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e),this.initTimestampQuery(e,i),i.occlusionQuerySet=n;const o=i.depthStencilAttachment;if(null!==e.textures){const t=i.colorAttachments;for(let s=0;s<t.length;s++){const r=t[s];e.clearColor?(r.clearValue=0===s?e.clearColorValue:{r:0,g:0,b:0,a:1},r.loadOp=ey,r.storeOp=Zf):(r.loadOp=Jf,r.storeOp=Zf)}}else{const t=i.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=ey,t.storeOp=Zf):(t.loadOp=Jf,t.storeOp=Zf)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=ey,o.depthStoreOp=Zf):(o.depthLoadOp=Jf,o.depthStoreOp=Zf)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=ey,o.stencilStoreOp=Zf):(o.stencilLoadOp=Jf,o.stencilStoreOp=Zf));const a=s.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(i);if(t.descriptor=i,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:s,width:r,height:n}=e.scissorValue;u.setScissorRect(t,s,r,n)}}finishRender(e){const t=this.get(e),s=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),s>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),s>0){const r=8*s;let n=this.occludedResolveCache.get(r);void 0===n&&(n=this.device.createBuffer({size:r,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(r,n));const i=this.device.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,s,n,0),t.encoder.copyBufferToBuffer(n,0,i,0,r),t.occlusionQueryBuffer=i,this.resolveOccludedAsync(e)}if(this.prepareTimestampBuffer(e,t.encoder),this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const s=t[e];!0===s.generateMipmaps&&this.textureUtils.generateMipmaps(s)}}}isOccluded(e,t){const s=this.get(e);return s.occluded&&s.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:s,currentOcclusionQueryObjects:r}=t;if(s&&r){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await s.mapAsync(GPUMapMode.READ);const n=s.getMappedRange(),i=new BigUint64Array(n);for(let t=0;t<r.length;t++)i[t]!==BigInt(0)&&e.add(r[t]);s.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:s,y:r,width:n,height:i,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(s,r,n,i,o,a)}clear(e,t,s,r=null){const n=this.device,i=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();if(!0===this.renderer.alpha){const t=e.a;a={r:e.r*t,g:e.g*t,b:e.b*t,a:t}}else a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===r){u=i.depth,l=i.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=ey,e.storeOp=Zf}(u||l)&&(o=t.depthStencilAttachment)}else{if(u=r.depth,l=r.stencil,e)for(const e of r.textures){const t=this.get(e),s=t.texture.createView();let r,n;void 0!==t.msaaTexture?(r=t.msaaTexture.createView(),n=s):(r=s,n=void 0),d.push({view:r,resolveTarget:n,clearValue:a,loadOp:ey,storeOp:Zf})}if(u||l){o={view:this.get(r.depthTexture).texture.createView()}}}u&&(t?(o.depthLoadOp=ey,o.depthClearValue=i.getClearDepth(),o.depthStoreOp=Zf):(o.depthLoadOp=Jf,o.depthStoreOp=Zf)),l&&(s?(o.stencilLoadOp=ey,o.stencilClearValue=i.getClearStencil(),o.stencilStoreOp=Zf):(o.stencilLoadOp=Jf,o.stencilStoreOp=Zf));const c=n.createCommandEncoder({});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),n.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),s={};this.initTimestampQuery(e,s),t.cmdEncoderGPU=this.device.createCommandEncoder(),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(s)}compute(e,t,s,r){const{passEncoderGPU:n}=this.get(e),i=this.get(r).pipeline;n.setPipeline(i);for(let e=0,t=s.length;e<t;e++){const t=s[e],r=this.get(t);n.setBindGroup(e,r.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,n.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.prepareTimestampBuffer(e,t.cmdEncoderGPU),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:s,context:r,pipeline:n}=e,i=e.getBindings(),o=this.get(r),a=this.get(n).pipeline,u=o.currentSets,l=o.currentPass,d=e.getDrawParameters();if(null===d)return;u.pipeline!==a&&(l.setPipeline(a),u.pipeline=a);const c=u.bindingGroups;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=this.get(t);c[t.index]!==t.id&&(l.setBindGroup(t.index,s.group),c[t.index]=t.id)}const h=e.getIndex(),p=null!==h;if(!0===p&&u.index!==h){const e=this.get(h).buffer,t=h.array instanceof Uint16Array?iy:oy;l.setIndexBuffer(e,t),u.index=h}const g=e.getVertexBuffers();for(let e=0,t=g.length;e<t;e++){const t=g[e];if(u.attributes[e]!==t){const s=this.get(t).buffer;l.setVertexBuffer(e,s),u.attributes[e]=t}}if(void 0!==o.occlusionQuerySet){const e=o.lastOcclusionObject;e!==s&&(null!==e&&!0===e.occlusionTest&&(l.endOcclusionQuery(),o.occlusionQueryIndex++),!0===s.occlusionTest&&(l.beginOcclusionQuery(o.occlusionQueryIndex),o.occlusionQueryObjects[o.occlusionQueryIndex]=s),o.lastOcclusionObject=s)}if(!0===s.isBatchedMesh){const e=s._multiDrawStarts,t=s._multiDrawCounts,r=s._multiDrawCount,n=s._multiDrawInstances,i=p?h.array.BYTES_PER_ELEMENT:1;for(let s=0;s<r;s++){const r=n?n[s]:1,o=r>1?0:s;l.drawIndexed(t[s],r,e[s]/i,0,o)}}else if(!0===p){const{vertexCount:r,instanceCount:n,firstVertex:i}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndexedIndirect(e,0)}else l.drawIndexed(r,n,i,0,0);t.update(s,r,n)}else{const{vertexCount:r,instanceCount:n,firstVertex:i}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndirect(e,0)}else l.draw(r,n,i,0);t.update(s,r,n)}}needsRenderUpdate(e){const t=this.get(e),{object:s,material:r}=e,n=this.utils,i=n.getSampleCountRenderContext(e.context),o=n.getCurrentColorSpace(e.context),a=n.getCurrentColorFormat(e.context),u=n.getCurrentDepthStencilFormat(e.context),l=n.getPrimitiveTopology(s,r);let d=!1;return t.material===r&&t.materialVersion===r.version&&t.transparent===r.transparent&&t.blending===r.blending&&t.premultipliedAlpha===r.premultipliedAlpha&&t.blendSrc===r.blendSrc&&t.blendDst===r.blendDst&&t.blendEquation===r.blendEquation&&t.blendSrcAlpha===r.blendSrcAlpha&&t.blendDstAlpha===r.blendDstAlpha&&t.blendEquationAlpha===r.blendEquationAlpha&&t.colorWrite===r.colorWrite&&t.depthWrite===r.depthWrite&&t.depthTest===r.depthTest&&t.depthFunc===r.depthFunc&&t.stencilWrite===r.stencilWrite&&t.stencilFunc===r.stencilFunc&&t.stencilFail===r.stencilFail&&t.stencilZFail===r.stencilZFail&&t.stencilZPass===r.stencilZPass&&t.stencilFuncMask===r.stencilFuncMask&&t.stencilWriteMask===r.stencilWriteMask&&t.side===r.side&&t.alphaToCoverage===r.alphaToCoverage&&t.sampleCount===i&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=r,t.materialVersion=r.version,t.transparent=r.transparent,t.blending=r.blending,t.premultipliedAlpha=r.premultipliedAlpha,t.blendSrc=r.blendSrc,t.blendDst=r.blendDst,t.blendEquation=r.blendEquation,t.blendSrcAlpha=r.blendSrcAlpha,t.blendDstAlpha=r.blendDstAlpha,t.blendEquationAlpha=r.blendEquationAlpha,t.colorWrite=r.colorWrite,t.depthWrite=r.depthWrite,t.depthTest=r.depthTest,t.depthFunc=r.depthFunc,t.stencilWrite=r.stencilWrite,t.stencilFunc=r.stencilFunc,t.stencilFail=r.stencilFail,t.stencilZFail=r.stencilZFail,t.stencilZPass=r.stencilZPass,t.stencilFuncMask=r.stencilFuncMask,t.stencilWriteMask=r.stencilWriteMask,t.side=r.side,t.alphaToCoverage=r.alphaToCoverage,t.sampleCount=i,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:s}=e,r=this.utils,n=e.context;return[s.transparent,s.blending,s.premultipliedAlpha,s.blendSrc,s.blendDst,s.blendEquation,s.blendSrcAlpha,s.blendDstAlpha,s.blendEquationAlpha,s.colorWrite,s.depthWrite,s.depthTest,s.depthFunc,s.stencilWrite,s.stencilFunc,s.stencilFail,s.stencilZFail,s.stencilZPass,s.stencilFuncMask,s.stencilWriteMask,s.side,r.getSampleCountRenderContext(n),r.getCurrentColorSpace(n),r.getCurrentColorFormat(n),r.getCurrentDepthStencilFormat(n),r.getPrimitiveTopology(t,s),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,s,r,n,i){return this.textureUtils.copyTextureToBuffer(e,t,s,r,n,i)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const s=this.get(e);if(!s.timeStampQuerySet){const e=this.device.createQuerySet({type:"timestamp",count:2}),r={querySet:e,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1};Object.assign(t,{timestampWrites:r}),s.timeStampQuerySet=e}}prepareTimestampBuffer(e,t){if(!this.trackTimestamp)return;const s=this.get(e),r=2*BigInt64Array.BYTES_PER_ELEMENT;void 0===s.currentTimestampQueryBuffers&&(s.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:r,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),isMappingPending:!1});const{resolveBuffer:n,resultBuffer:i,isMappingPending:o}=s.currentTimestampQueryBuffers;!0!==o&&(t.resolveQuerySet(s.timeStampQuerySet,0,2,n,0),t.copyBufferToBuffer(n,0,i,0,r))}async resolveTimestampAsync(e,t="render"){if(!this.trackTimestamp)return;const s=this.get(e);if(void 0===s.currentTimestampQueryBuffers)return;const{resultBuffer:r,isMappingPending:n}=s.currentTimestampQueryBuffers;!0!==n&&(s.currentTimestampQueryBuffers.isMappingPending=!0,r.mapAsync(GPUMapMode.READ).then((()=>{const e=new BigUint64Array(r.getMappedRange()),n=Number(e[1]-e[0])/1e6;this.renderer.info.updateTimestamp(t,n),r.unmap(),s.currentTimestampQueryBuffers.isMappingPending=!1})))}createNodeBuilder(e,t){return new NS(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const s=this.get(e),r=s.currentPass.finish();this.get(t).bundleGPU=r,s.currentSets=s._currentSets,s.currentPass=s._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e){this.bindingUtils.createBindings(e)}updateBindings(e){this.bindingUtils.createBindings(e)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,s=null,r=null,n=0){let i=0,o=0,a=0,u=0,l=0,d=0,c=e.image.width,h=e.image.height;null!==s&&(u=s.x,l=s.y,d=s.z||0,c=s.width,h=s.height),null!==r&&(i=r.x,o=r.y,a=r.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),g=this.get(e).texture,m=this.get(t).texture;p.copyTextureToTexture({texture:g,mipLevel:n,origin:{x:u,y:l,z:d}},{texture:m,mipLevel:n,origin:{x:i,y:o,z:a}},[c,h,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(e,t,s){const r=this.get(t);let n=null;n=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const i=this.get(e).texture;if(n.format!==i.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",n.format,i.format);let o;if(r.currentPass?(r.currentPass.end(),o=r.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:n,origin:{x:s.x,y:s.y,z:0}},{texture:i},[s.z,s.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),r.currentPass){const{descriptor:e}=r;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=Jf;t.depth&&(e.depthStencilAttachment.depthLoadOp=Jf),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=Jf),r.currentPass=o.beginRenderPass(e),r.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null}}else this.device.queue.submit([o.finish()])}}class BS extends Gs{constructor(e,t,s,r,n,i){super(e,t,s,r,n,i),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class US extends tv{constructor(){super(),this.addLight(TT,ks),this.addLight(UN,zs),this.addLight(LN,$s),this.addLight(DN,Gs),this.addLight(ON,Hs),this.addLight(GN,Ws),this.addLight(kN,js),this.addLight(VN,BS),this.addToneMapping(Hb,qs),this.addToneMapping(Wb,Ks),this.addToneMapping(jb,Xs),this.addToneMapping(Kb,Ys),this.addToneMapping(Zb,Qs),this.addToneMapping(Jb,Zs)}}class FS extends dv{constructor(e={}){let t;e.forceWebGL?t=Yv:(t=MS,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new Yv(e)));super(new t(e),e),this.library=new US,this.isWebGPURenderer=!0}}class PS extends Js{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}const IS=new rh,LS=new xf(IS);class DS{constructor(e,t=Ln(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0,IS.name="PostProcessing"}render(){this.update();const e=this.renderer,t=e.toneMapping,s=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Se,LS.render(e),e.toneMapping=t,e.outputColorSpace=s}update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,s=e.outputColorSpace;LS.material.fragmentNode=!0===this.outputColorTransform?cu(this.outputNode,t,s):this.outputNode.context({toneMapping:t,outputColorSpace:s}),LS.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this.update();const e=this.renderer,t=e.toneMapping,s=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Se,await LS.renderAsync(e),e.toneMapping=t,e.outputColorSpace=s}}function VS(t,s={}){return s.toneMapping=t.toneMapping,s.toneMappingExposure=t.toneMappingExposure,s.outputColorSpace=t.outputColorSpace,s.renderTarget=t.getRenderTarget(),s.activeCubeFace=t.getActiveCubeFace(),s.activeMipmapLevel=t.getActiveMipmapLevel(),s.renderObjectFunction=t.getRenderObjectFunction(),s.pixelRatio=t.getPixelRatio(),s.mrt=t.getMRT(),s.clearColor=t.getClearColor(s.clearColor||new e),s.clearAlpha=t.getClearAlpha(),s.autoClear=t.autoClear,s.scissorTest=t.getScissorTest(),s}function OS(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function GS(e,t,s={}){return(s=VS(e,s)).background=t.background,s.backgroundNode=t.backgroundNode,s.overrideMaterial=t.overrideMaterial,s}var kS=Object.freeze({__proto__:null,resetRendererAndSceneState:function(e,t,s){return s=GS(e,t,s),t.background=null,t.backgroundNode=null,t.overrideMaterial=null,s},resetRendererState:function(e,t){return t=VS(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t},restoreRendererAndSceneState:function(e,t,s){OS(e,s),t.background=s.background,t.backgroundNode=s.backgroundNode,t.overrideMaterial=s.overrideMaterial},restoreRendererState:OS,saveRendererAndSceneState:GS,saveRendererState:VS});class zS extends ee{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=$,this.minFilter=$,this.isStorageTexture=!0}}class $S extends we{constructor(e,t,s=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new s(e*t)),super(e,t),this.isStorageBufferAttribute=!0}}class HS extends R{constructor(e,t,s=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new s(e*t)),super(e,t),this.isStorageInstancedBufferAttribute=!0}}class WS extends $S{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class jS extends er{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,s,r){const n=new tr(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials),n.load(e,(s=>{try{t(this.parse(JSON.parse(s)))}catch(t){r?r(t):console.error(t),this.manager.itemError(e)}}),s,r)}parseNodes(e){const t={};if(void 0!==e){for(const s of e){const{uuid:e,type:r}=s;t[e]=this.createNodeFromType(r),t[e].uuid=e}const s={nodes:t,textures:this.textures};for(const r of e){r.meta=s;t[r.uuid].deserialize(r),delete r.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const s={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=s,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Sn()):hn(new this.nodes[e])}}class qS extends sr{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),s=this.nodes,r=e.inputNodes;for(const e in r){const n=r[e];t[e]=s[n]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class KS extends rr{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const s=super.parse(e,t);return this._nodesJSON=null,s}parseNodes(e,t){if(void 0!==e){const s=new jS;return s.setNodes(this.nodes),s.setTextures(t),s.parseNodes(e)}return{}}parseMaterials(e,t){const s={};if(void 0!==e){const r=this.parseNodes(this._nodesJSON,t),n=new qS;n.setTextures(t),n.setNodes(r),n.setNodeMaterials(this.nodeMaterials);for(let t=0,r=e.length;t<r;t++){const r=e[t];s[r.uuid]=n.parse(r)}}return s}}export{Ys as ACESFilmicToneMapping,bc as AONode,Ze as AddEquation,K as AddOperation,bt as AdditiveBlending,Qs as AgXToneMapping,Mt as AlphaFormat,ms as AlwaysCompare,At as AlwaysDepth,Es as AlwaysStencilFunc,Hs as AmbientLight,ON as AmbientLightNode,yT as AnalyticLightNode,Rr as ArrayElementNode,Fi as AssignNode,pu as AttributeNode,jh as BRDF_GGX,Bh as BRDF_Lambert,x as BackSide,Sh as BasicEnvironmentNode,tc as BatchNode,O as BoxGeometry,dc as Break,we as BufferAttribute,ja as BufferAttributeNode,Te as BufferGeometry,Nl as BufferNode,sd as BumpMapNode,PS as BundleGroup,tu as BypassNode,Xe as ByteType,Ja as CacheNode,Xs as CineonToneMapping,ds as ClampToEdgeWrapping,ex as CodeNode,e as Color,u as ColorManagement,Fa as ColorSpaceNode,Qa as ComputeNode,Ir as ConstNode,_a as ContextNode,lc as Continue,Cr as ConvertNode,H as CubeCamera,T as CubeReflectionMapping,_ as CubeRefractionMapping,W as CubeTexture,Tl as CubeTextureNode,Me as CubeUVReflectionMapping,pt as CullFaceBack,gt as CullFaceFront,ht as CullFaceNone,mt as CustomBlending,qh as DFGApprox,$h as D_GGX,C as DataArrayTexture,ke as DataTexture,Us as DecrementStencilOp,Ms as DecrementWrapStencilOp,ce as DepthFormat,de as DepthStencilFormat,B as DepthTexture,zs as DirectionalLight,UN as DirectionalLightNode,uu as Discard,le as DoubleSide,at as DstAlphaFactor,ot as DstColorFactor,p as DynamicDrawUsage,ao as EPSILON,eg as EnvironmentNode,ys as EqualCompare,Nt as EqualDepth,As as EqualStencilFunc,fh as EquirectUVNode,j as EquirectangularReflectionMapping,q as EquirectangularRefractionMapping,ve as Euler,o as EventDispatcher,ou as ExpressionNode,Mh as F_Schlick,tr as FileLoader,Ie as Float16BufferAttribute,_e as Float32BufferAttribute,E as FloatType,yn as Fn,Tx as FogExp2Node,fx as FogNode,bx as FogRangeNode,w as FramebufferTexture,sl as FrontFacingNode,Oe as FrontSide,Ge as Frustum,Ii as FunctionCallNode,ix as FunctionNode,Mm as FunctionOverloadingNode,KN as GLSLNodeParser,xs as GreaterCompare,Tt as GreaterDepth,bs as GreaterEqualCompare,_t as GreaterEqualDepth,Ss as GreaterEqualStencilFunc,vs as GreaterStencilFunc,Js as Group,ye as HalfFloatType,Ws as HemisphereLight,GN as HemisphereLightNode,BS as IESSpotLight,VN as IESSpotLightNode,uo as INFINITY,_n as If,Fs as IncrementStencilOp,Bs as IncrementWrapStencilOp,jd as IndexNode,WS as IndirectStorageBufferAttribute,Jd as InstanceNode,R as InstancedBufferAttribute,A as InstancedInterleavedBuffer,ih as InstancedPointsNodeMaterial,y as IntType,h as InterleavedBuffer,g as InterleavedBufferAttribute,Ps as InvertStencilOp,_c as IrradianceNode,wr as JoinNode,Ds as KeepStencilOp,Ae as LessCompare,St as LessDepth,fs as LessEqualCompare,vt as LessEqualDepth,Rs as LessEqualStencilFunc,Cs as LessStencilFunc,js as LightProbe,kN as LightProbeNode,rv as Lighting,xc as LightingContextNode,Rh as LightingModel,yc as LightingNode,nT as LightsNode,ch as Line2NodeMaterial,I as LineBasicMaterial,ah as LineBasicNodeMaterial,L as LineDashedMaterial,lh as LineDashedNodeMaterial,$ as LinearFilter,be as LinearMipMapLinearFilter,M as LinearMipmapLinearFilter,Fe as LinearMipmapNearestFilter,Se as LinearSRGBColorSpace,qs as LinearToneMapping,er as Loader,uc as Loop,ac as LoopNode,Ut as LuminanceAlphaFormat,Bt as LuminanceFormat,Tm as MRTNode,pg as MatcapUVNode,U as Material,sr as MaterialLoader,id as MaterialNode,Ul as MaterialReferenceNode,a as MathUtils,n as Matrix3,i as Matrix4,Vs as MaxEquation,bu as MaxMipLevelNode,k as Mesh,Q as MeshBasicMaterial,wh as MeshBasicNodeMaterial,Z as MeshLambertMaterial,Lh as MeshLambertNodeMaterial,ne as MeshMatcapMaterial,fg as MeshMatcapNodeMaterial,D as MeshNormalMaterial,mh as MeshNormalNodeMaterial,J as MeshPhongMaterial,Vh as MeshPhongNodeMaterial,se as MeshPhysicalMaterial,og as MeshPhysicalNodeMaterial,ug as MeshSSSNodeMaterial,te as MeshStandardMaterial,ng as MeshStandardNodeMaterial,re as MeshToonMaterial,hg as MeshToonNodeMaterial,Os as MinEquation,cs as MirroredRepeatWrapping,X as MixOperation,Vu as ModelNode,Hd as ModelViewProjectionNode,mc as MorphNode,ft as MultiplyBlending,Y as MultiplyOperation,hs as NearestFilter,Pe as NearestMipmapLinearFilter,ps as NearestMipmapNearestFilter,Zs as NeutralToneMapping,gs as NeverCompare,Rt as NeverDepth,ws as NeverStencilFunc,G as NoBlending,m as NoColorSpace,d as NoToneMapping,Ar as Node,D_ as NodeAttribute,wN as NodeBuilder,$_ as NodeCache,k_ as NodeCode,MN as NodeFrame,BN as NodeFunctionInput,jS as NodeLoader,rh as NodeMaterial,qS as NodeMaterialLoader,ir as NodeMaterialObserver,KS as NodeObjectLoader,yr as NodeShaderStage,xr as NodeType,V_ as NodeUniform,br as NodeUpdateType,fr as NodeUtils,O_ as NodeVar,G_ as NodeVarying,F as NormalBlending,Zl as NormalMapNode,Ts as NotEqualCompare,xt as NotEqualDepth,Ns as NotEqualStencilFunc,fe as Object3D,Uu as Object3DNode,rr as ObjectLoader,S as ObjectSpaceNormalMap,st as OneFactor,ct as OneMinusDstAlphaFactor,dt as OneMinusDstColorFactor,lt as OneMinusSrcAlphaFactor,ut as OneMinusSrcColorFactor,xe as OrthographicCamera,ym as OutputStructNode,Ve as PCFShadowMap,lo as PI,co as PI2,xN as PMREMGenerator,Qp as PMREMNode,hm as ParameterNode,Vb as PassNode,Be as PerspectiveCamera,Ph as PhongLightingModel,Cp as PhysicalLightingModel,me as Plane,ks as PointLight,TT as PointLightNode,wf as PointUVNode,P as PointsMaterial,bg as PointsNodeMaterial,DS as PostProcessing,kS as PostProcessingUtils,Mb as PosterizeNode,si as PropertyNode,xf as QuadMesh,as as RED_GREEN_RGTC2_Format,is as RED_RGTC1_Format,Le as REVISION,Ue as RGBAFormat,qe as RGBAIntegerFormat,ts as RGBA_ASTC_10x10_Format,Zt as RGBA_ASTC_10x5_Format,Jt as RGBA_ASTC_10x6_Format,es as RGBA_ASTC_10x8_Format,ss as RGBA_ASTC_12x10_Format,rs as RGBA_ASTC_12x12_Format,Ht as RGBA_ASTC_4x4_Format,Wt as RGBA_ASTC_5x4_Format,jt as RGBA_ASTC_5x5_Format,qt as RGBA_ASTC_6x5_Format,Kt as RGBA_ASTC_6x6_Format,Xt as RGBA_ASTC_8x5_Format,Yt as RGBA_ASTC_8x6_Format,Qt as RGBA_ASTC_8x8_Format,ns as RGBA_BPTC_Format,$t as RGBA_ETC2_EAC_Format,Gt as RGBA_PVRTC_2BPPV1_Format,Ot as RGBA_PVRTC_4BPPV1_Format,Pt as RGBA_S3TC_DXT1_Format,It as RGBA_S3TC_DXT3_Format,Lt as RGBA_S3TC_DXT5_Format,je as RGBFormat,We as RGBIntegerFormat,kt as RGB_ETC1_Format,zt as RGB_ETC2_Format,Vt as RGB_PVRTC_2BPPV1_Format,Dt as RGB_PVRTC_4BPPV1_Format,Ft as RGB_S3TC_DXT1_Format,Ce as RGFormat,He as RGIntegerFormat,_f as RTTNode,Sx as RangeNode,$s as RectAreaLight,LN as RectAreaLightNode,$e as RedFormat,ze as RedIntegerFormat,wl as ReferenceNode,pf as ReflectorNode,Ks as ReinhardToneMapping,ru as RemapNode,du as RenderOutputNode,ge as RenderTarget,ka as RendererReferenceNode,ls as RepeatWrapping,Is as ReplaceStencilOp,lu as Return,et as ReverseSubtractEquation,xg as RotateNode,us as SIGNED_RED_GREEN_RGTC2_Format,os as SIGNED_RED_RGTC1_Format,De as SRGBColorSpace,l as SRGBTransfer,z as Scene,Ff as SceneNode,Xh as Schlick_to_F0,Sc as ScreenNode,gx as ScriptableNode,px as ScriptableNodeResources,lx as ScriptableValueNode,Ur as SetNode,cn as ShaderNode,oe as ShadowMaterial,mT as ShadowNode,Ag as ShadowNodeMaterial,Ye as ShortType,nc as SkinningNode,Ee as SphereGeometry,Br as SplitNode,Gs as SpotLight,DN as SpotLightNode,ie as SpriteMaterial,Ng as SpriteNodeMaterial,qm as SpriteSheetUVNode,nt as SrcAlphaFactor,it as SrcAlphaSaturateFactor,rt as SrcColorFactor,gm as StackNode,c as StaticDrawUsage,Df as StorageArrayElementNode,$S as StorageBufferAttribute,ob as StorageBufferNode,HS as StorageInstancedBufferAttribute,zS as StorageTexture,lb as StorageTextureNode,Je as SubtractEquation,yt as SubtractiveBlending,ql as TBNViewMatrix,v as TangentSpaceNormalMap,Er as TempNode,ee as Texture,Cg as Texture3DNode,Tu as TextureNode,fu as TextureSizeNode,$a as ToneMappingNode,zb as ToonOutlinePassNode,Xm as TriplanarTexturesNode,Ne as UVMapping,ue as Uint16BufferAttribute,ae as Uint32BufferAttribute,Al as UniformArrayNode,Kn as UniformGroupNode,ei as UniformNode,pe as UnsignedByteType,he as UnsignedInt248Type,wt as UnsignedInt5999Type,f as UnsignedIntType,Ct as UnsignedShort4444Type,Et as UnsignedShort5551Type,Ke as UnsignedShortType,hb as UserDataNode,Re as VSMShadowMap,kh as V_GGX_SmithCorrelated,Sa as VarNode,Ca as VaryingNode,t as Vector2,s as Vector3,r as Vector4,Cf as VertexColorNode,zc as ViewportDepthNode,Gc as ViewportDepthTextureNode,Fb as ViewportSharedTextureNode,Lc as ViewportTextureNode,wg as VolumeNodeMaterial,b as WebGLCoordinateSystem,V as WebGLCubeRenderTarget,N as WebGPUCoordinateSystem,FS as WebGPURenderer,tt as ZeroFactor,Ls as ZeroStencilOp,Fo as abs,Kb as acesFilmicToneMapping,Bo as acos,Vi as add,Vr as addMethodChaining,hu as addNodeElement,Zb as agxToneMapping,ho as all,fi as alphaT,Xi as and,yi as anisotropy,xi as anisotropyB,bi as anisotropyT,po as any,Nn as append,Hn as arrayBuffer,Mo as asin,Pi as assign,Uo as atan,jo as atan2,$x as atomicAdd,qx as atomicAnd,kx as atomicFunc,Wx as atomicMax,jx as atomicMin,Kx as atomicOr,zx as atomicStore,Hx as atomicSub,Xx as atomicXor,Bi as attenuationColor,Mi as attenuationDistance,gu as attribute,Pf as backgroundBlurriness,If as backgroundIntensity,Lf as backgroundRotation,sc as batch,Wm as billboarding,Ji as bitAnd,eo as bitNot,to as bitOr,so as bitXor,kl as bitangentGeometry,zl as bitangentLocal,$l as bitangentView,Hl as bitangentWorld,Ho as bitcast,qp as blur,Cn as bool,vl as buffer,qa as bufferAttribute,rd as bumpMap,xb as burn,Bn as bvec2,In as bvec3,On as bvec4,su as bypass,eu as cache,Li as call,Au as cameraFar,Su as cameraNear,Mu as cameraNormalMatrix,Bu as cameraPosition,Ru as cameraProjectionMatrix,Cu as cameraProjectionMatrixInverse,Eu as cameraViewMatrix,wu as cameraWorldMatrix,aa as cbrt,wb as cdl,So as ceil,_T as checker,jb as cineonToneMapping,da as clamp,li as clearcoat,di as clearcoatRoughness,tx as code,vn as color,Da as colorSpaceToWorking,ph as colorToDirection,Za as compute,Ta as cond,Na as context,jn as convert,Va as convertColorSpace,vf as convertToTexture,Eo as cos,Qe as createCanvasElement,ta as cross,_l as cubeTexture,Vo as dFdx,Oo as dFdy,Si as dashSize,_r as defaultBuildStages,Tr as defaultShaderStages,ln as defined,fo as degrees,Pm as deltaTime,_x as densityFog,Xc as depth,kb as depthPass,Jo as difference,ii as diffuseColor,xT as directPointLight,hh as directionToColor,Ui as dispersion,Zo as distance,ki as div,Tb as dodge,ea as dot,Zd as drawIndex,Ka as dynamicBufferAttribute,Wn as element,oi as emissive,$i as equal,go as equals,yh as equirectUV,yo as exp,bo as exp2,au as expression,nl as faceDirection,ga as faceForward,Sn as float,vo as floor,yx as fog,Ro as fract,Qn as frameGroup,Im as frameId,rl as frontFacing,$o as fwidth,Sm as gain,Ai as gapSize,dn as getConstNodeType,Tn as getCurrentStack,$p as getDirection,bT as getDistanceAttenuation,Oh as getGeometryRoughness,Rf as getNormalFromDepth,M_ as getParallaxCorrectNormal,Gh as getRoughness,Af as getScreenPosition,B_ as getShIrradianceAt,xm as getTextureIndex,Sf as getViewPosition,nx as glsl,ax as glslFn,vb as grayscale,ji as greaterThan,Ki as greaterThanEqual,Nm as hash,Ku as highPrecisionModelNormalViewMatrix,qu as highPrecisionModelViewMatrix,Rb as hue,ec as instance,Kd as instanceIndex,Xa as instancedBufferAttribute,Ya as instancedDynamicBufferAttribute,An as int,No as inverseSqrt,Qd as invocationLocalIndex,Yd as invocationSubgroupIndex,Ci as ior,pi as iridescence,gi as iridescenceIOR,mi as iridescenceThickness,wn as ivec2,Fn as ivec3,Dn as ivec4,sx as js,va as label,Io as length,ua as lengthSq,Wi as lessThan,qi as lessThanEqual,Zx as lightPosition,tT as lightTargetDirection,Jx as lightTargetPosition,eT as lightViewPosition,Tc as lightingContext,iT as lights,Yc as linearDepth,Hb as linearToneMapping,Mx as localId,xo as log,To as log2,cc as loop,Cb as luminance,Gn as mat2,kn as mat3,zn as mat4,gg as matcapUV,zd as materialAOMap,od as materialAlphaTest,Ad as materialAnisotropy,$d as materialAnisotropyVector,Fd as materialAttenuationColor,Ud as materialAttenuationDistance,xd as materialClearcoat,_d as materialClearcoatNormal,Td as materialClearcoatRoughness,ad as materialColor,Gd as materialDispersion,ld as materialEmissive,Bd as materialIOR,Rd as materialIridescence,Cd as materialIridescenceIOR,Ed as materialIridescenceThickness,kd as materialLightMap,Vd as materialLineDashOffset,Id as materialLineDashSize,Ld as materialLineGapSize,Pd as materialLineScale,Dd as materialLineWidth,yd as materialMetalness,bd as materialNormal,dd as materialOpacity,Od as materialPointWidth,Fl as materialReference,md as materialReflectivity,ml as materialRefractionRatio,Nd as materialRotation,fd as materialRoughness,vd as materialSheen,Sd as materialSheenRoughness,ud as materialShininess,cd as materialSpecular,pd as materialSpecularColor,hd as materialSpecularIntensity,gd as materialSpecularStrength,Md as materialThickness,wd as materialTransmission,Ko as max,xu as maxMipLevel,ui as metalness,qo as min,la as mix,fa as mixElement,Xo as mod,zi as modInt,Ou as modelDirection,Hu as modelNormalMatrix,ku as modelPosition,zu as modelScale,ju as modelViewMatrix,$u as modelViewPosition,Wd as modelViewProjection,Gu as modelWorldMatrix,Wu as modelWorldMatrixInverse,fc as morphReference,_m as mrt,Gi as mul,l_ as mx_aastep,A_ as mx_cell_noise_float,b_ as mx_contrast,R_ as mx_fractal_noise_float,C_ as mx_fractal_noise_vec2,E_ as mx_fractal_noise_vec3,w_ as mx_fractal_noise_vec4,o_ as mx_hsvtorgb,x_ as mx_noise_float,T_ as mx_noise_vec3,__ as mx_noise_vec4,c_ as mx_ramplr,h_ as mx_ramptb,a_ as mx_rgbtohsv,y_ as mx_safepower,g_ as mx_splitlr,m_ as mx_splittb,u_ as mx_srgb_texture_to_lin_rec709,f_ as mx_transform_uv,N_ as mx_worley_noise_float,v_ as mx_worley_noise_vec2,S_ as mx_worley_noise_vec3,Lo as negate,Jb as neutralToneMapping,gn as nodeArray,fn as nodeImmutable,hn as nodeObject,pn as nodeObjects,mn as nodeProxy,al as normalFlat,il as normalGeometry,ol as normalLocal,Jl as normalMap,ul as normalView,ll as normalWorld,Ao as normalize,Qi as not,Hi as notEqual,Ex as numWorkgroups,Fu as objectDirection,Jn as objectGroup,Iu as objectPosition,Lu as objectScale,Du as objectViewPosition,Pu as objectWorldMatrix,Do as oneMinus,Yi as or,Hc as orthographicDepthToViewZ,zm as oscSawtooth,Om as oscSine,Gm as oscSquare,km as oscTriangle,vi as output,bm as outputStruct,Nb as overlay,Um as overloadingFn,vm as parabola,Kl as parallaxDirection,Xl as parallaxUV,pm as parameter,Ob as pass,Gb as passTexture,Am as pcurve,qc as perspectiveDepthToLogarithmicDepth,jc as perspectiveDepthToViewZ,Zp as pmremTexture,Mf as pointUV,Ri as pointWidth,Xu as positionGeometry,Yu as positionLocal,Qu as positionPrevious,el as positionView,tl as positionViewDirection,Zu as positionWorld,Ju as positionWorldDirection,Bb as posterize,sa as pow,ra as pow2,na as pow3,ia as pow4,ri as property,mo as radians,ma as rand,Ax as range,xx as rangeFog,ko as reciprocal,Ml as reference,Bl as referenceBuffer,Qo as reflect,bl as reflectVector,fl as reflectView,mf as reflector,ha as refract,xl as refractVector,yl as refractView,Wb as reinhardToneMapping,io as remainder,nu as remap,iu as remapClamp,Zn as renderGroup,cu as renderOutput,za as rendererReference,Tg as rotate,$m as rotateUV,ai as roughness,Go as round,Nf as rtt,wa as sRGBTransferEOTF,Ma as sRGBTransferOETF,vu as sampler,ca as saturate,Sb as saturation,_b as screen,Cc as screenCoordinate,Rc as screenSize,Ac as screenUV,mx as scriptable,dx as scriptableValue,xa as select,xn as setCurrentStack,Nr as shaderStages,fT as shadow,Yn as sharedUniformGroup,ci as sheen,hi as sheenRoughness,ro as shiftLeft,no as shiftRight,Ni as shininess,Po as sign,Co as sin,Rm as sinc,ic as skinning,oc as skinningReference,pa as smoothstep,ya as smoothstepElement,Ti as specularColor,_i as specularF90,Hm as spherizeUV,qn as split,Km as spritesheetUV,_o as sqrt,mm as stack,Yo as step,ab as storage,Px as storageBarrier,ub as storageObject,db as storageTexture,$n as string,Oi as sub,Xd as subgroupIndex,Bx as subgroupSize,wo as tan,Pl as tangentGeometry,Il as tangentLocal,Ll as tangentView,Dl as tangentWorld,Ra as temp,_u as texture,Eg as texture3D,Ix as textureBarrier,pp as textureBicubic,Hp as textureCubeUV,Nu as textureLoad,yu as textureSize,cb as textureStore,wi as thickness,Eb as threshold,Fm as time,Vm as timerDelta,Dm as timerGlobal,Lm as timerLocal,Pa as toOutputColorSpace,Ia as toWorkingColorSpace,Ha as toneMapping,Wa as toneMappingExposure,$b as toonOutlinePass,oa as transformDirection,pl as transformNormal,gl as transformNormalToView,Yl as transformedBentNormalView,Wl as transformedBitangentView,jl as transformedBitangentWorld,hl as transformedClearcoatNormalView,dl as transformedNormalView,cl as transformedNormalWorld,Vl as transformedTangentView,Ol as transformedTangentWorld,Ei as transmission,Wo as transpose,Cm as tri,Em as tri3,wm as triNoise3D,Qm as triplanarTexture,Ym as triplanarTextures,zo as trunc,bn as tslFn,Rn as uint,ti as uniform,Rl as uniformArray,Xn as uniformGroup,Cl as uniforms,pb as userData,mu as uv,Mn as uvec2,Pn as uvec3,Vn as uvec4,Ea as varying,ni as varyingProperty,En as vec2,Un as vec3,Ln as vec4,vr as vectorComponents,bb as velocity,Ef as vertexColor,qd as vertexIndex,Ab as vibrance,$c as viewZToOrthographicDepth,Wc as viewZToPerspectiveDepth,Ec as viewport,Pc as viewportBottomLeft,Mc as viewportCoordinate,kc as viewportDepthTexture,Qc as viewportLinearDepth,Vc as viewportMipTexture,Uc as viewportResolution,jm as viewportSafeUV,Pb as viewportSharedTexture,wc as viewportSize,Dc as viewportTexture,Fc as viewportTopLeft,Bc as viewportUV,rx as wgsl,ux as wgslFn,Vx as workgroupArray,Fx as workgroupBarrier,wx as workgroupId,La as workingToColorSpace,Zi as xor};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> dce4d4102e (add)
